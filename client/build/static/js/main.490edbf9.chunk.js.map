{"version":3,"sources":["actions/Question.js","utils/Translations.js","components/Translator.js","actions/Vote.js","components/PostUser.js","components/PostIcons.js","components/QuestionListView.js","components/QuestionList.js","containers/QuestionList.js","components/LanguageFormSelect.js","components/CategoryFormSelect.js","components/CountryFormSelect.js","components/QuestionForm.js","components/Home.js","actions/Intl.js","actions/Category.js","actions/Sort.js","actions/Notification.js","containers/Home.js","components/AnswerForm.js","actions/Answer.js","actions/Comment.js","components/Comment.js","components/CommentList.js","components/CommentForm.js","components/AnswerList.js","containers/AnswerList.js","utils/index.js","components/QuestionView.js","containers/QuestionView.js","components/QuestionEdit.js","containers/QuestionEdit.js","actions/NotTranslated.js","components/NotTranslated.js","containers/NotTranslated.js","components/AnswerEdit.js","containers/AnswerEdit.js","components/CommentEdit.js","containers/CommentEdit.js","components/QuestionTranslationForm.js","actions/QuestionTranslation.js","actions/VoteTranslation.js","components/QuestionTranslationList.js","containers/QuestionTranslationList.js","containers/QuestionTranslationView.js","components/TranslationForm.js","components/TranslationEdit.js","components/QuestionTranslationEdit.js","containers/QuestionTranslationEdit.js","components/AnswerTranslationForm.js","actions/AnswerTranslation.js","components/AnswerTranslationList.js","containers/AnswerTranslationList.js","containers/AnswerTranslationView.js","components/AnswerTranslationEdit.js","containers/AnswerTranslationEdit.js","components/CommentTranslationForm.js","actions/CommentTranslation.js","components/CommentTranslationList.js","containers/CommentTranslationList.js","containers/CommentTranslationView.js","components/CommentTranslationEdit.js","containers/CommentTranslationEdit.js","components/layouts/MenuDrawer.js","components/layouts/Header.js","actions/User.js","containers/layouts/Header.js","components/App.js","containers/App.js","components/layouts/ScrollToTop.js","components/users/SignUpForm.js","components/users/SignUp.js","containers/users/SignUp.js","components/users/LoginForm.js","components/users/Login.js","containers/users/Login.js","components/users/PasswordResetForm.js","components/users/PasswordReset.js","containers/users/PasswordReset.js","components/users/PasswordForm.js","components/users/NewPassword.js","containers/users/NewPassword.js","components/users/Activate.js","containers/users/Activate.js","components/Stampcard.js","containers/users/Profile.js","components/users/ProfileForm.js","components/users/Profile.js","containers/users/ProfileEdit.js","components/auth/UserOnly.js","containers/auth/UserOnly.js","components/auth/GuestOnly.js","containers/auth/GuestOnly.js","intl/index.js","intl/locales/ja_JP.js","intl/locales/en_US.js","constants.js","reducer.js","reducers/Intl.js","reducers/Category.js","reducers/Sort.js","reducers/Answer.js","reducers/Question.js","reducers/QuestionTranslation.js","reducers/AnswerTranslation.js","reducers/User.js","reducers/Comment.js","reducers/CommentTranslation.js","reducers/NotTranslated.js","reducers/Votes.js","reducers/VoteTranslation.js","sagas/apis/Users.js","sagas/apis/Questions.js","sagas/apis/Answers.js","sagas/apis/Comments.js","sagas/apis/ContentTranslations.js","sagas/Util.js","sagas/User.js","sagas/Question.js","sagas/Answer.js","sagas/apis/QuestionTranslations.js","sagas/QuestionTranslation.js","sagas/apis/AnswerTranslations.js","sagas/AnswerTranslation.js","sagas/Comment.js","sagas/apis/CommentTranslations.js","sagas/CommentTranslation.js","sagas/apis/NotTranslated.js","sagas/NotTranslated.js","sagas/apis/Votes.js","sagas/Votes.js","sagas/apis/VoteTranslations.js","sagas/VoteTranslation.js","sagas/Notification.js","rootSaga.js","store.js","index.js"],"names":["FETCH_QUESTION_LIST","Symbol","FETCH_QUESTION","POST_QUESTION_DATA","REQUEST_DATA","RECEIVE_DATA_SUCCESS","RECEIVE_SINGLE_DATA_SUCCESS","RECEIVE_DATA_FAILED","UPDATE_CURRENT_TRANSLATE_LANGUAGE","SAVE_QUESTION_DATA","UPDATED_QUESTION_DATA","DELETE_QUESTION","fetchQuestionList","createAction","fetchQuestion","postQuestionData","requestData","receiveDataSuccess","receiveSingleDataSuccess","receiveDataFailed","saveQuestionData","updatedQuestionData","deleteQuestion","getFilteredContents","contentList","translateLanguageId","contentType","filter","v","translate_language_id","length","getTranslatedContents","map","dispText","content","translation","Translator","user","this","props","name","image_path","profile_link","msg","formatMessage","intl","id","react_default","a","createElement","className","style","padding","Link","to","src","width","height","alt","Component","injectIntl","POST_VOTE","DELETE_VOTE","postVote","deleteVote","PostUser","countryId","concat","border","nationalFlag","selectedNationalFlag","country_id","userName","profileLink","PostIcons","votebutton","_this$props","loginUser","votes","sendData","deleteData","editLink","translateLink","onClickSendVote","onClickDeleteVote","translate","editLinkButton","react_fontawesome_index_es","icon","color","size","user_id","onClick","bind","voteNumbers","translateButton","QuestionListView","data","handlePostVote","handleDeleteVote","array","e","category_id","editArray","forEach","value","num","answers","push","sort","b","created_at","questionArray","categoryId","sortId","_this","filteredQuestions","translatedQuestions","categoryQuestions","categoryFilteredContents","sortFilteredContents","question","translator","key","sendVoteParams","question_id","answer_id","comment_id","status","deleteVoteParams","vote_id","question_translations","components_Translator","category","intl_key","dayjs","format","components_PostIcons","sendVote","components_PostUser","questionList","getQuestionList","getQuestionListView","connect","state","auth","ctgr","dispatch","QuestionList","params","questions","handleFetchData","_this$props$state$que","isFetching","react_spinners","components_QuestionListView","queryData","LanguageFormSelect","placeholder","formik_esm","component","CategoryFormSelect","CountryFormSelect","QuestionForm","values","errors","persistTab","initialValues","fromName","formik_persist_es6","enableReinitialize","validate","onSubmit","_ref","setSubmitting","resetForm","setErrors","render","_ref2","touched","handleSubmit","isSubmitting","setFieldValue","type","rows","components_CountryFormSelect","components_LanguageFormSelect","components_CategoryFormSelect","Home","formData","_this$props$state$aut","isLoggedIn","history","alertMessage","postData","console","log","message","locale","preventDefault","stopPropagation","localStorage","setItem","window","location","href","changeSort","changeCategory","_this$props$state$int","onChangeLanguage","components_QuestionForm","submitQuestionForm","formName","onChange","changeCateogryfunction","target","changeSortfunction","containers_QuestionList","React","UPDATE_CURRENT_LANGUAGE","updateCurrentLanguage","UPDATE_CURRENT_CATEGORY","updateCurrentCategory","UPDATE_CURRENT_SORT","updateCurrentSort","ACTION_ALERT_MESSAGE","actionAlertMessage","changeLanguage","AnswerForm","CHANGE_ANSWER_FORM_CONTENT","FETCH_ANSWER_LIST","FETCH_ANSWER","POST_ANSWER_DATA","INITIALIZE_FORM","SAVE_ANSWER_DATA","DELETE_ANSWER","fetchAnswerList","fetchAnswer","postAnswerData","saveAnswerData","deleteAnswer","RECEIVE_COMMENT_DATA_SUCCESS","FETCH_SINGLE_COMMENT","FETCH__COMMENT_WITH_USER_LIST","POST_COMMENT","UPDATE_COMMENT","UPDATED_COMMENT_DATA","UPDATED_SINGLE_COMMENT_DATA","SAVE_COMMENT_DATA","DELETE_COMMENT","UPDATED_COMMENT_ARRAY","receiveCommentDataSuccess","postComment","fetchSingleComment","updatedSingleCommentData","deleteComment","saveCommentData","updatedCommentArray","Comment","voteList","isOwner","commentUser","comments","answerId","currentQuestionId","currentQuestion","commentArray","questionId","commentTranslated","comment_translations","whiteSpace","CommentList","commentList","list","filteredCommentList","translatedCommentList","i","voteState","components_Comment","CommentForm","buttonStr","postButton","class","ownProps","AnswerList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","qId","buttonState","answerIds","answerArray","current_translate_language_id","answerIdList","handlePostComment","paddingLeft","components_CommentForm","form","onClickCommentForm","setState","_this2","filteredAnswers","answer","commentForm","getComment","answer_translations","Linkify_default","properties","components_CommentList","onClickReply","_this$props$state$ans","answerList","getAnswerList","isEmptyObject","obj","keys","QuestionView","match","parseInt","getQuestionById","questionTranslation","country","temp","sprintf","components_AnswerForm","img","getTranslatedQuestion","answerForm","getAnswerForm","containers_AnswerList","fetchAnswers","QuestionEdit","owner","saveData","notOwnerWillTransfer","onClickDeleteBtn","conditions","CHANGE_QUESTION_LIST_LANGUAGE","FETCH_NOT_TRANSLATED","fetchNotTranslated","NotTranslated","currentTab","not_translate","contents","url","getNotTranslatedId","getNotTranslated","tabState","getNotTranslatedQuestions","getNotTranslatedAnswers","getNotTranslatedComments","newTabKey","_this3","tabData","active","onClickTab","tabContents","getCurrentTabContents","getNotTranslatedView","tabList","getTabList","AnswerEdit","getAnswerById","currentAnswer","CommentEdit","commentId","getCommentById","currentComment","QuestionTranslatinoForm","FETCH_QUESTION_TRANSLATION_LIST","FETCH_QUESTION_TRANSLATION","POST_QUESTION_TRANSLATION_DATA","UPDATED_SINGLE_QUESTION_TRANSLATION","SAVE_QUESTION_TRANSLATION_DATA","DELETE_QUESTION_TRANSLATION","fetchQuestionTranslationList","fetchQuestionTranslation","postQuestionTranslationData","updatedSingleQuestionTranslation","saveQuestionTranslationData","deleteQuestionTranslation","QuestionTranslationList","translationList","question_translation_id","answer_translation_id","commcomment_translation_id","vote_translations","questionTranslations","currentTranslationList","getTranslationList","QuestionTranslationView","Error","QuestionTranslationForm","containers_QuestionTranslationList","TranslationForm","TranslationEdit","currentTranslation","components_TranslationForm","QuestionTranslationEdit","qtId","getQuestionTranslationById","components_TranslationEdit","AnswerTranslatinoForm","FETCH_ANSWER_TRANSLATION_LIST","FETCH_ANSWER_TRANSLATION","POST_ANSWER_TRANSLATION_DATA","SAVE_ANSWER_TRANSLATION_DATA","DELETE_ANSWER_TRANSLATION","UPDATED_SINGLE_ANSWER_TRANSLATION","fetchAnswerTranslationList","fetchAnswerTranslation","postAnswerTranslationData","saveAnswerTranslationData","deleteAnswerTranslation","updatedSingleAnswerTranslation","AnswerTranslationList","aId","answerTranslations","AnswerTranslationView","AnswerTranslationForm","containers_AnswerTranslationList","AnswerTranslationEdit","atId","getAnswerTranslationById","CommentTranslatinoForm","FETCH_COMMENT_TRANSLATION_LIST","FETCH_COMMENT_TRANSLATION","POST_COMMENT_TRANSLATION_DATA","SAVE_COMMENT_TRANSLATION_DATA","DELETE_COMMENT_TRANSLATION","UPDATED_SINGLE_COMMENT_TRANSLATION","fetchCommentTranslationList","fetchCommentTranslation","postCommentTranslationData","saveCommentTranslationData","deleteCommentTranslation","updatedSingleCommentTranslation","CommentTranslationList","comment_translation_id","_this$props$state$com","commentTranslations","CommentTranslationView","toQuestionViewLink","CommentTranslationForm","containers_CommentTranslationList","CommentTranslationEdit","ctId","getCommentTranslationById","MenuDrawer","top","left","bottom","right","toggleDrawer","side","open","defineProperty","actionData","logout","classes","displayName","menuDataList","text","sideList","List_default","menuData","index","ListItem_default","button","ListItemText_default","primary","Button_default","Drawer_default","anchor","onClose","tabIndex","role","onKeyDown","withStyles","fullList","Header","anchorEl","handleClose","handleLogout","onClickLogout","profileElem","MenuItem_default","uk-icon","getProfileElem","loginElem","getLoginElem","aria-owns","undefined","aria-haspopup","event","currentTarget","textTransform","Menu_default","Boolean","imagePath","displayMenuElem","menu","getMenu","maxHeight","CREATE_USER_ACCOUNT","CLICK_SUBMIT","SAVE_USER_MNEMONIC","LOGIN_USER","LOGIN_USER_JWT","LOGOUT_USER","UPDATE_USER_DATA","SAVE_USER_DATA","SAVE_USER_PASSWORD","UPDATED_USER_DATA","REMOVE_USER_DATA","LOGIN_SUCCESS","LOGIN_FAILED","GET_USER_PROFILE","GET_USER_BY_TOKEN","UPDATED_PROFILE_DATA","PREPARED_AUTH","UPDATED_PROFILE_QUESTION_DATA","UPDATED_PROFILE_ANSWER_DATA","UPDATED_PROFILE_COMMENT_DATA","UPDATED_PROFILE_TRANSLATED_DATA","SEND_RESET_PASSWORD_MAIL","RESET_PASSWORD","ACTIVATE_USER","createUserAccount","loginUserJwt","logoutUser","saveUserData","saveUserPassword","updatedUserData","removeUserData","loginSuccess","loginFailed","getUserProfile","getUserByToken","updatedProfileData","preparedAuth","updatedProfileQuestionData","updatedProfileAnswerData","updatedProfileCommentData","updatedProfileTranslatedData","sendResetPasswordMail","activateUser","App","fetchLoginState","children","isPrepared","BrowserRouter","containers_layouts_Header","reapop_lib_default","theme","ScrollToTop","prevProps","scrollTo","withRouter","SignUpForm","mail","test","password","passwordConfirm","SignUp","clickSubmit","users_SignUpForm","onClickSubmit","LoginForm","Login","users_LoginForm","PasswordResetForm","PasswordReset","users_PasswordResetForm","PasswordForm","NewPassword","token","fetchUser","users_PasswordForm","Activate","Stampcard","voteArray","repeatNum","tableContents","slice","rappedContents","Profile","userId","fetchUserProfile","voteLists","Math","ceil","stampCardNum","addArrayNum","stampcard","components_Stampcard","unshift","comment","translates","link","translation_link","translatedContentArray","_loop","_Object$entries","_i2","slicedToArray","entries","getCommentList","translateArray","filterTranslatedContent","getTranslatedList","profile","userPostList","voteTables","getVoteList","ProfileForm","image_url","file","files","URL","webkitURL","createObjectURL","imagePreview","image","uk-form-custom","handleImageChange","disabled","clickedSaveButton","users_ProfileForm","UserOnly","guestWillTransfer","context","router","nextProps","Route","contextTypes","PropTypes","object","isRequired","GuestOnly","userWillTransfer","replace","locales","ja","messages","_ja_JP","titles.sign_up","titles.login","titles.activate","titles.password_reset","titles.question_list","titles.answer_list","titles.post_list","titles.translation_list","titles.not_translated_list","titles.profile_edit.user_name","titles.profile_edit.birthplace","titles.profile_edit.profile","titles.profile_edit.user_image","titles.profile.edit","titles.question.edit","titles.question.delete","titles.question.return","messages.empty_answers","messages.birthplace","messages.you_are_not_target","messages.enter_mail","messages.enter_new_password","messages.activate_completed","links.to_not_translated_list","links.edit","links.question","links.answer","links.comment","links.translate","links.profile","links.profile_edit","links.sign_up","links.login","links.logout","links.password_reset","links.to_question_view","languages.japanese","languages.english","countries.japan","countries.usa","countries.philippines","countries.england","countries.newzealand","categories.all","categories.comic_anime","categories.culture","categories.tourism","categories.music","errors.questions.content","errors.questions.country_id","errors.questions.translate_language_id","errors.questions.category_id","errors.answers.content","errors.answers.translate_language_id","errors.comments.content","errors.comments.translate_language_id","errors.translations.content","errors.translations.translate_language_id","errors.sign_ups.name","errors.sign_ups.mail","errors.sign_ups.country","errors.sign_ups.appropriate_mail","errors.sign_ups.password","errors.sign_ups.confirm_password","errors.login.mail","errors.login.appropriate_mail","errors.login.password","errors.profile_edit.country","placeholders.sign_ups.name","placeholders.sign_ups.mail","placeholders.sign_ups.country","placeholders.sign_ups.password","placeholders.sign_ups.confirm_password","placeholders.login.mail","placeholders.login.password","placeholders.questions.content","placeholders.questions.country_id","placeholders.questions.translate_language_id","placeholders.questions.category_id","placeholders.questions.submit_btn","placeholders.answers.content","placeholders.answers.translate_language_id","placeholders.answers.submit_btn","placeholders.comments.content","placeholders.comments.translate_language_id","placeholders.comments.submit_btn","placeholders.translations.content","placeholders.translations.translate_language_id","placeholder.profile_edit.profile","placeholder.profile_edit.country","buttons.title.reply","buttons.title.post","buttons.title.sign_up","buttons.title.login","buttons.title.send","buttons.profile_edit.select","buttons.profile_edit.save","translated.name","translated.state","en","_en_US","categories","all","comic_anime","culture","tourism","music","sorts","answerMany","answerFew","Asc","Des","savedLocale","getItem","initialState","signUp","mnemonic","hash","jwt","currentCommentList","voteTranslations","reducer","combineReducers","arguments","action","_locales$action$paylo","payload","objectSpread","_categories$action$pa","_sorts$action$payload","_action$payload","notifications","notificationsReducer","axios","post","username","headers","Content-Type","Authorization","resetPassword","put","saveUserProfile","FormData","append","getUser","get","deleteQuestionData","delete","apiUrl","fetchAnswerListWithQuestion","deleteAnswerData","fetchCommentWithUserList","fetchCommentsList","fetchComment","fetchCommentListWithAnswer","postCommentData","deleteCommentData","fetchContentTranslation","notifySuccess","notify","position","dismissAfter","notifyError","loginUserAccount","loginUserAccountJwt","logoutUserAccount","regenerator_default","wrap","_context","prev","next","api","sent","t0","stop","_marked","_context2","_marked2","_context3","_marked3","_context4","removeItem","_marked4","_context5","_marked5","_context6","_marked6","_context7","select","_marked7","questionParams","questionPayload","answerParams","answerPayload","commentParams","commentPayload","translateParams","translatedContent","_context8","_marked8","_context9","_marked9","_context10","_marked10","userSagas","takeEvery","handleFetchQuestionById","postQuestion","Question_marked","Question_marked2","Question_marked3","Question_marked5","Question_marked6","questionSagas","handleFetchAnswerData","postAnswer","fetchSingleAnswerData","act","Answer_marked","reset","Answer_marked2","Answer_marked3","_action$payload2","Answer_marked4","_action$payload3","Answer_marked5","answerSagas","handleFetchQuestionTranslationList","handleFetchQuestionTranslationById","postQuestionTranslation","QuestionTranslation_marked","QuestionTranslation_marked2","QuestionTranslation_marked3","QuestionTranslation_marked4","QuestionTranslation_marked5","questionTranslationSagas","handleFetchAnswerTranslationList","handleFetchAnswerTranslationById","postAnswerTranslation","AnswerTranslation_marked","AnswerTranslation_marked2","AnswerTranslation_marked3","AnswerTranslation_marked4","AnswerTranslation_marked5","answerTranslationSagas","saveComment","Comment_marked","act2","answerSaga","Comment_marked2","Comment_marked3","Comment_marked4","commentSagas","handleFetchCommentTranslationList","handleFetchCommentTranslationById","postCommentTranslation","CommentTranslation_marked","CommentTranslation_marked2","CommentTranslation_marked3","CommentTranslation_marked4","CommentTranslation_marked5","commentTranslationSagas","fetchNotTranslatedQuestions","fetchNotTranslatedAnswers","fetchNotTranslatedComments","NotTranslatedList","NotTranslated_marked","NotTranslatedSagas","postVotes","deleteVotes","abrupt","t1","Votes_marked2","_data","Votes_marked3","voteSagas","VoteTranslation_marked","VoteTranslation_marked2","voteTranslationSagas","Notification_marked","notificationSagas","rootSaga","toConsumableArray","rootSaga_marked","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createHistory","ReactGA","initialize","listen","pathname","routingMiddleware","routerMiddleware","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","thunkMiddleware","logger","run","getState","addLocaleData","library","add","fas","far","ReactDOM","es","index_es","containers_App","layouts_ScrollToTop","Switch","exact","path","onEnter","auth_UserOnly","ProfileEdit","auth_GuestOnly","document","getElementById","subscribe"],"mappings":"yYAGaA,EAAsBC,OAAO,uBAC7BC,EAAiBD,OAAO,kBACxBE,EAAqBF,OAAO,sBAC5BG,EAAeH,OAAO,gBACtBI,EAAuBJ,OAAO,wBAC9BK,EAA8BL,OAAO,+BACrCM,EAAsBN,OAAO,uBAC7BO,EAAoCP,OAAO,qCAC3CQ,EAAqBR,OAAO,sBAC5BS,EAAwBT,OAAO,yBAC/BU,EAAkBV,OAAO,mBAIzBW,EAAoBC,YAAab,GACjCc,EAAgBD,YAAaX,GAC7Ba,EAAmBF,YAAaV,GAChCa,EAAcH,YAAaT,GAC3Ba,EAAqBJ,YAAaR,GAClCa,EAA2BL,YAAaP,GACxCa,EAAoBN,YAAaN,GAEjCa,GADiCP,YAAaL,GAC3BK,YAAaJ,IAChCY,EAAsBR,YAAaH,GACnCY,EAAiBT,YAAaF,qCCzB9BY,EAAsB,SAACC,EAAaC,EAAqBC,GAWpE,OAVyBF,EAAYG,OAAO,SAACC,GAC3C,OAAIA,EAAEC,wBAA0BJ,GAOE,IAHJG,EAAEF,GAAaC,OAAO,SAACC,GACnD,OAAQA,EAAEC,wBAA0BJ,IACnCK,UAMMC,EAAwB,SAACP,EAAaC,EAAqBC,GAgBtE,OAf2BF,EAAYQ,IAAI,SAACJ,GAC1C,GAAIA,EAAEC,wBAA0BJ,EAE5B,OADAG,EAAEK,SAAWL,EAAEM,QACRN,EAGX,IAAMO,EAAcP,EAAEF,GAAaC,OAAO,SAAAC,GACxC,OAAQA,EAAEC,wBAA0BJ,IACnC,GAGH,OADAG,EAAEK,SAAWE,EAAYD,QAClBN,qBCxBLQ,mLAEK,IACCC,EAASC,KAAKC,MAAdF,KACAG,EAAmCH,EAAnCG,KAAMC,EAA6BJ,EAA7BI,WAAYC,EAAiBL,EAAjBK,aAEpBC,GAAMC,EADcN,KAAKC,MAAMM,KAA7BD,eACkB,CAACE,GAAI,oBAE/B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CAA0CC,MAAO,CAACC,QAAS,WAAaT,GACvFI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAIZ,GACRK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mDAAmDK,IAAKd,EAAYe,MAAM,KAAKC,OAAO,KAAKC,IAAKlB,cAblGmB,aAqBVC,cAAWxB,GCtBbyB,EAAY5D,OAAO,aACnB6D,EAAc7D,OAAO,eACrBG,EAAeH,OAAO,gBACtBI,EAAuBJ,OAAO,wBAC9BM,GAAsBN,OAAO,uBAG7B8D,GAAWlD,YAAagD,GACxBG,GAAanD,YAAaiD,GAC1B9C,GAAcH,YAAaT,GAE3Be,IADqBN,YAAaR,GACdQ,YAAaN,cCwC/B0D,gMAjDUC,GACjB,IAAIX,EACJ,OAAOW,GACH,KAAK,EACDX,EAAM,QACN,MACJ,KAAK,EACDA,EAAM,MACN,MACJ,KAAK,EACDA,EAAM,cACN,MACJ,KAAK,EACDA,EAAM,UACN,MACJ,KAAK,EACDA,EAAM,aACN,MACJ,QACIA,EAAM,QAGd,OAAOR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,GAAGK,IAAG,sBAAAY,OAAwBZ,EAAxB,QAAmCJ,MAAO,CAACiB,OAAQ,qBAAsBZ,MAAM,KAAKC,OAAO,KAAKC,IAAI,sCAG3H,IACGrB,EAASC,KAAKC,MAAdF,KACFgC,EAAe/B,KAAKgC,qBAAqBjC,EAAKkC,YAC9CC,EAAWnC,EAAOA,EAAKG,KAAO,6CAC9BiC,EAAW,kBAAAN,OAAqB9B,EAAKS,IAE3C,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAImB,GAAa1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCAAqCK,IAAKlB,EAAKI,WAAYe,MAAM,KAAKC,OAAO,KAAKC,IAAI,OAEhIX,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACTmB,GAEFtB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oCAAmCH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMH,UAAU,GAAGI,GAAImB,GAAeD,cA3CxFb,aCsDRe,oLApDF,IAqBDC,EArBCC,EAYDtC,KAAKC,MAVLF,EAFCuC,EAEDvC,KACAwC,EAHCD,EAGDC,UACAC,EAJCF,EAIDE,MACAC,EALCH,EAKDG,SACAC,EANCJ,EAMDI,WACAC,EAPCL,EAODK,SACAC,EARCN,EAQDM,cACAC,EATCP,EASDO,gBACAC,EAVCR,EAUDQ,kBACAC,EAXCT,EAWDS,UAGEC,EAAiBjD,EAAKS,KAAO+B,EAAU/B,GAC3BC,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMH,UAAU,wBAAwBI,GAAI2B,GAAUlC,EAAAC,EAAAC,cAACsC,GAAA,EAAD,CAAiBC,KAAK,OAAOC,MAAM,YAAYC,KAAK,QAC1G,GAOlBf,EAJqC,IADrBG,EAAMnD,OAAO,SAAAC,GAAM,OAAOA,EAAE+D,UAAYd,EAAU/B,KACxChB,OAKtBiB,EAAAC,EAAAC,cAAA,KAAG2C,QAASR,EAAkBS,KAAKvD,KAAM0C,EAAYH,EAAU/B,KAC/DC,EAAAC,EAAAC,cAACsC,GAAA,EAAD,CAAiBC,KAAK,QAAQC,MAAM,MAAMC,KAAK,QAK/C3C,EAAAC,EAAAC,cAAA,KAAG2C,QAAST,EAAgBU,KAAKvD,KAAMyC,EAAUF,EAAU/B,KAC3DC,EAAAC,EAAAC,cAACsC,GAAA,EAAD,CAAiBC,KAAM,CAAC,MAAM,SAAUC,MAAM,OAAQC,KAAK,QAI/D,IAAMI,EAAc/C,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yCAA0C4B,EAAMhD,QAE9EiE,GAAgC,IAAdV,EACHtC,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAI4B,GAAenC,EAAAC,EAAAC,cAACsC,GAAA,EAAD,CAAiBC,KAAK,iBAAiBC,MAAM,YAAYC,KAAK,QACvF,GAErB,OACI3C,EAAAC,EAAAC,cAAA,WACM0B,EACAmB,EACAR,EACAS,UA/CMpC,aCYlBqC,oLAEKC,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM2D,eAAeD,sCAGxBA,EAAMN,GACf,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM4D,iBAAiBF,oDAGZG,EAAOtD,GAQ9B,OAAOA,GACL,KAPkB,EAQhB,OAAOsD,EACT,KAR0B,EAS1B,KARsB,EAStB,KARsB,EAStB,KARoB,EASlB,OAAOA,EAAMzE,OAAO,SAAC0E,GACnB,OAAOA,EAAEC,cAAgBxD,IAE7B,QACE,MAAO,iDAKQsD,EAAOtD,GAC1B,IAKIyD,EAAY,GAWhB,OATAH,EAAMI,QAAQ,SAASC,GACrB,IAAIzD,EACJA,EAAI,CACF0D,IAAQD,EAAME,QAAQ7E,OACtBsE,MAASK,GAEXF,EAAUK,KAAK5D,KAGVF,GACL,KAjB0B,EAkBxB,OAAOyD,EAAUM,KAAK,SAAS7D,EAAE8D,GAC7B,OAAQ9D,EAAE0D,IAAMI,EAAEJ,IAAM,GAAK,IAC5B1E,IAAI,SAACqE,GAAM,OAAOA,EAAED,QAC3B,KApByB,EAqBvB,OAAOG,EAAUM,KAAK,SAAS7D,EAAE8D,GAC/B,OAAQ9D,EAAE0D,IAAMI,EAAEJ,IAAM,GAAK,IAC5B1E,IAAI,SAACqE,GAAM,OAAOA,EAAED,QACzB,KAvB0B,EAwBxB,OAAOA,EAAMS,KAAK,SAAS7D,EAAE8D,GAC3B,OAAQ9D,EAAE+D,WAAaD,EAAEC,WAAa,GAAK,IAE/C,KA1B0B,EA2BxB,OAAOX,EAAMS,KAAK,SAAS7D,EAAE8D,GAC3B,OAAQ9D,EAAE+D,WAAaD,EAAEC,WAAa,GAAK,IAE/C,QACE,MAAO,4CAIGC,EAAevF,EAAqBwF,EAAYC,GAAQ,IAAAC,EAAA7E,KAGhE8E,EAAoB7F,EAAoByF,EAAevF,EADzC,yBAEd4F,EAAsBtF,EAAsBqF,EAAmB3F,EAFjD,yBAGd6F,EAAoBhF,KAAKiF,yBAAyBF,EAAqBJ,GAG7E,OAFsB3E,KAAKkF,qBAAqBF,EAAmBJ,GAE9ClF,IAAI,SAAAyF,GAAY,IAuB/BC,EAtBIrF,EAASoF,EAATpF,KACAO,EAAkBuE,EAAK5E,MAAMM,KAA7BD,cAEAkC,EAAU2C,EAAV3C,MAEF6C,EAAM,eAaN5C,EAAW,CAAE6C,eAZI,CACnBjC,QAASwB,EAAK5E,MAAMF,KAAKS,GACzB+E,YAAaJ,EAAS3E,GACtBgF,UAAW,KACXC,WAAY,KACZC,OAAQ,GAOwBL,OAC9B3C,EAAa,CAAEiD,iBANI,CACrBtC,QAASwB,EAAK5E,MAAMF,KAAKS,GACzB6E,IAAM,WACNO,QAAST,EAAS3E,IAGkB6E,OAEhCQ,EAA0BV,EAA1BU,sBAOR,GALAT,EACE3E,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iCACVN,EAAc,CAACE,GAAI,sBAGY,IAAjCqF,EAAsBrG,OAAc,KAC9BO,EAAS8F,EAAsB,GAA/B9F,KACRqF,EAAa3E,EAAAC,EAAAC,cAACmF,EAAD,CAAY/F,KAAMA,IAGjC,OACEU,EAAAC,EAAAC,cAAA,MAAI0E,IAAKF,EAAS3E,IAChBC,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBAAkBN,EAAc,CAACE,GAAI2E,EAASY,SAASC,YACvEvF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qCAAqCqF,IAAMd,EAASV,YAAYyB,OAAO,yBAEzFzF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iCAAiCH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAE,cAAAa,OAAgBsD,EAAS3E,KAAjC,GAAAqB,OAA2CsD,EAASxF,YAClGc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACfH,EAAAC,EAAAC,cAACwF,GAAD,CAEIpG,KAASA,EAETwC,UAAcsC,EAAK5E,MAAMF,KACzByC,MAAUA,EACVC,SAAaA,EACbC,WAAeA,EACfC,SAAQ,mBAAAd,OAAuBsD,EAAS3E,IACxCoC,cAAa,0BAAAf,OAA8BsD,EAAS3E,IACpDqC,gBAAmBgC,EAAKuB,SAAS7C,KAAKsB,GACtC/B,kBAAqB+B,EAAKnD,WAAW6B,KAAKsB,GAC1C9B,WAAc,KAGlBtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0F,GAAD,CAAUtG,KAAMA,KAElBU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXwE,mDAQMV,EAAevF,EAAqBwF,EAAYC,GAClE,IAAM0B,EAAetG,KAAKuG,gBAAgB7B,EAAevF,EAAqBwF,EAAYC,GAE1F,OACEnE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCACX0F,qCAMA,IAAAhE,EAC4DtC,KAAKC,MAAhEyE,EADDpC,EACCoC,cAAevF,EADhBmD,EACgBnD,oBAAqBwF,EADrCrC,EACqCqC,WAAYC,EADjDtC,EACiDsC,OAClDhF,EAAUI,KAAKwG,oBAAoB9B,EAAevF,EAAqBwF,EAAYC,GAEzF,OACEnE,EAAAC,EAAAC,cAAA,WACGf,UA/KsByB,aA4MhBoF,qBAvBS,SAAAC,GAMtB,MAAO,CACL3G,KANe2G,EAAMC,KAAf5G,KAON4E,WANqB+B,EAAME,KAArBjC,WAONC,OANiB8B,EAAMnC,KAAjBK,OAONrE,KANemG,EAATnG,OAUiB,SAAAsG,GACzB,MAAO,CAELjD,eAAgB,SAACD,GAAD,OAAUkD,EAASpF,GAASkC,KAC5CE,iBAAkB,SAACF,GAAD,OAAUkD,EAASnF,GAAWiC,OAKrC8C,CAA6CnF,YAAWoC,KCvLxDoD,+LA7BO,IAQdC,EAPIrC,EAAkB1E,KAAKC,MAAMyG,MAAMM,UAAnCtC,cACFC,EAAa3E,KAAKC,MAAMyG,MAAME,KAAKjC,WAEZ,IAAzBD,EAAclF,SAKlBuH,EAAS,GACU,IAAfpC,IACFoC,EAAS,CAAE/C,YAAaW,IAE1B3E,KAAKC,MAAMgH,gBAAgBF,qCAGpB,IAAAG,EAC+BlH,KAAKC,MAAMyG,MAAMM,UAA/CG,EADDD,EACCC,WAAYzC,EADbwC,EACaxC,cACZvF,EAAwBa,KAAKC,MAAMyG,MAAMnG,KAAzCpB,oBACR,OAAIgI,EACM1G,EAAAC,EAAAC,cAACyG,EAAA,WAAD,MAIR3G,EAAAC,EAAAC,cAAC0G,GAAD,CAAkB3C,cAAeA,EAAevF,oBAAqBA,EAAqBoD,UAAWvC,KAAKC,MAAMyG,MAAMC,KAAK5G,KAAKS,YA1B3Ga,aCQZoF,qBAVS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACHI,gBAAiB,SAACK,GAAD,OAAeT,EAASvI,EAAkBgJ,OAIpDb,CAA6CK,aCVtDS,oLACK,IACCjH,EAAkBN,KAAKC,MAAMM,KAA7BD,cADDgC,EAEwBtC,KAAKC,MAA5BC,EAFDoC,EAECpC,KAAMsH,EAFPlF,EAEOkF,YAEd,OACE/G,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CAAOvH,KAAMA,EAAMwH,UAAU,SAAS9G,UAAW,0BAC/CH,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,IAAIqD,GAClB/G,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,KAAO7D,EAAc,CAACE,GAAI,wBACxCC,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,KAAO7D,EAAc,CAACE,GAAI,+BATfa,aAelBC,eAAWiG,ICfpBI,oLACK,IACCrH,EAAkBN,KAAKC,MAAMM,KAA7BD,cADDgC,EAEwBtC,KAAKC,MAA5BC,EAFDoC,EAECpC,KAAMsH,EAFPlF,EAEOkF,YAEd,OACE/G,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CAAOvH,KAAMA,EAAMwH,UAAU,SAAS9G,UAAW,0BAC/CH,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,IAAIqD,GAClB/G,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,KAAO7D,EAAc,CAACE,GAAI,4BACxCC,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,KAAO7D,EAAc,CAACE,GAAI,wBACxCC,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,KAAO7D,EAAc,CAACE,GAAI,wBACxCC,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,KAAO7D,EAAc,CAACE,GAAI,8BAXfa,aAiBlBC,eAAWqG,aCjBpBC,oLACK,IACCtH,EAAkBN,KAAKC,MAAMM,KAA7BD,cADDgC,EAE4BtC,KAAKC,MAAhCO,EAFD8B,EAEC9B,GAAIN,EAFLoC,EAEKpC,KAAMsH,EAFXlF,EAEWkF,YAElB,OACE/G,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CAAOjH,GAAIA,EAAIN,KAAMA,EAAMwH,UAAU,SAAS9G,UAAW,0BACvDH,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,IAAIqD,GAClB/G,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,KAAO7D,EAAc,CAACE,GAAI,qBACxCC,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,KAAO7D,EAAc,CAACE,GAAI,mBACxCC,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,KAAO7D,EAAc,CAACE,GAAI,2BACxCC,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,KAAO7D,EAAc,CAACE,GAAI,uBACxCC,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,KAAO7D,EAAc,CAACE,GAAI,kCAZhBa,aAkBjBC,eAAWsG,ICdpBC,oLAEKC,GACmB9H,KAAKC,MAAMM,KAA7BD,cADO,IAEXyH,EAAS,GAab,OAZKD,EAAOlI,UACVmI,EAAOnI,QAAU,4BAEdkI,EAAO7F,aACV8F,EAAO9F,WAAc,+BAElB6F,EAAOvI,wBACVwI,EAAOxI,sBAAwB,0CAE5BuI,EAAO9D,cACV+D,EAAO/D,YAAc,gCAEhB+D,mCAGA,IAIHC,EAJGnD,EAAA7E,KACCiI,EAAkBjI,KAAKC,MAAvBgI,cACA3H,EAAkBN,KAAKC,MAAMM,KAA7BD,cAQR,OALA0H,EAAa,GACc,iBAAxBhI,KAAKC,MAAMiI,WACZF,EAAavH,EAAAC,EAAAC,cAACwH,GAAA,EAAD,CAASjI,KAAMF,KAAKC,MAAMiI,YAIvCzH,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEQ,cAAeA,EACfG,oBAAoB,EACpBC,SAAUrI,KAAKqI,SAAS9E,KAAKvD,MAC7BsI,SAAU,SAACR,EAADS,GAAqD,IAA1CC,EAA0CD,EAA1CC,cAA0BC,GAAgBF,EAA3BG,UAA2BH,EAAhBE,WAC3C5D,EAAK5E,MAAMqI,SAASR,GACpBU,GAAc,GACdC,KAGJE,OAAQ,SAAAC,KAAGd,OAAH,IAAWC,EAAXa,EAAWb,OAAQc,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAA5BF,EAA0CG,aAA1CH,EAAwDI,cAAxD,OACNvI,EAAAC,EAAAC,cAAA,QAAM2H,SAAUQ,GACdrI,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEjH,GAAI,UACDN,KAAK,UACLwH,UAAU,WACVuB,KAAK,OACLzB,YAAalH,EAAc,CAACE,GAAI,mCAChC0I,KAAK,IACLtI,UAAW,6BAEfiI,EAAQjJ,SAAWmI,EAAOnI,SAAWa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAoBN,EAAc,CAACE,GAAIuH,EAAOnI,WAEjGoI,GAEJvH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2DACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAEbH,EAAAC,EAAAC,cAACwI,GAAD,CACA3I,GAAI,aACJN,KAAK,aACLsH,YAAalH,EAAc,CAACE,GAAI,wCAE/BqI,EAAQ5G,YAAc8F,EAAO9F,YAAcxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAoBN,EAAc,CAACE,GAAIuH,EAAO9F,eAG3GxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACyI,GAAD,CAAoBlJ,KAAK,wBAAwBsH,YAAalH,EAAc,CAACE,GAAI,mDAChFqI,EAAQtJ,uBAAyBwI,EAAOxI,uBAAyBkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAoBN,EAAc,CAACE,GAAIuH,EAAOxI,0BAIjIkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAC0I,GAAD,CAAoBnJ,KAAK,cAAcsH,YAAalH,EAAc,CAACE,GAAI,yCACtEqI,EAAQ7E,aAAe+D,EAAO/D,aAAevD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAoBN,EAAc,CAACE,GAAIuH,EAAO/D,iBAI/GvD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQsI,KAAK,SAASrI,UAAU,+BAAgCN,EAAc,CAACE,GAAI,oDAlFxEa,aA4FZC,eAAWuG,IC9FpByB,8LAEeC,GACjB,IAAI,IAAAC,EAC2BxJ,KAAKC,MAAMyG,MAAMC,KAAtC5G,EADNyJ,EACMzJ,KACR,IAFEyJ,EACYC,WACG,KACPC,EAAY1J,KAAKC,MAAjByJ,QAER,OADA1J,KAAKC,MAAM0J,aAAa,sEACjBD,EAAQpF,KAAK,gBALpB,IAOM1E,EAA4D2J,EAA5D3J,QAASL,EAAmDgK,EAAnDhK,sBAAuB0C,EAA4BsH,EAA5BtH,WAAY+B,EAAgBuF,EAAhBvF,YAE9C4F,EAAW,CAAEhK,UAASyD,QADZtD,EAAKS,GACgBjB,wBAAuB0C,aAAY+B,eACxE,OAAOhE,KAAKC,MAAM6I,aAAac,GAC/B,MAAO7F,GAEP,YADA8F,QAAQC,IAAI,YAAa/F,EAAEgG,mDAKd5F,GACf,OAAOA,GACL,IAAK,MACH,OAAO,EACT,IAAK,cACH,OAAO,EACT,IAAK,UACH,OAAO,EACT,IAAK,UACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,QACE,OAAO,wCAIAA,GACX,OAAOA,GACL,IAAK,aACH,OAAO,EACT,IAAK,YACH,OAAO,EACT,IAAK,MACH,OAAO,EACT,IAAK,MAEL,QACE,OAAO,4CAII6F,EAAQjG,GACvBA,EAAEkG,iBACFlG,EAAEmG,kBACFC,aAAaC,QAAQ,SAAUJ,GAE/BK,OAAOC,SAASC,KAAO,+CAINpG,GAEjB,IAAI4C,EADJ/G,KAAKC,MAAMuK,WAAWrG,GAEtB4C,EAAS,GACT/G,KAAKC,MAAMgH,gBAAgBF,kDAGN5C,GAEpB,IAAI4C,EADJ/G,KAAKC,MAAMwK,eAAetG,GAE1B4C,EAAS,GACT/G,KAAKC,MAAMgH,gBAAgBF,oCAGrB,IAAAlC,EAAA7E,KACCM,EAAkBN,KAAKC,MAAMM,KAA7BD,cADDoK,EAEiC1K,KAAKC,MAAMyG,MAAMnG,KAAzCpB,GAFTuL,EAECV,OAFDU,EAESvL,qBACR4G,EAAa/F,KAAKC,MAAMyG,MAAME,KAA9Bb,SACAxB,EAASvE,KAAKC,MAAMyG,MAAMnC,KAA1BA,KACAoC,EAAS3G,KAAKC,MAAMyG,MAApBC,KAQR,OACElG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gDACbH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,KAAG4J,KAAK,IAAIjH,QAAStD,KAAK2K,iBAAiBpH,KAAKvD,KAAM,OAAtD,uBAIFS,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBACdH,EAAAC,EAAAC,cAAA,KAAG4J,KAAK,IAAIjH,QAAStD,KAAK2K,iBAAiBpH,KAAKvD,KAAM,OAAtD,aAKJS,EAAAC,EAAAC,cAACiK,GAAD,CAAc3C,cArBW,CAC3BrI,QAAS,GACTqC,WAAY,GACZ1C,sBAAuB,GACvByE,YAAa,IAiBwCzB,UAAWoE,EAAM2B,SAAUtI,KAAK6K,mBAAmBtH,KAAKvD,MAAO8K,SAAS,iBAE3HrK,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAkBH,EAAAC,EAAAC,cAAA,YAAQL,EAAc,CAACE,GAAI,2BAC3DC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2DAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAYuD,MAAO4B,EAAUgF,SAAU,SAAAhH,GAAC,OAAIc,EAAKmG,uBAAwBjH,EAAEkH,OAAO9G,SAClG1D,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,OAAS7D,EAAc,CAACE,GAAI,oBAC1CC,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,eAAiB7D,EAAc,CAACE,GAAI,4BAClDC,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,WAAa7D,EAAc,CAACE,GAAI,wBAC9CC,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,WAAa7D,EAAc,CAACE,GAAI,wBAC9CC,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,SAAW7D,EAAc,CAACE,GAAI,wBAIhDC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAYuD,MAAOI,EAAMwG,SAAU,SAAAhH,GAAC,OAAIc,EAAKqG,mBAAoBnH,EAAEkH,OAAO9G,SAC1F1D,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,cAAgB7D,EAAc,CAACE,GAAI,qBACjDC,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,aAAe7D,EAAc,CAACE,GAAI,oBAChDC,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,OAAS7D,EAAc,CAACE,GAAI,cAC1CC,EAAAC,EAAAC,cAAA,UAAQwD,MAAM,OAAS7D,EAAc,CAACE,GAAI,iBAIhDC,EAAAC,EAAAC,cAACwK,GAAD,CAAc5L,sBAAuBJ,YA9H1BiM,IAAM/J,WAoIVC,eAAWgI,ICvIb+B,GAA0B1N,OAAO,2BAGjC2N,GAAwB/M,YAAa8M,ICHrCE,GAA0B5N,OAAO,2BACjC6N,GAAwBjN,YAAagN,ICDrCE,GAAsB9N,OAAO,uBAC7B+N,GAAoBnN,YAAakN,ICFjCE,GAAuBhO,OAAO,wBAE9BiO,GAAqBrN,YAAaoN,IC8BhClF,qBAfS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACLiC,aAAc,SAACc,GAAD,OAAc/C,EAASpI,EAAiBmL,KACtDiC,eAAgB,SAAC7B,GAAD,OAAYnD,EAASyE,GAAsBtB,KAC3DS,eAAgB,SAAC1E,GAAD,OAAcc,EAAS2E,GAAsBzF,KAC7DyE,WAAY,SAACjG,GAAD,OAAUsC,EAAS6E,GAAkBnH,KACjD0C,gBAAiB,SAACK,GAAD,OAAeT,EAASvI,EAAkBgJ,KAC3DqC,aAAc,SAACI,GAAD,OAAalD,EAAS+E,GAAmB7B,OAI5CtD,CAA6C6C,wBCzBtDwC,oLAEKhE,GAAQ,IACPxH,EAAkBN,KAAKC,MAAMM,KAA7BD,cACJyH,EAAS,GAOb,OANKD,EAAOlI,UACVmI,EAAOnI,QAAUU,EAAc,CAACE,GAAI,4BAEjCsH,EAAOvI,wBACVwI,EAAOxI,sBAAwBe,EAAc,CAACE,GAAI,0CAE7CuH,mCAGA,IAAAlD,EAAA7E,KACCiI,EAAkBjI,KAAKC,MAAvBgI,cACA3H,EAAkBN,KAAKC,MAAMM,KAA7BD,cACR,OACEG,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEQ,cAAeA,EACfG,oBAAoB,EACpBC,SAAUrI,KAAKqI,SAAS9E,KAAKvD,MAC7BsI,SAAU,SAACR,EAADS,GAAqD,IAA1CC,EAA0CD,EAA1CC,cAA0BC,GAAgBF,EAA3BG,UAA2BH,EAAhBE,WAC3C5D,EAAK5E,MAAMqI,SAASR,GACpBU,GAAc,GACdC,KAGJE,OAAQ,SAAAC,KAAGd,OAAH,IAAWC,EAAXa,EAAWb,OAAQc,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAA5BF,EAA0CG,aAA1CH,EAAwDI,cAAxD,OACNvI,EAAAC,EAAAC,cAAA,QAAM2H,SAAUQ,GACdrI,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEjH,GAAI,UACDN,KAAK,UACLwH,UAAU,WACVuB,KAAK,OACLzB,YAAalH,EAAc,CAACE,GAAI,iCAChC0I,KAAK,IACLtI,UAAW,6BAEfiI,EAAQjJ,SAAWmI,EAAOnI,SAAWa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAoBmH,EAAOnI,UAElFa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACyI,GAAD,CAAoBlJ,KAAK,wBAAwBsH,YAAalH,EAAc,CAACE,GAAI,iDAChFqI,EAAQtJ,uBAAyBwI,EAAOxI,uBAAyBkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAoBmH,EAAOxI,wBAE9GkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BAAgCN,EAAc,CAACE,GAAI,kDAhD5Da,aA0DVC,eAAWwK,IChEbC,GAA6BpO,OAAO,8BACpCqO,GAAoBrO,OAAO,qBAC3BsO,GAAetO,OAAO,gBACtBuO,GAAmBvO,OAAO,oBAC1BwO,GAAkBxO,OAAO,mBACzBG,GAAeH,OAAO,gBACtBI,GAAuBJ,OAAO,wBAC9BK,GAA8BL,OAAO,+BACrCM,GAAsBN,OAAO,uBAC7ByO,GAAmBzO,OAAO,oBAC1B0O,GAAgB1O,OAAO,iBAGvB2O,IAD0B/N,YAAawN,IACrBxN,YAAayN,KAC/BO,GAAchO,YAAa0N,IAC3BO,GAAiBjO,YAAa2N,IAE9BxN,IADiBH,YAAa4N,IAChB5N,YAAaT,KAC3Ba,GAAqBJ,YAAaR,IAClCa,GAA2BL,YAAaP,IACxCa,GAAoBN,YAAaN,IACjCwO,GAAiBlO,YAAa6N,IAC9BM,GAAenO,YAAa8N,ICtB5BvO,GAAeH,OAAO,gBACtBgP,GAA+BhP,OAAO,gCACtCM,GAAsBN,OAAO,uBAC7BiP,GAAuBjP,OAAO,wBAC9BkP,GAAgClP,OAAO,iCACvCmP,GAAenP,OAAO,gBACtBoP,GAAiBpP,OAAO,kBACxBqP,GAAuBrP,OAAO,wBAC9BsP,GAA8BtP,OAAO,+BACrCuP,GAAoBvP,OAAO,qBAC3BwP,GAAiBxP,OAAO,kBACxByP,GAAwBzP,OAAO,yBAE/Be,GAAcH,YAAaT,IAC3BuP,GAA4B9O,YAAaoO,IACzC9N,GAAoBN,YAAaN,IACjCqP,GAAc/O,YAAauO,IAC3BS,GAAqBhP,YAAaqO,IAIlCY,IAH2BjP,YAAasO,IACxBtO,YAAawO,IACRxO,YAAayO,IACPzO,YAAa0O,KACxCQ,GAAgBlP,YAAa4O,IAC7BO,GAAkBnP,YAAa2O,IAC/BS,GAAsBpP,YAAa6O,ICb1CQ,oLAEKjK,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM2D,eAAeD,sCAGxBA,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM4D,iBAAiBF,oCAG9B,IA4BHyB,EA5BG9C,EAC2FtC,KAAKC,MAA/FO,EADD8B,EACC9B,GAAIT,EADLuC,EACKvC,KAAMH,EADX0C,EACW1C,QAAkBiO,GAD7BvL,EACoBwL,QADpBxL,EAC6BuL,UAAU7G,EADvC1E,EACuC0E,UAAW+G,EADlDzL,EACkDyL,YAAaC,EAD/D1L,EAC+D0L,SAAUC,EADzE3L,EACyE2L,SAAU1N,EADnF+B,EACmF/B,KACpF2N,EAAoBlH,EAAUmH,gBAAgB3N,GAE5CF,EAAkBC,EAAlBD,cACA8N,EAAiBJ,EAAjBI,aAoBF3L,EAAW,CAAE6C,eAjBI,CACrBjC,QAASrD,KAAKC,MAAMF,KAAKS,GACzB+E,YAAa,KACbC,UAAW,KACXC,WAAYjF,EACZkF,OAAQ,EAER2I,WAAYH,GAUsB7I,IAlBxB,WAmBN3C,EAAa,CAAEiD,iBATI,CACvBtC,QAASrD,KAAKC,MAAMF,KAAKS,GACzB6E,IAAM,UAENO,QAASpF,EAET6N,WAAYH,GAG0B7I,IAnB5B,WAuBZ,GADAD,EAAa3E,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iCAAiCN,EAAc,CAACE,GAAI,sBACpD,qBAAjB4N,EAA6B,CACrC,IAEME,EAFwBF,EAAaH,GACG5O,OAAO,SAAAC,GAAC,OAAIA,EAAEkB,KAAOA,IACzB,GAAG+N,qBAC7C,GAAiC,IAA7BD,EAAkB9O,OAAc,KAC1BO,EAASuO,EAAkB,GAA3BvO,KACRqF,EAAa3E,EAAAC,EAAAC,cAACmF,EAAD,CAAY/F,KAAMA,KAInC,OACEU,EAAAC,EAAAC,cAAA,WAASC,UAAU,iCACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACbH,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAAC2N,WAAc,aACtB5O,EACDa,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACwF,GAAD,CAEIpG,KAASA,EAETwC,UAAcvC,KAAKC,MAAMF,KACzByC,MAAUqL,EACVpL,SAAaA,EACbC,WAAeA,EACfC,SAAQ,kBAAAd,OAAsBrB,GAC9BoC,cAAa,yBAAAf,OAA6BrB,GAC1CqC,gBAAmB7C,KAAKoG,SAAS7C,KAAKvD,MACtC8C,kBAAqB9C,KAAK0B,WAAW6B,KAAKvD,MAC1C+C,WAAc,MAKtBtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0F,GAAD,CAAUtG,KAAOgO,KAEnBtN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXwE,YArFQ/D,aAmHPoF,qBArBS,SAAAC,GAAS,IACvBM,EAAwBN,EAAxBM,UAAWgH,EAAatH,EAAbsH,SAGnB,MAAO,CACLjO,KAHe2G,EAAMC,KAAf5G,KAINiH,YACAgH,WACAzN,KALemG,EAATnG,OASiB,SAAAsG,GACzB,MAAO,CAELjD,eAAgB,SAACD,EAAM0K,GAAP,OAAsBxH,EAASpF,GAASkC,EAAM0K,KAC9DxK,iBAAkB,SAACF,GAAD,OAAUkD,EAASnF,GAAWiC,OAKrC8C,CAA6CnF,YAAWsM,KCjGxDa,oLAxBJ,IAAAnM,EACoCtC,KAAKC,MAAxCsC,EADDD,EACCC,UAAWpD,EADZmD,EACYnD,oBACbuP,EAAc1O,KAAKC,MAAM0O,KAAO3O,KAAKC,MAAM0O,KAAO,GAElDC,EAAsB3P,EAAoByP,EAAavP,EADzC,wBAEd0P,EAAwBpP,EAAsBmP,EAAqBzP,EAFrD,wBAIpB,OACEsB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACViO,EAAsBnP,IAAI,SAACJ,EAAGwP,GAC5B,IAAMhB,EAAUvL,EAAU/B,KAAOlB,EAAES,KAAKS,GAClCuO,EAAYzP,EAAEkD,MAEpB,OACE/B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAAsByE,IAAKyJ,GACvCrO,EAAAC,EAAAC,cAACqO,GAAD,CAASxO,GAAIlB,EAAEkB,GAAIyN,SAAU3O,EAAEkG,UAAWuI,YAAazO,EAAES,KAAMH,QAASN,EAAEK,SAAUmO,QAASA,EAASD,SAAWkB,eAjBvG1N,aCCpB4N,oLAEKnH,GAAQ,IACPxH,EAAkBN,KAAKC,MAAMM,KAA7BD,cACJyH,EAAS,GAOb,OANKD,EAAOlI,UACVmI,EAAOnI,QAAUU,EAAc,CAACE,GAAI,6BAEjCsH,EAAOvI,wBACVwI,EAAOxI,sBAAwBe,EAAc,CAACE,GAAI,2CAE7CuH,mCAGA,IAAAlD,EAAA7E,KAAAsC,EAC0BtC,KAAKC,MAA9BgI,EADD3F,EACC2F,cAAevB,EADhBpE,EACgBoE,MACfpG,EAAkBN,KAAKC,MAAMM,KAA7BD,cACF4O,EAAY5O,EAAc,CAACE,GAAI,qCAC/B2O,EAAazI,EAAMC,KAAK8C,WACXhJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAYH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BAAgCsO,IAC7EzO,EAAAC,EAAAC,cAAA,KAAGyO,MAAM,8BAA8B7E,KAAK,gBAAgB2E,GAE/E,OACEzO,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEQ,cAAeA,EACfG,oBAAoB,EACpBC,SAAUrI,KAAKqI,SAAS9E,KAAKvD,MAC7BsI,SAAU,SAACR,EAADS,GAAqD,IAA1CC,EAA0CD,EAA1CC,cAA0BC,GAAgBF,EAA3BG,UAA2BH,EAAhBE,WAC3C5D,EAAK5E,MAAMqI,SAASR,GACpBU,GAAc,GACdC,KAGJE,OAAQ,SAAAC,GAAA,IAAGd,EAAHc,EAAGd,OAAQC,EAAXa,EAAWb,OAAQc,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAA5BF,EAA0CG,aAA1CH,EAAwDI,cAAxD,OACNvI,EAAAC,EAAAC,cAAA,QAAM2H,SAAUQ,GACdrI,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEjH,GAAI,UACDN,KAAK,UACLwH,UAAU,WACVuB,KAAK,OACLzB,YAAalH,EAAc,CAACE,GAAI,kCAChC0I,KAAK,IACLtI,UAAW,6BAEhBH,EAAAC,EAAAC,cAACwH,GAAA,EAAD,CAASjI,KAAI,iBAAA2B,OAAmBiG,EAAOtC,aACtCqD,EAAQjJ,SAAWmI,EAAOnI,SAAWa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBmH,EAAOnI,UAEjFa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACyI,GAAD,CAAoBlJ,KAAK,wBAAwBsH,YAAalH,EAAc,CAACE,GAAI,kDAChFqI,EAAQtJ,uBAAyBwI,EAAOxI,uBAAyBkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBmH,EAAOxI,wBAE5G4P,cArDW9N,aAoEXoF,qBANS,SAACC,EAAO2I,GAC9B,MAAO,CACL3I,UAIWD,CAAyBnF,YAAW2N,KC5D7CK,eACJ,SAAAA,EAAYrP,GAAO,IAAA4E,EAAA,OAAA0K,OAAAC,EAAA,EAAAD,CAAAvP,KAAAsP,IACjBzK,EAAA0K,OAAAE,EAAA,EAAAF,CAAAvP,KAAAuP,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA3P,KAAMC,KACD2P,IAAM/K,EAAK5E,MAAM2P,IAEtB/K,EAAK6B,MAAQ,CACXmJ,YAAa,GACbd,UAAW,IANIlK,oFAWjB,IAAMU,EAAcvF,KAAKC,MAAM2P,IAE/B5P,KAAKC,MAAMgH,gBAAgB,CAAE1B,2DAGZgE,GAAU,IACnBxJ,EAASC,KAAKC,MAAMyG,MAAMC,KAA1B5G,KACAyF,EAA8C+D,EAA9C/D,UAAWjG,EAAmCgK,EAAnChK,sBAAuBK,EAAY2J,EAAZ3J,QACpCkQ,EAAY9P,KAAKC,MAAMyG,MAAMrC,QAAQ0L,YAAYrQ,IAAI,SAACJ,GAAO,OAAOA,EAAEkB,KACtEoJ,EAAW,CACfvG,QAAStD,EAAKS,GACdgF,YACAjG,wBACAK,UACA2F,YAAavF,KAAK4P,IAClBI,8BAA+BhQ,KAAKb,oBAEpC8Q,aAAcH,GAEhB,OAAO9P,KAAKC,MAAMiQ,kBAAkBtG,sCAG3BqE,GAIT,GAA8B,SAFNjO,KAAK0G,MAArBmJ,YAEQ5B,GACd,MAAO,GAGT,IAAMhG,EAAgB,CACpBzC,UAAWyI,EACXrO,QAAS,GACTL,sBAAuB,IAEzB,OACEkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBC,MAAO,CAACsP,YAAe,SAEvD1P,EAAAC,EAAAC,cAACyP,GAAD,CAAaC,KAAI,eAAAxO,OAAiBoM,GAAY3F,SAAUtI,KAAKsQ,mBAAmB/M,KAAKvD,MAAOiI,cAAeA,0CAKpGgG,GAAU,IAEf4B,EAAgB7P,KAAK0G,MAArBmJ,YAEN,OAAIA,EAAY5B,IAAuC,SAA1B4B,EAAY5B,IACvC4B,EAAY5B,GAAY,aACxBjO,KAAKuQ,SAAS,CAACV,kBAGfA,EAAY5B,GAAY,YACxBjO,KAAKuQ,SAAS,CAACV,kDAKVlM,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM2D,eAAeD,sCAGxBA,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM4D,iBAAiBF,yCAGzBoM,EAAa5Q,GAAqB,IAAAqR,EAAAxQ,KACtCM,EAAkBN,KAAKC,MAAMM,KAA7BD,cACFiC,EAAYvC,KAAKC,MAAMyG,MAAMC,KAAK5G,KAGlC0Q,EAAkBxR,EAAoB8Q,EAAa5Q,EADrC,uBAKpB,OAH0BM,EAAsBgR,EAAiBtR,EAF7C,uBAKKO,IAAI,SAAAgR,GAAU,IA8BjCtL,EA5BIrF,EAAS2Q,EAAT3Q,KACAyC,EAAUkO,EAAVlO,MAoBFC,EAAW,CAAE6C,eAjBI,CACrBjC,QAASmN,EAAKvQ,MAAMyG,MAAMC,KAAK5G,KAAKS,GACpC+E,YAAa,KACbC,UAAWkL,EAAOlQ,GAClBiF,WAAY,KACZC,OAAQ,EAER2I,WAAYmC,EAAKvQ,MAAM2P,KAUWvK,IAlBxB,UAmBN3C,EAAa,CAAEiD,iBATI,CACvBtC,QAASmN,EAAKvQ,MAAMyG,MAAMC,KAAK5G,KAAKS,GACpC6E,IAAM,SAENO,QAAS8K,EAAOlQ,GAEhB6N,WAAYmC,EAAKvQ,MAAM2P,KAGevK,IAnB5B,UAqBNsL,EAAcH,EAAKI,WAAWF,EAAOlQ,IAEnCqQ,EAAwBH,EAAxBG,oBAIR,GADAzL,EAAa3E,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iCAAiCN,EAAc,CAACE,GAAI,sBAC5C,IAA/BqQ,EAAoBrR,OAAc,KAC5BO,EAAS8Q,EAAoB,GAA7B9Q,KACRqF,EAAa3E,EAAAC,EAAAC,cAACmF,EAAD,CAAY/F,KAAMA,IAGjC,OACEU,EAAAC,EAAAC,cAAA,MAAI0E,IAAKqL,EAAOlQ,IACdC,EAAAC,EAAAC,cAAA,WAASC,UAAU,cACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACbH,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAAC2N,WAAc,aACvB/N,EAAAC,EAAAC,cAACmQ,GAAApQ,EAAD,CAASqQ,WAAY,CAAE9F,OAAQ,WAAayF,EAAO/Q,UACnDc,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACwF,GAAD,CAEIpG,KAASA,EAETwC,UAAciO,EAAKvQ,MAAMyG,MAAMC,KAAK5G,KACpCyC,MAAUA,EACVC,SAAaA,EACbC,WAAeA,EACfC,SAAQ,iBAAAd,OAAqB6O,EAAOlQ,IACpCoC,cAAa,wBAAAf,OAA4B6O,EAAOlQ,IAChDqC,gBAAmB2N,EAAKpK,SAAS7C,KAAKiN,GACtC1N,kBAAqB0N,EAAK9O,WAAW6B,KAAKiN,GAC1CzN,WAAc,KAIpBtC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBqF,IAAMyK,EAAOjM,YAAYyB,OAAO,yBAG/DzF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0F,GAAD,CAAUtG,KAAO2Q,EAAO3Q,QAE1BU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXwE,KAIR3E,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAEbH,EAAAC,EAAAC,cAACqQ,GAAD,CAAarC,KAAM+B,EAAO1C,SAAUzL,UAAWA,EAAWpD,oBAAqBA,IAC/EsB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACbH,EAAAC,EAAAC,cAAA,KAAG2C,QAASkN,EAAKS,aAAa1N,KAAKiN,EAAKE,EAAOlQ,KAAKC,EAAAC,EAAAC,cAACsC,GAAA,EAAD,CAAiBC,KAAM,CAAC,MAAM,gBAAiBC,MAAM,QAAQC,KAAK,UAIzHuN,sCAOA,IAAAO,EAC6BlR,KAAKC,MAAMyG,MAAMrC,QAA7C8C,EADD+J,EACC/J,WAAY4I,EADbmB,EACanB,YACZzP,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,GAAI6G,EACF,OAAQ1G,EAAAC,EAAAC,cAACyG,EAAA,WAAD,MALH,IAQCjI,EAAwBa,KAAKC,MAA7Bd,oBACFgS,EAAanR,KAAKoR,cAAcrB,EAAa5Q,GAEnD,OAA0B,IAAtBgS,EAAW3R,OAEXiB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAmBN,EAAc,CAACE,GAAI,6BAMxDC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCACVuQ,WA5Ma9P,aAmNVC,eAAWgO,ICxMX7I,qBAhBS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACHI,gBAAiB,SAACtD,GAAD,OAAUkD,EAASyF,GAAgB3I,KACpDuM,kBAAmB,SAACvM,GAAD,OAAUkD,EAASyG,GAAY3J,KAElDC,eAAgB,SAACD,GAAD,OAAUkD,EAASpF,GAASkC,KAE5CE,iBAAkB,SAACF,GAAD,OAAUkD,EAASnF,GAAWiC,OAKzC8C,CAA6C6I,ICxBrD,SAAS+B,GAAcC,GAC5B,OAAQ/B,OAAOgC,KAAKD,GAAK9R,WCYrBgS,eACJ,SAAAA,EAAYvR,GAAO,IAAA4E,EAAA0K,OAAAC,EAAA,EAAAD,CAAAvP,KAAAwR,GACjB3M,EAAA0K,OAAAE,EAAA,EAAAF,CAAAvP,KAAAuP,OAAAG,EAAA,EAAAH,CAAAiC,GAAA7B,KAAA3P,KAAMC,IADW,IAEV8G,EAAU9G,EAAMwR,MAAhB1K,OAFU,OAGjBlC,EAAK+K,IAAM8B,SAAS3K,EAAOvG,GAAI,IAHdqE,oFAOjB7E,KAAKC,MAAM0R,gBAAgB3R,KAAK4P,0CAGrBrG,GACX,IAAI,IAEMxJ,EAASC,KAAKC,MAAMyG,MAAMC,KAA1B5G,KAEAH,EAAmC2J,EAAnC3J,QAASL,EAA0BgK,EAA1BhK,sBACXgG,EAAcvF,KAAK4P,IACnBvM,EAAUtD,EAAKS,GAErB,OAAOR,KAAKC,MAAM6I,aAAa,CAAClJ,UAAS2F,cAAalC,UAAS9D,0BAC/D,MAAOwE,GAEP,YADA8F,QAAQC,IAAI,IAAK/F,EAAEgG,wDAKD5E,EAAUhG,GAC9B,GAAIgG,EAAS5F,wBAA0BJ,EAErC,OADAgG,EAASxF,SAAWwF,EAASvF,QACtBuF,EAET,IAAMyM,EAAsBzM,EAASU,sBAAsBxG,OAAO,SAAA8F,GAEhE,OAAQA,EAAS5F,wBAA0BJ,IAC1C,GAGH,OADAgG,EAASxF,SAAWiS,EAAoBhS,QACjCuF,mCAGAxB,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM2D,eAAeD,sCAGxBA,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM4D,iBAAiBF,yCAGzBwK,EAAiB5L,GAAW,IAChCjC,EAAkBN,KAAKC,MAAMM,KAA7BD,cACA0F,EAAamI,EAAgB0D,QAA7B7L,SACR,GAAImI,EAAgBlM,aAAeM,EAAUN,WAAY,CACvD,IAAM6P,EAAOxR,EAAc,CAACE,GAAI,gCAC1BuJ,EAAUgI,kBAAQD,EAAMxR,EAAc,CAACE,GAAIwF,KACjD,OACEvF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBmJ,IAMnC,OACEtJ,EAAAC,EAAAC,cAACqR,GAAD,CAAYpC,IAAK5P,KAAK4P,IAAK3H,cAFF,CAAErI,QAAS,GAAIL,sBAAuB,IAED+I,SAAUtI,KAAK8I,aAAavF,KAAKvD,iDAIlFiS,GAAK,IAEd5R,GAAMC,EADcN,KAAKC,MAAMM,KAA7BD,eACkB,CAACE,GAAI,oBAE/B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CAA0CC,MAAO,CAACC,QAAS,WAAaT,GACvFI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mDAAmDK,IAAKgR,EAAK/Q,MAAM,KAAKC,OAAO,KAAKC,IAAI,wCAMtG,IACC+M,EAAoBnO,KAAKC,MAAMyG,MAAMM,UAArCmH,gBACAhP,EAAwBa,KAAKC,MAAMyG,MAAMnG,KAAzCpB,oBACAmB,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,GAAI+Q,GAAclD,GAChB,OACE1N,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyG,EAAA,WAAD,OAKN,IAsBIhC,EAtBE7C,EAAYvC,KAAKC,MAAMyG,MAAMC,KAAK5G,KAClCoF,EAAWnF,KAAKkS,sBAAsB/D,EAAiBhP,GACrDY,EAAgBoO,EAAhBpO,KAAMyC,EAAU2L,EAAV3L,MACR2P,EAAanS,KAAKoS,cAAcjE,EAAiB5L,GAEjD8C,EAAM,eAaN5C,EAAW,CAAE6C,eAZI,CACnBjC,QAASrD,KAAKC,MAAMyG,MAAMC,KAAK5G,KAAKS,GACpC+E,YAAa4I,EAAgB3N,GAC7BgF,UAAW,KACXC,WAAY,KACZC,OAAQ,GAOwBL,OAC9B3C,EAAa,CAAEiD,iBANI,CACrBtC,QAASrD,KAAKC,MAAMyG,MAAMC,KAAK5G,KAAKS,GACpC6E,IAAM,WACNO,QAASuI,EAAgB3N,IAGW6E,OAEhCQ,EAA0BV,EAA1BU,sBAGR,GADAT,EAAa3E,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iCAAiCN,EAAc,CAACE,GAAI,sBAC1C,IAAjCqF,EAAsBrG,OAAc,KAC9BO,EAAS8F,EAAsB,GAA/B9F,KACRqF,EAAa3E,EAAAC,EAAAC,cAACmF,EAAD,CAAY/F,KAAMA,IAGjC,OACEU,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4DACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAkBuE,EAASY,SAASA,UACjDtF,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAACmQ,GAAApQ,EAAD,CAASqQ,WAAY,CAAE9F,OAAQ,WAAa9F,EAASxF,UACrDc,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACwF,GAAD,CACEpG,KAASA,EACTwC,UAAcA,EACdC,MAAUA,EACVC,SAAaA,EACbC,WAAeA,EACfC,SAAQ,mBAAAd,OAAuB7B,KAAK4P,KACpChN,cAAa,0BAAAf,OAA8B7B,KAAK4P,KAChD/M,gBAAmB7C,KAAKoG,SAAS7C,KAAKvD,MACtC8C,kBAAqB9C,KAAK0B,WAAW6B,KAAKvD,MAC1C+C,WAAc,KAGlBtC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBqF,IAAMd,EAASV,YAAYyB,OAAO,wBAC/DzF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0F,GAAD,CAAUtG,KAAMA,KAElBU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACTwE,KAKV3E,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAkBH,EAAAC,EAAAC,cAAA,YAAOL,EAAc,CAACE,GAAI,yBAE1DC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXuR,GAEF1R,EAAAC,EAAAC,cAAC0R,GAAD,CAAYzC,IAAK5P,KAAK4P,IAAKzQ,oBAAqBA,IAClDsB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAEdH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,eA1KmBK,aAgLZC,eAAWkQ,IClKX/K,qBAdS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACH8K,gBAAiB,SAACnR,GAAD,OAAQqG,EAASrI,EAAcgC,KAChDsI,aAAc,SAACc,GAAD,OAAc/C,EAAS2F,GAAe5C,KACpD0I,aAAc,SAAC/M,GAAD,OAAiBsB,EAASyF,GAAgB/G,KACxD3B,eAAgB,SAACD,GAAD,OAAUkD,EAASpF,GAASkC,KAC5CE,iBAAkB,SAACF,GAAD,OAAUkD,EAASnF,GAAWiC,OAIzC8C,CAA6C+K,ICtBtDe,eACJ,SAAAA,EAAYtS,GAAO,IAAA4E,EAAA0K,OAAAC,EAAA,EAAAD,CAAAvP,KAAAuS,GACjB1N,EAAA0K,OAAAE,EAAA,EAAAF,CAAAvP,KAAAuP,OAAAG,EAAA,EAAAH,CAAAgD,GAAA5C,KAAA3P,KAAMC,IADW,IAET8G,EAAW9G,EAAMwR,MAAjB1K,OAFS,OAGjBlC,EAAK+K,IAAM8B,SAAS3K,EAAOvG,GAAI,IAHdqE,oFAOjBgF,QAAQC,IAAI,gBACZ9J,KAAKC,MAAM0R,gBAAgB3R,KAAK4P,kDAGbzB,GACnB,IAAMqE,EAAQrE,EAAgBpO,KACxBwC,EAAYvC,KAAKC,MAAMyG,MAAMC,KAAK5G,KAChC2J,EAAY1J,KAAKC,MAAjByJ,QACR,OAAI8I,EAAMhS,KAAO+B,EAAU/B,IAClBkJ,EAAQpF,KAAK,0CAKXiF,GACX,IAAI,IACM3J,EAA+C2J,EAA/C3J,QAASL,EAAsCgK,EAAtChK,sBAAuB0C,EAAesH,EAAftH,WAGlCwQ,EAAW,CAAE7S,UAAS2F,YAFRvF,KAAK4P,IAEgBrQ,wBAAuB0C,cAChE,OAAOjC,KAAKC,MAAM6I,aAAa2J,GAC/B,MAAO1O,GAEP,YADA8F,QAAQC,IAAI,IAAK/F,EAAEgG,mDAKNhG,GACf,IAAI,IACMhE,EAASC,KAAKC,MAAMyG,MAAMC,KAA1B5G,KACA2J,EAAY1J,KAAKC,MAAjByJ,QACF3C,EAAS,CACb1D,QAAStD,EAAKS,GACd+E,YAAavF,KAAK4P,IAClBlG,WAEF,OAAO1J,KAAKC,MAAMjB,eAAe+H,GACjC,MAAOhD,GACP,yCAIK,IACCoK,EAAoBnO,KAAKC,MAAMyG,MAAMM,UAArCmH,gBACA7N,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,GAA4B,IAAzB6N,EAAgB3O,OAInB,OAAI6R,GAAclD,GAEd1N,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyG,EAAA,WAAD,QAKNpH,KAAK0S,qBAAqBvE,GAGxB1N,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,UAAML,EAAc,CAACE,GAAI,0BACzBC,EAAAC,EAAAC,cAACiK,GAAD,CAAc3C,cAAekG,EAAiB7F,SAAUtI,KAAK8I,aAAavF,KAAKvD,QAC/ES,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,6BAA6B0C,QAAStD,KAAK2S,iBAAiBpP,KAAKvD,OAASM,EAAc,CAACE,GAAI,6BAClHC,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAMV,EAAc,CAACE,GAAI,qCAzEfa,aA+EZC,eAAWiR,IClEX9L,qBAZS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACL8K,gBAAiB,SAACnR,GAAD,OAAQqG,EAASrI,EAAcgC,KAChDsI,aAAc,SAACc,GAAD,OAAc/C,EAAS/H,EAAiB8K,KACtD5K,eAAgB,SAAC4T,GAAD,OAAgB/L,EAAS7H,EAAe4T,OAI7CnM,CAA6C8L,ICjB/CM,GAAgClV,OAAO,iCAGvCmV,GAAuBnV,OAAO,wBAE9BC,GAAiBD,OAAO,kBACxBE,GAAqBF,OAAO,sBAC5BwO,GAAkBxO,OAAO,mBACzBG,GAAeH,OAAO,gBACtBI,GAAuBJ,OAAO,wBAC9BK,GAA8BL,OAAO,+BACrCM,GAAsBN,OAAO,uBAK7BoV,IAH6BxU,YAAasU,IAGrBtU,YAAauU,KAKlCpU,IAHgBH,YAAaX,IACVW,YAAaV,IACfU,YAAa4N,IAChB5N,YAAaT,KAC3Ba,GAAqBJ,YAAaR,IAElCc,IAD2BN,YAAaP,IACpBO,YAAaN,KCpBxC+U,eAEJ,SAAAA,EAAY/S,GAAO,IAAA4E,EAAA,OAAA0K,OAAAC,EAAA,EAAAD,CAAAvP,KAAAgT,IACjBnO,EAAA0K,OAAAE,EAAA,EAAAF,CAAAvP,KAAAuP,OAAAG,EAAA,EAAAH,CAAAyD,GAAArD,KAAA3P,KAAMC,KAEDyG,MAAQ,CAACuM,WAAY,aAHTpO,mFAQjB,GAAyB,IADH7E,KAAKC,MAAMyG,MAAMwM,cAA/BlM,UACMxH,OAAd,CAIAQ,KAAKC,MAAMgH,gBADE,8CAKEkM,EAAUC,EAAK/N,GAAK,IAAAmL,EAAAxQ,KAGnC,OAAOmT,EAASzT,IAAI,SAACJ,GAAM,IACjBS,EAAST,EAATS,KACFmC,EAAWnC,EAAOA,EAAKG,KAAO,6CAC9BiC,EAAW,kBAAAN,OAAqB9B,EAAKS,IAErCA,EAAKgQ,EAAK6C,mBAAmB/T,EAAG+F,GAGtC,OAEE5E,EAAAC,EAAAC,cAAA,MAAI0E,IAAG,GAAAxD,OAAKwD,EAAL,KAAAxD,OAAYvC,EAAEkB,KAGnBC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iCACXH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAE,cAAAa,OAAgBrB,IAAxB,GAAAqB,OAAkCvC,EAAEM,UACpCa,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAE,GAAAa,OAAKuR,GAALvR,OAAWvC,EAAEkB,KAAMC,EAAAC,EAAAC,cAACsC,GAAA,EAAD,CAAiBC,KAAK,iBAAiBC,MAAM,YAAYC,KAAK,SAG3F3C,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBqF,IAAM3G,EAAEmF,YAAYyB,OAAO,wBAExDzF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAImB,GAAa1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCAAqCK,IAAKlB,EAAKI,WAAYe,MAAM,KAAKC,OAAO,KAAKC,IAAI,OAE9HX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oCAAmCH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMH,UAAU,GAAGI,GAAImB,GAAeD,oDAShF5C,EAAG+F,GACpB,OAAOA,GACL,IAAK,YACH,OAAO/F,EAAEkB,GACX,IAAK,UACH,OAAOlB,EAAEiG,YACX,IAAK,WACH,OAAOjG,EAAEoR,OAAOnL,+DAKI4N,GAGxB,OAAOnT,KAAKsT,iBAAiBH,EAFjB,0BACA,6DAGUA,GAGtB,OAAOnT,KAAKsT,iBAAiBH,EAFjB,wBACA,4DAGWA,GAIvB,OADAtJ,QAAQC,IAAI,WAAYqJ,GACjBnT,KAAKsT,iBAAiBH,EAHjB,yBACA,0DAMQI,EAAUN,GAAY,IAElCjM,EAAiCuM,EAAjCvM,UAAW3C,EAAsBkP,EAAtBlP,QAAS2J,EAAauF,EAAbvF,SAC5B,MAAmB,cAAfiF,EACKjT,KAAKwT,0BAA0BxM,GACd,YAAfiM,EACDjT,KAAKyT,wBAAwBpP,GACb,aAAf4O,EACFjT,KAAK0T,yBAAyB1F,QADhC,qCAKE2F,EAAW5P,GACpBA,EAAEkG,iBACFlG,EAAEmG,kBAEFlK,KAAKuQ,SAAS,CACZ0C,WAAYU,yCAIH,IAAAC,EAAA5T,KACHM,EAAkBN,KAAKC,MAAMM,KAA7BD,cACFuT,EAAU,CACd,CACE3T,KAAMI,EAAc,CAACE,GAAI,mBACzB6E,IAAK,aAEP,CACEnF,KAAMI,EAAc,CAACE,GAAI,iBACzB6E,IAAK,WAEP,CACEnF,KAAMI,EAAc,CAACE,GAAI,kBACzB6E,IAAK,aAIT,OACE5E,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACXiT,EAAQnU,IAAI,SAAAJ,GAEV,IAAMwU,EAASF,EAAKlN,MAAL,aAA6BpH,EAAE+F,IAC/B,YACA,GACf,OACE5E,EAAAC,EAAAC,cAAA,MAAI0E,IAAK/F,EAAE+F,IAAKzE,UAAWkT,EAAQxQ,QAASsQ,EAAKG,WAAWxQ,KAAKqQ,EAAMtU,EAAE+F,MACvE5E,EAAAC,EAAAC,cAAA,KAAG4J,KAAK,IAAIjL,EAAEY,uDAQNwG,GAKnB,GAHuBA,EAAMwM,cAArB/L,WAIN,OAAQ1G,EAAAC,EAAAC,cAACyG,EAAA,WAAD,MAGV,IAAM4M,EAAchU,KAAKiU,sBAAsBvN,EAAMwM,cAAelT,KAAK0G,MAAMuM,YAE/E,OACExS,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCACXoT,oCAKE,IACC1T,EAAkBN,KAAKC,MAAMM,KAA7BD,cACFV,EAAUI,KAAKkU,qBAAqBlU,KAAKC,MAAMyG,OAC/CyN,EAAUnU,KAAKoU,aAErB,OACE3T,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAkBH,EAAAC,EAAAC,cAAA,YAAOL,EAAc,CAACE,GAAI,iCAC1DC,EAAAC,EAAAC,cAAA,YAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACZuT,EACAvU,WA3KiByB,aAkLbC,eAAW0R,IC3KXvM,qBAVS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACHI,gBAAiB,SAACK,GAAD,OAAeT,EAASkM,GAAmBzL,OAIrDb,CAA6CuM,ICRtDqB,eACJ,SAAAA,EAAYpU,GAAO,IAAA4E,EAAA0K,OAAAC,EAAA,EAAAD,CAAAvP,KAAAqU,GACjBxP,EAAA0K,OAAAE,EAAA,EAAAF,CAAAvP,KAAAuP,OAAAG,EAAA,EAAAH,CAAA8E,GAAA1E,KAAA3P,KAAMC,IADW,IAET8G,EAAW9G,EAAMwR,MAAjB1K,OAFS,OAGjBlC,EAAKoJ,SAAWyD,SAAS3K,EAAOvG,GAAI,IAHnBqE,oFAOjB7E,KAAKC,MAAMqU,cAActU,KAAKiO,uDAGXsG,GACnB,IAAM/B,EAAQ+B,EAAcxU,KACtBwC,EAAYvC,KAAKC,MAAMyG,MAAMC,KAAK5G,KAChC2J,EAAY1J,KAAKC,MAAjByJ,QACR,OAAI8I,EAAMhS,KAAO+B,EAAU/B,IAClBkJ,EAAQpF,KAAK,0CAKXiF,GACX,IAAI,IACMgL,EAAkBvU,KAAKC,MAAMyG,MAAMrC,QAAnCkQ,cACA3U,EAA+C2J,EAA/C3J,QAASL,EAAsCgK,EAAtChK,sBAAuB0C,EAAesH,EAAftH,WAChCyH,EAAY1J,KAAKC,MAAjByJ,QAIF+I,EAAW,CAAE7S,UAAS4F,UAHVxF,KAAKiO,SAGgB1O,wBAAuB0C,aAAYyH,UAASnE,YAF3DgP,EAAhBhP,aAGR,OAAOvF,KAAKC,MAAM6I,aAAa2J,GAC/B,MAAO1O,GAEP,YADA8F,QAAQC,IAAI,IAAK/F,EAAEgG,mDAKNhG,GACf,IAAI,IACMhE,EAASC,KAAKC,MAAMyG,MAAMC,KAA1B5G,KACAwU,EAAkBvU,KAAKC,MAAMyG,MAAMrC,QAAnCkQ,cACA7K,EAAY1J,KAAKC,MAAjByJ,QACF3C,EAAS,CACb1D,QAAStD,EAAKS,GACdgF,UAAWxF,KAAKiO,SAChB1I,YAAagP,EAAchP,YAC3BmE,WAEF,OAAO1J,KAAKC,MAAMyM,aAAa3F,GAC/B,MAAOhD,GACP,yCAIK,IACCwQ,EAAkBvU,KAAKC,MAAMyG,MAAMrC,QAAnCkQ,cAER,OAAIlD,GAAckD,GAEd9T,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyG,EAAA,WAAD,QAKNpH,KAAK0S,qBAAqB6B,GAGxB9T,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,4CACAF,EAAAC,EAAAC,cAACqR,GAAD,CAAY/J,cAAesM,EAAejM,SAAUtI,KAAK8I,aAAavF,KAAKvD,QAC3ES,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,6BAA6B0C,QAAStD,KAAK2S,iBAAiBpP,KAAKvD,OAAnF,+CACHS,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,gBAxEiBK,aA8EVgT,MChEA5N,qBAZS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACLyN,cAAe,SAAC9T,GAAD,OAAQqG,EAAS0F,GAAY/L,KAC5CsI,aAAc,SAACc,GAAD,OAAc/C,EAAS4F,GAAe7C,KACpD8C,aAAc,SAAC3F,GAAD,OAAYF,EAAS6F,GAAa3F,OAIrCN,CAA6C4N,ICdtDG,eACJ,SAAAA,EAAYvU,GAAO,IAAA4E,EAAA0K,OAAAC,EAAA,EAAAD,CAAAvP,KAAAwU,GACjB3P,EAAA0K,OAAAE,EAAA,EAAAF,CAAAvP,KAAAuP,OAAAG,EAAA,EAAAH,CAAAiF,GAAA7E,KAAA3P,KAAMC,IADW,IAET8G,EAAW9G,EAAMwR,MAAjB1K,OAFS,OAGjBlC,EAAK4P,UAAY/C,SAAS3K,EAAOvG,GAAI,IAHpBqE,oFAOjB7E,KAAKC,MAAMyU,eAAe1U,KAAKyU,wDAGZE,GACnB,IAAMnC,EAAQmC,EAAe5U,KACvBwC,EAAYvC,KAAKC,MAAMyG,MAAMC,KAAK5G,KAChC2J,EAAY1J,KAAKC,MAAjByJ,QACR,OAAI8I,EAAMhS,KAAO+B,EAAU/B,IAClBkJ,EAAQpF,KAAK,0CAKXiF,GACX,IAAI,IACMoL,EAAmB3U,KAAKC,MAAMyG,MAAMsH,SAApC2G,eACA/U,EAAmC2J,EAAnC3J,QAASL,EAA0BgK,EAA1BhK,sBACTmK,EAAY1J,KAAKC,MAAjByJ,QAIF+I,EAAW,CAAE7S,UAAS6F,WAHTzF,KAAKyU,UAGgBlV,wBAAuBmK,UAASlE,UAFlDmP,EAAdnP,UAE2ED,YAD3DoP,EAAejE,OAA/BnL,aAER,OAAOvF,KAAKC,MAAM6I,aAAa2J,GAC/B,MAAO1O,GAEP,YADA8F,QAAQC,IAAI,IAAK/F,EAAEgG,mDAKNhG,GACf,IAAI,IACMhE,EAASC,KAAKC,MAAMyG,MAAMC,KAA1B5G,KAEAwF,EADmBvF,KAAKC,MAAMyG,MAAMsH,SAApC2G,eAC+BjE,OAA/BnL,YACAmE,EAAY1J,KAAKC,MAAjByJ,QACF3C,EAAS,CACb1D,QAAStD,EAAKS,GACdiF,WAAYzF,KAAKyU,UACjBlP,cACAmE,WAEF,OAAO1J,KAAKC,MAAMwN,cAAc1G,GAChC,MAAOhD,GACP,yCAIK,IACC4Q,EAAmB3U,KAAKC,MAAMyG,MAAMsH,SAApC2G,eAER,OAAItD,GAAcsD,GAEdlU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyG,EAAA,WAAD,QAKNpH,KAAK0S,qBAAqBiC,GAGxBlU,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,wDACAF,EAAAC,EAAAC,cAACyP,GAAD,CAAanI,cAAe0M,EAAgBrM,SAAUtI,KAAK8I,aAAavF,KAAKvD,QAC7ES,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,6BAA6B0C,QAAStD,KAAK2S,iBAAiBpP,KAAKvD,OAAnF,2DACHS,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,gBAzEkBK,aA+EXmT,MCjEA/N,qBAZS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACL6N,eAAgB,SAAClU,GAAD,OAAQqG,EAAS0G,GAAmB/M,KACpDsI,aAAc,SAACc,GAAD,OAAc/C,EAAS6G,GAAgB9D,KACrD6D,cAAe,SAAC1G,GAAD,OAAYF,EAAS4G,GAAc1G,OAIvCN,CAA6C+N,ICftDI,oLAEK9M,GAAQ,IACPxH,EAAkBN,KAAKC,MAAMM,KAA7BD,cACJyH,EAAS,GAOb,OANKD,EAAOlI,UACVmI,EAAOnI,QAAUU,EAAc,CAACE,GAAI,iCAEjCsH,EAAOvI,wBACVwI,EAAOxI,sBAAwBe,EAAc,CAACE,GAAI,+CAE7CuH,mCAGA,IAAAlD,EAAA7E,KACCM,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,OACEG,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEQ,cAAe,CACbrI,QAAS,GACTL,sBAAuB,IAEzB8I,SAAUrI,KAAKqI,SAAS9E,KAAKvD,MAC7BoI,oBAAoB,EACpBE,SAAU,SAACR,EAADS,GAAqD,IAA1CC,EAA0CD,EAA1CC,cAA0BC,GAAgBF,EAA3BG,UAA2BH,EAAhBE,WAC3C5D,EAAK5E,MAAMqI,SAASR,GACpBU,GAAc,GACdC,KAGJE,OAAQ,SAAAC,KAAGd,OAAH,IAAWC,EAAXa,EAAWb,OAAQc,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAA5BF,EAA0CG,aAA1CH,EAAwDI,cAAxD,OACNvI,EAAAC,EAAAC,cAAA,QAAM2H,SAAUQ,GACdrI,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEjH,GAAI,UACDN,KAAK,UACLwH,UAAU,WACVuB,KAAK,OACLzB,YAAalH,EAAc,CAACE,GAAI,sCAChC0I,KAAK,IACLtI,UAAW,8BAGjBiI,EAAQjJ,SAAWmI,EAAOnI,SAAWa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBmH,EAAOnI,SAC/Ea,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACyI,GAAD,CAAoBlJ,KAAK,wBAAwBsH,YAAalH,EAAc,CAACE,GAAI,sDAChFqI,EAAQtJ,uBAAyBwI,EAAOxI,uBAAyBkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBmH,EAAOxI,wBAG7GkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BAAgCN,EAAc,CAACE,GAAI,qCApD/Ca,aA8DvBC,eAAWsT,IChEbC,GAAkClX,OAAO,mCACzCmX,GAA6BnX,OAAO,8BACpCoX,GAAiCpX,OAAO,kCACxCwO,GAAkBxO,OAAO,mBACzBG,GAAeH,OAAO,gBACtBI,GAAuBJ,OAAO,wBAC9BK,GAA8BL,OAAO,+BACrCM,GAAsBN,OAAO,uBAC7BqX,GAAsCrX,OAAO,uCAC7CsX,GAAiCtX,OAAO,kCACxCuX,GAA8BvX,OAAO,+BAGrCwX,GAA+B5W,YAAasW,IAC5CO,GAA2B7W,YAAauW,IACxCO,GAA8B9W,YAAawW,IAE3CrW,IADiBH,YAAa4N,IAChB5N,YAAaT,KAC3Ba,GAAqBJ,YAAaR,IAClCa,GAA2BL,YAAaP,IACxCa,GAAoBN,YAAaN,IACjCqX,GAAmC/W,YAAayW,IAChDO,GAA8BhX,YAAa0W,IAC3CO,GAA4BjX,YAAa2W,ICvBzC3T,GAAY5D,OAAO,aACnB6D,GAAc7D,OAAO,eACrBG,GAAeH,OAAO,gBACtBI,GAAuBJ,OAAO,wBAC9BM,GAAsBN,OAAO,uBAG7B8D,GAAWlD,YAAagD,IACxBG,GAAanD,YAAaiD,IAC1B9C,GAAcH,YAAaT,IAE3Be,IADqBN,YAAaR,IACdQ,YAAaN,KCCxCwX,eACJ,SAAAA,EAAYxV,GAAO,IAAA4E,EAAA,OAAA0K,OAAAC,EAAA,EAAAD,CAAAvP,KAAAyV,IACjB5Q,EAAA0K,OAAAE,EAAA,EAAAF,CAAAvP,KAAAuP,OAAAG,EAAA,EAAAH,CAAAkG,GAAA9F,KAAA3P,KAAMC,KACD2P,IAAM/K,EAAK5E,MAAM2P,IAFL/K,oFAMjB7E,KAAKC,MAAMgH,gBAAgBjH,KAAK4P,sCAGzBjM,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM2D,eAAeD,sCAGxBA,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM4D,iBAAiBF,8CAGpB+R,EAAiBnT,GAAW,IAAAiO,EAAAxQ,KACnBA,KAAKC,MAAMM,KAA7BD,cAER,OAAOoV,EAAgBhW,IAAI,SAAAG,GAEzB,IAkBM4C,EAAW,CAAE6C,eAjBI,CACnBjC,QAASmN,EAAKvQ,MAAMF,KAAKS,GACzBmV,wBAAyB9V,EAAYW,GACrCoV,sBAAuB,KACvBC,2BAA4B,KAC5BnQ,OAAQ,EAER2I,WAAYxO,EAAY0F,aAUQF,IAlBxB,YAmBN3C,EAAa,CAAEiD,iBATI,CACrBtC,QAASmN,EAAKvQ,MAAMF,KAAKS,GACzB6E,IAAM,WAENO,QAAS/F,EAAYW,GAErB6N,WAAYxO,EAAY0F,aAGYF,IAnB5B,YAqBZ,OACE5E,EAAAC,EAAAC,cAAA,MAAI0E,IAAKxF,EAAYW,IACnBC,EAAAC,EAAAC,cAAA,WAASC,UAAU,cACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACbH,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAAC2N,WAAc,aACvB/N,EAAAC,EAAAC,cAACmQ,GAAApQ,EAAD,CAASqQ,WAAY,CAAE9F,OAAQ,WAAapL,EAAYD,SACxDa,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACwF,GAAD,CAEIpG,KAASF,EAAYE,KAErBwC,UAAcA,EACdC,MAAU3C,EAAYiW,kBACtBrT,SAAaA,EACbC,WAAeA,EACfC,SAAQ,+BAAAd,OAAmChC,EAAYW,IAEvDqC,gBAAmB2N,EAAKpK,SAAS7C,KAAKiN,GACtC1N,kBAAqB0N,EAAK9O,WAAW6B,KAAKiN,GAC1CzN,WAAc,KAGpBtC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBqF,IAAMpG,EAAY4E,YAAYyB,OAAO,yBAGpEzF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0F,GAAD,CAAUtG,KAAOF,EAAYE,8CASlC,IAAAmH,EACwClH,KAAKC,MAAMyG,MAAMqP,qBAAxD5O,EADDD,EACCC,WAAY6O,EADb9O,EACa8O,uBACdzT,EAAYvC,KAAKC,MAAMyG,MAAMC,KAAK5G,KAExC,GAAIoH,EACF,OAAQ1G,EAAAC,EAAAC,cAACyG,EAAA,WAAD,MAGV,IAAMsO,EAAkB1V,KAAKiW,mBAAmBD,EAAwBzT,GAExE,OACE9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCACX8U,WApG2BrU,aA4HvBoF,qBAhBS,SAAAC,GAEtB,MAAO,CACL3G,KAFe2G,EAAMC,KAAf5G,OAMiB,SAAA8G,GACzB,MAAO,CAEHjD,eAAgB,SAACD,GAAD,OAAUkD,EAASpF,GAASkC,KAC5CE,iBAAkB,SAACF,GAAD,OAAUkD,EAASnF,GAAWiC,OAKvC8C,CAA6CnF,YAAWmU,KC7HxDhP,qBAVS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACHI,gBAAiB,SAAC1B,GAAD,OAAiBsB,EAASsO,GAA6B5P,OAIjEkB,CAA6CgP,ICOtDS,eACJ,SAAAA,EAAYjW,GAAO,IAAA4E,EAAA0K,OAAAC,EAAA,EAAAD,CAAAvP,KAAAkW,GACjBrR,EAAA0K,OAAAE,EAAA,EAAAF,CAAAvP,KAAAuP,OAAAG,EAAA,EAAAH,CAAA2G,GAAAvG,KAAA3P,KAAMC,IADW,IAEV8G,EAAU9G,EAAMwR,MAAhB1K,OAFU,OAGjBlC,EAAK+K,IAAM8B,SAAS3K,EAAOxB,YAAa,IAHvBV,oFAOjB7E,KAAKC,MAAM0R,gBAAgB3R,KAAK4P,0CAGrBrG,GACX,IAAI,IACM3J,EAAmC2J,EAAnC3J,QAASL,EAA0BgK,EAA1BhK,sBACjB,GAAgB,KAAZK,EACF,MAAM,IAAIuW,MAAM,kFAHhB,IAKMpW,EAASC,KAAKC,MAAMyG,MAAMC,KAA1B5G,KACFwF,EAAcvF,KAAK4P,IACnBvM,EAAUtD,EAAKS,GACrB,OAAOR,KAAKC,MAAM6I,aAAa,CAAClJ,UAAS2F,cAAalC,UAAS9D,0BAC/D,MAAOwE,GAEP,YADA8F,QAAQC,IAAI,IAAK/F,EAAEgG,2CAKd,IACCzJ,EAAkBN,KAAKC,MAAMM,KAA7BD,cACA6N,EAAoBnO,KAAKC,MAAMyG,MAAMM,UAArCmH,gBACR,GAAIkD,GAAclD,GAChB,OACE1N,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyG,EAAA,WAAD,OANC,IAWCrH,EAASoO,EAATpO,KAER,OACEU,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4DACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACmQ,GAAApQ,EAAD,CAASqQ,WAAY,CAAE9F,OAAQ,WAAakD,EAAgBvO,UAC/Da,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBqF,IAAMkI,EAAgB1J,YAAYyB,OAAO,wBACtEzF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0F,GAAD,CAAUtG,KAAMA,OAItBU,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAkBH,EAAAC,EAAAC,cAAA,YAAOL,EAAc,CAACE,GAAI,8BAC1DC,EAAAC,EAAAC,cAACyV,GAAD,CAAyBxG,IAAK5P,KAAK4P,IAAKtH,SAAUtI,KAAK8I,aAAavF,KAAKvD,QACzES,EAAAC,EAAAC,cAAC0V,GAAD,CAAyBzG,IAAK5P,KAAK4P,MACnCnP,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBACdH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,eAvD8BK,aAyEvBoF,qBAZS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACL8K,gBAAiB,SAACnR,GAAD,OAAQqG,EAASrI,EAAcgC,KAChD8R,aAAc,SAAC/M,GAAD,OAAiBsB,EAASyF,GAAgB/G,KACxDuD,aAAc,SAACc,GAAD,OAAc/C,EAASwO,GAA4BzL,OAItDnD,CAA6CnF,YAAW4U,KC1FjEI,oLAEKxO,GACP,IAAIC,EAAS,GAOb,OANKD,EAAOlI,UACVmI,EAAOnI,QAAU,4EAEdkI,EAAOvI,wBACVwI,EAAOxI,sBAAwB,kFAE1BwI,mCAGA,IAAAlD,EAAA7E,KACCiI,EAAkBjI,KAAKC,MAAvBgI,cACR,OACExH,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEQ,cAAeA,EACfG,oBAAoB,EACpBC,SAAUrI,KAAKqI,SACfC,SAAU,SAACR,EAADS,GAAqD,IAA1CC,EAA0CD,EAA1CC,cAA0BC,GAAgBF,EAA3BG,UAA2BH,EAAhBE,WAC3C5D,EAAK5E,MAAMqI,SAASR,GACpBU,GAAc,GACdC,KAGJE,OAAQ,SAAAC,KAAGd,OAAH,IAAWC,EAAXa,EAAWb,OAAQc,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAA5BF,EAA0CG,aAA1CH,EAAwDI,cAAxD,OACNvI,EAAAC,EAAAC,cAAA,QAAM2H,SAAUQ,GACdrI,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEjH,GAAI,UACDN,KAAK,UACLwH,UAAU,WACVuB,KAAK,OACLzB,YAAY,2EACZ0B,KAAK,IACLtI,UAAW,6BAEfiI,EAAQjJ,SAAWmI,EAAOnI,SAAWa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBmH,EAAOnI,UAEjFa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2DACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACyI,GAAD,CAAoBlJ,KAAK,wBAAwBsH,YAAY,6BAC5DqB,EAAQtJ,uBAAyBwI,EAAOxI,uBAAyBkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBmH,EAAOxI,yBAG/GkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BAAlB,6BAhDcS,aA0DfiV,MCxDTC,gMAEiBC,EAAoBjU,GACvC,IAAMiQ,EAAQgE,EAAmBzW,KACzB2J,EAAY1J,KAAKC,MAAjByJ,QACR,OAAI8I,EAAMhS,KAAO+B,EAAU/B,IAClBkJ,EAAQpF,KAAK,sCAKf,IAAAhC,EACmEtC,KAAKC,MAAvEuW,EADDlU,EACCkU,mBAAoB1N,EADrBxG,EACqBwG,aAAc6J,EADnCrQ,EACmCqQ,iBAAkBpQ,EADrDD,EACqDC,UAE5D,OAAI8O,GAAcmF,GAEd/V,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyG,EAAA,WAAD,QAKNpH,KAAK0S,qBAAqB8D,EAAoBjU,GAG5C9B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,4CACAF,EAAAC,EAAAC,cAAC8V,GAAD,CAAiBxO,cAAeuO,EAAoBlO,SAAUQ,IAC9DrI,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,6BAA6B0C,QAASqP,GAAxD,+CACHlS,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,gBA7BsBK,aAmCfkV,MCpCTG,eACJ,SAAAA,EAAYzW,GAAO,IAAA4E,EAAA0K,OAAAC,EAAA,EAAAD,CAAAvP,KAAA0W,GACjB7R,EAAA0K,OAAAE,EAAA,EAAAF,CAAAvP,KAAAuP,OAAAG,EAAA,EAAAH,CAAAmH,GAAA/G,KAAA3P,KAAMC,IADW,IAET8G,EAAW9G,EAAMwR,MAAjB1K,OAFS,OAGjBlC,EAAK8R,KAAOjF,SAAS3K,EAAOvG,GAAI,IAHfqE,oFAOjB7E,KAAKC,MAAM2W,2BAA2B5W,KAAK2W,2CAGhCpN,GACX,IAAI,IACM3J,EAA+C2J,EAA/C3J,QAASL,EAAsCgK,EAAtChK,sBAAuB0C,EAAesH,EAAftH,WAGlCwQ,EAAW,CAAE7S,UAASY,GAFjBR,KAAK2W,KAEgBpX,wBAAuB0C,cACvD,OAAOjC,KAAKC,MAAM6I,aAAa2J,GAC/B,MAAO1O,GAEP,YADA8F,QAAQC,IAAI,IAAK/F,EAAEgG,mDAKNhG,GACf,IAAI,IACMhE,EAASC,KAAKC,MAAMyG,MAAMC,KAA1B5G,KACA2J,EAAY1J,KAAKC,MAAjByJ,QACF3C,EAAS,CACb1D,QAAStD,EAAKS,GACdA,GAAIR,KAAK2W,KACTjN,WAEF,OAAO1J,KAAKC,MAAMuV,0BAA0BzO,GAC5C,MAAOhD,GACP,yCAIK,IACCyS,EAAuBxW,KAAKC,MAAMyG,MAAMqP,qBAAxCS,mBACFjU,EAAYvC,KAAKC,MAAMyG,MAAMC,KAAK5G,KAExC,OACEU,EAAAC,EAAAC,cAACkW,GAAD,CACEL,mBAAoBA,EACpB1N,aAAc9I,KAAK8I,aAAavF,KAAKvD,MACrC2S,iBAAkB3S,KAAK2S,iBAAiBpP,KAAKvD,MAC7CuC,UAAWA,WAhDmBlB,aAsDvBqV,MCvCAjQ,qBAZS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACL+P,2BAA4B,SAACpW,GAAD,OAAQqG,EAASuO,GAAyB5U,KACtEsI,aAAc,SAACc,GAAD,OAAc/C,EAAS0O,GAA4B3L,KACjE4L,0BAA2B,SAAC5C,GAAD,OAAgB/L,EAAS2O,GAA0B5C,OAInEnM,CAA6CiQ,ICftDI,oLAEKhP,GAAQ,IACPxH,EAAkBN,KAAKC,MAAMM,KAA7BD,cACJyH,EAAS,GAOb,OANKD,EAAOlI,UACVmI,EAAOnI,QAAUU,EAAc,CAACE,GAAI,iCAEjCsH,EAAOvI,wBACVwI,EAAOxI,sBAAwBe,EAAc,CAACE,GAAI,+CAE7CuH,mCAGA,IAAAlD,EAAA7E,KACCM,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,OACEG,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEQ,cAAe,CACbrI,QAAS,GACTL,sBAAuB,IAEzB8I,SAAUrI,KAAKqI,SAAS9E,KAAKvD,MAC7BoI,oBAAoB,EACpBE,SAAU,SAACR,EAADS,GAAqD,IAA1CC,EAA0CD,EAA1CC,cAA0BC,GAAgBF,EAA3BG,UAA2BH,EAAhBE,WAC3C5D,EAAK5E,MAAMqI,SAASR,GACpBU,GAAc,GACdC,KAGJE,OAAQ,SAAAC,KAAGd,OAAH,IAAWC,EAAXa,EAAWb,OAAQc,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAA5BF,EAA0CG,aAA1CH,EAAwDI,cAAxD,OACNvI,EAAAC,EAAAC,cAAA,QAAM2H,SAAUQ,GACdrI,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEjH,GAAI,UACDN,KAAK,UACLwH,UAAU,WACVuB,KAAK,OACLzB,YAAalH,EAAc,CAACE,GAAI,sCAChC0I,KAAK,IACLtI,UAAW,8BAGjBiI,EAAQjJ,SAAWmI,EAAOnI,SAAWa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBmH,EAAOnI,SAC/Ea,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACyI,GAAD,CAAoBlJ,KAAK,wBAAwBsH,YAAalH,EAAc,CAACE,GAAI,sDAChFqI,EAAQtJ,uBAAyBwI,EAAOxI,uBAAyBkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBmH,EAAOxI,wBAG7GkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BAAgCN,EAAc,CAACE,GAAI,qCApDjDa,aA8DrBC,eAAWwV,IChEbC,GAAgCpZ,OAAO,iCACvCqZ,GAA2BrZ,OAAO,4BAClCsZ,GAA+BtZ,OAAO,gCACtCuZ,GAA+BvZ,OAAO,gCACtCwZ,GAA4BxZ,OAAO,6BACnCG,GAAeH,OAAO,gBACtBI,GAAuBJ,OAAO,wBAC9BK,GAA8BL,OAAO,+BACrCM,GAAsBN,OAAO,uBAC7ByZ,GAAoCzZ,OAAO,qCAE3C0Z,GAA6B9Y,YAAawY,IAC1CO,GAAyB/Y,YAAayY,IACtCO,GAA4BhZ,YAAa0Y,IACzCO,GAA4BjZ,YAAa2Y,IACzCO,GAA0BlZ,YAAa4Y,IACvCzY,GAAcH,YAAaT,IAC3Ba,GAAqBJ,YAAaR,IAClCa,GAA2BL,YAAaP,IACxCa,GAAoBN,YAAaN,IACjCyZ,GAAiCnZ,YAAa6Y,ICVrDO,eACJ,SAAAA,EAAY1X,GAAO,IAAA4E,EAAA,OAAA0K,OAAAC,EAAA,EAAAD,CAAAvP,KAAA2X,IACjB9S,EAAA0K,OAAAE,EAAA,EAAAF,CAAAvP,KAAAuP,OAAAG,EAAA,EAAAH,CAAAoI,GAAAhI,KAAA3P,KAAMC,KACD2X,IAAM/S,EAAK5E,MAAM2X,IAFL/S,oFAMjB7E,KAAKC,MAAMgH,gBAAgBjH,KAAK4X,sCAGzBjU,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM2D,eAAeD,sCAGxBA,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM4D,iBAAiBF,8CAGpB+R,EAAiBnT,GAAW,IAAAiO,EAAAxQ,KACnBA,KAAKC,MAAMM,KAA7BD,cAER,OACEG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCACX8U,EAAgBhW,IAAI,SAAAG,GAEnB,IAkBM4C,EAAW,CAAE6C,eAjBI,CACnBjC,QAASmN,EAAKvQ,MAAMF,KAAKS,GACzBmV,wBAAyB,KACzBC,sBAAuB/V,EAAYW,GACnCqV,2BAA4B,KAC5BnQ,OAAQ,EAERuI,SAAUpO,EAAY2F,WAUUH,IAlBxB,UAmBN3C,EAAa,CAAEiD,iBATI,CACrBtC,QAASmN,EAAKvQ,MAAMF,KAAKS,GACzB6E,IAAM,SAENO,QAAS/F,EAAYW,GAErByN,SAAUpO,EAAY2F,WAGcH,IAnB5B,UAqBX,OACE5E,EAAAC,EAAAC,cAAA,MAAI0E,IAAKxF,EAAYW,IACnBC,EAAAC,EAAAC,cAAA,WAASC,UAAU,cACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACbH,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAAC2N,WAAc,aACvB/N,EAAAC,EAAAC,cAACmQ,GAAApQ,EAAD,CAASqQ,WAAY,CAAE9F,OAAQ,WAAapL,EAAYD,SACxDa,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACwF,GAAD,CAEGpG,KAASF,EAAYE,KAErBwC,UAAcA,EACdC,MAAU3C,EAAYiW,kBACtBrT,SAAaA,EACbC,WAAeA,EACfC,SAAQ,6BAAAd,OAAiChC,EAAYW,IAErDqC,gBAAmB2N,EAAKpK,SAAS7C,KAAKiN,GACtC1N,kBAAqB0N,EAAK9O,WAAW6B,KAAKiN,GAC1CzN,WAAc,KAInBtC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBqF,IAAMpG,EAAY4E,YAAYyB,OAAO,yBAEpEzF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0F,GAAD,CAAUtG,KAAOF,EAAYE,8CAWrC,IAAAmR,EACwClR,KAAKC,MAAMyG,MAAMmR,mBAAxD1Q,EADD+J,EACC/J,WAAY6O,EADb9E,EACa8E,uBACdzT,EAAYvC,KAAKC,MAAMyG,MAAMC,KAAK5G,KAExC,GAAIoH,EACF,OAAQ1G,EAAAC,EAAAC,cAACyG,EAAA,WAAD,MAEV,IAAMxH,EAAUI,KAAKiW,mBAAmBD,EAAwBzT,GAChE,OACE9B,EAAAC,EAAAC,cAAA,WACGf,UApG2ByB,aA2HrBoF,qBAhBS,SAAAC,GAEtB,MAAO,CACL3G,KAFe2G,EAAMC,KAAf5G,OAMiB,SAAA8G,GACzB,MAAO,CAEHjD,eAAgB,SAACD,GAAD,OAAUkD,EAASpF,GAASkC,KAC5CE,iBAAkB,SAACF,GAAD,OAAUkD,EAASnF,GAAWiC,OAKvC8C,CAA6CnF,YAAWqW,KC1HxDlR,qBAVS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACHI,gBAAiB,SAACzB,GAAD,OAAeqB,EAASwQ,GAA2B7R,OAI7DiB,CAA6CkR,ICKtDG,eACJ,SAAAA,EAAY7X,GAAO,IAAA4E,EAAA0K,OAAAC,EAAA,EAAAD,CAAAvP,KAAA8X,GACjBjT,EAAA0K,OAAAE,EAAA,EAAAF,CAAAvP,KAAAuP,OAAAG,EAAA,EAAAH,CAAAuI,GAAAnI,KAAA3P,KAAMC,IADW,IAEV8G,EAAU9G,EAAMwR,MAAhB1K,OAFU,OAGjBlC,EAAK+S,IAAMlG,SAAS3K,EAAOvB,UAAW,IAHrBX,oFAOjB7E,KAAKC,MAAMqU,cAActU,KAAK4X,0CAGnBrO,GACX,IAAI,IACM3J,EAAmC2J,EAAnC3J,QAASL,EAA0BgK,EAA1BhK,sBACjB,GAAgB,KAAZK,EAAgB,CAElB,MAAM,IAAIuW,MADE,kFAHZ,IAMMpW,EAASC,KAAKC,MAAMyG,MAAMC,KAA1B5G,KACFyF,EAAYxF,KAAK4X,IACjBvU,EAAUtD,EAAKS,GACrB,OAAOR,KAAKC,MAAM6I,aAAa,CAAClJ,UAAS4F,YAAWnC,UAAS9D,0BAC7D,MAAOwE,GAEP,YADA8F,QAAQC,IAAI,IAAK/F,EAAEgG,2CAKd,IACCzJ,EAAkBN,KAAKC,MAAMM,KAA7BD,cACAiU,EAAkBvU,KAAKC,MAAMyG,MAAMrC,QAAnCkQ,cACR,GAAIlD,GAAckD,GAChB,OACE9T,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyG,EAAA,WAAD,OAKN,IAAMrH,EAAQwU,EAAcxU,KAAQwU,EAAcxU,KAAO,KAEjDwF,GADUxF,GAAQA,EAAKG,KACPqU,EAAhBhP,aAER,OACE9E,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4DACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACmQ,GAAApQ,EAAD,CAASqQ,WAAY,CAAE9F,OAAQ,WAAasJ,EAAc3U,UAC7Da,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBqF,IAAMsO,EAAc9P,YAAYyB,OAAO,wBACpEzF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0F,GAAD,CAAUtG,KAAMA,OAKtBU,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAkBH,EAAAC,EAAAC,cAAA,YAAOL,EAAc,CAACE,GAAI,8BAC1DC,EAAAC,EAAAC,cAACoX,GAAD,CAAuBH,IAAK5X,KAAK4X,IAAKtP,SAAUtI,KAAK8I,aAAavF,KAAKvD,QACvES,EAAAC,EAAAC,cAACqX,GAAD,CAAuBJ,IAAK5X,KAAK4X,MACjCnX,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBACdH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAE,cAAAa,OAAgB0D,IAAgBjF,EAAc,CAACE,GAAI,6BAC9DC,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,gBA5DyBK,aA8ErBoF,qBAZS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACLyN,cAAe,SAAC9T,GAAD,OAAQqG,EAAS0F,GAAY/L,KAC5C8R,aAAc,SAAC/M,GAAD,OAAiBsB,EAASyF,GAAgB/G,KACxDuD,aAAc,SAACc,GAAD,OAAc/C,EAAS0Q,GAA0B3N,OAIpDnD,CAA6CnF,YAAWwW,KCtCxDG,eArDb,SAAAA,EAAYhY,GAAO,IAAA4E,EAAA0K,OAAAC,EAAA,EAAAD,CAAAvP,KAAAiY,GACjBpT,EAAA0K,OAAAE,EAAA,EAAAF,CAAAvP,KAAAuP,OAAAG,EAAA,EAAAH,CAAA0I,GAAAtI,KAAA3P,KAAMC,IADW,IAET8G,EAAW9G,EAAMwR,MAAjB1K,OAFS,OAGjBlC,EAAKqT,KAAOxG,SAAS3K,EAAOvG,GAAI,IAHfqE,oFAOjB7E,KAAKC,MAAMkY,yBAAyBnY,KAAKkY,2CAG9B3O,GACX,IAAI,IACM3J,EAA+C2J,EAA/C3J,QAASL,EAAsCgK,EAAtChK,sBAAuB0C,EAAesH,EAAftH,WAGlCwQ,EAAW,CAAE7S,UAASY,GAFjBR,KAAKkY,KAEgB3Y,wBAAuB0C,cACvD,OAAOjC,KAAKC,MAAM6I,aAAa2J,GAC/B,MAAO1O,GAEP,YADA8F,QAAQC,IAAI,IAAK/F,EAAEgG,mDAKNhG,GACf,IAAI,IACMhE,EAASC,KAAKC,MAAMyG,MAAMC,KAA1B5G,KACA2J,EAAY1J,KAAKC,MAAjByJ,QACF3C,EAAS,CACb1D,QAAStD,EAAKS,GACdA,GAAIR,KAAKkY,KACTxO,WAEF,OAAO1J,KAAKC,MAAMwX,wBAAwB1Q,GAC1C,MAAOhD,GACP,yCAIK,IACCyS,EAAuBxW,KAAKC,MAAMyG,MAAMmR,mBAAxCrB,mBACFjU,EAAYvC,KAAKC,MAAMyG,MAAMC,KAAK5G,KAExC,OACEU,EAAAC,EAAAC,cAACkW,GAAD,CACEL,mBAAoBA,EACpB1N,aAAc9I,KAAK8I,aAAavF,KAAKvD,MACrC2S,iBAAkB3S,KAAK2S,iBAAiBpP,KAAKvD,MAC7CuC,UAAWA,WAhDiBlB,aCerBoF,qBAZS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACLsR,yBAA0B,SAAC3X,GAAD,OAAQqG,EAASyQ,GAAuB9W,KAClEsI,aAAc,SAACc,GAAD,OAAc/C,EAAS2Q,GAA0B5N,KAC/D6N,wBAAyB,SAAC7E,GAAD,OAAgB/L,EAAS4Q,GAAwB7E,OAI/DnM,CAA6CwR,ICftDG,oLAEKtQ,GAAQ,IACPxH,EAAkBN,KAAKC,MAAMM,KAA7BD,cACJyH,EAAS,GAOb,OANKD,EAAOlI,UACVmI,EAAOnI,QAAUU,EAAc,CAACE,GAAI,iCAEjCsH,EAAOvI,wBACVwI,EAAOxI,sBAAwBe,EAAc,CAACE,GAAI,+CAE7CuH,mCAGA,IAAAlD,EAAA7E,KACCM,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,OACEG,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEQ,cAAe,CACbrI,QAAS,GACTL,sBAAuB,IAEzB8I,SAAUrI,KAAKqI,SAAS9E,KAAKvD,MAC7BoI,oBAAoB,EACpBE,SAAU,SAACR,EAADS,GAAqD,IAA1CC,EAA0CD,EAA1CC,cAA0BC,GAAgBF,EAA3BG,UAA2BH,EAAhBE,WAC3C5D,EAAK5E,MAAMqI,SAASR,GACpBU,GAAc,GACdC,KAGJE,OAAQ,SAAAC,KAAGd,OAAH,IAAWC,EAAXa,EAAWb,OAAQc,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAA5BF,EAA0CG,aAA1CH,EAAwDI,cAAxD,OACNvI,EAAAC,EAAAC,cAAA,QAAM2H,SAAUQ,GACdrI,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEjH,GAAI,UACDN,KAAK,UACLwH,UAAU,WACVuB,KAAK,OACLzB,YAAalH,EAAc,CAACE,GAAI,sCAChC0I,KAAK,IACLtI,UAAW,8BAGjBiI,EAAQjJ,SAAWmI,EAAOnI,SAAWa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBmH,EAAOnI,SAC/Ea,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACyI,GAAD,CAAoBlJ,KAAK,wBAAwBsH,YAAalH,EAAc,CAACE,GAAI,sDAChFqI,EAAQtJ,uBAAyBwI,EAAOxI,uBAAyBkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBmH,EAAOxI,wBAG7GkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BAAgCN,EAAc,CAACE,GAAI,qCApDhDa,aA8DtBC,eAAW8W,IChEbC,GAAiC1a,OAAO,kCACxC2a,GAA4B3a,OAAO,6BACnC4a,GAAgC5a,OAAO,iCACvC6a,GAAgC7a,OAAO,iCACvC8a,GAA6B9a,OAAO,8BACpCG,GAAeH,OAAO,gBACtBI,GAAuBJ,OAAO,wBAC9BK,GAA8BL,OAAO,+BACrCM,GAAsBN,OAAO,uBAC7B+a,GAAqC/a,OAAO,sCAG5Cgb,GAA8Bpa,YAAa8Z,IAC3CO,GAA0Bra,YAAa+Z,IACvCO,GAA6Bta,YAAaga,IAC1CO,GAA6Bva,YAAaia,IAC1CO,GAA2Bxa,YAAaka,IACxC/Z,GAAcH,YAAaT,IAC3Ba,GAAqBJ,YAAaR,IAClCa,GAA2BL,YAAaP,IACxCa,GAAoBN,YAAaN,IACjC+a,GAAkCza,YAAama,ICXtDO,eACJ,SAAAA,EAAYhZ,GAAO,IAAA4E,EAAA,OAAA0K,OAAAC,EAAA,EAAAD,CAAAvP,KAAAiZ,IACjBpU,EAAA0K,OAAAE,EAAA,EAAAF,CAAAvP,KAAAuP,OAAAG,EAAA,EAAAH,CAAA0J,GAAAtJ,KAAA3P,KAAMC,KACDwU,UAAY5P,EAAK5E,MAAMwU,UAFX5P,oFAMjB7E,KAAKC,MAAMgH,gBAAgBjH,KAAKyU,4CAGzB9Q,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM2D,eAAeD,sCAGxBA,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM4D,iBAAiBF,8CAGpB+R,EAAiBnT,GAAW,IAAAiO,EAAAxQ,KACnBA,KAAKC,MAAMM,KAA7BD,cAER,OACEG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCACX8U,EAAgBhW,IAAI,SAAAG,GACjB,IAkBM4C,EAAW,CAAE6C,eAjBI,CACnBjC,QAASmN,EAAKvQ,MAAMF,KAAKS,GACzBmV,wBAAyB,KACzBC,sBAAuB,KACvBsD,uBAAwBrZ,EAAYW,GACpCkF,OAAQ,EAER+O,UAAW5U,EAAY4F,YAUSJ,IAlBxB,WAmBN3C,EAAa,CAAEiD,iBATI,CACrBtC,QAASmN,EAAKvQ,MAAMF,KAAKS,GACzB6E,IAAM,UAENO,QAAS/F,EAAYW,GAErBiU,UAAW5U,EAAY4F,YAGaJ,IAnB5B,WAqBb,OACE5E,EAAAC,EAAAC,cAAA,MAAI0E,IAAKxF,EAAYW,IACnBC,EAAAC,EAAAC,cAAA,WAASC,UAAU,cACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACbH,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAAC2N,WAAc,aACvB/N,EAAAC,EAAAC,cAACmQ,GAAApQ,EAAD,CAASqQ,WAAY,CAAE9F,OAAQ,WAAapL,EAAYD,SAD1D,IAEEa,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACwF,GAAD,CAEGpG,KAASF,EAAYE,KAErBwC,UAAcA,EACdC,MAAU3C,EAAYiW,kBACtBrT,SAAaA,EACbC,WAAeA,EACfC,SAAQ,8BAAAd,OAAkChC,EAAYW,IAEtDqC,gBAAmB2N,EAAKpK,SAAS7C,KAAKiN,GACtC1N,kBAAqB0N,EAAK9O,WAAW6B,KAAKiN,GAC1CzN,WAAc,KAGnBtC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBqF,IAAMpG,EAAY4E,YAAYyB,OAAO,yBAEpEzF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0F,GAAD,CAAUtG,KAAOF,EAAYE,+CAWvC,IAAAoZ,EACwCnZ,KAAKC,MAAMyG,MAAM0S,oBAAxDjS,EADDgS,EACChS,WAAY6O,EADbmD,EACanD,uBACdzT,EAAYvC,KAAKC,MAAMyG,MAAMC,KAAK5G,KAExC,GAAIoH,EACF,OAAQ1G,EAAAC,EAAAC,cAACyG,EAAA,WAAD,MAGV,IAAMxH,EAAUI,KAAKiW,mBAAmBD,EAAwBzT,GAEhE,OACE9B,EAAAC,EAAAC,cAAA,WACGf,UArG4ByB,aA4HtBoF,qBAhBS,SAAAC,GAEtB,MAAO,CACL3G,KAFe2G,EAAMC,KAAf5G,OAMiB,SAAA8G,GACzB,MAAO,CAEHjD,eAAgB,SAACD,GAAD,OAAUkD,EAASpF,GAASkC,KAC5CE,iBAAkB,SAACF,GAAD,OAAUkD,EAASnF,GAAWiC,OAKvC8C,CAA6CnF,YAAW2X,KC3HxDxS,qBAVS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACHI,gBAAiB,SAACzB,GAAD,OAAeqB,EAAS8R,GAA4BnT,OAI9DiB,CAA6CwS,ICItDI,eACJ,SAAAA,EAAYpZ,GAAO,IAAA4E,EAAA0K,OAAAC,EAAA,EAAAD,CAAAvP,KAAAqZ,GACjBxU,EAAA0K,OAAAE,EAAA,EAAAF,CAAAvP,KAAAuP,OAAAG,EAAA,EAAAH,CAAA8J,GAAA1J,KAAA3P,KAAMC,IADW,IAEV8G,EAAU9G,EAAMwR,MAAhB1K,OAFU,OAGjBlC,EAAK4P,UAAY/C,SAAS3K,EAAOtB,WAAY,IAH5BZ,oFAOjB7E,KAAKC,MAAMyU,eAAe1U,KAAKyU,gDAGpBlL,GACX,IAAI,IACM3J,EAAmC2J,EAAnC3J,QAASL,EAA0BgK,EAA1BhK,sBACjB,GAAgB,KAAZK,EAAgB,CAElB,MAAM,IAAIuW,MADE,kFAHZ,IAMMpW,EAASC,KAAKC,MAAMyG,MAAMC,KAA1B5G,KACF0F,EAAazF,KAAKyU,UAClBpR,EAAUtD,EAAKS,GACrB,OAAOR,KAAKC,MAAM6I,aAAa,CAAClJ,UAAS6F,aAAYpC,UAAS9D,0BAC9D,MAAOwE,GAEP,YADA8F,QAAQC,IAAI,IAAK/F,EAAEgG,2CAMd,IACCzJ,EAAkBN,KAAKC,MAAMM,KAA7BD,cACAqU,EAAmB3U,KAAKC,MAAMyG,MAAMsH,SAApC2G,eACAxG,EAAoBnO,KAAKC,MAAMyG,MAAMM,UAArCmH,gBAER,GAAIkD,GAAcsD,GAChB,OACElU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyG,EAAA,WAAD,OAKN,IAAMrH,EAAQ4U,EAAe5U,KAAQ4U,EAAe5U,KAAO,KAErDuZ,GADYvZ,GAAQA,EAAKG,KACHmR,GAAclD,GAEf,GADC1N,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAE,cAAAa,OAAgBsM,EAAgB3N,KAAOF,EAAc,CAACE,GAAI,8BAGjG,OACAC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4DACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACmQ,GAAApQ,EAAD,CAASqQ,WAAY,CAAE9F,OAAQ,WAAa0J,EAAe/U,UAC9Da,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBqF,IAAM0O,EAAelQ,YAAYyB,OAAO,wBACrEzF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0F,GAAD,CAAUtG,KAAMA,OAItBU,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAkBH,EAAAC,EAAAC,cAAA,YAAOL,EAAc,CAACE,GAAI,8BAC1DC,EAAAC,EAAAC,cAAC4Y,GAAD,CAAwB9E,UAAWzU,KAAKyU,UAAWnM,SAAUtI,KAAK8I,aAAavF,KAAKvD,QACpFS,EAAAC,EAAAC,cAAC6Y,GAAD,CAAwB/E,UAAWzU,KAAKyU,YACxChU,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBACZ0Y,EACF7Y,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,gBAhE4BK,aAiFtBoF,qBAXS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACL6N,eAAgB,SAAClU,GAAD,OAAQqG,EAAS0G,GAAmB/M,KACpDsI,aAAc,SAACc,GAAD,OAAc/C,EAASgS,GAA2BjP,OAIrDnD,CAA6CnF,YAAW+X,KCtCxDI,eAtDb,SAAAA,EAAYxZ,GAAO,IAAA4E,EAAA0K,OAAAC,EAAA,EAAAD,CAAAvP,KAAAyZ,GACjB5U,EAAA0K,OAAAE,EAAA,EAAAF,CAAAvP,KAAAuP,OAAAG,EAAA,EAAAH,CAAAkK,GAAA9J,KAAA3P,KAAMC,IADW,IAET8G,EAAW9G,EAAMwR,MAAjB1K,OAFS,OAGjBlC,EAAK6U,KAAOhI,SAAS3K,EAAOvG,GAAI,IAHfqE,oFAOjBgF,QAAQC,IAAI,6BACZ9J,KAAKC,MAAM0Z,0BAA0B3Z,KAAK0Z,2CAG/BnQ,GACX,IAAI,IACM3J,EAA+C2J,EAA/C3J,QAASL,EAAsCgK,EAAtChK,sBAAuB0C,EAAesH,EAAftH,WAGlCwQ,EAAW,CAAE7S,UAASY,GAFjBR,KAAK0Z,KAEgBna,wBAAuB0C,cACvD,OAAOjC,KAAKC,MAAM6I,aAAa2J,GAC/B,MAAO1O,GAEP,YADA8F,QAAQC,IAAI,IAAK/F,EAAEgG,mDAKNhG,GACf,IAAI,IACMhE,EAASC,KAAKC,MAAMyG,MAAMC,KAA1B5G,KACA2J,EAAY1J,KAAKC,MAAjByJ,QACF3C,EAAS,CACb1D,QAAStD,EAAKS,GACdA,GAAIR,KAAK0Z,KACThQ,WAEF,OAAO1J,KAAKC,MAAM8Y,yBAAyBhS,GAC3C,MAAOhD,GACP,yCAIK,IACCyS,EAAuBxW,KAAKC,MAAMyG,MAAM0S,oBAAxC5C,mBACFjU,EAAYvC,KAAKC,MAAMyG,MAAMC,KAAK5G,KAExC,OACEU,EAAAC,EAAAC,cAACkW,GAAD,CACEL,mBAAoBA,EACpB1N,aAAc9I,KAAK8I,aAAavF,KAAKvD,MACrC2S,iBAAkB3S,KAAK2S,iBAAiBpP,KAAKvD,MAC7CuC,UAAWA,WAjDkBlB,aCctBoF,qBAZS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACL8S,0BAA2B,SAACnZ,GAAD,OAAQqG,EAAS+R,GAAwBpY,KACpEsI,aAAc,SAACc,GAAD,OAAc/C,EAASiS,GAA2BlP,KAChEmP,yBAA0B,SAACnG,GAAD,OAAgB/L,EAASkS,GAAyBnG,OAIjEnM,CAA6CgT,sKCGtDG,8MACJlT,MAAQ,CACNmT,KAAK,EACLC,MAAM,EACNC,QAAQ,EACRC,OAAO,KAGTC,aAAe,SAACC,EAAMC,GAAP,OAAgB,WAC7BtV,EAAK0L,SAALhB,OAAA6K,GAAA,EAAA7K,CAAA,GACG2K,EAAOC,mFAIEpa,GACZ,IAAKA,EAAKS,GACR,MAAO,GAFS,IAKZ6Z,EAAa,CAAE3Q,QADD1J,KAAKC,MAAjByJ,SAER,OACEjJ,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,IAAIsC,QAAStD,KAAKC,MAAMqa,OAAO/W,KAAKvD,KAAMqa,IAAnD,2CAIK,IAAA/X,EAC0BtC,KAAKC,MAA9Bsa,EADDjY,EACCiY,QAASC,EADVlY,EACUkY,YAEXC,EAAe,CACnB,CACEC,KAAM,uCACNhT,UAAW3G,IACXC,GAAI,uBAEN,CACE0Z,KAAM,iCACNhT,UAAW3G,IACXC,GAAI,kBAIF2Z,EACJla,EAAAC,EAAAC,cAAA,OAAKC,UAAW2Z,EAAQ5L,MACtBlO,EAAAC,EAAAC,cAACia,GAAAla,EAAD,KACG+Z,EAAa/a,IAAI,SAACmb,EAAUC,GAAX,OAChBra,EAAAC,EAAAC,cAACoa,GAAAra,EAAD,CAAUsa,QAAM,EAACtT,UAAWmT,EAASnT,UAAW1G,GAAI6Z,EAAS7Z,GAAKqE,IAAKyV,GAErEra,EAAAC,EAAAC,cAACsa,GAAAva,EAAD,CAAcwa,QAASL,EAASH,YAO1C,OACEja,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAACwa,GAAAza,EAAD,CAAQ4C,QAAStD,KAAKia,aAAa,SAAS,IAASO,GACrD/Z,EAAAC,EAAAC,cAACya,GAAA1a,EAAD,CAAQ2a,OAAO,QAAQlB,KAAMna,KAAK0G,MAAMsT,MAAOsB,QAAStb,KAAKia,aAAa,SAAS,IACjFxZ,EAAAC,EAAAC,cAAA,OACE4a,SAAU,EACVC,KAAK,SACLlY,QAAStD,KAAKia,aAAa,SAAS,GACpCwB,UAAWzb,KAAKia,aAAa,SAAS,IAErCU,YAhEYvP,IAAM/J,eA6EhBqa,sBAtFA,CACb/M,KAAM,CACJzN,MAAO,KAETya,SAAU,CACRza,MAAO,SAiFIwa,CAAmB9B,2CC1F5BgC,eACJ,SAAAA,EAAY3b,GAAO,IAAA4E,EAAA,OAAA0K,OAAAC,EAAA,EAAAD,CAAAvP,KAAA4b,IACjB/W,EAAA0K,OAAAE,EAAA,EAAAF,CAAAvP,KAAAuP,OAAAG,EAAA,EAAAH,CAAAqM,GAAAjM,KAAA3P,KAAMC,KACDyG,MAAQ,CACXmV,SAAU,MAHKhX,+EASjB,IADiB7E,KAAKC,MAAMyG,MAAMC,KAA1B5G,KACES,GACR,MAAO,GAHK,IAMR6Z,EAAa,CAAE3Q,QADD1J,KAAKC,MAAjByJ,SAER,OAAO1J,KAAKC,MAAMqa,OAAOD,mCAGnBG,GAAa,IAAAhK,EAAAxQ,KACX6b,EAAa7b,KAAK0G,MAAlBmV,SACAvb,EAAkBN,KAAKC,MAAMM,KAA7BD,cAMFwb,EAAc,WAClBtL,EAAKD,SAAS,CAAEsL,SAAU,QAGtBE,EAAe,WAEnB,OADAD,IACOtL,EAAKwL,iBAuDNrV,EAAS3G,KAAKC,MAAMyG,MAApBC,KACFsV,EArDiB,SAACtV,GACtB,IAAKA,EAAK8C,WACR,MAAO,GAFsB,IAIvB1J,EAAS4G,EAAT5G,KAkBR,MAjBiB,CACf,CACE2a,KAAMpa,EAAc,CAACE,GAAI,kBACzBQ,GAAE,kBAAAa,OAAoB9B,EAAKS,IAC3B0C,KAAM,QAER,CACEwX,KAAMpa,EAAc,CAACE,GAAI,uBACzBQ,GAAI,sBACJkC,KAAM,UAER,CACEwX,KAAMpa,EAAc,CAACE,GAAI,iCACzBQ,GAAE,kBACFkC,KAAM,UAGMxD,IAAI,SAACJ,EAAGwP,GAAJ,OAClBrO,EAAAC,EAAAC,cAACub,GAAAxb,EAAD,CAAU2E,IAAKyJ,EAAGxL,QAASwY,GACzBrb,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAI1B,EAAE0B,IACVP,EAAAC,EAAAC,cAAA,QAAMwb,UAAS7c,EAAE4D,OACjBzC,EAAAC,EAAAC,cAAA,YAAOrB,EAAEob,UA2BG0B,CAAezV,GAC7B0V,EAtBe,SAAC1V,GACpB,OAAQA,EAAK8C,WAENhJ,EAAAC,EAAAC,cAACub,GAAAxb,EAAD,CAAU4C,QAASyY,EAAaxY,KAAKiN,IACnC/P,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,IACPP,EAAAC,EAAAC,cAAA,QAAMwb,UAAQ,aACd1b,EAAAC,EAAAC,cAAA,YAAOL,EAAc,CAACE,GAAI,oBAK9BC,EAAAC,EAAAC,cAACub,GAAAxb,EAAD,CAAU4C,QAASwY,GACjBrb,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,gBACPP,EAAAC,EAAAC,cAAA,QAAMwb,UAAQ,YACd1b,EAAAC,EAAAC,cAAA,YAAOL,EAAc,CAACE,GAAI,mBAQrB8b,CAAa3V,GAE/B,OACElG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACbH,EAAAC,EAAAC,cAACwa,GAAAza,EAAD,CACE6b,YAAWV,EAAW,mBAAgBW,EACtCC,gBAAc,OACdnZ,QA1Ec,SAAAoZ,GAClBlM,EAAKD,SAAS,CAAEsL,SAAUa,EAAMC,iBA0E5B/b,UAAU,gBACVC,MAAO,CAAC+b,cAAiB,SAExBpC,GAEH/Z,EAAAC,EAAAC,cAACkc,GAAAnc,EAAD,CACEF,GAAG,cACHqb,SAAUA,EACV1B,KAAM2C,QAAQjB,GACdP,QAASQ,GAERG,EACAI,EACD5b,EAAAC,EAAAC,cAACub,GAAAxb,EAAD,CAAU4C,QAASwY,GACjBrb,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,iBACPP,EAAAC,EAAAC,cAAA,QAAMwb,UAAQ,UACd1b,EAAAC,EAAAC,cAAA,YAAOL,EAAc,CAACE,GAAI,wDAQ7B,IACCT,EAASC,KAAKC,MAAMyG,MAAMC,KAA1B5G,KACFgd,EAAYhd,EAAKI,WAAaJ,EAAKI,WAAa,mCAChD6c,EAAkBvc,EAAAC,EAAAC,cAAA,OAAKM,IAAK8b,EAAWnc,UAAU,mBAAmBM,MAAM,KAAKC,OAAO,KAAKC,IAAI,KAC/F6b,EAAOjd,KAAKkd,QAAQF,GAE1B,OACEvc,EAAAC,EAAAC,cAAA,UAAQC,UAAU,6DAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,KAAG4J,KAAK,IAAI3J,UAAU,2BACpBH,EAAAC,EAAAC,cAAA,OAAKM,IAAG,YAAeG,IAAI,OAAOP,MAAO,CAAEsc,UAAa,WAE1D1c,EAAAC,EAAAC,cAAA,QAAMC,UAAU,6DAAhB,gBAIFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXqc,WA1IS7R,IAAM/J,WAiJZC,eAAWsa,ICxJbwB,GAAsBzf,OAAO,uBAC7B0f,GAAe1f,OAAO,gBACtB2f,GAAqB3f,OAAO,sBAC5B4f,GAAa5f,OAAO,cACpB6f,GAAiB7f,OAAO,kBACxB8f,GAAc9f,OAAO,eACrB+f,GAAmB/f,OAAO,oBAC1BggB,GAAiBhgB,OAAO,kBACxBigB,GAAqBjgB,OAAO,sBAC5BkgB,GAAoBlgB,OAAO,qBAC3BmgB,GAAmBngB,OAAO,oBAC1BG,GAAeH,OAAO,gBACtBI,GAAuBJ,OAAO,wBAC9BM,GAAsBN,OAAO,uBAC7BogB,GAAgBpgB,OAAO,iBACvBqgB,GAAergB,OAAO,gBACtBsgB,GAAmBtgB,OAAO,oBAC1BugB,GAAoBvgB,OAAO,qBAC3BwgB,GAAuBxgB,OAAO,wBAC9BygB,GAAgBzgB,OAAO,iBACvB0gB,GAAgC1gB,OAAO,iCACvC2gB,GAA8B3gB,OAAO,+BACrC4gB,GAA+B5gB,OAAO,gCACtC6gB,GAAkC7gB,OAAO,mCACzC8gB,GAA2B9gB,OAAO,4BAClC+gB,GAAiB/gB,OAAO,kBACxBghB,GAAgBhhB,OAAO,iBAGvBihB,GAAoBrgB,YAAa6e,IAGjC7a,IAFchE,YAAa8e,IACR9e,YAAa+e,IACpB/e,YAAagf,KACzBsB,GAAetgB,YAAaif,IAC5BsB,GAAavgB,YAAakf,IAC1BsB,GAAexgB,YAAaof,IAC5BqB,GAAmBzgB,YAAaqf,IAEhCqB,IADiB1gB,YAAamf,IACZnf,YAAasf,KAC/BqB,GAAiB3gB,YAAauf,IAC9Bpf,GAAcH,YAAaT,IAC3Ba,GAAqBJ,YAAaR,IAClCc,GAAoBN,YAAaN,IACjCkhB,GAAe5gB,YAAawf,IAC5BqB,GAAc7gB,YAAayf,IAC3BqB,GAAiB9gB,YAAa0f,IAC9BqB,GAAiB/gB,YAAa2f,IAC9BqB,GAAqBhhB,YAAa4f,IAClCqB,GAAejhB,YAAa6f,IAC5BqB,GAA6BlhB,YAAa8f,IAC1CqB,GAA2BnhB,YAAa+f,IACxCqB,GAA4BphB,YAAaggB,IACzCqB,GAA+BrhB,YAAaigB,IAC5CqB,GAAwBthB,YAAakgB,IAErCqB,IADgBvhB,YAAamgB,IACdngB,YAAaogB,KC5C1BlY,qBAVS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACHyT,OAAQ,SAAC3W,GAAD,OAAUkD,EAASiY,GAAWnb,OAI/B8C,CAA6CmV,aC8B7CmE,gMAlCX/f,KAAKC,MAAM+f,wIAcJ,IACCC,EAAajgB,KAAKC,MAAlBggB,SAGR,OAFiBjgB,KAAKC,MAAMyG,MAApBC,KAEIuZ,WACVzf,EAAAC,EAAAC,cAACwf,EAAA,EAAD,KACE1f,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAACyf,GAAD,MACCH,EACDxf,EAAAC,EAAAC,cAAC0f,GAAA3f,EAAD,CAAqB4f,MAAOA,SAIhC7f,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyG,EAAA,WAAD,cA9BU/F,aCMHoF,qBAVS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACHmZ,gBAAiB,kBAAMnZ,EAASgY,SAIzBpY,CAA6CsZ,cCXtDQ,8LACeC,GACbxgB,KAAKC,MAAMqK,WAAakW,EAAUlW,UACpCD,OAAOoW,SAAS,EAAG,oCAKrB,OAAOzgB,KAAKC,MAAMggB,gBARI5e,aAYXqf,gBAAWH,ICTpBI,oLACK7Y,GAAQ,IACPxH,EAAkBN,KAAKC,MAAMM,KAA7BD,cACJyH,EAAS,GAwBb,OAtBKD,EAAO5H,OACV6H,EAAO7H,KAAOI,EAAc,CAACE,GAAI,0BAG9BsH,EAAO8Y,KAEA,4CAA4CC,KAAK/Y,EAAO8Y,QAClE7Y,EAAO6Y,KAAOtgB,EAAc,CAACE,GAAI,sCAFjCuH,EAAO6Y,KAAOtgB,EAAc,CAACE,GAAI,yBAK9BsH,EAAO7F,aACV8F,EAAO9F,WAAa3B,EAAc,CAACE,GAAI,6BAGpCsH,EAAOgZ,WACV/Y,EAAO+Y,SAAWxgB,EAAc,CAACE,GAAI,8BAGnCsH,EAAOiZ,kBAAoBjZ,EAAOgZ,WACpC/Y,EAAOgZ,gBAAkBzgB,EAAc,CAACE,GAAI,sCAGvCuH,mCAGA,IAAAlD,EAAA7E,KACCM,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,OACEG,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEQ,cAAe,CACb/H,KAAM,GACN0gB,KAAM,GACN3e,WAAY,GACZ6e,SAAU,GACVC,gBAAiB,IAEnB3Y,oBAAoB,EACpBC,SAAUrI,KAAKqI,SAAS9E,KAAKvD,MAC7BsI,SAAU,SAACR,EAADS,GAAqD,IAA1CC,EAA0CD,EAA1CC,cAA0BC,GAAgBF,EAA3BG,UAA2BH,EAAhBE,WAC3C5D,EAAK5E,MAAMqI,SAASR,GACpBU,GAAc,GACdC,KAGJE,OAAQ,SAAAC,KAAGd,OAAH,IAAWC,EAAXa,EAAWb,OAAQc,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAA5BF,EAA0CG,aAA1CH,EAAwDI,cAAxD,OACNvI,EAAAC,EAAAC,cAAA,QAAM2H,SAAUQ,GACdrI,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEjH,GAAI,OACDN,KAAK,OACLwH,UAAU,QACVuB,KAAK,OACLzB,YAAalH,EAAc,CAACE,GAAI,+BAChCI,UAAW,0BAEfiI,EAAQ3I,MAAQ6H,EAAO7H,MAAQO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBmH,EAAO7H,OAE3EO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEjH,GAAI,OACDN,KAAK,OACLwH,UAAU,QACVuB,KAAK,OACLzB,YAAalH,EAAc,CAACE,GAAI,+BAChCI,UAAW,0BAEfiI,EAAQ+X,MAAQ7Y,EAAO6Y,MAAQngB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBmH,EAAO6Y,OAG3EngB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACwI,GAAD,CACE3I,GAAI,aACJN,KAAK,aACLsH,YAAalH,EAAc,CAACE,GAAI,oCACjCqI,EAAQ5G,YAAc8F,EAAO9F,YAAcxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAoBN,EAAc,CAACE,GAAI,8BAGpGC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEjH,GAAI,WACDN,KAAK,WACLwH,UAAU,QACVuB,KAAK,WACLzB,YAAalH,EAAc,CAACE,GAAI,mCAChCI,UAAW,0BAEfiI,EAAQiY,UAAY/Y,EAAO+Y,UAAYrgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBmH,EAAO+Y,WAEnFrgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEjH,GAAI,kBACDN,KAAK,kBACLwH,UAAU,QACVuB,KAAK,WACLzB,YAAalH,EAAc,CAACE,GAAI,2CAChCI,UAAW,0BAEfiI,EAAQkY,iBAAmBhZ,EAAOgZ,iBAAmBtgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBmH,EAAOgZ,kBAEjGtgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BAAgCN,EAAc,CAACE,GAAI,wCA3G5D4K,IAAM/J,WAgIhBoF,qBAXS,SAAAC,GACtB,MAAO,CACLA,UAIuB,SAAAG,GACzB,MAAO,IAIMJ,CAA6CnF,YAAWqf,KCjIjEK,yLAEUzX,GAAU,IACdrJ,EAAqCqJ,EAArCrJ,KAAM0gB,EAA+BrX,EAA/BqX,KAAM3e,EAAyBsH,EAAzBtH,WAAY6e,EAAavX,EAAbuX,SACxBpX,EAAY1J,KAAKC,MAAjByJ,QACR1J,KAAKC,MAAMghB,YAAY,CAAE/gB,OAAM0gB,OAAM3e,aAAY6e,WAAUpX,6CAGpD,IACCpJ,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,OACEG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAWN,EAAc,CAACE,GAAI,oBAE5CC,EAAAC,EAAAC,cAACugB,GAAD,CAAY5Y,SAAUtI,KAAKmhB,cAAc5d,KAAKvD,QAE9CS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,iBAlBQoK,IAAM/J,WAyBZC,eAAW0f,ICbXva,qBAVS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACHoa,YAAa,SAACtd,GAAD,OAAUkD,EAAS+X,GAAkBjb,OAI3C8C,CAA6Cua,ICZtDI,oLACKtZ,GAAQ,IACPxH,EAAkBN,KAAKC,MAAMM,KAA7BD,cACJyH,EAAS,GAYb,OAVKD,EAAO8Y,KAEA,4CAA4CC,KAAK/Y,EAAO8Y,QAClE7Y,EAAO6Y,KAAOtgB,EAAc,CAACE,GAAI,mCAFjCuH,EAAO6Y,KAAOtgB,EAAc,CAACE,GAAI,sBAK9BsH,EAAOgZ,WACV/Y,EAAO+Y,SAAWxgB,EAAc,CAACE,GAAI,2BAGhCuH,mCAGA,IAAAlD,EAAA7E,KACCM,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,OACEG,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEQ,cAAe,CACb2Y,KAAM,GACNE,SAAU,IAEZ1Y,oBAAoB,EACpBC,SAAUrI,KAAKqI,SAAS9E,KAAKvD,MAC7BsI,SAAU,SAACR,EAADS,GAAqD,IAA1CC,EAA0CD,EAA1CC,cAA0CD,EAA3BG,UAA2BH,EAAhBE,UAC3C5D,EAAK5E,MAAMqI,SAASR,GACpBU,GAAc,IAGlBG,OAAQ,SAAAC,KAAGd,OAAH,IAAWC,EAAXa,EAAWb,OAAQc,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAA5BF,EAA0CG,aAA1CH,EAAwDI,cAAxD,OACNvI,EAAAC,EAAAC,cAAA,QAAM2H,SAAUQ,GACdrI,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEjH,GAAI,OACDN,KAAK,OACLwH,UAAU,QACVuB,KAAK,OACLzB,YAAalH,EAAc,CAACE,GAAI,4BAChCI,UAAW,0BAEfiI,EAAQ+X,MAAQ7Y,EAAO6Y,MAAQngB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBmH,EAAO6Y,OAE3EngB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEjH,GAAI,WACDN,KAAK,WACLwH,UAAU,QACVuB,KAAK,WACLzB,YAAalH,EAAc,CAACE,GAAI,gCAChCI,UAAW,0BAEfiI,EAAQiY,UAAY/Y,EAAO+Y,UAAYrgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBmH,EAAO+Y,WAEnFrgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQsI,KAAK,SAASrI,UAAU,+BAAgCN,EAAc,CAACE,GAAI,sCA5D3E4K,IAAM/J,WAkFfoF,qBAXS,SAAAC,GACtB,MAAO,CACLA,UAIuB,SAAAG,GACzB,MAAO,IAIMJ,CAA6CnF,YAAW8f,KChFjEC,yLAEU9X,GAAU,IACdqX,EAAmBrX,EAAnBqX,KAAME,EAAavX,EAAbuX,SACNpX,EAAY1J,KAAKC,MAAjByJ,QACR,OAAO1J,KAAKC,MAAM6I,aAAa,CAAE8X,OAAME,WAAUpX,6CAG1C,IACCpJ,EAAkBN,KAAKC,MAAMM,KAA7BD,cACR,OACEG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAUN,EAAc,CAACE,GAAI,kBAE3CC,EAAAC,EAAAC,cAAC2gB,GAAD,CAAWhZ,SAAUtI,KAAKmhB,cAAc5d,KAAKvD,QAC7CS,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,yBAA0BV,EAAc,CAACE,GAAI,2BAEzDC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,iBAlBOoK,IAAM/J,WA0BXC,eAAW+f,ICjBX5a,qBAVS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACHiC,aAAc,SAACnF,GAAD,OAAUkD,EAAStE,GAAUoB,OAIpC8C,CAA6C4a,ICXtDE,oLACKzZ,GAAQ,IACPxH,EAAkBN,KAAKC,MAAMM,KAA7BD,cACJyH,EAAS,GAQb,OANKD,EAAO8Y,KAEA,4CAA4CC,KAAK/Y,EAAO8Y,QAClE7Y,EAAO6Y,KAAOtgB,EAAc,CAACE,GAAI,mCAFjCuH,EAAO6Y,KAAOtgB,EAAc,CAACE,GAAI,sBAK5BuH,mCAGA,IAAAlD,EAAA7E,KACCM,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,OACEG,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEQ,cAAe,CACb2Y,KAAM,IAERxY,oBAAoB,EACpBC,SAAUrI,KAAKqI,SAAS9E,KAAKvD,MAC7BsI,SAAU,SAACR,EAADS,GAAqD,IAA1CC,EAA0CD,EAA1CC,cAA0CD,EAA3BG,UAA2BH,EAAhBE,UAC3C5D,EAAK5E,MAAMqI,SAASR,GACpBU,GAAc,IAGlBG,OAAQ,SAAAC,KAAGd,OAAH,IAAWC,EAAXa,EAAWb,OAAQc,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAA5BF,EAA0CG,aAA1CH,EAAwDI,cAAxD,OACNvI,EAAAC,EAAAC,cAAA,QAAM2H,SAAUQ,GACdrI,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEjH,GAAI,OACDN,KAAK,OACLwH,UAAU,QACVuB,KAAK,OACLzB,YAAalH,EAAc,CAACE,GAAI,4BAChCI,UAAW,0BAEfiI,EAAQ+X,MAAQ7Y,EAAO6Y,MAAQngB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBmH,EAAO6Y,OAE3EngB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQsI,KAAK,SAASrI,UAAU,+BAAgCN,EAAc,CAACE,GAAI,qCA5CnEa,aAkEjBoF,qBAXS,SAAAC,GACtB,MAAO,CACLA,UAIuB,SAAAG,GACzB,MAAO,IAIMJ,CAA6CnF,YAAWigB,KCjEjEC,yLAEUjY,GAAU,IACdqX,EAASrX,EAATqX,KACR,OAAO5gB,KAAKC,MAAM6I,aAAa,CAAE8X,0CAG1B,IACCtgB,EAAkBN,KAAKC,MAAMM,KAA7BD,cACR,OACEG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAUN,EAAc,CAACE,GAAI,2BAC3CC,EAAAC,EAAAC,cAAA,SAAIL,EAAc,CAACE,GAAI,yBACvBC,EAAAC,EAAAC,cAAC8gB,GAAD,CAAmBnZ,SAAUtI,KAAKmhB,cAAc5d,KAAKvD,QAErDS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,iBAhBeK,aAwBbC,eAAWkgB,ICdX/a,qBAVS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACLiC,aAAc,SAACnF,GAAD,OAAUkD,EAASgZ,GAAsBlc,OAI5C8C,CAA6C+a,ICXtDE,oLACK5Z,GAAQ,IACPxH,EAAkBN,KAAKC,MAAMM,KAA7BD,cACJyH,EAAS,GAUb,OARKD,EAAOgZ,WACV/Y,EAAO+Y,SAAWxgB,EAAc,CAACE,GAAI,8BAGnCsH,EAAOiZ,kBAAoBjZ,EAAOgZ,WACpC/Y,EAAOgZ,gBAAkBzgB,EAAc,CAACE,GAAI,sCAGvCuH,mCAGA,IAAAlD,EAAA7E,KACCM,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,OACEG,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEQ,cAAe,CACb6Y,SAAU,GACVC,gBAAiB,IAEnB3Y,oBAAoB,EACpBC,SAAUrI,KAAKqI,SAAS9E,KAAKvD,MAC7BsI,SAAU,SAACR,EAADS,GAAqD,IAA1CC,EAA0CD,EAA1CC,cAA0BC,GAAgBF,EAA3BG,UAA2BH,EAAhBE,WAC3C5D,EAAK5E,MAAMqI,SAASR,GACpBU,GAAc,GACdC,KAGJE,OAAQ,SAAAC,KAAGd,OAAH,IAAWC,EAAXa,EAAWb,OAAQc,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAA5BF,EAA0CG,aAA1CH,EAAwDI,cAAxD,OACNvI,EAAAC,EAAAC,cAAA,QAAM2H,SAAUQ,GACdrI,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEjH,GAAI,WACDN,KAAK,WACLwH,UAAU,QACVuB,KAAK,WACLzB,YAAalH,EAAc,CAACE,GAAI,mCAChCI,UAAW,0BAEfiI,EAAQiY,UAAY/Y,EAAO+Y,UAAYrgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBmH,EAAO+Y,WAEnFrgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEjH,GAAI,kBACDN,KAAK,kBACLwH,UAAU,QACVuB,KAAK,WACLzB,YAAalH,EAAc,CAACE,GAAI,2CAChCI,UAAW,0BAEfiI,EAAQkY,iBAAmBhZ,EAAOgZ,iBAAmBtgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBmH,EAAOgZ,kBAEjGtgB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BAAgCN,EAAc,CAACE,GAAI,qCA3D1Da,aAiFZoF,qBAXS,SAAAC,GACtB,MAAO,CACLA,UAIuB,SAAAG,GACzB,MAAO,IAIMJ,CAA6CnF,YAAWogB,KC9EjEC,+LAEgB,IAEVC,EADW5hB,KAAKC,MAAMwR,MAAtB1K,OACA6a,MAER,OADA5hB,KAAK4hB,MAAQA,EACN5hB,KAAKC,MAAM4hB,UAAUD,yCAGhBrY,GAAU,IACduX,EAAavX,EAAbuX,SACAtgB,EAAOR,KAAKC,MAAMyG,MAAMC,KAAK5G,KAA7BS,GACAkJ,EAAY1J,KAAKC,MAAjByJ,QACFkY,EAAQ5hB,KAAK4hB,MACnB,OAAO5hB,KAAKC,MAAM6I,aAAa,CAAEtI,KAAIsgB,WAAUc,QAAOlY,6CAG/C,IAAAF,EACsBxJ,KAAKC,MAAMyG,MAAMC,KAAtC5G,EADDyJ,EACCzJ,KAER,GAHOyJ,EACOrC,WAGZ,OACE1G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyG,EAAA,WAAD,OAKN,GAAIiK,GAActR,GAChB,OACEU,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,oEAdC,IAmBCL,EAAkBN,KAAKC,MAAMM,KAA7BD,cACR,OACEG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAUN,EAAc,CAACE,GAAI,2BAC3CC,EAAAC,EAAAC,cAAA,SAAIL,EAAc,CAACE,GAAI,iCACvBC,EAAAC,EAAAC,cAACmhB,GAAD,CAAcxZ,SAAUtI,KAAKmhB,cAAc5d,KAAKvD,QAEhDS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,iBA5CaK,aAoDXC,eAAWqgB,IC1CXlb,qBAXS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACLgb,UAAW,SAACD,GAAD,OAAW/a,EAASyY,GAAesC,KAC9C9Y,aAAc,SAACnF,GAAD,OAAUkD,EAASmY,GAAiBrb,OAIvC8C,CAA6Ckb,ICZtDI,+LAEgB,IACVhb,EAAW/G,KAAKC,MAAMwR,MAAtB1K,OACA2C,EAAY1J,KAAKC,MAAjByJ,QACAkY,EAAU7a,EAAV6a,MAER,OADA5hB,KAAK4hB,MAAQA,EACN5hB,KAAKC,MAAM6f,aAAa,CAAE8B,QAAOlY,6CAGjC,IAAAF,EACsBxJ,KAAKC,MAAMyG,MAAMC,KAAtC5G,EADDyJ,EACCzJ,KAER,GAHOyJ,EACOrC,WAGZ,OACE1G,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyG,EAAA,WAAD,OAKN,GAAIiK,GAActR,GAChB,OACEU,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,oEAdC,IAmBCL,EAAkBN,KAAKC,MAAMM,KAA7BD,cACR,OACEG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAUN,EAAc,CAACE,GAAI,qBAC3CC,EAAAC,EAAAC,cAAA,SAAIL,EAAc,CAACE,GAAI,iCAEvBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,iBApCUK,aA4CRC,eAAWygB,IClCXtb,qBAVS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACLiZ,aAAc,SAAC8B,GAAD,OAAW/a,EAASiZ,GAAa8B,OAIpCnb,CAA6Csb,cCuB7CC,oLA/BX,IAJO,IAAA1f,EAC0BtC,KAAKC,MAA9BgiB,EADD3f,EACC2f,UAAWC,EADZ5f,EACY4f,UAEbC,EAAe,GACZrT,EAAG,EAAEA,EAAEoT,EAAUpT,IAAI,CAC1B,IACIqE,EADW8O,EAAUG,MAAQ,EAAFtT,EAAM,EAAFA,EAAI,GACfpP,IAAI,SAACqE,GACzB,OAAKA,EAMDtD,EAAAC,EAAAC,cAAA,MAAI0E,IAAK,iBAAiBtB,EAAEvD,GAAGI,UAAU,kBACrCH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAI+C,EAAEhE,KAAKK,cACjBK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2DAA2DK,IAAK8C,EAAEhE,KAAKI,WAAYe,MAAM,KAAKC,OAAO,KAAKC,IAAI,OAN7HX,EAAAC,EAAAC,cAAA,MAAI0E,IAAKtB,EAAEvD,GAAGI,UAAU,qBAWhCyhB,EAAiB5hB,EAAAC,EAAAC,cAAA,UAAMwS,GAC3BgP,EAAc7d,KAAK+d,GAGvB,OACI5hB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,wFACbH,EAAAC,EAAAC,cAAA,aACKwhB,WA5BO9gB,aCQlBihB,eACJ,SAAAA,EAAYriB,GAAO,IAAA4E,EAAA0K,OAAAC,EAAA,EAAAD,CAAAvP,KAAAsiB,GACjBzd,EAAA0K,OAAAE,EAAA,EAAAF,CAAAvP,KAAAuP,OAAAG,EAAA,EAAAH,CAAA+S,GAAA3S,KAAA3P,KAAMC,IADW,IAET8G,EAAW9G,EAAMwR,MAAjB1K,OAFS,OAGjBlC,EAAK6B,MAAQ,CAACuM,WAAY,aAC1BpO,EAAK0d,OAAS7Q,SAAS3K,EAAOvG,GAAI,IAClCqE,EAAK5E,MAAMuiB,iBAAiB3d,EAAK0d,QALhB1d,0EAQR8O,EAAW5P,GACpBA,EAAEkG,iBACFlG,EAAEmG,kBACFlK,KAAKuQ,SAAS,CACZ0C,WAAYU,wCAIJ8O,GAMV,IAJA,IAAMP,EAAYQ,KAAKC,KAAKF,EAAUjjB,OAAO,GACvCojB,EAAgBF,KAAKC,KAAKF,EAAUjjB,OAAO,IAC3CqjB,EAA2B,GAAbD,EAAkBH,EAAUjjB,OAExCsP,EAAE,EAAIA,EAAI+T,EAAc/T,IAC9B2T,EAAUne,KAAK,IAGjB,IADA,IAAM6d,EAAe,GACbrT,EAAG,EAAGA,EAAI8T,EAAc9T,IAAK,CACnC,IAAMgU,EAAYriB,EAAAC,EAAAC,cAACoiB,GAAD,CAChBd,UAAcQ,EAAUL,MAAS,EAAFtT,EAAK,EAAM,EAAFA,EAAK,EAAE,IAC/CoT,UAAcA,IAEhBC,EAAca,QAAQF,GAGxB,OAAOX,uCAGI,IAAA3R,EAAAxQ,KACHM,EAAkBN,KAAKC,MAAMM,KAA7BD,cACFuT,EAAU,CACd,CACE3T,KAAMI,EAAc,CAACE,GAAI,mBACzB6E,IAAK,aAEP,CACEnF,KAAMI,EAAc,CAACE,GAAI,iBACzB6E,IAAK,WAEP,CACEnF,KAAMI,EAAc,CAACE,GAAI,kBACzB6E,IAAK,YAEP,CACEnF,KAAMI,EAAc,CAACE,GAAI,oBACzB6E,IAAK,eAIT,OACE5E,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACXiT,EAAQnU,IAAI,SAAAJ,GACV,IAAMwU,EAAStD,EAAK9J,MAAL,aAA6BpH,EAAE+F,IAC/B,YACA,GACf,OACE5E,EAAAC,EAAAC,cAAA,MAAIC,UAAWkT,EAAQxQ,QAASkN,EAAKuD,WAAWxQ,KAAKiN,EAAMlR,EAAE+F,KAAMA,IAAK/F,EAAE+F,KACxE5E,EAAAC,EAAAC,cAAA,KAAG4J,KAAK,IAAIjL,EAAEY,gDAQbmE,GACZ,OACE5D,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCACbyD,EAAQ3E,IAAI,SAAAgR,GAAU,IACb3Q,EAAS2Q,EAAT3Q,KACFmC,EAAWnC,EAAOA,EAAKG,KAAO,6CACpC,OACEO,EAAAC,EAAAC,cAAA,MAAI0E,IAAKqL,EAAOlQ,IACdC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iCAAiCH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAE,cAAAa,OAAgB6O,EAAOnL,cAA/B,GAAA1D,OAAkD6O,EAAO9Q,WACvGa,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBqF,IAAMyK,EAAOjM,YAAYyB,OAAO,wBAC7DzF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCAAqCK,IAAKlB,EAAKI,WAAYe,MAAM,KAAKC,OAAO,KAAKC,IAAI,MAEvGX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oCAAqCsB,gDAUlD8L,GACb,OACEvN,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCACXoN,EAAStO,IAAI,SAAAujB,GAAW,IACdljB,EAAiBkjB,EAAjBljB,KAAM2Q,EAAWuS,EAAXvS,OACRxO,EAAWnC,EAAOA,EAAKG,KAAO,6CACpC,OACEO,EAAAC,EAAAC,cAAA,MAAI0E,IAAK4d,EAAQziB,IACfC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iCAAiCH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAE,cAAAa,OAAgB6O,EAAOnL,cAA/B,GAAA1D,OAAkDohB,EAAQrjB,WACxGa,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBqF,IAAMgd,EAAQxe,YAAYyB,OAAO,wBAC9DzF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCAAqCK,IAAKlB,EAAKI,WAAYe,MAAM,KAAKC,OAAO,KAAKC,IAAI,MAEvGX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oCAAqCsB,mDAUlDghB,GAChB,OACEziB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCACXsiB,EAAWxjB,IAAI,SAAAqD,GACb,IAAMogB,EAAOpgB,EAAUqgB,iBACvB,OACE3iB,EAAAC,EAAAC,cAAA,MAAI0E,IAAG,aAAAxD,OAAekB,EAAUsC,MAC9B5E,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iCAAiCH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAImiB,GAAV,GAAAthB,OAAoBkB,EAAUnD,WAC5Ea,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBqF,IAAMlD,EAAU0B,YAAYyB,OAAO,4EAQrDnD,GAEtB,IADA,IAAMsgB,EAAyB,GADEC,EAAA,eAAA/a,EAAAgb,EAAAC,GAErBne,GAFqBuD,EAAA2G,OAAAkU,GAAA,EAAAlU,CAAAhH,EAAA,OAAAK,EAAA,GAGzB1E,QAAQ,SAACH,GACbA,EAAC,IAAQsB,EAAItB,EAAEvD,GACf6iB,EAAuB/e,KAAKP,MAHhCyf,EAAA,EAAAD,EAA2BhU,OAAOmU,QAAQ3gB,GAA1CygB,EAAAD,EAAA/jB,OAAAgkB,IAAqD,KAAA5a,EAAA0a,IAMrD,OAAOD,gDAGa9P,EAAUN,GAAY,IAClCjM,EAA6CuM,EAA7CvM,UAAW3C,EAAkCkP,EAAlClP,QAAS2J,EAAyBuF,EAAzBvF,SAAUkV,EAAe3P,EAAf2P,WAC9B1iB,EAAOR,KAAKC,MAAMyG,MAAMC,KAAK5G,KAA7BS,GACR,GAAmB,cAAfyS,EACF,OAAQxS,EAAAC,EAAAC,cAAC0G,GAAD,CAAkB3C,cAAesC,EAAW7H,oBAAqBqB,IACpE,GAAmB,YAAfyS,EACT,OAAOjT,KAAKoR,cAAc/M,GACrB,GAAmB,aAAf4O,EACT,OAAOjT,KAAK2jB,eAAe3V,GACtB,GAAmB,eAAfiF,EAA6B,CACtC,IAAM2Q,EAAiB5jB,KAAK6jB,wBAAwBX,GACpD,OAAOljB,KAAK8jB,kBAAkBF,qCAIzB,IAGCG,EAAY/jB,KAAKC,MAAMyG,MAAvBqd,QACAhkB,EAASgkB,EAAThkB,KACAO,EAAkBN,KAAKC,MAAMM,KAA7BD,cACAwV,EAAsB/V,EAAtB+V,kBAER,GAAIzE,GAActR,GAChB,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyG,EAAA,WAAD,OAKN,IAAM+M,EAAUnU,KAAKoU,aACf4P,EAAehkB,KAAKiU,sBAAsB8P,EAAS/jB,KAAK0G,MAAMuM,YAC9DgR,EAAajkB,KAAKkkB,YAAYpO,GAEpC,OACErV,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCAEdH,EAAAC,EAAAC,cAAA,OAAKyO,MAAM,yBACT3O,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACbH,EAAAC,EAAAC,cAAA,OAAKM,IAAKlB,EAAKI,WAAYS,UAAU,mBAAmBQ,IAAI,GAAGF,MAAM,MAAMC,OAAO,MAEpFV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBb,EAAKG,MAClCO,EAAAC,EAAAC,cAAA,SAAIL,EAAc,CAACE,GAAI,wBAAvB,KAAkDT,EAAK8R,QAAQ3R,QAGnEO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,6DACCsjB,IAGLxjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAAC2N,WAAc,aAAczO,EAAKgkB,UAE9CtjB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAkBH,EAAAC,EAAAC,cAAA,YAAOL,EAAc,CAACE,GAAI,uBACzD2T,EACA6P,UAlNa3iB,aAkOPoF,qBAVS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACL2b,iBAAkB,SAACD,GAAD,OAAY1b,EAASwY,GAAekD,OAI3C9b,CAA6CnF,YAAWghB,KCtOjE6B,eACJ,SAAAA,EAAYlkB,GAAO,IAAA4E,EAAA,OAAA0K,OAAAC,EAAA,EAAAD,CAAAvP,KAAAmkB,IACjBtf,EAAA0K,OAAAE,EAAA,EAAAF,CAAAvP,KAAAuP,OAAAG,EAAA,EAAAH,CAAA4U,GAAAxU,KAAA3P,KAAMC,KACDyG,MAAQ,CACX0d,UAAW,IAHIvf,iFAODmE,EAAejF,GAC/B,IAAMsgB,EAAOtgB,EAAE4Y,cAAc2H,MAAM,GACnCtb,EAAc,QAASqb,GACvB,IACMD,IADmB/Z,OAAOka,KAAOla,OAAOma,WAAWC,iBAAmBpa,OAAOoa,iBACjDJ,GAClCrkB,KAAKuQ,SAAS,CAAE6T,+CAGTtc,GAAQ,IACPxH,EAAkBN,KAAKC,MAAMM,KAA7BD,cACJyH,EAAS,GAIb,OAHKD,EAAO7F,aACV8F,EAAO9F,WAAa3B,EAAc,CAACE,GAAI,iCAElCuH,mCAGA,IAAAyI,EAAAxQ,KACCD,EAASC,KAAKC,MAAMyG,MAAMC,KAA1B5G,KACAO,EAAkBN,KAAKC,MAAMM,KAA7BD,cACAE,EAAkCT,EAAlCS,GAAIN,EAA8BH,EAA9BG,KAAM6jB,EAAwBhkB,EAAxBgkB,QAAS9hB,EAAelC,EAAfkC,WACrByiB,EAAwC,KAAzB1kB,KAAK0G,MAAM0d,UACV3jB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,OAAKM,IAAKjB,KAAK0G,MAAM0d,UAAWhjB,IAAI,GAAGF,MAAM,SACjD,GAErB,OACET,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACAQ,cAAe,CAAEzH,KAAIN,OAAM6jB,UAAS9hB,aAAY0iB,MAAO,IACrDvc,oBAAoB,EACpBC,SAAUrI,KAAKqI,SACfC,SAAU,SAACR,EAADS,GAA0C,IAA/BC,EAA+BD,EAA/BC,cAA+BD,EAAhBG,UAChC8H,EAAKvQ,MAAMqI,SAASR,GACpBU,GAAc,IAGlBG,OAAQ,SAAAC,KAAGd,OAAH,IAAWC,EAAXa,EAAWb,OAAQc,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAAcC,EAA1CH,EAA0CG,aAAcC,EAAxDJ,EAAwDI,cAAxD,OACNvI,EAAAC,EAAAC,cAAA,QAAM2H,SAAUQ,EAAclI,UAAU,mBACtCH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,iBAAiBN,EAAc,CAACE,GAAI,mCACrDC,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEjH,GAAI,OACDN,KAAK,OACLwH,UAAU,QACVuB,KAAK,OACLzB,YAAalH,EAAc,CAACE,GAAI,sCAChCI,UAAW,6BAEfiI,EAAQ3I,MAAQ6H,EAAO7H,MAAQO,EAAAC,EAAAC,cAAA,WAAMoH,EAAO7H,OAE/CO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,iBAAiBN,EAAc,CAACE,GAAI,oCAErDC,EAAAC,EAAAC,cAACwI,GAAD,CACE3I,GAAI,aACJN,KAAK,aACLsH,YAAalH,EAAc,CAACE,GAAI,oCAGjCqI,EAAQ5G,YAAc8F,EAAO9F,YAAcxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBmH,EAAO9F,aAEvFxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,iBAAiBN,EAAc,CAACE,GAAI,iCACrDC,EAAAC,EAAAC,cAAC8G,GAAA,EAAD,CACEjH,GAAI,UACDN,KAAK,UACLwH,UAAU,WACVuB,KAAK,OACLzB,YAAalH,EAAc,CAACE,GAAI,qCAChCI,UAAW,8BACXsI,KAAK,MAETL,EAAQkb,SAAWhc,EAAOgc,SAAWtjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBmH,EAAOgc,UAEjFtjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsBgkB,iBAAe,QAClDnkB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,iBAAiBN,EAAc,CAACE,GAAI,oCACrDC,EAAAC,EAAAC,cAAA,SAAOH,GAAG,OAAON,KAAK,QAAQ+I,KAAK,OAAO8B,SAAUyF,EAAKqU,kBAAkBthB,KAAKiN,EAAMxH,KAErFH,EAAQ8b,OAAS5c,EAAO4c,OAASlkB,EAAAC,EAAAC,cAAA,WAAMoH,EAAO4c,OAC/ClkB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,8BAA8BqI,KAAK,SAASsS,SAAS,MAAMjb,EAAc,CAACE,GAAI,iCAC/FkkB,GAEHjkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQsI,KAAK,SAASrI,UAAU,8BAA8BkkB,SAAU/b,GACvEzI,EAAc,CAACE,GAAI,4CA5FVa,aAmHXoF,qBAXS,SAAAC,GACtB,MAAO,CACLA,UAIuB,SAAAG,GACzB,MAAO,IAIMJ,CAA6CnF,YAAW6iB,KCpHjE7B,eAEJ,SAAAA,EAAYriB,GAAQ,OAAAsP,OAAAC,EAAA,EAAAD,CAAAvP,KAAAsiB,GAAA/S,OAAAE,EAAA,EAAAF,CAAAvP,KAAAuP,OAAAG,EAAA,EAAAH,CAAA+S,GAAA3S,KAAA3P,KACZC,qFAGY,IAAAuJ,EACwBxJ,KAAKC,MAAMyG,MAAMC,KAAK5G,KAAxDS,EADUgJ,EACVhJ,GAAIN,EADMsJ,EACNtJ,KAAM+B,EADAuH,EACAvH,WAAY8hB,EADZva,EACYua,QAC9Bla,QAAQC,IAAI,OAAQ9J,KAAKC,MAAMyG,MAAMC,KAAK5G,MAE1CC,KAAKuQ,SAAS,CACZlN,QAAS7C,EACTN,OACA6jB,UACA9hB,qDAIUsH,GAAU,IAGhBK,EAAW,CACfvG,QAH+CkG,EAAzC/I,GAINN,KAJ+CqJ,EAArCrJ,KAKV6jB,QAL+Cxa,EAA/Bwa,QAMhB9hB,WAN+CsH,EAAtBtH,WAOzB0iB,MAP+Cpb,EAAVob,OASvC3kB,KAAKC,MAAM8kB,kBAAkBnb,oCAGtB,IACCtJ,EAAkBN,KAAKC,MAAMM,KAA7BD,cACR,OACEG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAUN,EAAc,CAACE,GAAI,yBAE3CC,EAAAC,EAAAC,cAACqkB,GAAD,CAAa1c,SAAUtI,KAAKmhB,cAAc5d,KAAKvD,QAE/CS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,iBAxCSoK,IAAM/J,WAgDbC,eAAWghB,ICrCX7b,qBAVS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACHke,kBAAmB,SAACnb,GAAD,OAAc/C,EAASkY,GAAanV,OAIhDnD,CAA6C6b,uBCbvC2C,gMAMjBjlB,KAAKklB,kBAAkBllB,KAAKC,MAAOD,KAAKmlB,QAAQC,oDAG9BC,GAClBrlB,KAAKklB,kBAAkBG,EAAWrlB,KAAKmlB,QAAQC,kDAG/BnlB,EAAOmlB,GAAQ,IACvBze,EAAS1G,EAAMyG,MAAfC,KACA+C,EAAY0b,EAAZ1b,QACR,QAAK/C,EAAK8C,YACDC,EAAQpF,KAAK,iDAMtB,OACE7D,EAAAC,EAAAC,cAAC2kB,EAAA,EAAD,CAAOrF,SAAUjgB,KAAKC,MAAMggB,kBAxBI5e,aAAjB4jB,GACZM,aAAe,CACpBH,OAAQI,KAAUC,OAAOC,YCH7B,IAQejf,qBARS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,IAGIJ,CAA6Cwe,ICPvCU,gMAMjB9b,QAAQC,IAAI,QACZ9J,KAAK4lB,iBAAiB5lB,KAAKC,MAAOD,KAAKmlB,QAAQC,oDAG7BC,GAClBrlB,KAAK4lB,iBAAiBP,EAAWrlB,KAAKmlB,QAAQC,iDAG/BnlB,EAAOmlB,GAAQ,IACtBze,EAAS1G,EAAMyG,MAAfC,KACA+C,EAAY0b,EAAZ1b,QACR,GAAI/C,EAAK8C,WAEP,OAAOC,EAAQmc,QAAQ,sCAKzB,OACEplB,EAAAC,EAAAC,cAAC2kB,EAAA,EAAD,CAAOrF,SAAUjgB,KAAKC,MAAMggB,kBAzBK5e,aAAlBskB,GACZJ,aAAe,CACpBH,OAAQI,KAAUC,OAAOC,YCH7B,UAQejf,qBARS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,IAGIJ,CAA6Ckf,yCCR/CG,GAAU,CACrBC,GAAI,CACF/b,OAAQ,KACRgc,UCNOC,GAAA,CACTC,iBAAkB,2BAClBC,eAAgB,2BAChBC,kBAAmB,eACnBC,wBAAyB,mDACzBC,uBAAwB,2BACxBC,qBAAsB,2BACtBC,mBAAoB,2BACpBC,0BAA2B,2BAC3BC,6BAA8B,iCAC9BC,gCAAiC,iCACjCC,iCAAkC,qBAClCC,8BAA+B,uCAC/BC,iCAAkC,mDAClCC,sBAAuB,mDACvBC,uBAAwB,iCACxBC,yBAA0B,iCAC1BC,yBAA0B,qBAC1BC,yBAA0B,yJAC1BC,sBAAuB,qBACvBC,8BAA+B,mHAC/BC,sBAAuB,mGACvBC,8BAA+B,yGAC/BC,8BAA+B,2EAC/BC,+BAAgC,yDAChCC,aAAc,eACdC,iBAAkB,eAClBC,eAAgB,eAChBC,gBAAiB,2BACjBC,kBAAmB,eACnBC,gBAAiB,uCACjBC,qBAAsB,mDACtBC,gBAAiB,2BACjBC,cAAe,2BACfC,eAAgB,iCAChBC,uBAAwB,yDACxBC,yBAA0B,uCAC1BC,qBAAsB,qBACtBC,oBAAqB,eACrBC,kBAAmB,eACnBC,gBAAiB,6CACjBC,wBAAyB,iCACzBC,oBAAqB,2BACrBC,uBAAwB,mDACxBC,iBAAkB,qBAClBC,yBAA0B,uCAC1BC,qBAAsB,eACtBC,qBAAsB,eACtBC,mBAAoB,eACpBC,2BAA4B,2EAC5BC,8BAA+B,uFAC/BC,yCAA0C,iFAC1CC,+BAAgC,uFAChCC,yBAA0B,2EAC1BC,uCAAwC,iFACxCC,0BAA2B,iFAC3BC,wCAAyC,iFACzCC,8BAA+B,qEAC/BC,4CAA6C,iFAC7CC,uBAAwB,uFACxBC,uBAAwB,mGACxBC,0BAA2B,mGAC3BC,mCAAoC,qHACpCC,2BAA4B,uFAC5BC,mCAAoC,uFACpCC,oBAAqB,mGACrBC,gCAAiC,qHACjCC,wBAAyB,uFACzBC,8BAA+B,2EAC/BC,6BAA8B,eAC9BC,6BAA8B,6CAC9BC,gCAAiC,6CACjCC,iCAAkC,iCAClCC,yCAA0C,6CAC1CC,0BAA2B,6CAC3BC,8BAA+B,iCAC/BC,iCAAkC,qEAClCC,oCAAqC,iCACrCC,+CAAgD,2BAChDC,qCAAsC,iCACtCC,oCAAqC,eACrCC,+BAAgC,qEAChCC,6CAA8C,2BAC9CC,kCAAmC,eACnCC,gCAAiC,iFACjCC,8CAA+C,2BAC/CC,mCAAoC,eACpCC,oCAAqC,qEACrCC,kDAAmD,2BACnDC,mCAAoC,6FACpCC,mCAAoC,6CACpCC,sBAAuB,eACvBC,qBAAsB,eACtBC,wBAAyB,2BACzBC,sBAAuB,2BACvBC,qBAAsB,eACtBC,8BAA+B,eAC/BC,4BAA6B,eAC7BC,kBAAmB,qBACnBC,mBAAoB,sBAnGX7c,OAAA6K,GAAA,EAAA7K,CAAA0W,GAAA,yBAoGiB,wCApGjB1W,OAAA6K,GAAA,EAAA7K,CAAA0W,GAAA,qBAqGa,gBArGb1W,OAAA6K,GAAA,EAAA7K,CAAA0W,GAAA,qBAsGa,gBAtGb1W,OAAA6K,GAAA,EAAA7K,CAAA0W,GAAA,mBAuGW,gBAvGX1W,OAAA6K,GAAA,EAAA7K,CAAA0W,GAwGT,kBAAkB,wCAxGT1W,OAAA6K,GAAA,EAAA7K,CAAA0W,GAyGT,iBAAiB,8CAzGR1W,OAAA6K,GAAA,EAAA7K,CAAA0W,GA0GT,WAAW,8CA1GF1W,OAAA6K,GAAA,EAAA7K,CAAA0W,GA2GT,WAAW,wCA3GFA,IDOP9mB,oBAAqB,GAEvBktB,GAAI,CACFriB,OAAQ,KACRgc,UEXOsG,GAAA,CACTpG,iBAAkB,UAClBC,eAAgB,QAChBC,kBAAmB,aACnBC,wBAAyB,iBACzBC,uBAAwB,YACxBC,qBAAsB,UACtBC,mBAAoB,QACpBC,0BAA2B,eAC3BC,6BAA8B,sBAC9BC,gCAAiC,YACjCC,iCAAkC,2BAClCC,8BAA+B,UAC/BC,iCAAkC,gBAClCC,sBAAuB,eACvBC,uBAAwB,gBACxBC,yBAA0B,kBAC1BC,yBAA0B,MAC1BC,yBAA0B,oDAC1BC,sBAAuB,aACvBC,8BAA+B,+CAC/BC,sBAAuB,4BACvBC,8BAA+B,sBAC/BC,8BAA+B,2BAC/BC,+BAAgC,2BAChCC,aAAc,OACdC,iBAAkB,WAClBC,eAAgB,SAChBC,gBAAiB,UACjBC,kBAAmB,YACnBC,gBAAiB,UACjBC,qBAAsB,eACtBC,gBAAiB,UACjBC,cAAe,QACfE,uBAAwB,kBACxBD,eAAgB,SAChBE,yBAA0B,mBAC1BC,qBAAsB,WACtBC,oBAAqB,UACrBC,kBAAmB,QACnBC,gBAAiB,MACjBC,wBAAyB,cACzBC,oBAAqB,UACrBC,uBAAwB,aACxBC,iBAAkB,MAClBC,yBAA0B,mBAC1BC,qBAAsB,UACtBC,qBAAsB,UACtBC,mBAAoB,QACpBC,2BAA4B,gCAC5BC,8BAA+B,gCAC/BC,yCAA0C,8BAC1CC,+BAAgC,8BAChCC,yBAA0B,+BAC1BC,uCAAwC,8BACxCC,0BAA2B,gCAC3BC,wCAAyC,8BACzCC,8BAA+B,kCAC/BC,4CAA6C,8BAC7CC,uBAAwB,0BACxBC,uBAAwB,oCACxBC,0BAA2B,6CAC3BC,mCAAoC,+CACpCC,2BAA4B,yBAC5BC,mCAAoC,2BACpCC,oBAAqB,oCACrBC,gCAAiC,+CACjCC,wBAAyB,yBACzBC,8BAA+B,6CAC/BC,6BAA8B,OAC9BC,6BAA8B,OAC9BC,gCAAiC,2BACjCC,iCAAkC,WAClCC,yCAA0C,mBAC1CC,0BAA2B,OAC3BC,8BAA+B,WAC/BC,iCAAkC,wBAClCC,oCAAqC,sBACrCC,+CAAgD,WAChDC,qCAAsC,WACtCC,oCAAqC,OACrCC,+BAAgC,sBAChCC,6CAA8C,WAC9CC,kCAAmC,OACnCC,gCAAiC,uBACjCC,8CAA+C,WAC/CC,mCAAoC,OACpCC,oCAAqC,kCACrCC,kDAAmD,WACnDC,mCAAoC,4BACpCC,mCAAoC,2BACpCC,sBAAuB,QACvBC,qBAAsB,OACtBC,wBAAyB,UACzBC,sBAAuB,QACvBC,qBAAsB,OACtBC,8BAA+B,SAC/BC,4BAA6B,OAC7BC,kBAAmB,aACnBC,mBAAoB,gBAnGX7c,OAAA6K,GAAA,EAAA7K,CAAA+c,GAAA,yBAoGiB,oBApGjB/c,OAAA6K,GAAA,EAAA7K,CAAA+c,GAAA,qBAqGa,WArGb/c,OAAA6K,GAAA,EAAA7K,CAAA+c,GAAA,qBAsGa,WAtGb/c,OAAA6K,GAAA,EAAA7K,CAAA+c,GAAA,mBAuGW,SAvGX/c,OAAA6K,GAAA,EAAA7K,CAAA+c,GAwGT,kBAAkB,yBAxGT/c,OAAA6K,GAAA,EAAA7K,CAAA+c,GAyGT,iBAAiB,wBAzGR/c,OAAA6K,GAAA,EAAA7K,CAAA+c,GA0GT,WAAW,sBA1GF/c,OAAA6K,GAAA,EAAA7K,CAAA+c,GA2GT,WAAW,yBA3GFA,IFYPntB,oBAAqB,IAIZotB,GAAa,CACxBC,IAAK,CACDzmB,SAAU,MACVpB,WAAY,GAEhB8nB,YAAa,CACT1mB,SAAU,cACVpB,WAAY,GAEhB+nB,QAAS,CACL3mB,SAAU,UACVpB,WAAY,GAEhBgoB,QAAS,CACL5mB,SAAU,UACVpB,WAAY,GAEhBioB,MAAO,CACH7mB,SAAU,QACVpB,WAAY,IAILkoB,GAAQ,CACnBC,WAAY,CACRvoB,KAAM,aACNK,OAAQ,GAEZmoB,UAAW,CACPxoB,KAAM,YACNK,OAAQ,GAEZooB,IAAK,CACDzoB,KAAM,MACNK,OAAQ,GAEZqoB,IAAK,CACD1oB,KAAM,MACNK,OAAQ,IGpDRsoB,GAAc/iB,aAAagjB,QAAQ,UAG5BC,GAAe,CAC1B7sB,KAAMulB,GAHcoH,IAA4B,MAIhDtmB,KAAM,CACJb,SAAU,MACVpB,WAAY,GAEdJ,KAAM,CACJA,KAAM,MACNK,OAAQ,GAEVyoB,OAAQ,CACNzM,KAAM,GACNE,SAAU,GACVwM,SAAU,GACVC,KAAM,IAERxJ,QAAS,CACP5c,YAAY,EACZpH,KAAM,GACNiH,UAAW,GACX3C,QAAS,GACT2J,SAAU,IAEZrH,KAAM,CACJuZ,YAAY,EACZ/Y,YAAY,EACZsC,YAAY,EACZ1J,KAAM,GACNytB,IAAK,IAEPnpB,QAAS,CACP8C,YAAY,EACZ4I,YAAa,GACbwE,cAAe,IAEjBsD,mBAAoB,CAClB1Q,YAAY,EACZ6O,uBAAwB,GACxBQ,mBAAoB,IAEtBxP,UAAW,CACTG,YAAY,EACZhI,oBAAqB,EACrBuF,cAAe,GACfyJ,gBAAiB,IAEnB4H,qBAAsB,CACpB5O,YAAY,EACZ6O,uBAAwB,GACxBQ,mBAAoB,IAEtBxI,SAAU,CACR7G,YAAY,EACZsmB,mBAAoB,GACpB9Y,eAAgB,IAElByE,oBAAqB,CACnBjS,YAAY,EACZ6O,uBAAwB,GACxBQ,mBAAoB,IAGtBtD,cAAe,CAEb/L,YAAY,EACZH,UAAW,GACX3C,QAAS,GACT2J,SAAU,IAGZxL,MAAO,CAEL2E,YAAY,EACZzB,OAAQ,IAGVgoB,iBAAkB,CAEhBvmB,YAAY,EACZzB,OAAQ,KChDGioB,GAnBCC,aAAgB,CAC9BrtB,KCZkB,WAAuC,IAAtCmG,EAAsCmnB,UAAAruB,OAAA,QAAAgd,IAAAqR,UAAA,GAAAA,UAAA,GAA9BT,GAAa7sB,KAAMutB,EAAWD,UAAAruB,OAAA,EAAAquB,UAAA,QAAArR,EACzD,OAAQsR,EAAO7kB,MACf,KAAKoC,GAAL,IAAA0iB,EACoDjI,GAAQgI,EAAOE,SAAzDhkB,EADV+jB,EACU/jB,OAAQgc,EADlB+H,EACkB/H,SAAU7mB,EAD5B4uB,EAC4B5uB,oBAE1B,OADAgL,aAAaC,QAAQ,SAAUJ,GACxBuF,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEEsD,SACAgc,WACA7mB,wBAEJ,QACE,OAAOuH,IDCTE,KEfkB,WAAuC,IAAtCF,EAAsCmnB,UAAAruB,OAAA,QAAAgd,IAAAqR,UAAA,GAAAA,UAAA,GAA9BT,GAAaxmB,KAAMknB,EAAWD,UAAAruB,OAAA,EAAAquB,UAAA,QAAArR,EAEzD,OAAQsR,EAAO7kB,MACf,KAAKsC,GAAL,IAAA2iB,EACmC3B,GAAWuB,EAAOE,SAA3CjoB,EADVmoB,EACUnoB,SAAUpB,EADpBupB,EACoBvpB,WAClB,OAAO4K,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEEX,WACApB,eAEJ,QACE,OAAO+B,IFKTnC,KGhBsB,WAAuC,IAAtCmC,EAAsCmnB,UAAAruB,OAAA,QAAAgd,IAAAqR,UAAA,GAAAA,UAAA,GAA9BT,GAAaxmB,KAAMknB,EAAWD,UAAAruB,OAAA,EAAAquB,UAAA,QAAArR,EAE7D,OAAQsR,EAAO7kB,MACf,KAAKwC,GAAL,IAAA0iB,EAC2BtB,GAAMiB,EAAOE,SAA9BzpB,EADV4pB,EACU5pB,KAAMK,EADhBupB,EACgBvpB,OACd,OAAO2K,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEEnC,OACAK,WAEJ,QACE,OAAO8B,IHMTrC,QI0BkB,WAA0C,IAAzCqC,EAAyCmnB,UAAAruB,OAAA,QAAAgd,IAAAqR,UAAA,GAAAA,UAAA,GAAjCT,GAAa/oB,QAASypB,EAAWD,UAAAruB,OAAA,EAAAquB,UAAA,QAAArR,EAC1D,OAAQsR,EAAO7kB,MACf,KAAKnL,GACD,OAAOyR,OAAA0e,GAAA,EAAA1e,CAAA,GACA7I,EADP,CAEIS,YAAY,IAEpB,KAAKpJ,GACD,OAAOwR,OAAA0e,GAAA,EAAA1e,CAAA,GACA7I,EADP,CAEIS,YAAY,EACZ4I,YAAa+d,EAAOE,QAAQrqB,OAEpC,KAAK3F,GACD,OAAOuR,OAAA0e,GAAA,EAAA1e,CAAA,GACA7I,EADP,CAEIS,YAAY,EACZoN,cAAeuZ,EAAOE,QAAQrqB,OAEtC,KAAK1F,GACD,OAAOsR,OAAA0e,GAAA,EAAA1e,CAAA,GACA7I,EADP,CAEIS,YAAY,IAEpB,KAAKgF,GACD,OAAOoD,OAAA0e,GAAA,EAAA1e,CAAA,GACA7I,EADP,CAEI9G,QAAS,KAEjB,QACI,OAAO8G,IJvDbM,UKAkB,WAA4C,IAA3CN,EAA2CmnB,UAAAruB,OAAA,QAAAgd,IAAAqR,UAAA,GAAAA,UAAA,GAAnCT,GAAapmB,UAAW8mB,EAAWD,UAAAruB,OAAA,EAAAquB,UAAA,QAAArR,EAC9D,OAAQsR,EAAO7kB,MACf,KAAKnL,EACH,OAAOyR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,IAEhB,KAAKpJ,EACH,OAAOwR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,EACZzC,cAAeopB,EAAOE,QAAQrqB,OAElC,KAAK3F,EACH,OAAOuR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,EACZgH,gBAAiB2f,EAAOE,QAAQrqB,OAEpC,KAAK1F,EACH,OAAOsR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,IAEhB,KAAKjJ,EACH,OAAOqR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEEvH,oBAAqBuS,SAASoc,EAAOE,WAEzC,KAAK5vB,EACH,OAAOmR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,EACZgH,gBAAiB2f,EAAOE,QAAQrqB,OAEpC,QACE,OAAO+C,ILnCTqP,qBMdkB,WAAuD,IAAtDrP,EAAsDmnB,UAAAruB,OAAA,QAAAgd,IAAAqR,UAAA,GAAAA,UAAA,GAA9CT,GAAarX,qBAAsB+X,EAAWD,UAAAruB,OAAA,EAAAquB,UAAA,QAAArR,EACzE,OAAQsR,EAAO7kB,MACf,KAAKnL,GACH,OAAOyR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,IAEhB,KAAKpJ,GACH,OAAOwR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,EACZ6O,uBAAwB8X,EAAOE,QAAQrqB,OAE3C,KAAK3F,GACH,OAAOuR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,EACZqP,mBAAoBsX,EAAOE,QAAQrqB,OAEvC,KAAK1F,GACH,OAAOsR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,IAEhB,KAAK6N,GACH,OAAOzF,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEE8P,mBAAoBsX,EAAOE,QAAQrqB,OAEvC,QACE,OAAO+C,INfTmR,mBOdkB,WAAqD,IAApDnR,EAAoDmnB,UAAAruB,OAAA,QAAAgd,IAAAqR,UAAA,GAAAA,UAAA,GAA5CT,GAAavV,mBAAoBiW,EAAWD,UAAAruB,OAAA,EAAAquB,UAAA,QAAArR,EACvE,OAAQsR,EAAO7kB,MACf,KAAKnL,GACH,OAAOyR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,IAEhB,KAAKpJ,GACH,OAAOwR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,EACZ6O,uBAAwB8X,EAAOE,QAAQrqB,OAE3C,KAAK3F,GACH,OAAOuR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,EACZqP,mBAAoBsX,EAAOE,QAAQrqB,OAEvC,KAAK1F,GACH,OAAOsR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,IAEhB,KAAKiQ,GACH,OAAO7H,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEE8P,mBAAoBsX,EAAOE,QAAQrqB,OAEvC,QACE,OAAO+C,IPfTC,KQGkB,WAAuC,IAAtCD,EAAsCmnB,UAAAruB,OAAA,QAAAgd,IAAAqR,UAAA,GAAAA,UAAA,GAA9BT,GAAazmB,KAAMmnB,EAAWD,UAAAruB,OAAA,EAAAquB,UAAA,QAAArR,EACzD,OAAQsR,EAAO7kB,MACf,KAAK8U,GACH,OAAOxO,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEE+C,YAAY,EACZ1J,KAAM+tB,EAAOE,QAAQrqB,KACrB6pB,IAAKM,EAAOE,QAAQrqB,KAAK6pB,MAE7B,KAAKxP,GAOL,KAAKF,GACH,OAAOvO,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEE+C,YAAY,EACZ1J,KAAM,GACNytB,IAAK,KAET,KAAK1vB,GACH,OAAOyR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,IAEhB,KAAKlJ,GACH,OAAOsR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,IAEhB,KAAK0W,GACH,OAAOtO,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,EACZpH,KAAM+tB,EAAOE,QAAQrqB,OAEzB,KAAKya,GACH,OAAO7O,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEEwZ,YAAY,IAEhB,QACE,OAAOxZ,IR/CT2mB,OQToB,WAAyC,IAAxC3mB,EAAwCmnB,UAAAruB,OAAA,QAAAgd,IAAAqR,UAAA,GAAAA,UAAA,GAAhCT,GAAaC,OAC1C,QAD6DQ,UAAAruB,OAAA,EAAAquB,UAAA,QAAArR,GAC9CvT,MACf,KAAKoU,GACH,OAAO9N,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,GAEP,QACE,OAAOA,IRGTqd,QQkDqB,WAA0C,IAAzCrd,EAAyCmnB,UAAAruB,OAAA,QAAAgd,IAAAqR,UAAA,GAAAA,UAAA,GAAjCT,GAAarJ,QAAS+J,EAAWD,UAAAruB,OAAA,EAAAquB,UAAA,QAAArR,EAC/D,OAAQsR,EAAO7kB,MACf,KAAKnL,GACH,OAAOyR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,IAEhB,KAAKgX,GACH,OAAO5O,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,EACZpH,KAAM+tB,EAAOE,QAAQrqB,OAEzB,KAAK0a,GACH,OAAO9O,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,EACZH,UAAW8mB,EAAOE,QAAQrqB,OAE9B,KAAK2a,GACH,OAAO/O,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,EACZ9C,QAASypB,EAAOE,QAAQrqB,OAE5B,KAAK4a,GACH,OAAOhP,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,EACZ6G,SAAU8f,EAAOE,QAAQrqB,OAE7B,KAAK6a,GACH,OAAOjP,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,EACZ+b,WAAY4K,EAAOE,QAAQrqB,OAE/B,QACE,OAAO+C,IRvFTsH,SSlBkB,WAA2C,IAA1CtH,EAA0CmnB,UAAAruB,OAAA,QAAAgd,IAAAqR,UAAA,GAAAA,UAAA,GAAlCT,GAAapf,SAAU8f,EAAWD,UAAAruB,OAAA,EAAAquB,UAAA,QAAArR,EAC7D,OAAQsR,EAAO7kB,MACf,KAAKnL,GACH,OAAOyR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,IAEhB,KAAKwF,GAML,KAAKS,GACH,OAAOmC,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,EACZiH,aAAc0f,EAAOE,QAAQrqB,OAEjC,KAAKqJ,GACH,OAAOuC,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,EACZsmB,mBAAoBK,EAAOE,QAAQrqB,OAEvC,KAAKsJ,GACH,OAAOsC,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,EACZwN,eAAgBmZ,EAAOE,QAAQrqB,OAEnC,QACE,OAAO+C,ITbT0S,oBUpBkB,WAAsD,IAArD1S,EAAqDmnB,UAAAruB,OAAA,QAAAgd,IAAAqR,UAAA,GAAAA,UAAA,GAA7CT,GAAahU,oBAAqB0U,EAAWD,UAAAruB,OAAA,EAAAquB,UAAA,QAAArR,EACxE,OAAQsR,EAAO7kB,MACf,KAAKnL,GACH,OAAOyR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,IAEhB,KAAKpJ,GACH,OAAOwR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,EACZ6O,uBAAwB8X,EAAOE,QAAQrqB,OAE3C,KAAK3F,GACH,OAAOuR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,EACZqP,mBAAoBsX,EAAOE,QAAQrqB,OAEvC,KAAK1F,GACH,OAAOsR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,IAEhB,KAAKuR,GACH,OAAOnJ,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEE8P,mBAAoBsX,EAAOE,QAAQrqB,OAEvC,QACE,OAAO+C,IVTTwM,cWvBkB,WAAgD,IAA/CxM,EAA+CmnB,UAAAruB,OAAA,QAAAgd,IAAAqR,UAAA,GAAAA,UAAA,GAAvCT,GAAala,cAAe4a,EAAWD,UAAAruB,OAAA,EAAAquB,UAAA,QAAArR,EAClE,OAAQsR,EAAO7kB,MACf,KAAKnL,GACH,OAAOyR,OAAA0e,GAAA,EAAA1e,CAAA,GAEF7I,EAFL,CAGES,YAAY,IAGhB,KAAKpJ,GAAL,IAAAqwB,EAE2CN,EAAOE,QAAxChnB,EAFVonB,EAEUpnB,UAAW3C,EAFrB+pB,EAEqB/pB,QAAS2J,EAF9BogB,EAE8BpgB,SAE5B,OAAOuB,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAGES,YAAY,EAEZH,YACA3C,UACA2J,aAGJ,QACE,OAAOtH,IXATlE,MYtBoB,WAAwC,IAAvCkE,EAAuCmnB,UAAAruB,OAAA,QAAAgd,IAAAqR,UAAA,GAAAA,UAAA,GAA/BT,GAAa5qB,MAAOsrB,EAAWD,UAAAruB,OAAA,EAAAquB,UAAA,QAAArR,EAC1D,OAAQsR,EAAO7kB,MACf,KAAK1H,GACH,OAAOgO,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,GAEP,KAAK5I,GACH,OAAOyR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,IAEhB,KAAKpJ,GACH,OAAOwR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,EACZzC,cAAeopB,EAAOE,QAAQrqB,OAElC,KAAK1F,GACH,OAAOsR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,IAEhB,QACE,OAAOT,IZAXgnB,iBaZkB,WAAmD,IAAlDhnB,EAAkDmnB,UAAAruB,OAAA,QAAAgd,IAAAqR,UAAA,GAAAA,UAAA,GAA1CT,GAAaM,iBAAkBI,EAAWD,UAAAruB,OAAA,EAAAquB,UAAA,QAAArR,EACrE,OAAQsR,EAAO7kB,MACf,KAAKnL,GACH,OAAOyR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,IAEhB,KAAKpJ,GACH,OAAOwR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,EACZzB,OAAQooB,EAAOE,QAAQrqB,OAE3B,KAAK1F,GACH,OAAOsR,OAAA0e,GAAA,EAAA1e,CAAA,GACF7I,EADL,CAEES,YAAY,IAEhB,QACE,OAAOT,IbNT2nB,cAAeC,sEc/BJ1P,GAAoB,SAAChV,GAC9B,OAAO2kB,KAAMC,KAAK,aAAc5kB,IAGvBrH,GAAY,SAACqH,GACtB,IAAM6kB,EAAW7kB,EAASgX,KAClBE,EAAalX,EAAbkX,SAER,OAAOyN,KAAMC,KAAK,mBAAoB,CAClCC,WACA3N,cAIKjC,GAAe,SAACjV,GAAa,IAC9B4jB,EAAQ5jB,EAAR4jB,IACFkB,EAAU,CACZC,eAAgB,mBAChBC,cAAA,UAAA/sB,OAA2B2rB,IAE/B,OAAOe,KAAMC,KAAK,uBAAwB,GAAI,CAAEE,aAGvC5O,GAAe,SAAClW,GAAa,IAChCgY,EAAUhY,EAAVgY,MACR,OAAO2M,KAAMC,KAAN,uBAAA3sB,OAAkC+f,GAAShY,IAGvCilB,GAAgB,SAACjlB,GAC5B,OAAO2kB,KAAMC,KAAN,4BAAwC5kB,IAGpCoV,GAAmB,SAACpV,GAAa,IACpCgY,EAAUhY,EAAVgY,MACR,OAAO2M,KAAMO,IAAN,8BAAAjtB,OACyB+f,GAC9BhY,IAISmlB,GAAkB,SAACnlB,GAAa,IACjCvG,EAA8CuG,EAA9CvG,QAASnD,EAAqC0J,EAArC1J,KAAM6jB,EAA+Bna,EAA/Bma,QAAS9hB,EAAsB2H,EAAtB3H,WAAY0iB,EAAU/a,EAAV+a,MACxChhB,EAAO,IAAIqrB,SAKf,OAJArrB,EAAKsrB,OAAO,OAAQ/uB,GACpByD,EAAKsrB,OAAO,UAAWlL,GACvBpgB,EAAKsrB,OAAO,aAAchtB,GAC1B0B,EAAKsrB,OAAO,QAAStK,GACd4J,KAAMO,IAAN,cAAAjtB,OACWwB,GACdM,EACA,CACI+qB,QAAS,CACLC,eAAgB,0BAMnBO,GAAU,SAAC7rB,GACpB,OAAOkrB,KAAMY,IAAN,cAAAttB,OAAwBwB,KAGtBic,GAAiB,SAACsC,GAC7B,OAAO2M,KAAMY,IAAN,6BAAAttB,OAAuC+f,KC/DnCtjB,GAAoB,SAACyI,GAC9B,OAAOwnB,KAAMY,IAAI,iBAAkB,CAC/BpoB,YAIKvI,GAAgB,SAACgC,GAC1B,OAAO+tB,KAAMY,IAAN,kBAAAttB,OAA4BrB,KAG1B/B,GAAmB,SAACmL,GAC7B,OAAO2kB,KAAMC,KAAK,iBAAkB5kB,IAG3B9K,GAAmB,SAAC8K,GAAa,IACpCrE,EAAgBqE,EAAhBrE,YACR,OAAOgpB,KAAMO,IAAN,kBAAAjtB,OAA4B0D,GAAeqE,IAGvCwlB,GAAqB,SAACroB,GAAW,IACpCxB,EAAgBwB,EAAhBxB,YACR,OAAOgpB,KAAMc,OAAN,kBAAAxtB,OAA+B0D,GAAe,CAAEwB,YCrBnDuoB,GAAS,eAEF/iB,GAAc,SAAC/L,GAC1B,OAAO+tB,KAAMY,IAAN,GAAAttB,OAAaytB,GAAb,KAAAztB,OAAuBrB,KAGnB8L,GAAkB,SAACvF,GAC9B,OAAOwnB,KAAMY,IAAIG,GAAQ,CACvBvoB,YAISwoB,GAA8B,SAACxoB,GAC1C,OAAOwnB,KAAMY,IAAN,GAAAttB,OAAaytB,GAAb,kBAAqC,CAC1CvoB,YAISyF,GAAiB,SAACzF,GAC7B,OAAOwnB,KAAMC,KAAKc,GAAQvoB,IAGf0F,GAAiB,SAACgG,GAAa,IAClCjN,EAAciN,EAAdjN,UACR,OAAO+oB,KAAMO,IAAN,GAAAjtB,OAAaytB,GAAb,KAAAztB,OAAuB2D,GAAaiN,IAGhC+c,GAAmB,SAACzoB,GAAW,IAClCvB,EAAcuB,EAAdvB,UACR,OAAO+oB,KAAMc,OAAN,GAAAxtB,OAAgBytB,GAAhB,KAAAztB,OAA0B2D,GAAa,CAAEuB,YC5BrC0oB,GAA2B,SAAC1oB,GACvC,OAAOwnB,KAAMY,IAAN,0BAAqC,CAC1CpoB,YAIS2oB,GAAoB,SAAC3oB,GAC9B,OAAOwnB,KAAMY,IATF,gBASc,CACrBpoB,YAIK4oB,GAAe,SAACnvB,GACzB,OAAO+tB,KAAMY,IAAN,GAAAttB,OAfI,gBAeJ,KAAAA,OAAuBrB,KAGrBovB,GAA6B,SAAC7oB,GACzC,OAAOwnB,KAAMY,IAAN,GAAAttB,OAnBM,gBAmBN,gBAAmC,CACxCkF,YAIS8oB,GAAkB,SAACjmB,GAC5B,OAAO2kB,KAAMC,KAzBF,gBAyBe5kB,IAGjB8D,GAAkB,SAAC+E,GAAa,IACnChN,EAAegN,EAAfhN,WACR,OAAO8oB,KAAMO,IAAN,GAAAjtB,OA9BM,gBA8BN,KAAAA,OAAuB4D,GAAcgN,IAGjCqd,GAAoB,SAAC/oB,GAAW,IACnCtB,EAAesB,EAAftB,WACR,OAAO8oB,KAAMc,OAAN,GAAAxtB,OAnCM,gBAmCN,KAAAA,OAA0B4D,GAAc,CAAEsB,YClCtCgpB,GAA0B,SAAEhpB,GACrC,OAAOwnB,KAAMY,IAAN,4BAAsC,CAC3CpoB,YCFC,SAASipB,GAAcjmB,GAC5B,OAAOkmB,2BAAO,CACZlmB,UACAmmB,SAAU,KACVxqB,OAAQ,UACRyqB,aAAc,MAIX,SAASC,GAAYrmB,GAC1B,OAAOkmB,2BAAO,CACZlmB,UACAmmB,SAAU,KACVxqB,OAAQ,QACRyqB,aAAc,uBCWDvR,iBAgBAyR,iBAmBAC,iBAeAC,iBAcAxR,iBAcAC,iBAkBA6P,iBAgBAxP,iBA0BAC,iBAWAQ,IArJV,SAAUlB,GAAkBkP,GAA5B,IAAApkB,EAAAskB,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGH,OAFMlnB,EAAYokB,EAAOE,QAAnBtkB,QADHgnB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGG9B,aAAIpwB,MAHP,OAIa,OAJbgyB,EAAAE,KAAA,EAImBjhB,aAAKkhB,GAAuB/C,EAAOE,SAJtD,OAKH,OADMA,EAJH0C,EAAAI,KAAAJ,EAAAE,KAAA,EAKG9B,aAAInwB,GAAmBqvB,IAL1B,OAOH,MADgB,qEANb0C,EAAAE,KAAA,GAOG9B,aAAIkB,GADM,uEANb,QAQH,OARGU,EAAAE,KAAA,GAQGjhB,aAAKjG,EAAQpF,KAAM,gBARtB,QAAAosB,EAAAE,KAAA,iBAUH,OAVGF,EAAAC,KAAA,GAAAD,EAAAK,GAAAL,EAAA,SAAAA,EAAAE,KAAA,GAUG9B,aAAIjwB,MAVP,QAYH,MADgB,qEAXb6xB,EAAAE,KAAA,GAYG9B,aAAIsB,GADM,uEAXb,yBAAAM,EAAAM,SAAAC,GAAA,eAgBA,SAAUZ,GAAiBvC,GAA3B,IAAApkB,EAAAskB,EAAAR,EAAA,OAAAgD,GAAA9vB,EAAA+vB,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OAGa,OAFVlnB,EAAYokB,EAAOE,QAAnBtkB,QADHwnB,EAAAP,KAAA,EAAAO,EAAAN,KAAA,EAGmBjhB,aAAKkhB,GAAe/C,EAAOE,SAH9C,OAIH,OADMA,EAHHkD,EAAAJ,KAAAI,EAAAN,KAAA,EAIG9B,aAAI3P,GAAa6O,IAJpB,OAQH,OAHQR,EAAQQ,EAAQrqB,KAAhB6pB,IACRrjB,aAAaC,QAAQ,MAAOojB,GACZ,qEAPb0D,EAAAN,KAAA,GAQG9B,aAAIkB,GADM,uEAPb,QASH,OATGkB,EAAAN,KAAA,GASGjhB,aAAKjG,EAAQpF,KAAM,KATtB,QAAA4sB,EAAAN,KAAA,iBAcH,OAdGM,EAAAP,KAAA,GAAAO,EAAAH,GAAAG,EAAA,SAaa,+JAbbA,EAAAN,KAAA,GAcG9B,aAAIsB,GADM,iKAbb,QAeH,OAfGc,EAAAN,KAAA,GAeGjhB,aAAKjG,EAAQpF,KAAM,gBAftB,yBAAA4sB,EAAAF,SAAAG,GAAA,eAmBA,SAAUb,GAAoBxC,GAA9B,IAAAN,EAAAQ,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,UAAAQ,EAAAT,KAAA,EAEGnD,EAAMrjB,aAAagjB,QAAQ,OAF9B,CAAAiE,EAAAR,KAAA,cAIK,IAAIza,MAAM,iDAJf,OAMa,OANbib,EAAAR,KAAA,EAMmBjhB,aAAKkhB,GAAkB,CAAErD,QAN5C,OAOH,OADMQ,EANHoD,EAAAN,KAAAM,EAAAR,KAAA,EAOG9B,aAAI3P,GAAa6O,IAPpB,OAQH,OARGoD,EAAAR,KAAA,GAQG9B,aAAItP,MARP,QAAA4R,EAAAR,KAAA,iBAUH,OAVGQ,EAAAT,KAAA,GAAAS,EAAAL,GAAAK,EAAA,SAAAA,EAAAR,KAAA,GAUG9B,aAAI1P,MAVP,QAWH,OAXGgS,EAAAR,KAAA,GAWG9B,aAAItP,MAXP,yBAAA4R,EAAAJ,SAAAK,GAAA,eAeA,SAAUd,GAAkBzC,GAA5B,IAAApkB,EAAA,OAAA8mB,GAAA9vB,EAAA+vB,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,OAIH,OAJGU,EAAAX,KAAA,EAEKjnB,EAAYokB,EAAOE,QAAnBtkB,QACRS,aAAaonB,WAAW,OAHrBD,EAAAV,KAAA,EAIG9B,aAAI5P,MAJP,OAMH,MADgB,yDALboS,EAAAV,KAAA,EAMG9B,aAAIkB,GADM,2DALb,OAOH,OAPGsB,EAAAV,KAAA,GAOGjhB,aAAKjG,EAAQpF,KAAM,KAPtB,QAAAgtB,EAAAV,KAAA,iBAAAU,EAAAX,KAAA,GAAAW,EAAAP,GAAAO,EAAA,kCAAAA,EAAAN,SAAAQ,GAAA,eAcA,SAAUzS,GAAa+O,GAAvB,IAAAE,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,OAEH,OAFGa,EAAAd,KAAA,EAAAc,EAAAb,KAAA,EAEG9B,aAAIpwB,MAFP,OAGa,OAHb+yB,EAAAb,KAAA,EAGmBjhB,aAAKkhB,GAAqB/C,EAAOE,SAHpD,OAKH,OAFMA,EAHHyD,EAAAX,KAIa,iFAJbW,EAAAb,KAAA,EAKG9B,aAAIkB,GADM,mFAJb,OAMH,OANGyB,EAAAb,KAAA,GAMG9B,aAAI7P,GAAgB+O,IANvB,QAAAyD,EAAAb,KAAA,iBASH,OATGa,EAAAd,KAAA,GAAAc,EAAAV,GAAAU,EAAA,SAQa,mGARbA,EAAAb,KAAA,GASG9B,aAAIsB,GADM,qGARb,QAUH,OAVGqB,EAAAb,KAAA,GAUG9B,aAAIjwB,MAVP,yBAAA4yB,EAAAT,SAAAU,GAAA,eAcA,SAAU1S,GAAiB8O,GAA3B,IAAApkB,EAAAskB,EAAAR,EAAA,OAAAgD,GAAA9vB,EAAA+vB,KAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,OAGH,OAHGe,EAAAhB,KAAA,EAEKjnB,EAAYokB,EAAOE,QAAnBtkB,QAFLioB,EAAAf,KAAA,EAGG9B,aAAIpwB,MAHP,OAIa,OAJbizB,EAAAf,KAAA,EAImBjhB,aAAKkhB,GAAsB/C,EAAOE,SAJrD,OAKH,OADMA,EAJH2D,EAAAb,KAAAa,EAAAf,KAAA,EAKG9B,aAAI3P,GAAa6O,IALpB,OASH,OAHQR,EAAQQ,EAAQrqB,KAAhB6pB,IACRrjB,aAAaC,QAAQ,MAAOojB,GACZ,2EARbmE,EAAAf,KAAA,GASG9B,aAAIkB,GADM,6EARb,QAUH,OAVG2B,EAAAf,KAAA,GAUGjhB,aAAKjG,EAAQpF,KAAM,KAVtB,QAAAqtB,EAAAf,KAAA,iBAaH,OAbGe,EAAAhB,KAAA,GAAAgB,EAAAZ,GAAAY,EAAA,SAYa,6FAZbA,EAAAf,KAAA,GAaG9B,aAAIsB,GADM,+FAZb,QAcH,OAdGuB,EAAAf,KAAA,GAcG9B,aAAIjwB,MAdP,yBAAA8yB,EAAAX,SAAAY,GAAA,eAkBA,SAAU/C,GAAcf,GAAxB,IAAApnB,EAAAsD,EAAA,OAAAwmB,GAAA9vB,EAAA+vB,KAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OAEW,OAFXiB,EAAAlB,KAAA,EAAAkB,EAAAjB,KAAA,EAEiBkB,eAFjB,OAKH,OAHMprB,EAFHmrB,EAAAf,KAGK9mB,EAAWtD,EAAMnG,KAAjByJ,OACR8jB,EAAOE,QAAQhkB,OAASA,EAJrB6nB,EAAAjB,KAAA,EAKG9B,aAAIpwB,MALP,OAMa,OANbmzB,EAAAjB,KAAA,GAMmBjhB,aAAKkhB,GAAmB/C,EAAOE,SANlD,QAQH,OARG6D,EAAAf,KAOa,+DAPbe,EAAAjB,KAAA,GAQG9B,aAAIkB,GADM,iEAPb,QAAA6B,EAAAjB,KAAA,iBAWH,OAXGiB,EAAAlB,KAAA,GAAAkB,EAAAd,GAAAc,EAAA,SAUa,2EAVbA,EAAAjB,KAAA,GAWG9B,aAAIsB,GADM,6EAVb,QAYH,OAZGyB,EAAAjB,KAAA,GAYG9B,aAAIjwB,MAZP,yBAAAgzB,EAAAb,SAAAe,GAAA,eAgBA,SAAU1S,GAAeyO,GAAzB,IAAAE,EAAAgE,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA/B,GAAA9vB,EAAA+vB,KAAA,SAAA+B,GAAA,cAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,OAEH,OAFG4B,EAAA7B,KAAA,EAAA6B,EAAA5B,KAAA,EAEG9B,aAAIpwB,MAFP,OAGa,OAHb8zB,EAAA5B,KAAA,EAGmBjhB,aAAKkhB,GAAa/C,EAAOE,SAH5C,OAKqB,OAFlBA,EAHHwE,EAAA1B,KAIGkB,EAAiB,CAAC3uB,QAAUyqB,EAAOE,SAJtCwE,EAAA5B,KAAA,EAK2BjhB,aAAKrR,GAAmB0zB,GALnD,OAQmB,OAHhBC,EALHO,EAAA1B,KAOGoB,EAAe,CAAC7uB,QAAUyqB,EAAOE,SAPpCwE,EAAA5B,KAAA,GAQyBjhB,aAAK4f,GAA6B2C,GAR3D,QAWoB,OAHjBC,EARHK,EAAA1B,KAUGsB,EAAgB,CAAC/uB,QAAUyqB,EAAOE,SAVrCwE,EAAA5B,KAAA,GAW0BjhB,aAAKigB,GAA4BwC,GAX3D,QAcuB,OAHpBC,EAXHG,EAAA1B,KAaGwB,EAAkB,CAACjvB,QAAUyqB,EAAOE,SAbvCwE,EAAA5B,KAAA,GAc6BjhB,aAAKogB,GAAyBuC,GAd3D,QAgBH,OAFMC,EAdHC,EAAA1B,KAAA0B,EAAA5B,KAAA,GAgBG9B,aAAIvP,GAAmByO,IAhB1B,QAiBH,OAjBGwE,EAAA5B,KAAA,GAiBG9B,aAAIrP,GAA2BwS,IAjBlC,QAkBH,OAlBGO,EAAA5B,KAAA,GAkBG9B,aAAIpP,GAAyByS,IAlBhC,QAmBH,OAnBGK,EAAA5B,KAAA,GAmBG9B,aAAInP,GAA0B0S,IAnBjC,QAoBH,OApBGG,EAAA5B,KAAA,GAoBG9B,aAAIlP,GAA6B2S,IApBpC,QAAAC,EAAA5B,KAAA,iBAsBH,OAtBG4B,EAAA7B,KAAA,GAAA6B,EAAAzB,GAAAyB,EAAA,SAAAA,EAAA5B,KAAA,GAsBG9B,aAAIjwB,MAtBP,yBAAA2zB,EAAAxB,SAAAyB,GAAA,eA0BA,SAAUnT,GAAewO,GAAzB,IAAAE,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAiC,GAAA,cAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,OAEH,OAFG8B,EAAA/B,KAAA,EAAA+B,EAAA9B,KAAA,EAEG9B,aAAIpwB,MAFP,OAGa,OAHbg0B,EAAA9B,KAAA,EAGmBjhB,aAAKkhB,GAAoB/C,EAAOE,SAHnD,OAIH,OADMA,EAHH0E,EAAA5B,KAAA4B,EAAA9B,KAAA,EAIG9B,aAAI7P,GAAgB+O,IAJvB,OAAA0E,EAAA9B,KAAA,iBAOH,OAPG8B,EAAA/B,KAAA,GAAA+B,EAAA3B,GAAA2B,EAAA,SAMH7oB,QAAQC,IAAI,qBANT4oB,EAAA9B,KAAA,GAOG9B,aAAIjwB,MAPP,yBAAA6zB,EAAA1B,SAAA2B,GAAA,eAWA,SAAU7S,GAAagO,GAAvB,IAAApkB,EAAAskB,EAAAR,EAAA,OAAAgD,GAAA9vB,EAAA+vB,KAAA,SAAAmC,GAAA,cAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,OAIH,OAJGgC,EAAAjC,KAAA,EAEKjnB,EAAYokB,EAAOE,QAAnBtkB,QACRG,QAAQC,IAAI,UAAWJ,GAHpBkpB,EAAAhC,KAAA,EAIG9B,aAAIpwB,MAJP,OAKa,OALbk0B,EAAAhC,KAAA,EAKmBjhB,aAAKkhB,GAAkB/C,EAAOE,SALjD,OAMH,OADMA,EALH4E,EAAA9B,KAAA8B,EAAAhC,KAAA,GAMG9B,aAAI3P,GAAa6O,IANpB,QAUH,OAHQR,EAAQQ,EAAQrqB,KAAhB6pB,IACRrjB,aAAaC,QAAQ,MAAOojB,GACZ,+DATboF,EAAAhC,KAAA,GAUG9B,aAAIkB,GADM,iEATb,QAWH,OAXG4C,EAAAhC,KAAA,GAWGjhB,aAAKjG,EAAQpF,KAAM,KAXtB,QAAAsuB,EAAAhC,KAAA,iBAcH,OAdGgC,EAAAjC,KAAA,GAAAiC,EAAA7B,GAAA6B,EAAA,SAaH/oB,QAAQC,IAAI,qBAbT8oB,EAAAhC,KAAA,GAcG9B,aAAIjwB,MAdP,yBAAA+zB,EAAA5B,SAAA6B,GAAA,eAkBP,IAaeC,GAbG,CAChBC,aAAU3V,GAAqBwB,IAC/BmU,aAAUxV,GAAY8S,IACtB0C,aAAUvV,GAAgB8S,IAC1ByC,aAAUtV,GAAa8S,IACvBwC,aAAUpV,GAAgBoB,IAC1BgU,aAAUnV,GAAoBoB,IAC9B+T,aAAU9U,GAAkBoB,IAC5B0T,aAAU7U,GAAmBoB,IAC7ByT,aAAUtU,GAA0BoQ,IACpCkE,aAAUpU,GAAemB,kBCvLV7Y,iBAUA+rB,iBAWAC,iBAoBAn0B,iBAcAswB,IAvDV,SAAUnoB,GAAgB6mB,GAA1B,IAAAE,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEH,OAFGF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEG9B,aAAIpwB,KAFP,OAGa,OAHbgyB,EAAAE,KAAA,EAGmBjhB,aAAKkhB,GAAuB/C,EAAOE,SAHtD,OAIH,OADMA,EAHH0C,EAAAI,KAAAJ,EAAAE,KAAA,EAIG9B,aAAInwB,EAAmBqvB,IAJ1B,OAAA0C,EAAAE,KAAA,iBAMH,OANGF,EAAAC,KAAA,GAAAD,EAAAK,GAAAL,EAAA,SAAAA,EAAAE,KAAA,GAMG9B,aAAIjwB,KANP,yBAAA6xB,EAAAM,SAAAkC,GAAA,eAUA,SAAUF,GAAwBlF,GAAlC,IAAAttB,EAAAwtB,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OAGH,OAHGM,EAAAP,KAAA,EAEInwB,EAAOstB,EAAOE,QAFlBkD,EAAAN,KAAA,EAGG9B,aAAIpwB,KAHP,OAIa,OAJbwyB,EAAAN,KAAA,EAImBjhB,aAAKkhB,GAAmBrwB,GAJ3C,OAKH,OADMwtB,EAJHkD,EAAAJ,KAAAI,EAAAN,KAAA,EAKG9B,aAAIlwB,EAAyBovB,IALhC,OAAAkD,EAAAN,KAAA,iBAOH,OAPGM,EAAAP,KAAA,GAAAO,EAAAH,GAAAG,EAAA,SAAAA,EAAAN,KAAA,GAOG9B,aAAIjwB,KAPP,yBAAAqyB,EAAAF,SAAAmC,GAAA,eAWA,SAAUF,GAAanF,GAAvB,IAAAE,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,OAEH,OAFGQ,EAAAT,KAAA,EAAAS,EAAAR,KAAA,EAEG9B,aAAIpwB,KAFP,OAGH,OAHG0yB,EAAAR,KAAA,EAGGjhB,aAAKkhB,GAAsB/C,EAAOE,SAHrC,OAIa,OAJboD,EAAAR,KAAA,EAImBjhB,aAAKkhB,IAJxB,OAKH,OADM7C,EAJHoD,EAAAN,KAAAM,EAAAR,KAAA,GAKG9B,aAAInwB,EAAmBqvB,IAL1B,QAAAoD,EAAAR,KAAA,iBAOH,OAPGQ,EAAAT,KAAA,GAAAS,EAAAL,GAAAK,EAAA,SAAAA,EAAAR,KAAA,GAOG9B,aAAIjwB,KAPP,yBAAAuyB,EAAAJ,SAAAoC,GAAA,eAoBA,SAAUt0B,GAAiBgvB,GAA3B,IAAAE,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,OAEH,OAFGa,EAAAd,KAAA,EAAAc,EAAAb,KAAA,EAEG9B,aAAIpwB,KAFP,OAGa,OAHb+yB,EAAAb,KAAA,EAGmBjhB,aAAKkhB,GAAsB/C,EAAOE,SAHrD,OAKH,OAFMA,EAHHyD,EAAAX,KAIa,yDAJbW,EAAAb,KAAA,EAKG9B,aAAIkB,GADM,2DAJb,OAMH,OANGyB,EAAAb,KAAA,GAMG9B,aAAI/vB,EAAoBivB,IAN3B,QAAAyD,EAAAb,KAAA,iBASH,OATGa,EAAAd,KAAA,GAAAc,EAAAV,GAAAU,EAAA,SAQa,2EARbA,EAAAb,KAAA,GASG9B,aAAIsB,GADM,6EARb,QAUH,OAVGqB,EAAAb,KAAA,GAUG9B,aAAIjwB,KAVP,yBAAA4yB,EAAAT,SAAAqC,GAAA,eAcA,SAAUjE,GAAmBtB,GAA7B,IAAAM,EAAA1kB,EAAAskB,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,OAGH,OAHGe,EAAAhB,KAAA,EAAAvC,EAE8BN,EAAOE,QAFrCI,EAEK7oB,YAAamE,EAFlB0kB,EAEkB1kB,QAFlBioB,EAAAf,KAAA,EAGG9B,aAAIpwB,KAHP,OAIH,OAJGizB,EAAAf,KAAA,EAIGjhB,aAAKkhB,GAAwB/C,EAAOE,SAJvC,OAMH,MADgB,yDALb2D,EAAAf,KAAA,EAMG9B,aAAIkB,GADM,2DALb,OAOa,OAPb2B,EAAAf,KAAA,GAOmBjhB,aAAKkhB,IAPxB,QAQH,OADM7C,EAPH2D,EAAAb,KAAAa,EAAAf,KAAA,GAQG9B,aAAInwB,EAAmBqvB,IAR1B,QASH,OATG2D,EAAAf,KAAA,GASGjhB,aAAKjG,EAAQpF,KAAM,KATtB,QAAAqtB,EAAAf,KAAA,iBAYH,OAZGe,EAAAhB,KAAA,GAAAgB,EAAAZ,GAAAY,EAAA,SAWa,2EAXbA,EAAAf,KAAA,GAYG9B,aAAIsB,GADM,6EAXb,QAaH,OAbGuB,EAAAf,KAAA,GAaG9B,aAAIjwB,KAbP,yBAAA8yB,EAAAX,SAAAsC,GAAA,eAiBP,IAUeC,GAVO,CAEpBR,aAAUr1B,EAAqBuJ,IAC/B8rB,aAAUn1B,EAAgBo1B,IAE1BD,aAAUl1B,EAAoBo1B,IAC9BF,aAAU50B,EAAoBW,IAC9Bi0B,aAAU10B,EAAiB+wB,2BClFZoE,iBAcAC,iBAaAC,iBAWAjnB,iBAeA+iB,IArDV,SAAUgE,GAAsB1F,GAAhC,IAAA3c,EAAAlD,EAAAS,EAAA,OAAA8hB,GAAA9vB,EAAA+vB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEH,OAFGF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEG9B,aAAIpwB,MAFP,OAGgB,OAHhBgyB,EAAAE,KAAA,EAGsBjhB,aAAKkhB,GAAqB/C,EAAOE,SAHvD,OAKiB,OAFd7c,EAHHuf,EAAAI,KAIG7iB,EAAWkD,EAAWxN,KAAKjE,IAAI,SAAAJ,GAAM,OAAOA,EAAEkB,KAJjDkwB,EAAAE,KAAA,EAKuBjhB,aAAK8f,GAA0BxhB,GALtD,OAMH,OADMS,EALHgiB,EAAAI,KAAAJ,EAAAE,KAAA,GAMG9B,aAAInwB,GAAmBwS,IAN1B,QAOH,OAPGuf,EAAAE,KAAA,GAOG9B,aAAI6E,GAA8BjlB,IAPrC,QAQH,OARGgiB,EAAAE,KAAA,GAQG9B,aAAI6E,GAAwB7F,EAAOE,UARtC,QAAA0C,EAAAE,KAAA,iBAUH,OAVGF,EAAAC,KAAA,GAAAD,EAAAK,GAAAL,EAAA,SAAAA,EAAAE,KAAA,GAUG9B,aAAIjwB,MAVP,yBAAA6xB,EAAAM,SAAA4C,GAAA,eAcA,SAAUH,GAAW3F,GAArB,IAAAM,EAAA7oB,EAAAhG,EAAA4yB,EAAA,OAAA3B,GAAA9vB,EAAA+vB,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OAEH,OAFGM,EAAAP,KAAA,EAAAO,EAAAN,KAAA,EAEG9B,aAAIpwB,MAFP,OAGa,OAHbwyB,EAAAN,KAAA,EAGmBjhB,aAAKkhB,GAAoB/C,EAAOE,SAHnD,OAKmB,OALnBkD,EAAAJ,KAAA1C,EAI4CN,EAAOE,QAA9CzoB,EAJL6oB,EAIK7oB,YAAahG,EAJlB6uB,EAIkB7uB,sBAJlB2xB,EAAAN,KAAA,EAKyBjhB,aAAKkhB,GAAqB,CAAEtrB,cAAahG,0BALlE,OAMH,OADM4yB,EALHjB,EAAAJ,KAAAI,EAAAN,KAAA,GAMG9B,aAAInwB,GAAmBwzB,IAN1B,QAOH,OAPGjB,EAAAN,KAAA,GAOG9B,aAAI+E,aAAM,eAPb,QAAA3C,EAAAN,KAAA,iBASH,OATGM,EAAAP,KAAA,GAAAO,EAAAH,GAAAG,EAAA,SAAAA,EAAAN,KAAA,GASG9B,aAAIjwB,MATP,yBAAAqyB,EAAAF,SAAA8C,GAAA,eAaA,SAAUJ,GAAsB5F,GAAhC,IAAAE,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,OAEH,OAFGQ,EAAAT,KAAA,EAAAS,EAAAR,KAAA,EAEG9B,aAAIpwB,MAFP,OAGa,OAHb0yB,EAAAR,KAAA,EAGmBjhB,aAAKkhB,GAAiB/C,EAAOE,SAHhD,OAIH,OADMA,EAHHoD,EAAAN,KAAAM,EAAAR,KAAA,EAIG9B,aAAIlwB,GAAyBovB,IAJhC,OAKH,OALGoD,EAAAR,KAAA,GAKG9B,aAAI+E,aAAM,eALb,QAAAzC,EAAAR,KAAA,iBAOH,OAPGQ,EAAAT,KAAA,GAAAS,EAAAL,GAAAK,EAAA,SAAAA,EAAAR,KAAA,GAOG9B,aAAIjwB,MAPP,yBAAAuyB,EAAAJ,SAAA+C,GAAA,eAWA,SAAUtnB,GAAeqhB,GAAzB,IAAAkG,EAAAzuB,EAAAmE,EAAA,OAAA8mB,GAAA9vB,EAAA+vB,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,OAGH,OAHGU,EAAAX,KAAA,EAAAqD,EAE8BlG,EAAOE,QAAhCzoB,EAFLyuB,EAEKzuB,YAAamE,EAFlBsqB,EAEkBtqB,QAFlB4nB,EAAAV,KAAA,EAGG9B,aAAIpwB,MAHP,OAIa,OAJb4yB,EAAAV,KAAA,EAImBjhB,aAAKkhB,GAAoB/C,EAAOE,SAJnD,OAMH,OANGsD,EAAAR,KAKa,yDALbQ,EAAAV,KAAA,GAMG9B,aAAIkB,GADM,2DALb,QAOH,OAPGsB,EAAAV,KAAA,GAOGjhB,aAAKjG,EAAQpF,KAAT,cAAAzC,OAA6B0D,IAPpC,QAAA+rB,EAAAV,KAAA,iBAUH,OAVGU,EAAAX,KAAA,GAAAW,EAAAP,GAAAO,EAAA,SASa,2EATbA,EAAAV,KAAA,GAUG9B,aAAIsB,GADM,6EATb,QAWH,OAXGkB,EAAAV,KAAA,GAWG9B,aAAIjwB,MAXP,yBAAAyyB,EAAAN,SAAAiD,GAAA,eAeA,SAAUzE,GAAiB1B,GAA3B,IAAAoG,EAAA3uB,EAAAmE,EAAA,OAAA8mB,GAAA9vB,EAAA+vB,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,OAGH,OAHGa,EAAAd,KAAA,EAAAuD,EAEyCpG,EAAOE,QAFhDkG,EAEK1uB,UAAWD,EAFhB2uB,EAEgB3uB,YAAamE,EAF7BwqB,EAE6BxqB,QAF7B+nB,EAAAb,KAAA,EAGG9B,aAAIpwB,MAHP,OAIH,OAJG+yB,EAAAb,KAAA,EAIGjhB,aAAKkhB,GAAsB/C,EAAOE,SAJrC,OAMH,MADgB,yDALbyD,EAAAb,KAAA,EAMG9B,aAAIkB,GADM,2DALb,OAOH,OAPGyB,EAAAb,KAAA,GAOGjhB,aAAKjG,EAAQpF,KAAT,cAAAzC,OAA6B0D,IAPpC,QAAAksB,EAAAb,KAAA,iBAUH,OAVGa,EAAAd,KAAA,GAAAc,EAAAV,GAAAU,EAAA,SASa,2EATbA,EAAAb,KAAA,GAUG9B,aAAIsB,GADM,6EATb,QAWH,OAXGqB,EAAAb,KAAA,GAWG9B,aAAIjwB,MAXP,yBAAA4yB,EAAAT,SAAAmD,GAAA,eAgBP,IAQeC,GARK,CAClBrB,aAAU/mB,GAAmBwnB,IAC7BT,aAAU7mB,GAAkBunB,IAC5BV,aAAU9mB,GAAcynB,IACxBX,aAAU3mB,GAAkBK,IAC5BsmB,aAAU1mB,GAAemjB,KCxFdra,GAA+B,SAAC5P,GAC3C,OAAOgpB,KAAMY,IAHA,6BAGY,CACvBpoB,OAAQ,CAAExB,kBAID6P,GAA2B,SAAC5U,GACvC,OAAO+tB,KAAMY,IAAN,GAAAttB,OATM,6BASN,KAAAA,OAAuBrB,KAGnB6U,GAA8B,SAACzL,GAAa,IAErDhK,EAIEgK,EAJFhK,QACAyD,EAGEuG,EAHFvG,QACAkC,EAEEqE,EAFFrE,YACAhG,EACEqK,EADFrK,sBAEF,OAAOgvB,KAAMC,KAnBA,6BAmBa,CACxB5uB,UACAyD,UACAkC,cACAhG,2BAISgW,GAA8B,SAAC9C,GAAa,IAC/CjS,EAAOiS,EAAPjS,GACR,OAAO+tB,KAAMO,IAAN,GAAAjtB,OA7BM,6BA6BN,KAAAA,OAAuBrB,GAAMiS,IAGzB+C,GAA2B,SAACzO,GAAW,IAC1CvG,EAAOuG,EAAPvG,GACR,OAAO+tB,KAAMc,OAAN,GAAAxtB,OAlCM,6BAkCN,KAAAA,OAA0BrB,GAAM,CAAEuG,yBCjB1BstB,iBAWAC,iBAWAC,iBAcAhf,iBAcAC,IAlDV,SAAU6e,GAAmCvG,GAA7C,IAAAE,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEH,OAFGF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEG9B,aAAIpwB,MAFP,OAGa,OAHbgyB,EAAAE,KAAA,EAGmBjhB,aAAKkhB,GAAkC/C,EAAOE,SAHjE,OAIH,OADMA,EAHH0C,EAAAI,KAAAJ,EAAAE,KAAA,EAIG9B,aAAInwB,GAAmBqvB,IAJ1B,OAAA0C,EAAAE,KAAA,iBAOH,OAPGF,EAAAC,KAAA,GAAAD,EAAAK,GAAAL,EAAA,SAAAA,EAAAE,KAAA,GAOG9B,aAAIjwB,MAPP,yBAAA6xB,EAAAM,SAAAwD,GAAA,eAWA,SAAUF,GAAmCxG,GAA7C,IAAAttB,EAAAwtB,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OAGH,OAHGM,EAAAP,KAAA,EAEGnwB,EAAKstB,EAAOE,QAFfkD,EAAAN,KAAA,EAGG9B,aAAIpwB,MAHP,OAIa,OAJbwyB,EAAAN,KAAA,EAImBjhB,aAAKkhB,GAA8BrwB,GAJtD,OAKH,OADMwtB,EAJHkD,EAAAJ,KAAAI,EAAAN,KAAA,EAKG9B,aAAIlwB,GAAyBovB,IALhC,OAAAkD,EAAAN,KAAA,iBAOH,OAPGM,EAAAP,KAAA,GAAAO,EAAAH,GAAAG,EAAA,SAAAA,EAAAN,KAAA,GAOG9B,aAAIjwB,MAPP,yBAAAqyB,EAAAF,SAAAyD,GAAA,eAWA,SAAUF,GAAwBzG,GAAlC,IAAAvoB,EAAAyoB,EAAArqB,EAAA,OAAA6sB,GAAA9vB,EAAA+vB,KAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,OAGH,OAHGQ,EAAAT,KAAA,EAEKprB,EAAgBuoB,EAAOE,QAAvBzoB,YAFL6rB,EAAAR,KAAA,EAGG9B,aAAIpwB,MAHP,OAIH,OAJG0yB,EAAAR,KAAA,EAIGjhB,aAAKkhB,GAAiC/C,EAAOE,SAJhD,OAKa,OALboD,EAAAR,KAAA,EAKmBjhB,aAAKkhB,GAAkCtrB,GAL1D,OAMH,OADMyoB,EALHoD,EAAAN,KAAAM,EAAAR,KAAA,GAMG9B,aAAInwB,GAAmBqvB,IAN1B,QAQH,OADMrqB,EAAO,CAACqqB,QAAS,IAPpBoD,EAAAR,KAAA,GAQGjhB,aAAK4jB,GAA+B5vB,GARvC,QAAAytB,EAAAR,KAAA,iBAUH,OAVGQ,EAAAT,KAAA,GAAAS,EAAAL,GAAAK,EAAA,SAAAA,EAAAR,KAAA,GAUG9B,aAAIjwB,MAVP,yBAAAuyB,EAAAJ,SAAA0D,GAAA,eAcA,SAAUnf,GAA4BuY,GAAtC,IAAAE,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,OAEH,OAFGU,EAAAX,KAAA,EAAAW,EAAAV,KAAA,EAEG9B,aAAIpwB,MAFP,OAGa,OAHb4yB,EAAAV,KAAA,EAGmBjhB,aAAKkhB,GAAiC/C,EAAOE,SAHhE,OAKH,OAFMA,EAHHsD,EAAAR,KAIa,yDAJbQ,EAAAV,KAAA,EAKG9B,aAAIkB,GADM,2DAJb,OAMH,OANGsB,EAAAV,KAAA,GAMG9B,aAAIxZ,GAAiC0Y,IANxC,QAAAsD,EAAAV,KAAA,iBASH,OATGU,EAAAX,KAAA,GAAAW,EAAAP,GAAAO,EAAA,SAQa,2EARbA,EAAAV,KAAA,GASG9B,aAAIsB,GADM,6EARb,QAUH,OAVGkB,EAAAV,KAAA,GAUG9B,aAAIjwB,MAVP,yBAAAyyB,EAAAN,SAAA2D,GAAA,eAcA,SAAUnf,GAA0BsY,GAApC,IAAAM,EAAA1kB,EAAAskB,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,OAGH,OAHGa,EAAAd,KAAA,EAAAvC,EAEqBN,EAAOE,QAF5BI,EAEK5tB,GAAIkJ,EAFT0kB,EAES1kB,QAFT+nB,EAAAb,KAAA,EAGG9B,aAAIpwB,MAHP,OAIH,OAJG+yB,EAAAb,KAAA,EAIGjhB,aAAKkhB,GAA+B/C,EAAOE,SAJ9C,OAMH,MADgB,yDALbyD,EAAAb,KAAA,EAMG9B,aAAIkB,GADM,2DALb,OAOa,OAPbyB,EAAAb,KAAA,GAOmBjhB,aAAKkhB,IAPxB,QAQH,OADM7C,EAPHyD,EAAAX,KAAAW,EAAAb,KAAA,GAQG9B,aAAInwB,GAAmBqvB,IAR1B,QASH,OATGyD,EAAAb,KAAA,GASGjhB,aAAKjG,EAAQpF,KAAM,KATtB,QAAAmtB,EAAAb,KAAA,iBAYH,OAZGa,EAAAd,KAAA,GAAAc,EAAAV,GAAAU,EAAA,SAWa,2EAXbA,EAAAb,KAAA,GAYG9B,aAAIsB,GADM,6EAXb,QAaH,OAbGqB,EAAAb,KAAA,GAaG9B,aAAIjwB,MAbP,yBAAA4yB,EAAAT,SAAA4D,GAAA,eAiBP,IAQeC,GARkB,CAC/B9B,aAAUhe,GAAgCwf,IAC1CxB,aAAUle,GAAiCwf,IAC3CtB,aAAUje,GAA4Bwf,IACtCvB,aAAU9d,GAAgCM,IAC1Cwd,aAAU7d,GAA6BM,KCvF5B6B,GAA6B,SAAC7R,GACzC,OAAO+oB,KAAMY,IAHA,2BAGY,CACvBpoB,OAAQ,CAAEvB,gBAID8R,GAAyB,SAAC9W,GACrC,OAAO+tB,KAAMY,IAAN,GAAAttB,OATM,2BASN,KAAAA,OAAuBrB,KAGnB+W,GAA4B,SAAC3N,GAAa,IAEnDhK,EAIEgK,EAJFhK,QACAyD,EAGEuG,EAHFvG,QACAmC,EAEEoE,EAFFpE,UACAjG,EACEqK,EADFrK,sBAEF,OAAOgvB,KAAMC,KAnBA,2BAmBa,CACxB5uB,UACAyD,UACAmC,YACAjG,2BAISiY,GAA4B,SAAC/E,GAAa,IAC7CjS,EAAOiS,EAAPjS,GACR,OAAO+tB,KAAMO,IAAN,GAAAjtB,OA7BM,2BA6BN,KAAAA,OAAuBrB,GAAMiS,IAGzBgF,GAAyB,SAAC1Q,GAAW,IACxCvG,EAAOuG,EAAPvG,GACR,OAAO+tB,KAAMc,OAAN,GAAAxtB,OAlCM,2BAkCN,KAAAA,OAA0BrB,GAAM,CAAEuG,yBCjB1B+tB,iBAYAC,iBAWAC,iBAYAxd,iBAcAC,IAjDV,SAAUqd,GAAiChH,GAA3C,IAAAE,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGH,OAHGF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGG9B,aAAIpwB,MAHP,OAIa,OAJbgyB,EAAAE,KAAA,EAImBjhB,aAAKkhB,GAAgC/C,EAAOE,SAJ/D,OAKH,OADMA,EAJH0C,EAAAI,KAAAJ,EAAAE,KAAA,EAKG9B,aAAInwB,GAAmBqvB,IAL1B,OAAA0C,EAAAE,KAAA,iBAQH,OARGF,EAAAC,KAAA,GAAAD,EAAAK,GAAAL,EAAA,SAAAA,EAAAE,KAAA,GAQG9B,aAAIjwB,MARP,yBAAA6xB,EAAAM,SAAAiE,GAAA,eAYA,SAAUF,GAAiCjH,GAA3C,IAAAttB,EAAAwtB,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OAGH,OAHGM,EAAAP,KAAA,EAEGnwB,EAAMstB,EAAOE,QAFhBkD,EAAAN,KAAA,EAGG9B,aAAIpwB,MAHP,OAIa,OAJbwyB,EAAAN,KAAA,EAImBjhB,aAAKkhB,GAA4BrwB,GAJpD,OAKH,OADMwtB,EAJHkD,EAAAJ,KAAAI,EAAAN,KAAA,EAKG9B,aAAIlwB,GAAyBovB,IALhC,OAAAkD,EAAAN,KAAA,iBAOH,OAPGM,EAAAP,KAAA,GAAAO,EAAAH,GAAAG,EAAA,SAAAA,EAAAN,KAAA,GAOG9B,aAAIjwB,MAPP,yBAAAqyB,EAAAF,SAAAkE,GAAA,eAWA,SAAUF,GAAsBlH,GAAhC,IAAAtoB,EAAAwoB,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,OAGH,OAHGQ,EAAAT,KAAA,EAEKnrB,EAAcsoB,EAAOE,QAArBxoB,UAFL4rB,EAAAR,KAAA,EAGG9B,aAAIpwB,MAHP,OAIH,OAJG0yB,EAAAR,KAAA,EAIGjhB,aAAKkhB,GAA+B/C,EAAOE,SAJ9C,OAKa,OALboD,EAAAR,KAAA,EAKmBjhB,aAAKkhB,GAAgCrrB,GALxD,OAMH,OADMwoB,EALHoD,EAAAN,KAAAM,EAAAR,KAAA,GAMG9B,aAAInwB,GAAmBqvB,IAN1B,QAAAoD,EAAAR,KAAA,iBAQH,OARGQ,EAAAT,KAAA,GAAAS,EAAAL,GAAAK,EAAA,SAAAA,EAAAR,KAAA,GAQG9B,aAAIjwB,MARP,yBAAAuyB,EAAAJ,SAAAmE,GAAA,eAYA,SAAU3d,GAA0BsW,GAApC,IAAAE,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,OAEH,OAFGU,EAAAX,KAAA,EAAAW,EAAAV,KAAA,EAEG9B,aAAIpwB,MAFP,OAGa,OAHb4yB,EAAAV,KAAA,EAGmBjhB,aAAKkhB,GAA+B/C,EAAOE,SAH9D,OAKH,OAFMA,EAHHsD,EAAAR,KAIa,yDAJbQ,EAAAV,KAAA,EAKG9B,aAAIkB,GADM,2DAJb,OAMH,OANGsB,EAAAV,KAAA,GAMG9B,aAAIpX,GAA+BsW,IANtC,QAAAsD,EAAAV,KAAA,iBASH,OATGU,EAAAX,KAAA,GAAAW,EAAAP,GAAAO,EAAA,SAQa,2EARbA,EAAAV,KAAA,GASG9B,aAAIsB,GADM,6EARb,QAUH,OAVGkB,EAAAV,KAAA,GAUG9B,aAAIjwB,MAVP,yBAAAyyB,EAAAN,SAAAoE,GAAA,eAcA,SAAU3d,GAAwBqW,GAAlC,IAAAM,EAAA1kB,EAAAskB,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,OAGH,OAHGa,EAAAd,KAAA,EAAAvC,EAEqBN,EAAOE,QAF5BI,EAEK5tB,GAAIkJ,EAFT0kB,EAES1kB,QAFT+nB,EAAAb,KAAA,EAGG9B,aAAIpwB,MAHP,OAIH,OAJG+yB,EAAAb,KAAA,EAIGjhB,aAAKkhB,GAA6B/C,EAAOE,SAJ5C,OAMH,MADgB,yDALbyD,EAAAb,KAAA,EAMG9B,aAAIkB,GADM,2DALb,OAOa,OAPbyB,EAAAb,KAAA,GAOmBjhB,aAAKkhB,IAPxB,QAQH,OADM7C,EAPHyD,EAAAX,KAAAW,EAAAb,KAAA,GAQG9B,aAAInwB,GAAmBqvB,IAR1B,QASH,OATGyD,EAAAb,KAAA,GASGjhB,aAAKjG,EAAQpF,KAAM,KATtB,QAAAmtB,EAAAb,KAAA,iBAYH,OAZGa,EAAAd,KAAA,GAAAc,EAAAV,GAAAU,EAAA,SAWa,2EAXbA,EAAAb,KAAA,GAYG9B,aAAIsB,GADM,6EAXb,QAaH,OAbGqB,EAAAb,KAAA,GAaG9B,aAAIjwB,MAbP,yBAAA4yB,EAAAT,SAAAqE,GAAA,eAiBP,IAQeC,GARgB,CAC7BvC,aAAU9b,GAA8B+d,IACxCjC,aAAUhc,GAA+B+d,IACzC/B,aAAU/b,GAA0B+d,IACpChC,aAAU7b,GAA8BM,IACxCub,aAAU5b,GAA2BM,kBC1EtBlK,iBAaAD,iBAwBAioB,iBAoBAzF,IAzDV,SAAUviB,GAAmBugB,GAA7B,IAAAroB,EAAAwd,EAAA,OAAAuN,GAAA9vB,EAAA+vB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEH,OAFGF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEG9B,aAAI6E,MAFP,OAIa,OADVluB,EAAaqoB,EAAOE,QAHvB0C,EAAAE,KAAA,EAImBjhB,aAAKkhB,GAAkBprB,GAJ1C,OAKH,OADMwd,EAJHyN,EAAAI,KAAAJ,EAAAE,KAAA,EAKG9B,aAAI6E,GAA6B1Q,IALpC,OAAAyN,EAAAE,KAAA,iBAQH,OARGF,EAAAC,KAAA,GAAAD,EAAAK,GAAAL,EAAA,SAOa,6FAPbA,EAAAE,KAAA,GAQG9B,aAAIsB,GADM,+FAPb,yBAAAM,EAAAM,SAAAwE,GAAA,eAaA,SAAUloB,GAAYwgB,GAAtB,IAAAM,EAAA5oB,EAAAD,EAAAyK,EAAAC,EAAAhC,EAAAS,EAAA/K,EAAA,OAAA6sB,GAAA9vB,EAAA+vB,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OAEH,OAFGM,EAAAP,KAAA,EAAAO,EAAAN,KAAA,EAEG9B,aAAI6E,MAFP,OAIH,OAJGvF,EAG6EN,EAAOE,QAA/ExoB,EAHL4oB,EAGK5oB,UAAWD,EAHhB6oB,EAGgB7oB,YAAayK,EAH7Boe,EAG6Bpe,8BAA+BC,EAH5Dme,EAG4Dne,aAH5DihB,EAAAN,KAAA,EAIGjhB,aAAKkhB,GAAqB/C,EAAOE,SAJpC,OAKoB,OALpBkD,EAAAN,KAAA,EAK0BjhB,aAAKkhB,GAAuB,CAAErrB,cALxD,OAOiB,OAPjB0rB,EAAAJ,KAMG7iB,EAAWgC,EANdihB,EAAAN,KAAA,GAOuBjhB,aAAK8f,GAA0BxhB,GAPtD,QAQH,OADMS,EAPHwiB,EAAAJ,KAAAI,EAAAN,KAAA,GAQG9B,aAAI2G,GAA+B/mB,IARtC,QAWH,MADgB,2EAVbwiB,EAAAN,KAAA,GAWG9B,aAAIkB,GADM,6EAVb,QAgBH,OAJMrsB,EAAO,CAAEqqB,QAAS,CACtBzoB,cACAhG,sBAAuByQ,IAdtBkhB,EAAAN,KAAA,GAgBGjhB,aAAK+lB,GAAkC/xB,GAhB1C,QAAAutB,EAAAN,KAAA,iBAmBH,OAnBGM,EAAAP,KAAA,GAAAO,EAAAH,GAAAG,EAAA,SAkBa,6FAlBbA,EAAAN,KAAA,GAmBG9B,aAAIsB,GADM,+FAlBb,yBAAAc,EAAAF,SAAA2E,GAAA,eAwBA,SAAUJ,GAAYzH,GAAtB,IAAAkG,EAAAzuB,EAAAmE,EAAAuZ,EAAA,OAAAuN,GAAA9vB,EAAA+vB,KAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,OAEH,OAFGQ,EAAAT,KAAA,EAAAS,EAAAR,KAAA,EAEG9B,aAAI6E,MAFP,OAQa,OARbK,EAOClG,EAAOE,QAPRgG,EAIDvuB,WACAF,EALCyuB,EAKDzuB,YACAmE,EANCsqB,EAMDtqB,QANC0nB,EAAAR,KAAA,EAQmBjhB,aAAKkhB,GAAqB/C,EAAOE,SARpD,OASH,OADM/K,EARHmO,EAAAN,KAAAM,EAAAR,KAAA,EASG9B,aAAI6E,GAA6B1Q,IATpC,OAWH,MADgB,2EAVbmO,EAAAR,KAAA,GAWG9B,aAAIkB,GADM,6EAVb,QAYH,OAZGoB,EAAAR,KAAA,GAYGjhB,aAAKjG,EAAQpF,KAAT,cAAAzC,OAA6B0D,IAZpC,QAAA6rB,EAAAR,KAAA,iBAeH,OAfGQ,EAAAT,KAAA,GAAAS,EAAAL,GAAAK,EAAA,SAca,6FAdbA,EAAAR,KAAA,GAeG9B,aAAIsB,GADM,+FAdb,yBAAAgB,EAAAJ,SAAA4E,GAAA,eAoBA,SAAU9F,GAAkBhC,GAA5B,IAAAoG,EAAA3uB,EAAAmE,EAAA,OAAA8mB,GAAA9vB,EAAA+vB,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,OAGH,OAHGU,EAAAX,KAAA,EAAAuD,EAEmDpG,EAAOE,QAF1DkG,EAEKzuB,WAAYF,EAFjB2uB,EAEiB3uB,YAFjB2uB,EAE8B7wB,QAASqG,EAFvCwqB,EAEuCxqB,QAFvC4nB,EAAAV,KAAA,EAGG9B,aAAI6E,MAHP,OAIH,OAJGrC,EAAAV,KAAA,EAIGjhB,aAAKkhB,GAAuB/C,EAAOE,SAJtC,OAMH,MADgB,qEALbsD,EAAAV,KAAA,EAMG9B,aAAIkB,GADM,uEALb,OAOH,OAPGsB,EAAAV,KAAA,GAOGjhB,aAAKjG,EAAQpF,KAAT,cAAAzC,OAA6B0D,IAPpC,QAAA+rB,EAAAV,KAAA,iBAUH,OAVGU,EAAAX,KAAA,GAAAW,EAAAP,GAAAO,EAAA,SASa,uFATbA,EAAAV,KAAA,GAUG9B,aAAIsB,GADM,yFATb,QAWH,OAXGkB,EAAAV,KAAA,GAWG9B,aAAI6E,MAXP,yBAAArC,EAAAN,SAAA6E,GAAA,eAeP,IAOeC,GAPM,CACnB/C,aAAUnmB,GAAsBW,IAChCwlB,aAAUjmB,GAAcQ,IACxBylB,aAAU7lB,GAAmBqoB,IAC7BxC,aAAU5lB,GAAgB2iB,KCxFfnX,GAA8B,SAAClT,GAC1C,OAAO8oB,KAAMY,IAHA,4BAGY,CACvBpoB,OAAQ,CACNtB,iBAKOmT,GAA0B,SAACpY,GACtC,OAAO+tB,KAAMY,IAAN,GAAAttB,OAXM,4BAWN,KAAAA,OAAuBrB,KAGnBqY,GAA6B,SAAC9R,GACzC,OAAOwnB,KAAMC,KAfA,4BAea,CACxBznB,YAIS+R,GAA6B,SAACrG,GAAa,IAC9CjS,EAAOiS,EAAPjS,GACR,OAAO+tB,KAAMO,IAAN,GAAAjtB,OAtBM,4BAsBN,KAAAA,OAAuBrB,GAAMiS,IAGzBsG,GAA2B,SAAChS,GAAW,IAC1CvG,EAAOuG,EAAPvG,GACR,OAAO+tB,KAAMc,OAAN,GAAAxtB,OA3BM,4BA2BN,KAAAA,OAA0BrB,GAAM,CAAEuG,yBCX1BgvB,iBAWAC,iBAWAC,iBAgBAnd,iBAcAC,IApDV,SAAUgd,GAAkCjI,GAA5C,IAAAE,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEH,OAFGF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEG9B,aAAIpwB,MAFP,OAGa,OAHbgyB,EAAAE,KAAA,EAGmBjhB,aAAKkhB,GAAiC/C,EAAOE,SAHhE,OAIH,OADMA,EAHH0C,EAAAI,KAAAJ,EAAAE,KAAA,EAIG9B,aAAInwB,GAAmBqvB,IAJ1B,OAAA0C,EAAAE,KAAA,iBAOH,OAPGF,EAAAC,KAAA,GAAAD,EAAAK,GAAAL,EAAA,SAAAA,EAAAE,KAAA,GAOG9B,aAAIjwB,MAPP,yBAAA6xB,EAAAM,SAAAkF,GAAA,eAWA,SAAUF,GAAkClI,GAA5C,IAAAttB,EAAAwtB,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OAGH,OAHGM,EAAAP,KAAA,EAEGnwB,EAAMstB,EAAOE,QAFhBkD,EAAAN,KAAA,EAGG9B,aAAIpwB,MAHP,OAIa,OAJbwyB,EAAAN,KAAA,EAImBjhB,aAAKkhB,GAA6BrwB,GAJrD,OAKH,OADMwtB,EAJHkD,EAAAJ,KAAAI,EAAAN,KAAA,EAKG9B,aAAIlwB,GAAyBovB,IALhC,OAAAkD,EAAAN,KAAA,iBAOH,OAPGM,EAAAP,KAAA,GAAAO,EAAAH,GAAAG,EAAA,SAAAA,EAAAN,KAAA,GAOG9B,aAAIjwB,MAPP,yBAAAqyB,EAAAF,SAAAmF,GAAA,eAWA,SAAUF,GAAuBnI,GAAjC,IAAAroB,EAAAuoB,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,OAGH,OAHGQ,EAAAT,KAAA,EAEKlrB,EAAeqoB,EAAOE,QAAtBvoB,WAFL2rB,EAAAR,KAAA,EAGG9B,aAAIpwB,MAHP,OAIH,OAJG0yB,EAAAR,KAAA,EAIGjhB,aAAKkhB,GAAgC/C,EAAOE,SAJ/C,OAKa,OALboD,EAAAR,KAAA,EAKmBjhB,aAAKkhB,GAAiCprB,GALzD,OAMH,OADMuoB,EALHoD,EAAAN,KAAAM,EAAAR,KAAA,GAMG9B,aAAInwB,GAAmBqvB,IAN1B,QAQH,MADgB,+DAPboD,EAAAR,KAAA,GAQG9B,aAAIkB,GADM,iEAPb,QAAAoB,EAAAR,KAAA,iBAUH,OAVGQ,EAAAT,KAAA,GAAAS,EAAAL,GAAAK,EAAA,SAAAA,EAAAR,KAAA,GAUG9B,aAAIjwB,MAVP,QAYH,MADgB,iFAXbuyB,EAAAR,KAAA,GAYG9B,aAAIsB,GADM,mFAXb,yBAAAgB,EAAAJ,SAAAoF,GAAA,eAgBA,SAAUtd,GAA2BgV,GAArC,IAAAE,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,OAEH,OAFGU,EAAAX,KAAA,EAAAW,EAAAV,KAAA,EAEG9B,aAAIpwB,MAFP,OAGa,OAHb4yB,EAAAV,KAAA,EAGmBjhB,aAAKkhB,GAAgC/C,EAAOE,SAH/D,OAKH,OAFMA,EAHHsD,EAAAR,KAIa,yDAJbQ,EAAAV,KAAA,EAKG9B,aAAIkB,GADM,2DAJb,OAMH,OANGsB,EAAAV,KAAA,GAMG9B,aAAI9V,GAAgCgV,IANvC,QAAAsD,EAAAV,KAAA,iBASH,OATGU,EAAAX,KAAA,GAAAW,EAAAP,GAAAO,EAAA,SAQa,2EARbA,EAAAV,KAAA,GASG9B,aAAIsB,GADM,6EARb,QAUH,OAVGkB,EAAAV,KAAA,GAUG9B,aAAIjwB,MAVP,yBAAAyyB,EAAAN,SAAAqF,GAAA,eAcA,SAAUtd,GAAyB+U,GAAnC,IAAAM,EAAA1kB,EAAAskB,EAAA,OAAAwC,GAAA9vB,EAAA+vB,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,OAGH,OAHGa,EAAAd,KAAA,EAAAvC,EAEqBN,EAAOE,QAF5BI,EAEK5tB,GAAIkJ,EAFT0kB,EAES1kB,QAFT+nB,EAAAb,KAAA,EAGG9B,aAAIpwB,MAHP,OAIH,OAJG+yB,EAAAb,KAAA,EAIGjhB,aAAKkhB,GAA8B/C,EAAOE,SAJ7C,OAMH,MADgB,yDALbyD,EAAAb,KAAA,EAMG9B,aAAIkB,GADM,2DALb,OAOa,OAPbyB,EAAAb,KAAA,GAOmBjhB,aAAKkhB,IAPxB,QAQH,OADM7C,EAPHyD,EAAAX,KAAAW,EAAAb,KAAA,GAQG9B,aAAInwB,GAAmBqvB,IAR1B,QASH,OATGyD,EAAAb,KAAA,GASGjhB,aAAKjG,EAAQpF,KAAM,KATtB,QAAAmtB,EAAAb,KAAA,iBAYH,OAZGa,EAAAd,KAAA,GAAAc,EAAAV,GAAAU,EAAA,SAWa,2EAXbA,EAAAb,KAAA,GAYG9B,aAAIsB,GADM,6EAXb,QAaH,OAbGqB,EAAAb,KAAA,GAaG9B,aAAIjwB,MAbP,yBAAA4yB,EAAAT,SAAAsF,GAAA,eAiBP,IAQeC,GARiB,CAC9BxD,aAAUxa,GAA+B0d,IACzClD,aAAU1a,GAAgC0d,IAC1ChD,aAAUza,GAA2B0d,IACrCjD,aAAUva,GAA+BM,IACzCia,aAAUta,GAA4BM,KCzF3Byd,GAA8B,SAACzvB,GACxC,OAAOwnB,KAAMY,IAAI,gCAAiC,CAC9CpoB,YAKK0vB,GAA4B,SAAC1vB,GACtC,OAAOwnB,KAAMY,IAAI,8BAA+B,CAC5CpoB,YAKK2vB,GAA6B,SAAC3vB,GACvC,OAAOwnB,KAAMY,IAAI,+BAAgC,CAC7CpoB,yBCHSE,IAAV,SAAUA,GAAgB6mB,GAA1B,IAAA9mB,EAAA3C,EAAA2J,EAAA2oB,EAAA,OAAAnG,GAAA9vB,EAAA+vB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGH,OAHGF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGG9B,aAAIpwB,MAHP,OASe,OATfgyB,EAAAE,KAAA,EASqBjhB,aAAK6mB,GAA6B1I,EAAOE,SAT9D,OAYa,OAHVhnB,EATH0pB,EAAAI,KAAAJ,EAAAE,KAAA,EAYmBjhB,aAAK8mB,GAA2B3I,EAAOE,SAZ1D,OAec,OAHX3pB,EAZHqsB,EAAAI,KAAAJ,EAAAE,KAAA,GAeoBjhB,aAAK+mB,GAA4B5I,EAAOE,SAf5D,QAwBH,OATMhgB,EAfH0iB,EAAAI,KAiBG6F,EAAkB,CACtB3vB,UAAYA,EAAUrD,KACtBU,QAAUA,EAAQV,KAClBqK,SAAUA,EAASrK,MApBlB+sB,EAAAE,KAAA,GAwBG9B,aAAInwB,GAAmBg4B,IAxB1B,QAAAjG,EAAAE,KAAA,iBA2BH,OA3BGF,EAAAC,KAAA,GAAAD,EAAAK,GAAAL,EAAA,SAAAA,EAAAE,KAAA,GA2BG9B,aAAIjwB,MA3BP,yBAAA6xB,EAAAM,SAAA4F,GAAA,eA+BP,IAKeC,GALY,CAEzB9D,aAAUjgB,GAAsB7L,KC/CrB6vB,GAAY,SAACltB,GACtB,OAAO2kB,KAAMC,KAAK,aAAc5kB,IAGvBmtB,GAAc,SAAChwB,GAAW,IAC3BnB,EAAYmB,EAAZnB,QACR,OAAO2oB,KAAMc,OAAN,cAAAxtB,OAA2B+D,GAAW,CAAEmB,yBC0BlCtF,iBAsCAC,IAtCV,SAAUD,GAASqsB,GAAnB,IAAAM,EAAA9oB,EAAAD,EAAA1B,EAAA,OAAA6sB,GAAA9vB,EAAA+vB,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OAGH,OAHGM,EAAAP,KAAA,EAAAvC,EAE6BN,EAAOE,QAA/B1oB,EAFL8oB,EAEK9oB,eAAgBD,EAFrB+oB,EAEqB/oB,IAFrB6rB,EAAAN,KAAA,EAGG9B,aAAIpwB,MAHP,OAIH,OAJGwyB,EAAAN,KAAA,EAIGjhB,aAAKmnB,GAAWxxB,GAJnB,OAAA4rB,EAAAH,GAOK1rB,EAPL6rB,EAAAN,KAQI,YARJM,EAAAH,GAAA,EASI,WATJG,EAAAH,GAAA,EAgBI,iBAhBJG,EAAAH,GAAA,GAsBI,iBAtBJG,EAAAH,GAAA,mBAcG,OAJAptB,EAAO,CAAEqqB,QAAS,CAChBzoB,YAAaD,EAAe+I,WAC5B9O,sBAAuB,IAZ5B2xB,EAAAN,KAAA,GAcSjhB,aAAK+lB,GAAkC/xB,GAdhD,eAAAutB,EAAA8F,OAAA,oBAoBG,OAHArzB,EAAO,CAAEqqB,QAAS,CAChB/rB,WAAYqD,EAAerD,aAlBhCivB,EAAAN,KAAA,GAoBSjhB,aAAK4jB,GAA+B5vB,GApB7C,eAAAutB,EAAA8F,OAAA,oBAwBG,OADArzB,EAAO,CAAEqqB,QAAS1oB,EAAeC,aAvBpC2rB,EAAAN,KAAA,GAwBSjhB,aAAK4jB,GAAuC5vB,GAxBrD,eAAAutB,EAAA8F,OAAA,oBA6BH,MADgB,6CA5Bb9F,EAAAN,KAAA,GA6BG9B,aAAIkB,GADM,+CA5Bb,QAAAkB,EAAAN,KAAA,iBAiCH,OAjCGM,EAAAP,KAAA,GAAAO,EAAA+F,GAAA/F,EAAA,SAgCa,+DAhCbA,EAAAN,KAAA,GAiCG9B,aAAIsB,GADM,iEAhCb,QAkCH,OAlCGc,EAAAN,KAAA,GAkCG9B,aAAIjwB,MAlCP,yBAAAqyB,EAAAF,SAAAkG,GAAA,eAsCA,SAAUx1B,GAAWosB,GAArB,IAAAkG,EAAAruB,EAAAN,EAAA8xB,EAAA,OAAA3G,GAAA9vB,EAAA+vB,KAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,OAGH,OAHGQ,EAAAT,KAAA,EAAAqD,EAE+BlG,EAAOE,QAAjCroB,EAFLquB,EAEKruB,iBAAkBN,EAFvB2uB,EAEuB3uB,IAFvB+rB,EAAAR,KAAA,EAGG9B,aAAIpwB,MAHP,OAIH,OAJG0yB,EAAAR,KAAA,EAIGjhB,aAAKonB,GAAapxB,GAJrB,OAAAyrB,EAAAL,GAOK1rB,EAPL+rB,EAAAR,KAQI,YARJQ,EAAAL,GAAA,EASI,WATJK,EAAAL,GAAA,EAgBI,iBAhBJK,EAAAL,GAAA,GAsBI,iBAtBJK,EAAAL,GAAA,mBAcG,OAJAptB,EAAO,CAAEqqB,QAAS,CAChBzoB,YAAaI,EAAiB0I,WAC9B9O,sBAAuB,IAZ5B6xB,EAAAR,KAAA,GAcSjhB,aAAK+lB,GAAkC/xB,GAdhD,eAAAytB,EAAA4F,OAAA,oBAoBG,OAHArzB,EAAO,CAAEqqB,QAAS,CAChB/rB,WAAY0D,EAAiB1D,aAlBlCmvB,EAAAR,KAAA,GAoBSjhB,aAAK4jB,GAA+B5vB,GApB7C,eAAAytB,EAAA4F,OAAA,oBAwBG,OADArzB,EAAO,CAAEqqB,QAASroB,EAAiBC,SAvBtCwrB,EAAAR,KAAA,GAwBSjhB,aAAK4jB,GAAuC5vB,GAxBrD,eAAAytB,EAAA4F,OAAA,oBA4BH,MADgB,+DA3Bb5F,EAAAR,KAAA,GA4BG9B,aAAIkB,GADM,iEA3Bb,QAAAoB,EAAAR,KAAA,iBA+BH,OA/BGQ,EAAAT,KAAA,GAAAS,EAAA6F,GAAA7F,EAAA,SA8Ba,iFA9BbA,EAAAR,KAAA,GA+BG9B,aAAIsB,GADM,mFA9Bb,QAgCH,OAhCGgB,EAAAR,KAAA,GAgCG9B,aAAIjwB,MAhCP,yBAAAuyB,EAAAJ,SAAAoG,GAAA,eAoCP,IAKeC,GALG,CAChBtE,aAAUxxB,EAAWE,IACrBsxB,aAAUvxB,EAAaE,KC5GZo1B,GAAY,SAAC/vB,GACtB,OAAOwnB,KAAMC,KAAK,yBAA0BznB,IAGnCgwB,GAAc,SAAChwB,GAAW,IAC3BnB,EAAYmB,EAAZnB,QACR,OAAO2oB,KAAMc,OAAN,0BAAAxtB,OAAuC+D,GAAW,CAAEmB,yBCY9CtF,iBA+BAC,IA/BV,SAAUD,GAASqsB,GAAnB,IAAAM,EAAA9oB,EAAAD,EAAA1B,EAAA,OAAA6sB,GAAA9vB,EAAA+vB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGH,OAHGF,EAAAC,KAAA,EAAAvC,EAE6BN,EAAOE,QAA/B1oB,EAFL8oB,EAEK9oB,eAAgBD,EAFrB+oB,EAEqB/oB,IAFrBqrB,EAAAE,KAAA,EAGG9B,aAAIpwB,MAHP,OAIH,OAJGgyB,EAAAE,KAAA,EAIGjhB,aAAKmnB,GAAWxxB,GAJnB,OAAAorB,EAAAK,GAMK1rB,EANLqrB,EAAAE,KAOI,YAPJF,EAAAK,GAAA,EAWI,WAXJL,EAAAK,GAAA,GAeI,aAfJL,EAAAK,GAAA,mBASG,OADAptB,EAAO,CAAEqqB,QAAS1oB,EAAemP,WARpCic,EAAAE,KAAA,GASSjhB,aAAK4mB,GAA2D5yB,GATzE,eAAA+sB,EAAAsG,OAAA,oBAaG,OADArzB,EAAO,CAAEqqB,QAAS1oB,EAAe2I,UAZpCyiB,EAAAE,KAAA,GAaSjhB,aAAK2lB,GAAyD3xB,GAbvE,eAAA+sB,EAAAsG,OAAA,oBAiBG,OADArzB,EAAO,CAAEqqB,QAAS1oB,EAAe+I,YAhBpCqiB,EAAAE,KAAA,GAiBSjhB,aAAKklB,GAA6DlxB,GAjB3E,eAAA+sB,EAAAsG,OAAA,oBAsBH,MADgB,6CArBbtG,EAAAE,KAAA,GAsBG9B,aAAIkB,GADM,+CArBb,QAAAU,EAAAE,KAAA,iBA0BH,OA1BGF,EAAAC,KAAA,GAAAD,EAAAuG,GAAAvG,EAAA,SAyBa,+DAzBbA,EAAAE,KAAA,GA0BG9B,aAAIsB,GADM,iEAzBb,QA2BH,OA3BGM,EAAAE,KAAA,GA2BG9B,aAAIjwB,MA3BP,yBAAA6xB,EAAAM,SAAAsG,GAAA,eA+BA,SAAU51B,GAAWosB,GAArB,IAAAkG,EAAAruB,EAAAN,EAAA8xB,EAAA,OAAA3G,GAAA9vB,EAAA+vB,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OAGH,OAHGM,EAAAP,KAAA,EAAAqD,EAE+BlG,EAAOE,QAAjCroB,EAFLquB,EAEKruB,iBAAkBN,EAFvB2uB,EAEuB3uB,IAFvB6rB,EAAAN,KAAA,EAGG9B,aAAIpwB,MAHP,OAIH,OAJGwyB,EAAAN,KAAA,EAIGjhB,aAAKonB,GAAapxB,GAJrB,OAAAurB,EAAAH,GAOK1rB,EAPL6rB,EAAAN,KAQI,YARJM,EAAAH,GAAA,EAYI,WAZJG,EAAAH,GAAA,GAgBI,aAhBJG,EAAAH,GAAA,mBAUG,OADAptB,EAAO,CAAEqqB,QAASroB,EAAiB8O,WATtCyc,EAAAN,KAAA,GAUSjhB,aAAK4mB,GAA2D5yB,GAVzE,eAAAutB,EAAA8F,OAAA,oBAcG,OADArzB,EAAO,CAAEqqB,QAASroB,EAAiBsI,UAbtCijB,EAAAN,KAAA,GAcSjhB,aAAK2lB,GAAyD3xB,GAdvE,eAAAutB,EAAA8F,OAAA,oBAkBG,OADArzB,EAAO,CAAEqqB,QAAUroB,EAAiB0I,YAjBvC6iB,EAAAN,KAAA,GAkBSjhB,aAAKklB,GAA6DlxB,GAlB3E,eAAAutB,EAAA8F,OAAA,oBAsBH,MADgB,+DArBb9F,EAAAN,KAAA,GAsBG9B,aAAIkB,GADM,iEArBb,QAAAkB,EAAAN,KAAA,iBAyBH,OAzBGM,EAAAP,KAAA,GAAAO,EAAA+F,GAAA/F,EAAA,SAwBa,iFAxBbA,EAAAN,KAAA,GAyBG9B,aAAIsB,GADM,mFAxBb,QA0BH,OA1BGc,EAAAN,KAAA,GA0BG9B,aAAIjwB,MA1BP,yBAAAqyB,EAAAF,SAAAuG,GAAA,eA8BP,IAKeC,GALc,CAC3BzE,aAAUxxB,GAAWE,IACrBsxB,aAAUvxB,GAAaE,kBC7ERiI,IAAV,SAAUA,GAAamkB,GAAvB,OAAA0C,GAAA9vB,EAAA+vB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACH,OADGF,EAAAE,KAAA,EACG9B,cjBakB/kB,EiBbF+jB,EAAOE,QjBcxBiC,2BAAO,CACZlmB,UACAmmB,SAAU,KACVxqB,OAAQ,QACRyqB,aAAc,QiBnBX,wBAAAO,EAAAM,OjBcA,IAAqBjnB,GiBdrB0tB,IAIL,IAIaC,GAJa,CACxB3E,aAAUpnB,GAAsBhC,kBCEXguB,IAAV,SAAUA,KAAV,OAAAnH,GAAA9vB,EAAA+vB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACb,OADaF,EAAAE,KAAA,EACPpE,aAAG,GAAA3qB,OAAA0N,OAAAqoB,EAAA,EAAAroB,CACJujB,IADIvjB,OAAAqoB,EAAA,EAAAroB,CAEJgkB,IAFIhkB,OAAAqoB,EAAA,EAAAroB,CAGJ6kB,IAHI7kB,OAAAqoB,EAAA,EAAAroB,CAIJslB,IAJItlB,OAAAqoB,EAAA,EAAAroB,CAKJ+lB,IALI/lB,OAAAqoB,EAAA,EAAAroB,CAMJumB,IANIvmB,OAAAqoB,EAAA,EAAAroB,CAOJgnB,IAPIhnB,OAAAqoB,EAAA,EAAAroB,CAQJsnB,IARItnB,OAAAqoB,EAAA,EAAAroB,CASJ8nB,IATI9nB,OAAAqoB,EAAA,EAAAroB,CAUJioB,IAVIjoB,OAAAqoB,EAAA,EAAAroB,CAWJmoB,MAZQ,wBAAAhH,EAAAM,SAAA6G,uCCDTC,GAAmBztB,OAAO0tB,sCAAwCC,KAElEtuB,GAAUuuB,eAChBC,KAAQC,WAAW,kBACnBzuB,GAAQ0uB,OAAO,SAAA7vB,GAAkB,IAAf8vB,EAAe9vB,EAAf8vB,SAChBxuB,QAAQC,IAAI,cAAcuuB,KAK5B,IAAMC,GAAoBC,2BAAiB7uB,IACrC8uB,GAAiBC,eAEjBC,GAAQC,aACVhL,GACAP,GACA0K,GACIc,aACIC,KACAP,GACAE,GACAM,QAKZN,GAAeO,IAAIpB,GAAU,CAAEjuB,aAKhBgvB,iHCGPn4B,GAASm4B,GAAMM,WAAfz4B,KACAyJ,GAAqBzJ,GAArByJ,OAAQgc,GAAazlB,GAAbylB,SAChBiT,YAAa,GAAAp3B,OAAA0N,OAAAqoB,EAAA,EAAAroB,CAAKwW,MAALxW,OAAAqoB,EAAA,EAAAroB,CAAY8c,QAEzB6M,KAAQC,IAAIC,KAAKC,MAGjBlvB,aAAaC,QAAQ,gBAAiB,IAEtC,IAAMzB,GAAS,WACb2wB,IAAS3wB,OACPlI,EAAAC,EAAAC,cAAC44B,EAAA,SAAD,CAAUb,MAAOA,IACfj4B,EAAAC,EAAAC,cAAC64B,EAAA,EAAD,CAAcxvB,OAAQA,GAAQgc,SAAUA,IACtCvlB,EAAAC,EAAAC,cAACwf,EAAA,EAAD,KACE1f,EAAAC,EAAAC,cAAC84B,GAAD,KACEh5B,EAAAC,EAAAC,cAAC+4B,GAAD,KACEj5B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,KACEl5B,EAAAC,EAAAC,cAAC2kB,EAAA,EAAD,CAAOsU,OAAK,EAACC,KAAK,IAAInyB,UAAW4B,KACjC7I,EAAAC,EAAAC,cAAC2kB,EAAA,EAAD,CAAOsU,OAAK,EAACC,KAAK,iBAAiBnyB,UAAW8J,GAAesoB,QAAS,kBAAMzvB,OAAOoW,SAAS,EAAG,MAC/FhgB,EAAAC,EAAAC,cAAC2kB,EAAA,EAAD,CAAOsU,OAAK,EAACC,KAAK,sCAAsCnyB,UAAWwO,KACnEzV,EAAAC,EAAAC,cAAC2kB,EAAA,EAAD,CAAOsU,OAAK,EAACC,KAAK,kCAAkCnyB,UAAWoQ,KAC/DrX,EAAAC,EAAAC,cAAC2kB,EAAA,EAAD,CAAOsU,OAAK,EAACC,KAAK,oCAAoCnyB,UAAW2R,KACjE5Y,EAAAC,EAAAC,cAAC2kB,EAAA,EAAD,CAAOsU,OAAK,EAACC,KAAK,qBAAqBnyB,UAAW4a,KAClD7hB,EAAAC,EAAAC,cAAC2kB,EAAA,EAAD,CAAOsU,OAAK,EAACC,KAAK,eAAenyB,UAAW2Z,KAC5C5gB,EAAAC,EAAAC,cAAC2kB,EAAA,EAAD,CAAOsU,OAAK,EAACC,KAAK,gBAAgBnyB,UAAWsZ,KAC7CvgB,EAAAC,EAAAC,cAAC2kB,EAAA,EAAD,CAAOsU,OAAK,EAACC,KAAK,yBAAyBnyB,UAAWqa,KACtDthB,EAAAC,EAAAC,cAAC2kB,EAAA,EAAD,CAAOsU,OAAK,EAACC,KAAK,wBAAwBnyB,UAAW8Z,KACrD/gB,EAAAC,EAAAC,cAAC2kB,EAAA,EAAD,CAAOsU,OAAK,EAACC,KAAK,+BAA+BnyB,UAAWia,KAC5DlhB,EAAAC,EAAAC,cAACo5B,GAAD,KACEt5B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,KACEl5B,EAAAC,EAAAC,cAAC2kB,EAAA,EAAD,CAAOsU,OAAK,EAACC,KAAK,sBAAsBnyB,UAAW6K,KACnD9R,EAAAC,EAAAC,cAAC2kB,EAAA,EAAD,CAAOsU,OAAK,EAACC,KAAK,oBAAoBnyB,UAAW2M,KACjD5T,EAAAC,EAAAC,cAAC2kB,EAAA,EAAD,CAAOsU,OAAK,EAACC,KAAK,qBAAqBnyB,UAAW8M,KAClD/T,EAAAC,EAAAC,cAAC2kB,EAAA,EAAD,CAAOsU,OAAK,EAACC,KAAK,sBAAsBnyB,UAAWsyB,KACnDv5B,EAAAC,EAAAC,cAAC2kB,EAAA,EAAD,CAAOsU,OAAK,EAACC,KAAK,kCAAkCnyB,UAAWgP,KAC/DjW,EAAAC,EAAAC,cAAC2kB,EAAA,EAAD,CAAOsU,OAAK,EAACC,KAAK,gCAAgCnyB,UAAWuQ,KAC7DxX,EAAAC,EAAAC,cAAC2kB,EAAA,EAAD,CAAOsU,OAAK,EAACC,KAAK,iCAAiCnyB,UAAW+R,KAE9DhZ,EAAAC,EAAAC,cAAC2kB,EAAA,EAAD,CAAOsU,OAAK,EAACC,KAAK,kBAAkBnyB,UAAWsL,OAGnDvS,EAAAC,EAAAC,cAACs5B,GAAD,KACEx5B,EAAAC,EAAAC,cAACg5B,EAAA,EAAD,aASdO,SAASC,eAAe,UAI5BzB,GAAM0B,UAAU,WACdzxB,OASFA","file":"static/js/main.490edbf9.chunk.js","sourcesContent":["import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_QUESTION_LIST = Symbol('FETCH_QUESTION_LIST');\nexport const FETCH_QUESTION = Symbol('FETCH_QUESTION');\nexport const POST_QUESTION_DATA = Symbol('POST_QUESTION_DATA');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATE_CURRENT_TRANSLATE_LANGUAGE = Symbol('UPDATE_CURRENT_TRANSLATE_LANGUAGE');\nexport const SAVE_QUESTION_DATA = Symbol('SAVE_QUESTION_DATA');\nexport const UPDATED_QUESTION_DATA = Symbol('UPDATED_QUESTION_DATA');\nexport const DELETE_QUESTION = Symbol('DELETE_QUESTION');\n\n\n//createAction(FETCH_QUESTION_LIST)はFETCH_QUESTION_LISTという名前でアクションを発火させる。\nexport const fetchQuestionList = createAction(FETCH_QUESTION_LIST);\nexport const fetchQuestion = createAction(FETCH_QUESTION);\nexport const postQuestionData = createAction(POST_QUESTION_DATA);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updateCurrentTranslateLanguage = createAction(UPDATE_CURRENT_TRANSLATE_LANGUAGE);\nexport const saveQuestionData = createAction(SAVE_QUESTION_DATA);\nexport const updatedQuestionData = createAction(UPDATED_QUESTION_DATA);\nexport const deleteQuestion = createAction(DELETE_QUESTION);\n\n","'use strict';\n\nexport const getFilteredContents = (contentList, translateLanguageId, contentType) => {\n  const filteredContents = contentList.filter((v) => {\n    if (v.translate_language_id === translateLanguageId) {\n      return true ;\n    }\n\n    const targetTranslationsNum = v[contentType].filter((v) => {\n      return (v.translate_language_id === translateLanguageId);\n    }).length;\n    return (targetTranslationsNum !== 0);\n  });\n  return filteredContents;\n};\n\nexport const getTranslatedContents = (contentList, translateLanguageId, contentType) => {\n  const translatedContents = contentList.map((v) => {\n    if (v.translate_language_id === translateLanguageId) {\n        v.dispText = v.content;\n        return v;\n    }\n\n    const translation = v[contentType].filter(v => {\n      return (v.translate_language_id === translateLanguageId);\n    })[0];\n\n    v.dispText = translation.content;\n    return v;\n\n  });\n\n  return translatedContents;\n};","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\n\nclass Translator extends Component {\n\n  render() {\n    const { user } = this.props;\n    const { name, image_path, profile_link } = user;\n    const { formatMessage } = this.props.intl;\n    const msg = formatMessage({id: \"translated.name\"});\n\n    return (\n      <div className=\"uk-text-right\">\n        <div className=\"uk-comment-meta uk-display-inline-block\" style={{padding: '0 10px'}}>{ msg }</div>\n        <div className=\"uk-display-inline-block\">\n          <Link to={profile_link}>\n            <img className=\"uk-comment-avatar uk-border-circle uk-text-right\" src={image_path} width=\"35\" height=\"35\" alt={name} />\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(Translator);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const POST_VOTE = Symbol('POST_VOTE');\nexport const DELETE_VOTE = Symbol('DELETE_VOTE');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\n\n//createAction(FETCH_QUESTION_LIST)はFETCH_QUESTION_LISTという名前でアクションを発火させる。\nexport const postVote = createAction(POST_VOTE);\nexport const deleteVote = createAction(DELETE_VOTE);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass PostUser extends Component {\n  \n    selectedNationalFlag(countryId) {\n        let src;\n        switch(countryId) {\n            case 1:\n                src = \"japan\";\n                break;\n            case 2:\n                src = \"usa\";\n                break;\n            case 3:\n                src = \"philippines\";\n                break;\n            case 4:\n                src = \"england\";\n                break;\n            case 5:\n                src = \"newzealand\";\n                break;\n            default :\n                src = \"japan\";\n                break;\n        }\n        return <img className=\"\" src={`/image/common/flag/${src}.png`} style={{border: \"1px solid #dcdcdc\"}} width=\"20\" height=\"20\" alt=\"\"/>;\n    }\n\n    render() {\n        const { user } = this.props;\n        const nationalFlag = this.selectedNationalFlag(user.country_id);\n        const userName = user ? user.name : '不明なユーザー';\n        const profileLink = `/users/profile/${user.id}`;\n\n        return (\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n                <div className=\"uk-width-auto\">\n                    <Link to={profileLink}><img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"43\" height=\"43\" alt=\"\" /></Link>\n                </div>\n                <div>\n                <div className=\"uk-width-auto\" >\n                    { nationalFlag }\n                </div>\n                    <div>\n                        <h4 className=\"uk-comment-meta uk-margin-remove\"><Link className=\"\" to={profileLink}>{ userName }</Link></h4>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PostUser;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass PostIcons extends Component {\n    render() {\n        const { \n            user, \n            loginUser, \n            votes, \n            sendData, \n            deleteData,\n            editLink,\n            translateLink,\n            onClickSendVote,\n            onClickDeleteVote,\n            translate\n        } = this.props;\n        \n        const editLinkButton = user.id === loginUser.id\n                        ? <Link className=\"uk-margin-small-right\" to={editLink}><FontAwesomeIcon icon=\"edit\" color=\"steelblue\" size=\"lg\"/></Link>\n                        : '';\n\n        const myVotes = votes.filter(v => {return v.user_id === loginUser.id});\n        const voteState = myVotes.length !== 0;\n\n        let votebutton\n        if (voteState) {\n        votebutton = (\n            <a onClick={onClickDeleteVote.bind(this, deleteData, loginUser.id)}>\n            <FontAwesomeIcon icon=\"heart\" color=\"red\" size=\"lg\"/>\n            </a>\n        );\n        } else {\n        votebutton = (\n            <a onClick={onClickSendVote.bind(this, sendData, loginUser.id)}>\n            <FontAwesomeIcon icon={['far','heart']} color=\"gray\"  size=\"lg\"/>\n            </a>\n        );\n        }\n        const voteNumbers = <span className=\"uk-margin-small-right uk-text-default\">{ votes.length }</span>;\n\n        const translateButton = translate === true\n                            ?<Link to={translateLink}><FontAwesomeIcon icon=\"globe-americas\" color=\"steelblue\" size=\"lg\"/></Link>\n                            :\"\";\n\n        return (\n            <div>\n                { votebutton }\n                { voteNumbers }\n                { editLinkButton }\n                { translateButton }\n            </div>\n        );\n  }\n}\n\nexport default PostIcons;\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { getFilteredContents, getTranslatedContents } from '../utils/Translations';\nimport { injectIntl } from 'react-intl';\nimport { sprintf } from 'sprintf-js';\nimport Translator from './Translator';\n//componentの中でdispatchするための設定\nimport { connect } from 'react-redux';\n//評価するための関数\nimport { postVote, deleteVote } from '../actions/Vote';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass QuestionListView extends Component {\n\n  sendVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handleDeleteVote(data);\n  }\n\n  categoryFilteredContents(array, id) {\n\n    const CREATED_ALL = 0;\n    const CREATED_COMIC_ANIME = 1;\n    const CREATED_CULTURE = 2;\n    const CREATED_TOURISM = 3;\n    const CREATED_MUSIC = 4;\n\n    switch(id) {\n      case CREATED_ALL :\n        return array;\n      case CREATED_COMIC_ANIME :\n      case CREATED_CULTURE :\n      case CREATED_TOURISM :\n      case CREATED_MUSIC :\n        return array.filter((e)=>{\n          return e.category_id === id;\n        });\n      default:\n        return [];\n        break;\n    }\n  }\n\n  sortFilteredContents(array, id) {\n    const CREATED_ANSWER_MANY = 1;\n    const CREATED_ANSWER_FEW = 2;\n    const CREATED_CREATED_ASC = 3;\n    const CREATED_CREATED_DES = 4;\n\n    let editArray = [];\n\n    array.forEach(function(value) {\n      let a \n      a = {\n        \"num\" : value.answers.length,\n        \"array\": value\n      };\n      editArray.push(a);\n    });\n\n    switch(id) {\n      case CREATED_ANSWER_MANY :\n        return editArray.sort(function(a,b) {\n            return (a.num < b.num ? 1 : -1);\n          }).map((e)=>{ return e.array});\n      case CREATED_ANSWER_FEW :\n        return editArray.sort(function(a,b) {\n          return (a.num > b.num ? 1 : -1);\n        }).map((e)=>{ return e.array})\n      case CREATED_CREATED_ASC :\n        return array.sort(function(a,b) {\n          return (a.created_at < b.created_at ? 1 : -1);\n        });\n      case CREATED_CREATED_DES :\n        return array.sort(function(a,b) {\n          return (a.created_at > b.created_at ? 1 : -1);\n        });\n      default:\n        return [];\n    }\n  }\n\n  getQuestionList(questionArray, translateLanguageId, categoryId, sortId) {\n\n    const contentType = 'question_translations';\n    const filteredQuestions = getFilteredContents(questionArray, translateLanguageId, contentType);\n    const translatedQuestions = getTranslatedContents(filteredQuestions, translateLanguageId, contentType);\n    const categoryQuestions = this.categoryFilteredContents(translatedQuestions, categoryId);\n    const sortQuestions = this.sortFilteredContents(categoryQuestions, sortId);\n\n    return sortQuestions.map(question => {\n      const { user } = question;\n      const { formatMessage } = this.props.intl\n\n      const { votes } = question;\n\n      const key = \"questionList\";\n      const sendVoteParams = {\n          user_id: this.props.user.id,\n          question_id: question.id,\n          answer_id: null,\n          comment_id: null,\n          status: 1,\n      };\n      const deleteVoteParams = {\n          user_id: this.props.user.id,\n          key : \"question\",\n          vote_id: question.id,\n      };\n      const sendData = { sendVoteParams,  key };\n      const deleteData = { deleteVoteParams,  key };\n\n      const { question_translations } = question;\n      let translator;\n      translator = (\n        <h4 className=\"uk-comment-meta uk-text-right\">\n          { formatMessage({id: \"translated.state\" })}\n        </h4>\n      );\n      if (question_translations.length !== 0) {\n        const { user } = question_translations[0];\n        translator = <Translator user={user} />;\n      }\n\n      return (\n        <li key={question.id} >\n          <p>\n            <span className=\"uk-text-muted\">{ formatMessage({id: question.category.intl_key })}</span>\n            <span className=\"uk-text-meta uk-margin-small-left\">{dayjs(question.created_at).format('YYYY/MM/DD HH:mm:ss')}</span>\n          </p>\n          <p className=\"uk-text-lead uk-text-truncate\" ><Link to={`/questions/${question.id}`}>{`${question.dispText}`}</Link></p>\n          <div className=\"button-area uk-margin-bottom\" >\n          <PostIcons \n              //コンテンツのユーザー\n              user = { user } \n              //ログインユーザー\n              loginUser = { this.props.user  } \n              votes = { votes }\n              sendData = { sendData }\n              deleteData = { deleteData }\n              editLink = {`/questions/edit/${question.id}`}\n              translateLink = {`/question_translations/${question.id}`}\n              onClickSendVote = {this.sendVote.bind(this)}\n              onClickDeleteVote = {this.deleteVote.bind(this)}\n              translate = { true }\n          />\n          </div>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div>\n              <PostUser user={user} />\n            </div>\n            <div className=\"uk-width-expand\" >\n              { translator }\n            </div>\n          </div>\n        </li>\n      )\n    });\n  }\n\n  getQuestionListView(questionArray, translateLanguageId, categoryId, sortId) {\n    const questionList = this.getQuestionList(questionArray, translateLanguageId, categoryId, sortId);\n\n    return (\n      <div>\n        <ul className=\"uk-list uk-list-divider uk-list-large\">\n          {questionList}\n        </ul>\n      </div>\n    );\n  }\n\n  render() {\n    const { questionArray, translateLanguageId, categoryId, sortId } = this.props;\n    const content = this.getQuestionListView(questionArray, translateLanguageId, categoryId, sortId);\n\n    return (\n      <div>\n        {content}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  const { categoryId } = state.ctgr;\n  const { sortId } = state.sort;  \n  const { intl } = state;\n\n  return {\n    user,\n    categoryId,\n    sortId,\n    intl\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    //評価機能\n    handlePostVote: (data) => dispatch(postVote(data)),\n    handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(QuestionListView));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport QuestionListView from './QuestionListView';\n\nclass QuestionList extends Component {\n\n  componentDidMount() {\n    const { questionArray } = this.props.state.questions;\n    const categoryId = this.props.state.ctgr.categoryId;\n\n    if (questionArray.length !== 0) {\n      return;\n    }\n\n    let params \n    params = {};\n    if (categoryId !== 0){\n      params = { category_id: categoryId };\n    }\n    this.props.handleFetchData(params);\n  }\n\n  render() {\n    const { isFetching, questionArray } = this.props.state.questions;\n    const { translateLanguageId } = this.props.state.intl;\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    return (\n      <QuestionListView questionArray={questionArray} translateLanguageId={translateLanguageId} loginUser={this.props.state.auth.user.id}/>\n    );\n  }\n}\n\nexport default QuestionList;\n","import { connect } from 'react-redux';\nimport { fetchQuestionList } from '../actions/Question';\nimport QuestionList from '../components/QuestionList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (queryData) => dispatch(fetchQuestionList(queryData)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionList);\n","import React, { Component } from 'react';\nimport { Field } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass LanguageFormSelect extends Component {\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { name, placeholder } =  this.props;\n\n    return (\n      <Field name={name} component=\"select\" className={'form-control uk-select'}>\n        <option value=\"\">{placeholder}</option>\n        <option value=\"1\" >{ formatMessage({id: \"languages.japanese\" })}</option>\n        <option value=\"2\" >{ formatMessage({id: \"languages.english\" })}</option>\n      </Field>\n    );\n  }\n}\n\nexport default injectIntl(LanguageFormSelect);\n","import React, { Component } from 'react';\nimport { Field } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass CategoryFormSelect extends Component {\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { name, placeholder } =  this.props;\n    \n    return (\n      <Field name={name} component=\"select\" className={'form-control uk-select'}>\n        <option value=\"\">{placeholder}</option>\n        <option value=\"1\" >{ formatMessage({id: \"categories.comic_anime\" })}</option>\n        <option value=\"2\" >{ formatMessage({id: \"categories.culture\" })}</option>\n        <option value=\"3\" >{ formatMessage({id: \"categories.tourism\" })}</option>\n        <option value=\"4\" >{ formatMessage({id: \"categories.music\" })}</option>\n      </Field>\n    );\n  }\n}\n\nexport default injectIntl(CategoryFormSelect);\n","import React, { Component } from 'react';\nimport { Field } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass CountryFormSelect extends Component {\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { id, name, placeholder } =  this.props;\n\n    return (\n      <Field id={id} name={name} component=\"select\" className={'form-control uk-select'}>\n        <option value=\"\">{placeholder}</option>\n        <option value=\"1\" >{ formatMessage({id: \"countries.japan\" })}</option>\n        <option value=\"2\" >{ formatMessage({id: \"countries.usa\" })}</option>\n        <option value=\"3\" >{ formatMessage({id: \"countries.philippines\" })}</option>\n        <option value=\"4\" >{ formatMessage({id: \"countries.england\" })}</option>\n        <option value=\"5\" >{ formatMessage({id: \"countries.newzealand\" })}</option>\n      </Field>\n    );\n  }\n}\n\nexport default injectIntl(CountryFormSelect);","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport CategoryFormSelect from './CategoryFormSelect';\nimport { injectIntl } from 'react-intl';\nimport { Persist } from 'formik-persist';\nimport CountryFormSelect from './CountryFormSelect';\n\nclass QuestionForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = \"errors.questions.content\";\n    }\n    if (!values.country_id) {\n      errors.country_id  = \"errors.questions.country_id\";\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = \"errors.questions.translate_language_id\";\n    }\n    if (!values.category_id) {\n      errors.category_id = \"errors.questions.category_id\";\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues } = this.props;\n    const { formatMessage } = this.props.intl;\n\n    let persistTab\n    persistTab = \"\";\n    if(this.props.fromName === \"questionForm\"){\n      persistTab = <Persist name={this.props.fromName} />;\n    }\n\n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: 'placeholders.questions.content'})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n                {touched.content && errors.content && <div className=\"uk-text-warning\">{ formatMessage({id: errors.content}) }</div>}\n                {/* {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>} */}\n                { persistTab }\n              </div>\n              <div className=\"uk-margin uk-grid uk-grid-small uk-child-width-expand@s\" >\n                <div className=\"uk-grid-margin\" >\n\n                  <CountryFormSelect \n                  id={'counrty_id'}\n                  name=\"country_id\" \n                  placeholder={formatMessage({id: \"placeholders.questions.country_id\"})} />\n\n                  {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{ formatMessage({id: errors.country_id}) }</div>}\n                  {/* {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{errors.country_id}</div>} */}\n                </div>\n                <div className=\"uk-grid-margin\" >\n                  <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.questions.translate_language_id\"})} />\n                  {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{ formatMessage({id: errors.translate_language_id}) }</div>}\n                  {/* {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>} */}\n                </div>\n\n                <div className=\"uk-grid-margin\" >\n                  <CategoryFormSelect name=\"category_id\" placeholder={formatMessage({id: \"placeholders.questions.category_id\"})} />\n                  {touched.category_id && errors.category_id && <div className=\"uk-text-warning\">{ formatMessage({id: errors.category_id}) }</div>}\n                  {/* {touched.category_id && errors.category_id && <div className=\"uk-text-warning\">{errors.category_id}</div>} */}\n                </div>\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-default\" >{formatMessage({id: \"placeholders.questions.submit_btn\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(QuestionForm);","import React from 'react';\nimport QuestionList from '../containers/QuestionList';\nimport QuestionForm from './QuestionForm';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\n\nclass Home extends React.Component {\n\n  submitQuestionForm(formData) {\n    try {\n      const { user, isLoggedIn } = this.props.state.auth;\n      if (!isLoggedIn) {\n        const { history } = this.props;\n        this.props.alertMessage(\"ログインしてください。\");\n        return history.push(\"/users/login\");\n      }\n      const { content, translate_language_id, country_id, category_id } = formData;\n      const user_id = user.id;\n      const postData = { content, user_id, translate_language_id, country_id, category_id };\n      return this.props.handleSubmit(postData);\n    } catch (e) {\n      console.log('e.message', e.message);\n      return;\n    }\n  }\n\n  selectedCategory(value) {\n    switch(value) {\n      case \"all\" :\n        return 0;\n      case \"comic_anime\":\n        return 1;\n      case \"culture\":\n        return 2;\n      case \"tourism\":\n        return 3;\n      case \"music\":\n        return 4;\n      default:\n        return 0;\n    }\n  }\n\n  selectedSort(value) {\n    switch(value) {\n      case \"answerMany\":\n        return 1;\n      case \"answerFew\":\n        return 2;\n      case \"Asc\":\n        return 3;\n      case \"Des\":\n        return 4;\n      default:\n        return 4;\n    }\n  }\n\n  onChangeLanguage(locale, e) {\n    e.preventDefault();\n    e.stopPropagation();\n    localStorage.setItem('locale', locale);\n    // かなり不適切な書き方だが一旦ここでリダイレクトさせるようにしておく\n    window.location.href = '/';\n    return;\n  }\n\n  changeSortfunction(value){\n    this.props.changeSort(value);\n    let params;\n    params = {};\n    this.props.handleFetchData(params);\n  }\n\n  changeCateogryfunction(value) {\n     this.props.changeCategory(value);\n     let params;\n     params = {};\n     this.props.handleFetchData(params);\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { locale, translateLanguageId } = this.props.state.intl;\n    const { category } = this.props.state.ctgr;\n    const { sort } = this.props.state.sort;\n    const { auth } = this.props.state;\n    const questionFormInitVals = {\n      content: '',\n      country_id: '',\n      translate_language_id: '',\n      category_id: ''\n    };\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-width-auto uk-margin-bottom uk-text-right\" >\n          <span>\n            <a href=\"/\" onClick={this.onChangeLanguage.bind(this, 'ja')} >\n              日本語\n            </a>\n          </span>\n          <span className=\"uk-margin-small-left\">\n            <a href=\"/\" onClick={this.onChangeLanguage.bind(this, 'en')} >\n              English\n            </a>\n          </span>\n        </div>\n        <QuestionForm initialValues={questionFormInitVals} loginUser={auth} onSubmit={this.submitQuestionForm.bind(this)} formName=\"questionForm\"/>\n        {/* 言語切り替え */}\n        <h3 className=\"uk-heading-line\"><span>{ formatMessage({id: \"titles.question_list\" })}</span></h3>\n        <div className=\"uk-margin uk-grid uk-grid-small uk-child-width-expand@s\" >\n          {/* カテゴリー切り替え */}\n          <div className=\"uk-grid-margin\" >\n            <select className=\"uk-select\" value={category} onChange={e => this.changeCateogryfunction( e.target.value )} >\n              <option value=\"all\" >{ formatMessage({id: \"categories.all\" })}</option>\n              <option value=\"comic_anime\" >{ formatMessage({id: \"categories.comic_anime\" })}</option>\n              <option value=\"culture\" >{ formatMessage({id: \"categories.culture\" })}</option>\n              <option value=\"tourism\" >{ formatMessage({id: \"categories.tourism\" })}</option>\n              <option value=\"music\" >{ formatMessage({id: \"categories.music\" })}</option>\n            </select>\n          </div>\n          {/* ソート */}\n          <div className=\"uk-grid-margin\" >\n            <select className=\"uk-select\" value={sort} onChange={e => this.changeSortfunction( e.target.value )} >\n              <option value=\"answerMany\" >{ formatMessage({id: \"sort.answerMany\" })}</option>\n              <option value=\"answerFew\" >{ formatMessage({id: \"sort.answerFew\" })}</option>\n              <option value=\"Asc\" >{ formatMessage({id: \"sort.Asc\" })}</option>\n              <option value=\"Des\" >{ formatMessage({id: \"sort.Des\" })}</option>\n            </select>\n          </div>\n        </div>\n        <QuestionList translate_language_id={translateLanguageId}/>\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(Home);","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const UPDATE_CURRENT_LANGUAGE = Symbol('UPDATE_CURRENT_LANGUAGE');\n\n\nexport const updateCurrentLanguage = createAction(UPDATE_CURRENT_LANGUAGE);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const UPDATE_CURRENT_CATEGORY = Symbol('UPDATE_CURRENT_CATEGORY');\nexport const updateCurrentCategory = createAction(UPDATE_CURRENT_CATEGORY);","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const UPDATE_CURRENT_SORT = Symbol('UPDATE_CURRENT_SORT');\nexport const updateCurrentSort = createAction(UPDATE_CURRENT_SORT);","import { createAction } from 'redux-actions';\n\nexport const ACTION_ALERT_MESSAGE = Symbol('ACTION_ALERT_MESSAGE');\n\nexport const actionAlertMessage = createAction(ACTION_ALERT_MESSAGE);\n\n","import { connect } from 'react-redux';\nimport Home from '../components/Home';\nimport {\n  postQuestionData,\n  fetchQuestionList\n} from '../actions/Question';\nimport {\n  updateCurrentLanguage,\n} from '../actions/Intl';\nimport {\n  updateCurrentCategory,\n} from '../actions/Category';\nimport {\n  updateCurrentSort,\n} from '../actions/Sort';\nimport {\n  actionAlertMessage,\n} from '../actions/Notification';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleSubmit: (postData) => dispatch(postQuestionData(postData)),\n    changeLanguage: (locale) => dispatch(updateCurrentLanguage(locale)),\n    changeCategory: (category) => dispatch(updateCurrentCategory(category)),\n    changeSort: (sort) => dispatch(updateCurrentSort(sort)),\n    handleFetchData: (queryData) => dispatch(fetchQuestionList(queryData)),\n    alertMessage: (message) => dispatch(actionAlertMessage(message)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\n//<AnswerForm qId={this.qId} initialValues={answerFormInitVals} onSubmit={this.handleSubmit.bind(this)} />\n//この中のqId={this.qId} initialValues={answerFormInitVals} onSubmit={this.handleSubmit.bind(this)は\n//props（プロパティーの中に)入る。props.qIdという形式で値を取り出すことができる。\n\nclass AnswerForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.answers.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.answers.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues } = this.props;\n    const { formatMessage } = this.props.intl;\n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: 'placeholders.answers.content'})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n                {touched.content && errors.content && <div className=\"uk-text-warning\" >{errors.content}</div>}\n              </div>\n              <div className=\"uk-grid-margin\" >\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: 'placeholders.answers.translate_language_id'})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\" >{errors.translate_language_id}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"placeholders.answers.submit_btn\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(AnswerForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const CHANGE_ANSWER_FORM_CONTENT = Symbol('CHANGE_ANSWER_FORM_CONTENT');\nexport const FETCH_ANSWER_LIST = Symbol('FETCH_ANSWER_LIST');\nexport const FETCH_ANSWER = Symbol('FETCH_ANSWER');\nexport const POST_ANSWER_DATA = Symbol('POST_ANSWER_DATA');\nexport const INITIALIZE_FORM = Symbol('INITIALIZE_FORM');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const SAVE_ANSWER_DATA = Symbol('SAVE_ANSWER_DATA');\nexport const DELETE_ANSWER = Symbol('DELETE_ANSWER');\n\nexport const changeAnswerFormContent = createAction(CHANGE_ANSWER_FORM_CONTENT);\nexport const fetchAnswerList = createAction(FETCH_ANSWER_LIST);\nexport const fetchAnswer = createAction(FETCH_ANSWER);\nexport const postAnswerData = createAction(POST_ANSWER_DATA);\nexport const initializeForm = createAction(INITIALIZE_FORM);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const saveAnswerData = createAction(SAVE_ANSWER_DATA);\nexport const deleteAnswer = createAction(DELETE_ANSWER);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_COMMENT_DATA_SUCCESS = Symbol('RECEIVE_COMMENT_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const FETCH_SINGLE_COMMENT = Symbol('FETCH_SINGLE_COMMENT');\nexport const FETCH__COMMENT_WITH_USER_LIST = Symbol('FETCH__COMMENT_WITH_USER_LIST');\nexport const POST_COMMENT = Symbol('POST_COMMENT');\nexport const UPDATE_COMMENT = Symbol('UPDATE_COMMENT');\nexport const UPDATED_COMMENT_DATA = Symbol('UPDATED_COMMENT_DATA');\nexport const UPDATED_SINGLE_COMMENT_DATA = Symbol('UPDATED_SINGLE_COMMENT_DATA');\nexport const SAVE_COMMENT_DATA = Symbol('SAVE_COMMENT_DATA');\nexport const DELETE_COMMENT = Symbol('DELETE_COMMENT');\nexport const UPDATED_COMMENT_ARRAY = Symbol('UPDATED_COMMENT_ARRAY');\n\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveCommentDataSuccess = createAction(RECEIVE_COMMENT_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const postComment = createAction(POST_COMMENT);\nexport const fetchSingleComment = createAction(FETCH_SINGLE_COMMENT);\nexport const fetchCommentWithUserList = createAction(FETCH__COMMENT_WITH_USER_LIST);\nexport const updateComment = createAction(UPDATE_COMMENT);\nexport const updatedCommentData = createAction(UPDATED_COMMENT_DATA);\nexport const updatedSingleCommentData = createAction(UPDATED_SINGLE_COMMENT_DATA);\nexport const deleteComment = createAction(DELETE_COMMENT);\nexport const saveCommentData = createAction(SAVE_COMMENT_DATA);\nexport const updatedCommentArray = createAction(UPDATED_COMMENT_ARRAY);\n\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\n//componentの中でdispatchするための設定\nimport { connect } from 'react-redux';\n//評価するための関数\nimport { postVote, deleteVote } from '../actions/Vote';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { sprintf } from 'sprintf-js';\nimport { injectIntl } from 'react-intl';\nimport Translator from './Translator';\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass Comment extends Component {\n\n  sendVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(data, user_id) {\n      if (user_id == null) {\n          return;\n      }\n      return this.props.handleDeleteVote(data);\n  }\n\n  render() {\n    const { id, user, content, isOwner, voteList, questions, commentUser, comments, answerId, intl} = this.props;\n    const currentQuestionId = questions.currentQuestion.id;\n\n    const { formatMessage } = intl;\n    const { commentArray } = comments;\n\n    const key = \"comment\";\n    const sendVoteParams = {\n      user_id: this.props.user.id,\n      question_id: null,\n      answer_id: null,\n      comment_id: id,\n      status: 1,\n      //再レンダリングするためのquestion_id\n      questionId: currentQuestionId,\n    };\n    const deleteVoteParams = {\n      user_id: this.props.user.id,\n      key : \"comment\",\n      //他のコンテンツと共通化するためvote_idというkeyにする\n      vote_id: id,\n      //再レンダリングするためのquestion_id\n      questionId: currentQuestionId,\n    };\n    const sendData = { sendVoteParams,  key };\n    const deleteData = { deleteVoteParams,  key };\n\n    let translator;\n    translator = <h4 className=\"uk-comment-meta uk-text-right\">{formatMessage({id: 'translated.state'})}</h4>;\n    if(typeof commentArray !== 'undefined'){\n      const thisAnswerCommentList = commentArray[answerId] ;\n      const thisCommentData = thisAnswerCommentList.filter(v => v.id === id);\n      const commentTranslated = thisCommentData[0].comment_translations;\n      if (commentTranslated.length !== 0) {\n        const { user } = commentTranslated[0];\n        translator = <Translator user={user} />;\n      }\n    }\n\n    return (\n      <article className=\"uk-comment uk-comment-primary\">\n        <div className=\"uk-comment-header uk-comment-body\">\n          <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n            {content}\n            <br/>\n            <br/>\n            <PostIcons \n                //コンテンツのユーザー\n                user = { user } \n                //ログインユーザー\n                loginUser = { this.props.user } \n                votes = { voteList }\n                sendData = { sendData }\n                deleteData = { deleteData }\n                editLink = {`/comments/edit/${id}`}\n                translateLink = {`/comment_translations/${id}`}\n                onClickSendVote = {this.sendVote.bind(this)}\n                onClickDeleteVote = {this.deleteVote.bind(this)}\n                translate = { true }\n            />\n\n          </p>\n        </div>\n        <div className=\"uk-grid uk-grid-small uk-flex-middle\">\n          <div>\n            <PostUser user={ commentUser } />\n          </div>\n          <div className=\"uk-width-expand\" >\n            { translator }\n          </div>\n        </div>\n      </article>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { questions, comments } = state;\n  const { user } = state.auth;\n  const { intl } = state;\n  return {\n    user,\n    questions,\n    comments,\n    intl,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    //評価機能\n    handlePostVote: (data, questionId) => dispatch(postVote(data, questionId)),\n    handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(Comment))\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Comment from './Comment';\nimport { getFilteredContents, getTranslatedContents } from '../utils/Translations';\n\n\nclass CommentList extends Component {\n\n  render() {\n    const { loginUser, translateLanguageId } = this.props;\n    const commentList = this.props.list ? this.props.list : [];\n    const contentType = 'comment_translations';\n    const filteredCommentList = getFilteredContents(commentList, translateLanguageId, contentType);\n    const translatedCommentList = getTranslatedContents(filteredCommentList, translateLanguageId, contentType);\n\n    return (\n      <ul className=\"uk-comment-list\" >\n        { translatedCommentList.map((v, i) => {\n            const isOwner = loginUser.id === v.user.id;\n            const voteState = v.votes;\n\n            return (\n              <li className=\"uk-margin-small-top\" key={i} >\n                <Comment id={v.id} answerId={v.answer_id} commentUser={v.user} content={v.dispText} isOwner={isOwner} voteList={ voteState } />\n              </li>\n            );\n        })}\n      </ul>\n    );\n  }\n}\n\nexport default CommentList;\n","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { Persist } from 'formik-persist';\nimport { injectIntl } from 'react-intl';\n\nclass CommentForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.comments.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.comments.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues, state } = this.props;\n    const { formatMessage } = this.props.intl;\n    const buttonStr = formatMessage({id: 'placeholders.comments.submit_btn'});\n    const postButton = state.auth.isLoggedIn\n                     ? <div className=\"uk-margin\"><button className=\"uk-button uk-button-default\" >{buttonStr}</button></div>\n                     : <a class=\"uk-button uk-button-default\" href='/users/login'>{buttonStr}</a>;\n\n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: 'placeholders.comments.content'})}\n                     rows=\"3\"\n                     className={'form-control uk-textarea'}\n                />\n                <Persist name={`\"comment-form\"${values.answer_id}`}/>\n                {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: 'placeholders.comments.translate_language_id'})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n              </div>\n              {postButton}\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    state\n  };\n};\n\nexport default connect(mapStateToProps)(injectIntl(CommentForm));\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport Linkify from 'react-linkify';\nimport CommentList from './CommentList';\nimport CommentForm from './CommentForm';\nimport dayjs from 'dayjs';\nimport { getFilteredContents, getTranslatedContents } from '../utils/Translations';\nimport { injectIntl } from 'react-intl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { sprintf } from 'sprintf-js';\nimport Translator from './Translator';\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass AnswerList extends Component {\n  constructor(props) {\n    super(props);\n    this.qId = this.props.qId;\n    //ここからはコメント機能を実装するところ\n    this.state = {\n      buttonState: {},//空のオブジェクト\n      voteState: {},//評価のための\n    };\n  }\n\n  componentWillMount() {\n    const question_id = this.props.qId;\n    /* const translate_language_id = this.props.translateLanguageId;*/\n    this.props.handleFetchData({ question_id });\n  }\n\n  onClickCommentForm(formData) {\n    const { user } = this.props.state.auth;\n    const { answer_id, translate_language_id, content } = formData;\n    const answerIds = this.props.state.answers.answerArray.map((v) =>{ return v.id })\n    const postData = {\n      user_id: user.id,\n      answer_id,\n      translate_language_id,\n      content,\n      question_id: this.qId,\n      current_translate_language_id: this.translateLanguageId,\n      //翻訳済みコメントのリストを取得するためのAnswer_idリスト\n      answerIdList: answerIds,\n    };\n    return this.props.handlePostComment(postData);\n  }\n\n  getComment(answerId) {\n\n    const { buttonState } = this.state;\n\n    if (buttonState[answerId] !== \"open\") {\n      return \"\";\n    }\n\n    const initialValues = {\n      answer_id: answerId,\n      content: \"\",\n      translate_language_id: \"\",\n    };\n    return (\n      <div className=\"uk-margin-bottom\" style={{\"paddingLeft\": \"30px\"}} >\n        {/*commentFormはコメントを投稿する場所*/}\n        <CommentForm form={`commentForm_${answerId}`} onSubmit={this.onClickCommentForm.bind(this)} initialValues={initialValues} />\n      </div>\n    );\n  }\n\n  onClickReply(answerId) {\n    //値がtrueかfalseか値を取得\n    let { buttonState } = this.state;\n\n    if (buttonState[answerId] && buttonState[answerId] === \"open\") {\n      buttonState[answerId] = \"close\";\n      this.setState({buttonState});\n      return\n    } else {\n      buttonState[answerId] = \"open\";\n      this.setState({buttonState});\n      return\n    }\n  }\n\n  sendVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(data, user_id) {\n      if (user_id == null) {\n          return;\n      }\n      return this.props.handleDeleteVote(data);\n  }\n\n  getAnswerList(answerArray, translateLanguageId) {\n    const { formatMessage } = this.props.intl;\n    const loginUser = this.props.state.auth.user;\n\n    const contentType = 'answer_translations';\n    const filteredAnswers = getFilteredContents(answerArray, translateLanguageId, contentType);\n    const translatedAnswers = getTranslatedContents(filteredAnswers, translateLanguageId, contentType);\n\n\n    return translatedAnswers.map(answer => {\n\n      const { user } = answer;\n      const { votes } = answer;\n\n      const key = \"answer\";\n      const sendVoteParams = {\n        user_id: this.props.state.auth.user.id,\n        question_id: null,\n        answer_id: answer.id,\n        comment_id: null,\n        status: 1,\n        //再レンダリングするためのquestion_id\n        questionId: this.props.qId,\n      };\n      const deleteVoteParams = {\n        user_id: this.props.state.auth.user.id,\n        key : \"answer\",\n        //他のコンテンツと共通化するためvote_idというkeyにする\n        vote_id: answer.id,\n        //再レンダリングするためのquestion_id\n        questionId: this.props.qId,\n      };\n      const sendData = { sendVoteParams,  key };\n      const deleteData = { deleteVoteParams,  key };\n\n      const commentForm = this.getComment(answer.id);\n\n      const { answer_translations } = answer;\n\n      let translator;\n      translator = <h4 className=\"uk-comment-meta uk-text-right\">{formatMessage({id: 'translated.state'})}</h4>;\n      if (answer_translations.length !== 0) {\n        const { user } = answer_translations[0];\n        translator = <Translator user={user} />;\n      }\n\n      return (\n        <li key={answer.id} >\n          <article className=\"uk-comment\">\n            <div className=\"uk-comment-header uk-comment-body\">\n              <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n                <Linkify properties={{ target: '_blank'}} >{answer.dispText}</Linkify>\n                <br/>\n                <br/>\n                <PostIcons \n                    //コンテンツのユーザー\n                    user = { user } \n                    //ログインユーザー\n                    loginUser = { this.props.state.auth.user } \n                    votes = { votes }\n                    sendData = { sendData }\n                    deleteData = { deleteData }\n                    editLink = {`/answers/edit/${answer.id}`}\n                    translateLink = {`/answer_translations/${answer.id}`}\n                    onClickSendVote = {this.sendVote.bind(this)}\n                    onClickDeleteVote = {this.deleteVote.bind(this)}\n                    translate = { true }\n                />\n\n              </p>\n              <p className=\"uk-text-meta\">{dayjs(answer.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n\n            </div>\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n              <div>\n                <PostUser user={ answer.user } />\n              </div>\n              <div className=\"uk-width-expand\" >\n                { translator }\n              </div>\n            </div>\n          </article>\n          <hr className=\"uk-divider-small\" />\n          <div className=\"uk-margin-bottom\" >\n            {/*CommentListはすでに投稿されたコメントの一覧を表示する*/}\n            <CommentList list={answer.comments} loginUser={loginUser} translateLanguageId={translateLanguageId} />\n            <div className=\"uk-text-right uk-margin-top\">\n              <p onClick={this.onClickReply.bind(this,answer.id)}><FontAwesomeIcon icon={['far','comment-dots']} color=\"black\" size=\"2x\"/></p>\n            </div>\n          </div>\n\n          {commentForm}\n\n        </li>\n      );\n    });\n  }\n\n  render() {\n    const { isFetching, answerArray } = this.props.state.answers;\n    const { formatMessage } = this.props.intl;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const { translateLanguageId } = this.props;\n    const answerList = this.getAnswerList(answerArray, translateLanguageId);\n\n    if (answerList.length === 0) {\n      return (\n        <div>\n          <h4 className=\"uk-text-success\">{formatMessage({id: \"messages.empty_answers\"})}</h4>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <ul className=\"uk-list uk-list-divider uk-list-large\" >\n          { answerList }\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(AnswerList);\n","import { connect } from 'react-redux';\nimport { fetchAnswerList } from '../actions/Answer';\nimport { postComment } from '../actions/Comment';\nimport AnswerList from '../components/AnswerList';\n//評価するための関数\nimport { postVote, deleteVote } from '../actions/Vote';\n\n\n\n//this.propsを取得する\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (data) => dispatch(fetchAnswerList(data)),\n        handlePostComment: (data) => dispatch(postComment(data)),\n        //評価機能\n        handlePostVote: (data) => dispatch(postVote(data)),\n        //評価の削除機能\n        handleDeleteVote: (data) => dispatch(deleteVote(data)),\n    };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerList);\n","'use strict';\n\nexport function isEmptyObject(obj) {\n  return !Object.keys(obj).length;\n}\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport Linkify from 'react-linkify';\nimport AnswerForm from './AnswerForm';\nimport AnswerList from '../containers/AnswerList';\nimport dayjs from 'dayjs';\nimport { sprintf } from 'sprintf-js';\nimport { injectIntl } from 'react-intl';\nimport { isEmptyObject } from '../utils';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Translator from './Translator';\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass QuestionView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.qId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getQuestionById(this.qId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      //authの中にあるuserキーに対応するvalueを取り出す。という意味\n      const { user } = this.props.state.auth;\n      //formDataの中のcontent,translate_langugase_idを取り出す\n      const { content, translate_language_id } = formData;\n      const question_id = this.qId;\n      const user_id = user.id;\n      /* const { translate_language_id } = currentQuestion;*/\n      return this.props.handleSubmit({content, question_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  getTranslatedQuestion(question, translateLanguageId) {\n    if (question.translate_language_id === translateLanguageId) {\n      question.dispText = question.content;\n      return question;\n    }\n    const questionTranslation = question.question_translations.filter(question => {\n      //「DBに保存されている言語id」と「画面に表示されている言語」が一致している要素だけを取得する。[0]とすることで最初にフィルタリングされたものを取り出す。\n      return (question.translate_language_id === translateLanguageId);\n    })[0];\n\n    question.dispText = questionTranslation.content;\n    return question;\n  }\n\n  sendVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(data, user_id) {\n      if (user_id == null) {\n          return;\n      }\n      return this.props.handleDeleteVote(data);\n  }\n\n  getAnswerForm(currentQuestion, loginUser) {\n    const { formatMessage } = this.props.intl;\n    const { intl_key } = currentQuestion.country;\n    if (currentQuestion.country_id !== loginUser.country_id) {\n      const temp = formatMessage({id: \"messages.you_are_not_target\"});\n      const message = sprintf(temp, formatMessage({id: intl_key}));\n      return (\n        <div>\n          <p className=\"uk-text-meta\">{message}</p>\n        </div>\n      );\n    }\n\n    const answerFormInitVals = { content: '', translate_language_id: '' };\n    return (\n      <AnswerForm qId={this.qId} initialValues={answerFormInitVals} onSubmit={this.handleSubmit.bind(this)}/>\n    );\n  }\n\n  getTranslateUser(img) {\n    const { formatMessage } = this.props.intl;\n    const msg = formatMessage({id: \"translated.name\"});\n\n    return (\n      <div className=\"uk-text-right\">\n        <div className=\"uk-comment-meta uk-display-inline-block\" style={{padding: '0 10px'}}>{ msg }</div>\n        <div className=\"uk-display-inline-block\">\n          <img className=\"uk-comment-avatar uk-border-circle uk-text-right\" src={img} width=\"35\" height=\"35\" alt=\"\" />\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { currentQuestion } = this.props.state.questions;\n    const { translateLanguageId } = this.props.state.intl;\n    const { formatMessage } = this.props.intl;\n\n    if (isEmptyObject(currentQuestion)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const loginUser = this.props.state.auth.user;\n    const question = this.getTranslatedQuestion(currentQuestion, translateLanguageId);\n    const { user, votes } = currentQuestion;\n    const answerForm = this.getAnswerForm(currentQuestion, loginUser);\n\n    const key = \"questionView\";\n    const sendVoteParams = {\n        user_id: this.props.state.auth.user.id,\n        question_id: currentQuestion.id,\n        answer_id: null,\n        comment_id: null,\n        status: 1,\n    };\n    const deleteVoteParams = {\n        user_id: this.props.state.auth.user.id,\n        key : \"question\",\n        vote_id: currentQuestion.id,\n    };\n    const sendData = { sendVoteParams,  key };\n    const deleteData = { deleteVoteParams,  key };\n\n    const { question_translations } = question;\n    let translator;\n    translator = <h4 className=\"uk-comment-meta uk-text-right\">{formatMessage({id: 'translated.state'})}</h4>;\n    if (question_translations.length !== 0) {\n      const { user } = question_translations[0];\n      translator = <Translator user={user} />;\n    }\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n          <p className=\"uk-text-muted\">{ question.category.category }</p>\n          <p>\n            <Linkify properties={{ target: '_blank'}} >{question.dispText}</Linkify>\n            <br/>\n            <br/>\n            <PostIcons\n              user = { user }\n              loginUser = { loginUser }\n              votes = { votes }\n              sendData = { sendData }\n              deleteData = { deleteData }\n              editLink = {`/questions/edit/${this.qId}`}\n              translateLink = {`/question_translations/${this.qId}`}\n              onClickSendVote = {this.sendVote.bind(this)}\n              onClickDeleteVote = {this.deleteVote.bind(this)}\n              translate = { true }\n            />\n          </p>\n          <p className=\"uk-text-meta\">{dayjs(question.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div>\n              <PostUser user={user} />\n            </div>\n            <div className=\"uk-width-expand\" >\n                { translator }\n            </div>\n          </div>\n        </div>\n\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.answer_list\"})}</span></h3>\n\n        <div className=\"uk-margin-bottom\">\n          { answerForm }\n        </div>\n          <AnswerList qId={this.qId} translateLanguageId={translateLanguageId} />\n        <hr className=\"uk-divider-icon\" />\n\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default injectIntl(QuestionView);\n","import { connect } from 'react-redux';\nimport QuestionView from '../components/QuestionView';\nimport {\n    fetchQuestion\n} from '../actions/Question';\nimport {\n    postAnswerData,\n    fetchAnswerList\n} from '../actions/Answer';\n//評価するための関数\nimport {\n    postVote,\n    deleteVote\n} from '../actions/Vote';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getQuestionById: (id) => dispatch(fetchQuestion(id)),\n        handleSubmit: (postData) => dispatch(postAnswerData(postData)),\n        fetchAnswers: (question_id) => dispatch(fetchAnswerList(question_id)),\n        handlePostVote: (data) => dispatch(postVote(data)),\n        handleDeleteVote: (data) => dispatch(deleteVote(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionView);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport QuestionForm from './QuestionForm';\nimport { isEmptyObject } from '../utils';\nimport { injectIntl } from 'react-intl';\n\nclass QuestionEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.qId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    console.log(\"発火\")\n    this.props.getQuestionById(this.qId);\n  }\n\n  notOwnerWillTransfer(currentQuestion) {\n    const owner = currentQuestion.user;\n    const loginUser = this.props.state.auth.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const question_id = this.qId;\n      /* const { translate_language_id } = currentQuestion;*/\n      const saveData = { content, question_id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        question_id: this.qId,\n        history\n      };\n      return this.props.deleteQuestion(params);\n    } catch (e) {\n      return;\n    }\n  }s\n\n  render() {\n    const { currentQuestion } = this.props.state.questions;\n    const { formatMessage } = this.props.intl;\n\n    if(currentQuestion.length===0){\n      return;\n    };\n\n    if (isEmptyObject(currentQuestion)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentQuestion);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>{ formatMessage({id: \"titles.question.edit\" })}</h2>\n        <QuestionForm initialValues={currentQuestion} onSubmit={this.handleSubmit.bind(this)}/>\n        <p><button className=\"uk-button uk-button-danger\" onClick={this.onClickDeleteBtn.bind(this)}>{ formatMessage({id: \"titles.question.delete\" })}</button></p>\n        <Link to=\"/\">{ formatMessage({id: \"titles.question.return\" })}</Link>\n      </main>\n    );\n  }\n}\n\nexport default injectIntl(QuestionEdit);","import { connect } from 'react-redux';\nimport QuestionEdit from '../components/QuestionEdit';\nimport {\n  fetchQuestion,\n  saveQuestionData,\n  deleteQuestion,\n} from '../actions/Question';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestionById: (id) => dispatch(fetchQuestion(id)),\n    handleSubmit: (postData) => dispatch(saveQuestionData(postData)),\n    deleteQuestion: (conditions) => dispatch(deleteQuestion(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionEdit);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const CHANGE_QUESTION_LIST_LANGUAGE = Symbol('CHANGE_QUESTION_LIST_LANGUAGE');\n// export const FETCH_QUESTION_LIST = Symbol('FETCH_QUESTION_LIST');\n\nexport const FETCH_NOT_TRANSLATED = Symbol('FETCH_NOT_TRANSLATED');\n\nexport const FETCH_QUESTION = Symbol('FETCH_QUESTION');\nexport const POST_QUESTION_DATA = Symbol('POST_QUESTION_DATA');\nexport const INITIALIZE_FORM = Symbol('INITIALIZE_FORM');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\n\nexport const changeQuestionListLanguage = createAction(CHANGE_QUESTION_LIST_LANGUAGE);\n// export const fetchQuestionList = createAction(FETCH_QUESTION_LIST);\n\nexport const fetchNotTranslated = createAction(FETCH_NOT_TRANSLATED);\n\nexport const fetchQuestion = createAction(FETCH_QUESTION);\nexport const postQuestionData = createAction(POST_QUESTION_DATA);\nexport const initializeForm = createAction(INITIALIZE_FORM);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nclass NotTranslated extends Component {\n\n  constructor(props) {\n    super(props);\n    //タブの切り替えのための要素\n    this.state = {currentTab: 'questions'};\n  }\n\n  componentDidMount() {\n    const { questions } = this.props.state.not_translate;\n    if (questions.length !== 0) {\n      return;\n    }\n    let params = {};\n    this.props.handleFetchData(params);\n  }\n\n  //各カテゴリの翻訳一覧を表示する関数\n  getNotTranslated(contents, url, key) {\n\n    // getNotTranslatedの関数\n    return contents.map((v) => {\n      const { user } = v;\n      const userName = user ? user.name : '不明なユーザー';\n      const profileLink = `/users/profile/${user.id}`;\n      //コンテンツに対応したidを返す関数\n      const id = this.getNotTranslatedId(v, key);\n\n      // ここreturnはmap関数のreturn\n      return (\n        //ここでcontentの種類+そのコンテンツのidの組み合わせをkeyとすることでこのHTML要素が一意になるようにする\n        <li key={`${key}_${v.id}`} >\n        {/* <li> */}\n          {/* 未翻訳の質問を表示する */}\n          <p className=\"uk-text-lead uk-text-truncate\" >\n            <Link to={`/questions/${id}`}>{`${v.content}`}</Link>\n            <Link to={`${url}${v.id}`}><FontAwesomeIcon icon=\"globe-americas\" color=\"steelblue\" size=\"lg\"/></Link>\n          </p>\n          {/* 作成時間を表示する */}\n          <p className=\"uk-text-meta\">{dayjs(v.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          {/* プロフィールを表示する */}\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div className=\"uk-width-auto\">\n              <Link to={profileLink}><img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" /></Link>\n            </div>\n            <div className=\"uk-width-expand\">\n              <h4 className=\"uk-comment-meta uk-margin-remove\"><Link className=\"\" to={profileLink}>{ userName }</Link></h4>\n            </div>\n          </div>\n        </li>\n      );\n    })\n  }\n\n  //コンテンツに対応したidを返す関数\n  getNotTranslatedId(v, key) {\n    switch(key) {\n      case \"questions\":\n        return v.id;\n      case \"answers\":\n        return v.question_id;\n      case \"comments\":\n        return v.answer.question_id;\n    }\n  }\n\n  //コンテンツに対応したurlを付加する関数\n  getNotTranslatedQuestions(contents) {\n    const url = \"/question_translations/\";\n    const key = \"questions\";\n    return this.getNotTranslated(contents, url, key);\n  }\n  getNotTranslatedAnswers(contents) {\n    const url = \"/answer_translations/\";\n    const key = \"answers\";\n    return this.getNotTranslated(contents, url, key);\n  }\n  getNotTranslatedComments(contents) {\n    const url = \"/comment_translations/\";\n    const key = \"comments\";\n    console.log('contents', contents);\n    return this.getNotTranslated(contents, url, key);\n  }\n\n  //現在のユーザーリスト\n  getCurrentTabContents(tabState, currentTab) {\n    //tabState = state.not_translate の中に3つの連想配列が入っている\n    const { questions, answers, comments } = tabState;\n    if (currentTab === 'questions') {\n      return this.getNotTranslatedQuestions(questions);\n    } else if (currentTab === 'answers') {\n      return  this.getNotTranslatedAnswers(answers);\n    } else if (currentTab === 'comments') {\n      return this.getNotTranslatedComments(comments);\n    }\n  }\n\n  onClickTab(newTabKey, e) {\n    e.preventDefault();\n    e.stopPropagation();\n    //stateの状態変更\n    this.setState({\n      currentTab: newTabKey\n    });\n  }\n\n  getTabList() {\n    const { formatMessage } = this.props.intl;\n    const tabData = [\n      {\n        name: formatMessage({id: \"links.question\"}),\n        key: 'questions'\n      },\n      {\n        name: formatMessage({id: \"links.answer\"}),\n        key: 'answers'\n      },\n      {\n        name: formatMessage({id: \"links.comment\"}),\n        key: 'comments'\n      }\n    ];\n\n    return (\n      <ul className=\"uk-tab\" >\n        {tabData.map(v => {\n           //currentTabとkeyが一致したとき、それをactiveにする\n           const active = this.state['currentTab'] === v.key\n                        ? 'uk-active'\n                        : '';\n           return (\n             <li key={v.key} className={active} onClick={this.onClickTab.bind(this, v.key)} >\n               <a href=\"\">{v.name}</a>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  getNotTranslatedView(state) {\n\n    const { isFetching } = state.not_translate;\n\n    //読み込み中であることを示すロゴを表示する\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const tabContents = this.getCurrentTabContents(state.not_translate, this.state.currentTab);\n\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\" >\n        {tabContents}\n      </ul>\n    );\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const content = this.getNotTranslatedView(this.props.state);\n    const tabList = this.getTabList();\n    \n    return (\n      <div>\n        <div className=\"uk-container uk-container-small\">\n          <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.not_translated_list\"})}</span></h3>\n          <br></br>\n        </div>\n        <div className=\"uk-container uk-container-small\">\n          {tabList}\n          {content}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(NotTranslated);\n","import { connect } from 'react-redux';\nimport { fetchNotTranslated } from '../actions/NotTranslated';\nimport NotTranslated from '../components/NotTranslated';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (queryData) => dispatch(fetchNotTranslated(queryData)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NotTranslated);","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport AnswerForm from './AnswerForm';\nimport { isEmptyObject } from '../utils';\n\nclass AnswerEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.answerId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getAnswerById(this.answerId);\n  }\n\n  notOwnerWillTransfer(currentAnswer) {\n    const owner = currentAnswer.user;\n    const loginUser = this.props.state.auth.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { currentAnswer } = this.props.state.answers;\n      const { content, translate_language_id, country_id } = formData;\n      const { history } = this.props;\n      const answer_id = this.answerId;\n      const { question_id } = currentAnswer;\n      /* const { translate_language_id } = currentQuestion;*/\n      const saveData = { content, answer_id, translate_language_id, country_id, history, question_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { currentAnswer } = this.props.state.answers;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        answer_id: this.answerId,\n        question_id: currentAnswer.question_id,\n        history\n      };\n      return this.props.deleteAnswer(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentAnswer } = this.props.state.answers;\n\n    if (isEmptyObject(currentAnswer)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentAnswer);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>回答の編集</h2>\n        <AnswerForm initialValues={currentAnswer} onSubmit={this.handleSubmit.bind(this)} />\n        <p><button className=\"uk-button uk-button-danger\" onClick={this.onClickDeleteBtn.bind(this)}>この回答を削除</button></p>\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default AnswerEdit;\n","import { connect } from 'react-redux';\nimport AnswerEdit from '../components/AnswerEdit';\nimport {\n  fetchAnswer,\n  saveAnswerData,\n  deleteAnswer,\n} from '../actions/Answer';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAnswerById: (id) => dispatch(fetchAnswer(id)),\n    handleSubmit: (postData) => dispatch(saveAnswerData(postData)),\n    deleteAnswer: (params) => dispatch(deleteAnswer(params)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerEdit);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport CommentForm from './CommentForm';\nimport { isEmptyObject } from '../utils';\n\nclass CommentEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.commentId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getCommentById(this.commentId);\n  }\n\n  notOwnerWillTransfer(currentComment) {\n    const owner = currentComment.user;\n    const loginUser = this.props.state.auth.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { currentComment } = this.props.state.comments;\n      const { content, translate_language_id } = formData;\n      const { history } = this.props;\n      const comment_id = this.commentId;\n      const { answer_id } = currentComment;\n      const { question_id } = currentComment.answer;\n      const saveData = { content, comment_id, translate_language_id, history, answer_id, question_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { currentComment } = this.props.state.comments;\n      const { question_id } = currentComment.answer;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        comment_id: this.commentId,\n        question_id,\n        history\n      };\n      return this.props.deleteComment(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentComment } = this.props.state.comments;\n\n    if (isEmptyObject(currentComment)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentComment);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>コメントの編集</h2>\n        <CommentForm initialValues={currentComment} onSubmit={this.handleSubmit.bind(this)} />\n        <p><button className=\"uk-button uk-button-danger\" onClick={this.onClickDeleteBtn.bind(this)}>このコメントを削除</button></p>\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default CommentEdit;\n","import { connect } from 'react-redux';\nimport CommentEdit from '../components/CommentEdit';\nimport {\n  fetchSingleComment,\n  saveCommentData,\n  deleteComment,\n} from '../actions/Comment';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCommentById: (id) => dispatch(fetchSingleComment(id)),\n    handleSubmit: (postData) => dispatch(saveCommentData(postData)),\n    deleteComment: (params) => dispatch(deleteComment(params)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentEdit);\n","import React, { Component } from 'react';\nimport { Formik, Field } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\nclass QuestionTranslatinoForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.translations.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.translations.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          content: '',\n          translate_language_id: ''\n        }}\n        validate={this.validate.bind(this)}\n        enableReinitialize={true}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: 'placeholders.translations.content'})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n              </div>\n              {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.translations.translate_language_id\"})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"buttons.title.post\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(QuestionTranslatinoForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_QUESTION_TRANSLATION_LIST = Symbol('FETCH_QUESTION_TRANSLATION_LIST');\nexport const FETCH_QUESTION_TRANSLATION = Symbol('FETCH_QUESTION_TRANSLATION');\nexport const POST_QUESTION_TRANSLATION_DATA = Symbol('POST_QUESTION_TRANSLATION_DATA');\nexport const INITIALIZE_FORM = Symbol('INITIALIZE_FORM');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATED_SINGLE_QUESTION_TRANSLATION = Symbol('UPDATED_SINGLE_QUESTION_TRANSLATION');\nexport const SAVE_QUESTION_TRANSLATION_DATA = Symbol('SAVE_QUESTION_TRANSLATION_DATA');\nexport const DELETE_QUESTION_TRANSLATION = Symbol('DELETE_QUESTION_TRANSLATION');\n\n\nexport const fetchQuestionTranslationList = createAction(FETCH_QUESTION_TRANSLATION_LIST);\nexport const fetchQuestionTranslation = createAction(FETCH_QUESTION_TRANSLATION);\nexport const postQuestionTranslationData = createAction(POST_QUESTION_TRANSLATION_DATA);\nexport const initializeForm = createAction(INITIALIZE_FORM);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updatedSingleQuestionTranslation = createAction(UPDATED_SINGLE_QUESTION_TRANSLATION);\nexport const saveQuestionTranslationData = createAction(SAVE_QUESTION_TRANSLATION_DATA);\nexport const deleteQuestionTranslation = createAction(DELETE_QUESTION_TRANSLATION);\n\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const POST_VOTE = Symbol('POST_VOTE');\nexport const DELETE_VOTE = Symbol('DELETE_VOTE');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\n\n//createAction(FETCH_QUESTION_LIST)はFETCH_QUESTION_LISTという名前でアクションを発火させる。\nexport const postVote = createAction(POST_VOTE);\nexport const deleteVote = createAction(DELETE_VOTE);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\n\n//componentの中でdispatchするための設定\nimport { connect } from 'react-redux';\n//評価するための関数\nimport { postVote, deleteVote } from '../actions/VoteTranslation';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass QuestionTranslationList extends Component {\n  constructor(props) {\n    super(props);\n    this.qId = this.props.qId;\n  }\n\n  componentWillMount() {\n    this.props.handleFetchData(this.qId);\n  }\n\n  sendVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(data, user_id) {\n      if (user_id == null) {\n          return;\n      }\n      return this.props.handleDeleteVote(data);\n  }\n\n  getTranslationList(translationList, loginUser) {\n    const { formatMessage } = this.props.intl;\n\n    return translationList.map(translation => {\n\n      const key = \"question\";\n      const sendVoteParams = {\n          user_id: this.props.user.id,\n          question_translation_id: translation.id,\n          answer_translation_id: null,\n          commcomment_translation_id: null,\n          status: 1,\n          //再レンダリング用のId\n          questionId: translation.question_id,\n      };\n      const deleteVoteParams = {\n          user_id: this.props.user.id,\n          key : \"question\",\n          //他のコンテンツと共通化するためvote_idというkeyにする\n          vote_id: translation.id,\n          //再レンダリング用のId\n          questionId: translation.question_id,\n      };\n      const sendData = { sendVoteParams,  key };\n      const deleteData = { deleteVoteParams,  key };\n\n      return (\n        <li key={translation.id} >\n          <article className=\"uk-comment\">\n            <div className=\"uk-comment-header uk-comment-body\">\n              <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n                <Linkify properties={{ target: '_blank'}} >{translation.content}</Linkify>\n                <br/>\n                <br/>\n                <PostIcons \n                    //コンテンツのユーザー\n                    user = { translation.user } \n                    //ログインユーザー\n                    loginUser = { loginUser  } \n                    votes = { translation.vote_translations }\n                    sendData = { sendData }\n                    deleteData = { deleteData }\n                    editLink = {`/question_translations/edit/${translation.id}`}\n                    // translateLink = {}\n                    onClickSendVote = {this.sendVote.bind(this)}\n                    onClickDeleteVote = {this.deleteVote.bind(this)}\n                    translate = { false }\n                />\n              </p>\n              <p className=\"uk-text-meta\">{dayjs(translation.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n\n            </div>\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n              <div>\n                <PostUser user={ translation.user } />\n              </div>\n            </div>\n          </article>\n        </li>\n      );})\n\n  }\n\n  render() {\n    const { isFetching, currentTranslationList } = this.props.state.questionTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const translationList = this.getTranslationList(currentTranslationList, loginUser);\n\n    return (\n      <div>\n        <ul className=\"uk-list uk-list-divider uk-list-large\" >\n          {translationList}\n        </ul>\n      </div>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  return {\n    user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      //評価機能\n      handlePostVote: (data) => dispatch(postVote(data)),\n      handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(QuestionTranslationList));\n","import { connect } from 'react-redux';\nimport { fetchQuestionTranslationList } from '../actions/QuestionTranslation';\nimport QuestionTranslationList from '../components/QuestionTranslationList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (question_id) => dispatch(fetchQuestionTranslationList(question_id)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionTranslationList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport QuestionTranslationForm from '../components/QuestionTranslationForm';\nimport QuestionTranslationList from '../containers/QuestionTranslationList';\nimport {\n  fetchQuestion\n} from '../actions/Question';\nimport {\n  fetchAnswerList\n} from '../actions/Answer';\nimport {\n    postQuestionTranslationData\n} from '../actions/QuestionTranslation';\nimport { isEmptyObject } from '../utils';\nimport { injectIntl } from 'react-intl';\nimport PostUser from '../components/PostUser';\n\nclass QuestionTranslationView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.qId = parseInt(params.question_id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getQuestionById(this.qId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id } = formData;\n      if (content === '') {\n        throw new Error('空文字で投稿はできません。');\n      }\n      const { user } = this.props.state.auth;\n      const question_id = this.qId;\n      const user_id = user.id;\n      return this.props.handleSubmit({content, question_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { currentQuestion } = this.props.state.questions;\n    if (isEmptyObject(currentQuestion)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const { user } = currentQuestion;\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n          <p><Linkify properties={{ target: '_blank'}} >{currentQuestion.content}</Linkify></p>\n          <p className=\"uk-text-meta\">{dayjs(currentQuestion.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div>\n              <PostUser user={user} />\n            </div>\n          </div>\n        </div>\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.translation_list\"})}</span></h3>\n        <QuestionTranslationForm qId={this.qId} onSubmit={this.handleSubmit.bind(this)} />\n        <QuestionTranslationList qId={this.qId} />\n        <hr className=\"uk-divider-icon\" />\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestionById: (id) => dispatch(fetchQuestion(id)),\n    fetchAnswers: (question_id) => dispatch(fetchAnswerList(question_id)),\n    handleSubmit: (postData) => dispatch(postQuestionTranslationData(postData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(QuestionTranslationView));\n","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\n\nclass TranslationForm extends Component {\n\n  validate(values) {\n    let errors = {};\n    if (!values.content) {\n      errors.content = '翻訳文を入力してください';\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = '投稿言語を指定してください';\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues } = this.props;\n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        validate={this.validate}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder=\"翻訳文を入力してください\"\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n                {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              </div>\n              <div className=\"uk-margin uk-grid uk-grid-small uk-child-width-expand@s\" >\n                <div className=\"uk-grid-margin\" >\n                  <LanguageFormSelect name=\"translate_language_id\" placeholder=\"投稿言語\" />\n                  {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n                </div>\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >投稿</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default TranslationForm;\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationForm from './TranslationForm';\nimport { isEmptyObject } from '../utils';\n\nclass TranslationEdit extends Component {\n\n  notOwnerWillTransfer(currentTranslation, loginUser) {\n    const owner = currentTranslation.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  render() {\n    const { currentTranslation, handleSubmit, onClickDeleteBtn, loginUser } = this.props;\n\n    if (isEmptyObject(currentTranslation)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentTranslation, loginUser);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>翻訳の編集</h2>\n        <TranslationForm initialValues={currentTranslation} onSubmit={handleSubmit} />\n        <p><button className=\"uk-button uk-button-danger\" onClick={onClickDeleteBtn}>この翻訳を削除</button></p>\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default TranslationEdit;\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationEdit from './TranslationEdit';\n\nclass QuestionTranslationEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.qtId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getQuestionTranslationById(this.qtId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const id = this.qtId;\n      /* const { translate_language_id } = currentTranslation;*/\n      const saveData = { content, id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        id: this.qtId,\n        history\n      };\n      return this.props.deleteQuestionTranslation(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentTranslation } = this.props.state.questionTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    return (\n      <TranslationEdit\n        currentTranslation={currentTranslation}\n        handleSubmit={this.handleSubmit.bind(this)}\n        onClickDeleteBtn={this.onClickDeleteBtn.bind(this)}\n        loginUser={loginUser}\n      />\n    );\n  }\n}\n\nexport default QuestionTranslationEdit;\n","import { connect } from 'react-redux';\nimport QuestionTranslationEdit from '../components/QuestionTranslationEdit';\nimport {\n  fetchQuestionTranslation,\n  saveQuestionTranslationData,\n  deleteQuestionTranslation,\n} from '../actions/QuestionTranslation';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestionTranslationById: (id) => dispatch(fetchQuestionTranslation(id)),\n    handleSubmit: (postData) => dispatch(saveQuestionTranslationData(postData)),\n    deleteQuestionTranslation: (conditions) => dispatch(deleteQuestionTranslation(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionTranslationEdit);\n","import React, { Component } from 'react';\nimport { Formik, Field } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\nclass AnswerTranslatinoForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.translations.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.translations.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          content: '',\n          translate_language_id: ''\n        }}\n        validate={this.validate.bind(this)}\n        enableReinitialize={true}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.translations.content\"})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n              </div>\n              {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.translations.translate_language_id\"})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"buttons.title.post\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(AnswerTranslatinoForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_ANSWER_TRANSLATION_LIST = Symbol('FETCH_ANSWER_TRANSLATION_LIST');\nexport const FETCH_ANSWER_TRANSLATION = Symbol('FETCH_ANSWER_TRANSLATION');\nexport const POST_ANSWER_TRANSLATION_DATA = Symbol('POST_ANSWER_TRANSLATION_DATA');\nexport const SAVE_ANSWER_TRANSLATION_DATA = Symbol('SAVE_ANSWER_TRANSLATION_DATA');\nexport const DELETE_ANSWER_TRANSLATION = Symbol('DELETE_ANSWER_TRANSLATION');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATED_SINGLE_ANSWER_TRANSLATION = Symbol('UPDATED_SINGLE_ANSWER_TRANSLATION');\n\nexport const fetchAnswerTranslationList = createAction(FETCH_ANSWER_TRANSLATION_LIST);\nexport const fetchAnswerTranslation = createAction(FETCH_ANSWER_TRANSLATION);\nexport const postAnswerTranslationData = createAction(POST_ANSWER_TRANSLATION_DATA);\nexport const saveAnswerTranslationData = createAction(SAVE_ANSWER_TRANSLATION_DATA);\nexport const deleteAnswerTranslation = createAction(DELETE_ANSWER_TRANSLATION);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updatedSingleAnswerTranslation = createAction(UPDATED_SINGLE_ANSWER_TRANSLATION);\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\n\nimport { connect } from 'react-redux';\nimport { postVote, deleteVote } from '../actions/VoteTranslation';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass AnswerTranslationList extends Component {\n  constructor(props) {\n    super(props);\n    this.aId = this.props.aId;\n  }\n\n  componentWillMount() {\n    this.props.handleFetchData(this.aId);\n  }\n\n  sendVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(data, user_id) {\n      if (user_id == null) {\n          return;\n      }\n      return this.props.handleDeleteVote(data);\n  }\n\n  getTranslationList(translationList, loginUser) {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\" >\n        {translationList.map(translation => {\n\n          const key = \"answer\";\n          const sendVoteParams = {\n              user_id: this.props.user.id,\n              question_translation_id: null,\n              answer_translation_id: translation.id,\n              commcomment_translation_id: null,\n              status: 1,\n              //再レンダリング用のId\n              answerId: translation.answer_id\n          };\n          const deleteVoteParams = {\n              user_id: this.props.user.id,\n              key : \"answer\",\n              //他のコンテンツと共通化するためvote_idというkeyにする\n              vote_id: translation.id,\n              //再レンダリング用のId\n              answerId: translation.answer_id,\n          };\n          const sendData = { sendVoteParams,  key };\n          const deleteData = { deleteVoteParams,  key };\n                  \n           return (\n             <li key={translation.id} >\n               <article className=\"uk-comment\">\n                 <div className=\"uk-comment-header uk-comment-body\">\n                   <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n                     <Linkify properties={{ target: '_blank'}} >{translation.content}</Linkify>\n                     <br/>\n                     <br/>\n                     <PostIcons \n                        //コンテンツのユーザー\n                        user = { translation.user } \n                        //ログインユーザー\n                        loginUser = { loginUser  } \n                        votes = { translation.vote_translations }\n                        sendData = { sendData }\n                        deleteData = { deleteData }\n                        editLink = {`/answer_translations/edit/${translation.id}`}\n                        // translateLink = {}\n                        onClickSendVote = {this.sendVote.bind(this)}\n                        onClickDeleteVote = {this.deleteVote.bind(this)}\n                        translate = { false }\n                     />\n\n                   </p>\n                   <p className=\"uk-text-meta\">{dayjs(translation.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n                 </div>\n                 <div>\n                   <PostUser user={ translation.user } />\n                 </div>\n               </article>\n             </li>\n           );\n        })}\n      </ul>\n    );\n\n  }\n\n  render() {\n    const { isFetching, currentTranslationList } = this.props.state.answerTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n    const content = this.getTranslationList(currentTranslationList, loginUser);\n    return (\n      <div>\n        {content}\n      </div>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  return {\n    user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      //評価機能\n      handlePostVote: (data) => dispatch(postVote(data)),\n      handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(AnswerTranslationList));\n","import { connect } from 'react-redux';\nimport { fetchAnswerTranslationList } from '../actions/AnswerTranslation';\nimport AnswerTranslationList from '../components/AnswerTranslationList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (answer_id) => dispatch(fetchAnswerTranslationList(answer_id)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerTranslationList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport AnswerTranslationForm from '../components/AnswerTranslationForm';\nimport AnswerTranslationList from '../containers/AnswerTranslationList';\nimport {\n  fetchAnswer,\n  fetchAnswerList\n} from '../actions/Answer';\nimport {\n  postAnswerTranslationData\n} from '../actions/AnswerTranslation';\nimport { isEmptyObject } from '../utils';\nimport { injectIntl } from 'react-intl';\nimport PostUser from '../components/PostUser';\n\nclass AnswerTranslationView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.aId = parseInt(params.answer_id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getAnswerById(this.aId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id } = formData;\n      if (content === '') {\n        const msg = '空文字で投稿はできません。';\n        throw new Error(msg);\n      }\n      const { user } = this.props.state.auth;\n      const answer_id = this.aId;\n      const user_id = user.id;\n      return this.props.handleSubmit({content, answer_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { currentAnswer } = this.props.state.answers;\n    if (isEmptyObject(currentAnswer)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const user = (currentAnswer.user) ? currentAnswer.user : null;\n    const userName = (user) ? user.name : '';\n    const { question_id } = currentAnswer;\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n          <p><Linkify properties={{ target: '_blank'}} >{currentAnswer.content}</Linkify></p>\n          <p className=\"uk-text-meta\">{dayjs(currentAnswer.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div>\n              <PostUser user={user} />\n            </div>\n          </div>\n\n        </div>\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.translation_list\"})}</span></h3>\n        <AnswerTranslationForm aId={this.aId} onSubmit={this.handleSubmit.bind(this)} />\n        <AnswerTranslationList aId={this.aId} />\n        <hr className=\"uk-divider-icon\" />\n        <p><Link to={`/questions/${question_id}`}>{formatMessage({id: \"links.to_question_view\"})}</Link></p>\n        <p><Link to=\"/\">Top</Link></p>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAnswerById: (id) => dispatch(fetchAnswer(id)),\n    fetchAnswers: (question_id) => dispatch(fetchAnswerList(question_id)),\n    handleSubmit: (postData) => dispatch(postAnswerTranslationData(postData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(AnswerTranslationView));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationEdit from './TranslationEdit';\n\nclass AnswerTranslationEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.atId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getAnswerTranslationById(this.atId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const id = this.atId;\n      /* const { translate_language_id } = currentTranslation;*/\n      const saveData = { content, id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        id: this.atId,\n        history\n      };\n      return this.props.deleteAnswerTranslation(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentTranslation } = this.props.state.answerTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    return (\n      <TranslationEdit\n        currentTranslation={currentTranslation}\n        handleSubmit={this.handleSubmit.bind(this)}\n        onClickDeleteBtn={this.onClickDeleteBtn.bind(this)}\n        loginUser={loginUser}\n      />\n    );\n  }\n}\n\nexport default AnswerTranslationEdit;\n","import { connect } from 'react-redux';\nimport AnswerTranslationEdit from '../components/AnswerTranslationEdit';\nimport {\n  fetchAnswerTranslation,\n  saveAnswerTranslationData,\n  deleteAnswerTranslation,\n} from '../actions/AnswerTranslation';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAnswerTranslationById: (id) => dispatch(fetchAnswerTranslation(id)),\n    handleSubmit: (postData) => dispatch(saveAnswerTranslationData(postData)),\n    deleteAnswerTranslation: (conditions) => dispatch(deleteAnswerTranslation(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerTranslationEdit);\n","import React, { Component } from 'react';\nimport { Formik, Field } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\nclass CommentTranslatinoForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.translations.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.translations.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          content: '',\n          translate_language_id: ''\n        }}\n        validate={this.validate.bind(this)}\n        enableReinitialize={true}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.translations.content\"})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n              </div>\n              {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.translations.translate_language_id\"})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"buttons.title.post\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(CommentTranslatinoForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_COMMENT_TRANSLATION_LIST = Symbol('FETCH_COMMENT_TRANSLATION_LIST');\nexport const FETCH_COMMENT_TRANSLATION = Symbol('FETCH_COMMENT_TRANSLATION');\nexport const POST_COMMENT_TRANSLATION_DATA = Symbol('POST_COMMENT_TRANSLATION_DATA');\nexport const SAVE_COMMENT_TRANSLATION_DATA = Symbol('SAVE_COMMENT_TRANSLATION_DATA');\nexport const DELETE_COMMENT_TRANSLATION = Symbol('DELETE_COMMENT_TRANSLATION');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATED_SINGLE_COMMENT_TRANSLATION = Symbol('UPDATED_SINGLE_COMMENT_TRANSLATION');\n\n\nexport const fetchCommentTranslationList = createAction(FETCH_COMMENT_TRANSLATION_LIST);\nexport const fetchCommentTranslation = createAction(FETCH_COMMENT_TRANSLATION);\nexport const postCommentTranslationData = createAction(POST_COMMENT_TRANSLATION_DATA);\nexport const saveCommentTranslationData = createAction(SAVE_COMMENT_TRANSLATION_DATA);\nexport const deleteCommentTranslation = createAction(DELETE_COMMENT_TRANSLATION);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updatedSingleCommentTranslation = createAction(UPDATED_SINGLE_COMMENT_TRANSLATION);\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\n\nimport { connect } from 'react-redux';\nimport { postVote, deleteVote } from '../actions/VoteTranslation';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass CommentTranslationList extends Component {\n  constructor(props) {\n    super(props);\n    this.commentId = this.props.commentId;\n  }\n\n  componentWillMount() {\n    this.props.handleFetchData(this.commentId);\n  }\n\n  sendVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(data, user_id) {\n      if (user_id == null) {\n          return;\n      }\n      return this.props.handleDeleteVote(data);\n  }\n\n  getTranslationList(translationList, loginUser) {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\" >\n        {translationList.map(translation => {\n            const key = \"comment\";\n            const sendVoteParams = {\n                user_id: this.props.user.id,\n                question_translation_id: null,\n                answer_translation_id: null,\n                comment_translation_id: translation.id,\n                status: 1,\n                //再レンダリング用のId\n                commentId: translation.comment_id\n            };\n            const deleteVoteParams = {\n                user_id: this.props.user.id,\n                key : \"comment\",\n                //他のコンテンツと共通化するためvote_idというkeyにする\n                vote_id: translation.id,\n                //再レンダリング用のId\n                commentId: translation.comment_id,\n            };\n            const sendData = { sendVoteParams,  key };\n            const deleteData = { deleteVoteParams,  key };\n\n           return (\n             <li key={translation.id} >\n               <article className=\"uk-comment\">\n                 <div className=\"uk-comment-header uk-comment-body\">\n                   <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n                     <Linkify properties={{ target: '_blank'}} >{translation.content}</Linkify>z\n                     <br/>\n                     <br/>\n                     <PostIcons \n                        //コンテンツのユーザー\n                        user = { translation.user } \n                        //ログインユーザー\n                        loginUser = { loginUser  } \n                        votes = { translation.vote_translations }\n                        sendData = { sendData }\n                        deleteData = { deleteData }\n                        editLink = {`/comment_translations/edit/${translation.id}`}\n                        // translateLink = {}\n                        onClickSendVote = {this.sendVote.bind(this)}\n                        onClickDeleteVote = {this.deleteVote.bind(this)}\n                        translate = { false }\n                     />\n                   </p>\n                   <p className=\"uk-text-meta\">{dayjs(translation.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n                 </div>\n                 <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n                   <div>\n                     <PostUser user={ translation.user } />\n                   </div>\n                 </div>\n               </article>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  render() {\n    const { isFetching, currentTranslationList } = this.props.state.commentTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const content = this.getTranslationList(currentTranslationList, loginUser);\n\n    return (\n      <div>\n        {content}\n      </div>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  return {\n    user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      //評価機能\n      handlePostVote: (data) => dispatch(postVote(data)),\n      handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(CommentTranslationList));\n","import { connect } from 'react-redux';\nimport { fetchCommentTranslationList } from '../actions/CommentTranslation';\nimport CommentTranslationList from '../components/CommentTranslationList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (answer_id) => dispatch(fetchCommentTranslationList(answer_id)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentTranslationList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport CommentTranslationForm from '../components/CommentTranslationForm';\nimport CommentTranslationList from '../containers/CommentTranslationList';\nimport {\n  fetchSingleComment,\n} from '../actions/Comment';\nimport {\n  postCommentTranslationData\n} from '../actions/CommentTranslation';\nimport { isEmptyObject } from '../utils';\nimport { injectIntl } from 'react-intl';\nimport PostUser from '../components/PostUser';\n\nclass CommentTranslationView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.commentId = parseInt(params.comment_id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getCommentById(this.commentId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id } = formData;\n      if (content === '') {\n        const msg = '空文字で投稿はできません。';\n        throw new Error(msg);\n      }\n      const { user } = this.props.state.auth;\n      const comment_id = this.commentId;\n      const user_id = user.id;\n      return this.props.handleSubmit({content, comment_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { currentComment } = this.props.state.comments;\n    const { currentQuestion } = this.props.state.questions;\n\n    if (isEmptyObject(currentComment)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const user = (currentComment.user) ? currentComment.user : null;\n    const userName = (user) ? user.name : '';\n    const toQuestionViewLink = !isEmptyObject(currentQuestion)\n                             ? (<p><Link to={`/questions/${currentQuestion.id}`}>{formatMessage({id: \"links.to_question_view\"})}</Link></p>)\n                             : '';                         \n\n    return (\n    <main className=\"uk-container uk-container-small\">\n      <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n        <p><Linkify properties={{ target: '_blank'}} >{currentComment.content}</Linkify></p>\n        <p className=\"uk-text-meta\">{dayjs(currentComment.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n        <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n          <div>\n            <PostUser user={user} />\n          </div>\n        </div>\n      </div>\n      <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.translation_list\"})}</span></h3>\n      <CommentTranslationForm commentId={this.commentId} onSubmit={this.handleSubmit.bind(this)} />\n      <CommentTranslationList commentId={this.commentId} />\n      <hr className=\"uk-divider-icon\" />\n      { toQuestionViewLink }\n      <p><Link to=\"/\">Top</Link></p>\n    </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCommentById: (id) => dispatch(fetchSingleComment(id)),\n    handleSubmit: (postData) => dispatch(postCommentTranslationData(postData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(CommentTranslationView));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationEdit from './TranslationEdit';\n\n\nclass CommentTranslationEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.ctId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    console.log('getCommentTranslationById');\n    this.props.getCommentTranslationById(this.ctId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const id = this.ctId;\n      /* const { translate_language_id } = currentTranslation;*/\n      const saveData = { content, id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        id: this.ctId,\n        history\n      };\n      return this.props.deleteCommentTranslation(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentTranslation } = this.props.state.commentTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    return (\n      <TranslationEdit\n        currentTranslation={currentTranslation}\n        handleSubmit={this.handleSubmit.bind(this)}\n        onClickDeleteBtn={this.onClickDeleteBtn.bind(this)}\n        loginUser={loginUser}\n      />\n    );\n  }\n}\n\nexport default CommentTranslationEdit;\n","import { connect } from 'react-redux';\nimport CommentTranslationEdit from '../components/CommentTranslationEdit';\nimport {\n  fetchCommentTranslation,\n  saveCommentTranslationData,\n  deleteCommentTranslation,\n} from '../actions/CommentTranslation';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCommentTranslationById: (id) => dispatch(fetchCommentTranslation(id)),\n    handleSubmit: (postData) => dispatch(saveCommentTranslationData(postData)),\n    deleteCommentTranslation: (conditions) => dispatch(deleteCommentTranslation(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentTranslationEdit);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Drawer from '@material-ui/core/Drawer';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = {\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: 'auto',\n  },\n};\n\nclass MenuDrawer extends React.Component {\n  state = {\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  };\n\n  toggleDrawer = (side, open) => () => {\n    this.setState({\n      [side]: open,\n    });\n  };\n\n  getLogoutLink(user) {\n    if (!user.id) {\n      return '';\n    }\n    const { history } = this.props;\n    const actionData = { history };\n    return (\n      <Link to=\"/\" onClick={this.props.logout.bind(this, actionData)}>Logout</Link>\n    );\n  }\n\n  render() {\n    const { classes, displayName } = this.props;\n\n    const menuDataList = [\n      {\n        text: 'プロフィール',\n        component: Link,\n        to: '/users/profile_edit',\n      },\n      {\n        text: 'ログアウト',\n        component: Link,\n        to: '/users/logout',\n      },\n    ];\n\n    const sideList = (\n      <div className={classes.list}>\n        <List>\n          {menuDataList.map((menuData, index) => (\n            <ListItem button component={menuData.component} to={menuData.to}  key={index} >\n              {/* <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon> */}\n              <ListItemText primary={menuData.text} />\n            </ListItem>\n          ))}\n        </List>\n      </div>\n    );\n\n    return (\n      <div className=\"uk-display-inline-block\" >\n        <Button onClick={this.toggleDrawer('right', true)}>{ displayName }</Button>\n        <Drawer anchor=\"right\" open={this.state.right} onClose={this.toggleDrawer('right', false)}>\n          <div\n            tabIndex={0}\n            role=\"button\"\n            onClick={this.toggleDrawer('right', false)}\n            onKeyDown={this.toggleDrawer('right', false)}\n          >\n            {sideList}\n          </div>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\nMenuDrawer.propTypes = {\n  classes: PropTypes.object.isRequired,\n  displayName: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(MenuDrawer);\n","import React from 'react';\n/* import MenuDrawer from '../../containers/layouts/MenuDrawer';*/\nimport MenuDrawer from './MenuDrawer';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      anchorEl: null\n    };\n  }\n\n  onClickLogout() {\n    const { user } = this.props.state.auth;\n    if (!user.id) {\n      return '';\n    }\n    const { history } = this.props;\n    const actionData = { history };\n    return this.props.logout(actionData);\n  }\n\n  getMenu(displayName) {\n    const { anchorEl } = this.state;\n    const { formatMessage } = this.props.intl;\n\n    const handleClick = event => {\n      this.setState({ anchorEl: event.currentTarget });\n    };\n\n    const handleClose = () => {\n      this.setState({ anchorEl: null });\n    };\n\n    const handleLogout = () => {\n      handleClose();\n      return this.onClickLogout();\n    };\n\n    const getProfileElem = (auth) => {\n      if (!auth.isLoggedIn) {\n        return '';\n      }\n      const { user } = auth;\n      const menuList = [\n        {\n          text: formatMessage({id: \"links.profile\"}),\n          to: `/users/profile/${user.id}`,\n          icon: \"user\"\n        },\n        {\n          text: formatMessage({id: \"links.profile_edit\"}),\n          to: '/users/profile_edit',\n          icon: \"pencil\",\n        },\n        {\n          text: formatMessage({id: \"links.to_not_translated_list\"}),\n          to: `/not_translated`,\n          icon: \"album\"\n        },\n      ];\n      return menuList.map((v, i) => (\n        <MenuItem key={i} onClick={handleClose}>\n          <Link to={v.to} >\n            <span uk-icon={v.icon} ></span>\n            <span>{v.text}</span>\n          </Link>\n        </MenuItem>\n      ));\n    };\n\n    const getLoginElem = (auth) => {\n      return (auth.isLoggedIn)\n           ? (\n             <MenuItem onClick={handleLogout.bind(this)}>\n               <Link to=\"\" >\n                 <span uk-icon=\"sign-out\" ></span>\n                 <span>{formatMessage({id: \"links.logout\"})}</span>\n               </Link>\n             </MenuItem>\n           )\n           : (\n             <MenuItem onClick={handleClose}>\n               <Link to=\"/users/login\" >\n                 <span uk-icon=\"sign-in\" ></span>\n                 <span>{formatMessage({id: \"links.login\"})}</span>\n               </Link>\n             </MenuItem>\n           );\n    };\n\n    const { auth } = this.props.state;\n    const profileElem = getProfileElem(auth);\n    const loginElem = getLoginElem(auth);\n\n    return (\n      <div className=\"uk-display-inline-block uk-height-1-1\" >\n        <Button\n          aria-owns={anchorEl ? 'simple-menu' : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleClick}\n          className=\"uk-height-1-1\"\n          style={{\"textTransform\": \"none\"}}\n        >\n          {displayName}\n        </Button>\n        <Menu\n          id=\"simple-menu\"\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={handleClose}\n        >\n          {profileElem}\n          {loginElem}\n          <MenuItem onClick={handleClose}>\n            <Link to=\"/users/signup\" >\n              <span uk-icon=\"check\" ></span>\n              <span>{formatMessage({id: \"links.sign_up\"})}</span>\n            </Link>\n          </MenuItem>\n        </Menu>\n      </div>\n    );\n  }\n\n  render() {\n    const { user } = this.props.state.auth;\n    const imagePath = user.image_path ? user.image_path : '/image/profile/blank-profile.png';\n    const displayMenuElem = <img src={imagePath} className=\"uk-border-circle\" width=\"50\" height=\"50\" alt=\"\" />;\n    const menu = this.getMenu(displayMenuElem);\n\n    return (\n      <header className=\"uk-margin-bottom uk-heading-divider uk-grid uk-grid-small\" >\n        <div className=\"uk-width-expand uk-margin-small-left\" >\n          <a href=\"/\" className=\"uk-display-inline-block\" >\n            <img src={`/logo.png`} alt=\"Logo\" style={{ \"maxHeight\": \"60px\" }} />\n          </a>\n          <span className=\"uk-text-meta uk-margin-small-left uk-display-inline-block\">\n            α ver.\n          </span>\n        </div>\n        <div className=\"uk-margin-small-right\">\n          { menu }\n        </div>\n      </header>\n    );\n  }\n};\n\nexport default injectIntl(Header);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const CREATE_USER_ACCOUNT = Symbol('CREATE_USER_ACCOUNT');\nexport const CLICK_SUBMIT = Symbol('CLICK_SUBMIT');\nexport const SAVE_USER_MNEMONIC = Symbol('SAVE_USER_MNEMONIC');\nexport const LOGIN_USER = Symbol('LOGIN_USER');\nexport const LOGIN_USER_JWT = Symbol('LOGIN_USER_JWT');\nexport const LOGOUT_USER = Symbol('LOGOUT_USER');\nexport const UPDATE_USER_DATA = Symbol('UPDATE_USER_DATA');\nexport const SAVE_USER_DATA = Symbol('SAVE_USER_DATA');\nexport const SAVE_USER_PASSWORD = Symbol('SAVE_USER_PASSWORD');\nexport const UPDATED_USER_DATA = Symbol('UPDATED_USER_DATA');\nexport const REMOVE_USER_DATA = Symbol('REMOVE_USER_DATA');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const LOGIN_SUCCESS = Symbol('LOGIN_SUCCESS');\nexport const LOGIN_FAILED = Symbol('LOGIN_FAILED');\nexport const GET_USER_PROFILE = Symbol('GET_USER_PROFILE');\nexport const GET_USER_BY_TOKEN = Symbol('GET_USER_BY_TOKEN');\nexport const UPDATED_PROFILE_DATA = Symbol('UPDATED_PROFILE_DATA');\nexport const PREPARED_AUTH = Symbol('PREPARED_AUTH');\nexport const UPDATED_PROFILE_QUESTION_DATA = Symbol('UPDATED_PROFILE_QUESTION_DATA');\nexport const UPDATED_PROFILE_ANSWER_DATA = Symbol('UPDATED_PROFILE_ANSWER_DATA');\nexport const UPDATED_PROFILE_COMMENT_DATA = Symbol('UPDATED_PROFILE_COMMENT_DATA');\nexport const UPDATED_PROFILE_TRANSLATED_DATA = Symbol('UPDATED_PROFILE_TRANSLATED_DATA');\nexport const SEND_RESET_PASSWORD_MAIL = Symbol('SEND_RESET_PASSWORD_MAIL');\nexport const RESET_PASSWORD = Symbol('RESET_PASSWORD');\nexport const ACTIVATE_USER = Symbol('ACTIVATE_USER');\n\n\nexport const createUserAccount = createAction(CREATE_USER_ACCOUNT);\nexport const clickSubmit = createAction(CLICK_SUBMIT);\nexport const saveUserMnemonic = createAction(SAVE_USER_MNEMONIC);\nexport const loginUser = createAction(LOGIN_USER);\nexport const loginUserJwt = createAction(LOGIN_USER_JWT);\nexport const logoutUser = createAction(LOGOUT_USER);\nexport const saveUserData = createAction(SAVE_USER_DATA);\nexport const saveUserPassword = createAction(SAVE_USER_PASSWORD);\nexport const updateUserData = createAction(UPDATE_USER_DATA);\nexport const updatedUserData = createAction(UPDATED_USER_DATA);\nexport const removeUserData = createAction(REMOVE_USER_DATA);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const loginSuccess = createAction(LOGIN_SUCCESS);\nexport const loginFailed = createAction(LOGIN_FAILED);\nexport const getUserProfile = createAction(GET_USER_PROFILE);\nexport const getUserByToken = createAction(GET_USER_BY_TOKEN);\nexport const updatedProfileData = createAction(UPDATED_PROFILE_DATA);\nexport const preparedAuth = createAction(PREPARED_AUTH);\nexport const updatedProfileQuestionData = createAction(UPDATED_PROFILE_QUESTION_DATA);\nexport const updatedProfileAnswerData = createAction(UPDATED_PROFILE_ANSWER_DATA);\nexport const updatedProfileCommentData = createAction(UPDATED_PROFILE_COMMENT_DATA);\nexport const updatedProfileTranslatedData = createAction(UPDATED_PROFILE_TRANSLATED_DATA);\nexport const sendResetPasswordMail = createAction(SEND_RESET_PASSWORD_MAIL);\nexport const resetPassword = createAction(RESET_PASSWORD);\nexport const activateUser = createAction(ACTIVATE_USER);\n","import { connect } from 'react-redux';\nimport Header from '../../components/layouts/Header';\nimport { logoutUser } from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        logout: (data) => dispatch(logoutUser(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React, { Component, PropTypes } from 'react';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\nimport NotificationsSystem from 'reapop';\nimport theme from 'reapop-theme-wybo';\nimport Header from '../containers/layouts/Header';\nimport { ClipLoader } from 'react-spinners';\nimport ReactGA from 'react-ga';\n\nclass App extends Component {\n  componentWillMount() {\n    this.props.fetchLoginState();\n  }\n\n  componentDidMount() {\n    // const { pathname } = this.props.location;\n    /* console.log(\"appjs-------------\",this.props);*/\n    // ReactGA.set({ page: pathname });\n    // ReactGA.pageview(pathname);\n  }\n\n  handleLogout() {\n    //this.props.dispatch(clickLogout());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { auth } = this.props.state;\n\n    return auth.isPrepared ? (\n      <BrowserRouter >\n        <div className=\"uk-margin-bottom\" >\n          <Header />\n          {children}\n          <NotificationsSystem theme={theme} />\n        </div>\n      </BrowserRouter>\n    ) : (\n      <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n        <ClipLoader />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from '../components/App';\nimport { loginUserJwt } from '../actions/User.js';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchLoginState: () => dispatch(loginUserJwt())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nclass ScrollToTop extends Component {\n  componentDidUpdate(prevProps) {\n    if (this.props.location !== prevProps.location) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n\nexport default withRouter(ScrollToTop);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\nimport CountryFormSelect from '../CountryFormSelect';\n\nclass SignUpForm extends React.Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.name) {\n      errors.name = formatMessage({id: \"errors.sign_ups.name\"});\n    }\n\n    if (!values.mail) {\n      errors.mail = formatMessage({id: \"errors.sign_ups.mail\"});\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.mail)) {\n      errors.mail = formatMessage({id: \"errors.sign_ups.appropriate_mail\"});\n    }\n\n    if (!values.country_id) {\n      errors.country_id = formatMessage({id: \"errors.sign_ups.country\"});\n    }\n\n    if (!values.password) {\n      errors.password = formatMessage({id: \"errors.sign_ups.password\"});\n    }\n\n    if (values.passwordConfirm !== values.password) {\n      errors.passwordConfirm = formatMessage({id: \"errors.sign_ups.confirm_password\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          mail: '',\n          country_id: '',\n          password: '',\n          passwordConfirm: ''\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'name'}\n                     name=\"name\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.name\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.name && errors.name && <div className=\"uk-text-warning\">{errors.name}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'mail'}\n                     name=\"mail\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.mail\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.mail && errors.mail && <div className=\"uk-text-warning\">{errors.mail}</div>}\n              </div>\n\n              <div className=\"uk-margin\" >\n                <CountryFormSelect \n                  id={'counrty_id'}\n                  name=\"country_id\" \n                  placeholder={formatMessage({id: \"placeholders.sign_ups.country\"})} />\n                {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{ formatMessage({id: \"errors.sign_ups.country\"}) }</div>}\n              </div>\n\n              <div className=\"uk-margin\">\n                <Field\n                  id={'password'}\n                     name=\"password\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.password && errors.password && <div className=\"uk-text-warning\">{errors.password}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'passwordConfirm'}\n                     name=\"passwordConfirm\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.confirm_password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.passwordConfirm && errors.passwordConfirm && <div className=\"uk-text-warning\">{errors.passwordConfirm}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.sign_up\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(SignUpForm));\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport SignUpForm from './SignUpForm';\nimport { injectIntl } from 'react-intl';\n\nclass SignUp extends React.Component {\n\n  onClickSubmit(formData) {\n    const { name, mail, country_id, password } = formData;\n    const { history } = this.props;\n    this.props.clickSubmit({ name, mail, country_id, password, history });\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{ formatMessage({id: \"titles.sign_up\"}) }</h2>\n\n        <SignUpForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(SignUp);\n","import { connect } from 'react-redux';\nimport SignUp from '../../components/users/SignUp';\nimport {\n    createUserAccount,\n    saveUserMnemonic\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        clickSubmit: (data) => dispatch(createUserAccount(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass LoginForm extends React.Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.mail) {\n      errors.mail = formatMessage({id: \"errors.login.mail\"});\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.mail)) {\n      errors.mail = formatMessage({id: \"errors.login.appropriate_mail\"});\n    }\n\n    if (!values.password) {\n      errors.password = formatMessage({id: \"errors.login.password\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          mail: '',\n          password: ''\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'mail'}\n                     name=\"mail\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.login.mail\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.mail && errors.mail && <div className=\"uk-text-warning\">{errors.mail}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'password'}\n                     name=\"password\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.login.password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.password && errors.password && <div className=\"uk-text-warning\">{errors.password}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.login\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(LoginForm));\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n/* import { ClipLoader } from 'react-spinners';*/\nimport LoginForm from './LoginForm';\nimport { injectIntl } from 'react-intl';\n\n\nclass Login extends React.Component {\n\n  onClickSubmit(formData) {\n    const { mail, password } = formData;\n    const { history } = this.props;\n    return this.props.handleSubmit({ mail, password, history });\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.login\"})}</h2>\n\n        <LoginForm onSubmit={this.onClickSubmit.bind(this)} />\n        <p><Link to=\"/users/password_reset\" >{formatMessage({id: \"links.password_reset\"})}</Link></p>\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(Login);\n","import { connect } from 'react-redux';\nimport Login from '../../components/users/Login';\nimport {\n    loginUser\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleSubmit: (data) => dispatch(loginUser(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass PasswordResetForm extends Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.mail) {\n      errors.mail = formatMessage({id: \"errors.login.mail\"});\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.mail)) {\n      errors.mail = formatMessage({id: \"errors.login.appropriate_mail\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          mail: '',\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'mail'}\n                     name=\"mail\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.login.mail\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.mail && errors.mail && <div className=\"uk-text-warning\">{errors.mail}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.send\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(PasswordResetForm));\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n/* import { ClipLoader } from 'react-spinners';*/\nimport PasswordResetForm from './PasswordResetForm';\nimport { injectIntl } from 'react-intl';\n\nclass PasswordReset extends Component {\n\n  onClickSubmit(formData) {\n    const { mail } = formData;\n    return this.props.handleSubmit({ mail });\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.password_reset\"})}</h2>\n        <p>{formatMessage({id: \"messages.enter_mail\"})}</p>\n        <PasswordResetForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(PasswordReset);\n","import { connect } from 'react-redux';\nimport PasswordReset from '../../components/users/PasswordReset';\nimport {\n  sendResetPasswordMail\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleSubmit: (data) => dispatch(sendResetPasswordMail(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordReset);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass PasswordForm extends Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.password) {\n      errors.password = formatMessage({id: \"errors.sign_ups.password\"});\n    }\n\n    if (values.passwordConfirm !== values.password) {\n      errors.passwordConfirm = formatMessage({id: \"errors.sign_ups.confirm_password\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          password: '',\n          passwordConfirm: ''\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'password'}\n                     name=\"password\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.password && errors.password && <div className=\"uk-text-warning\">{errors.password}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'passwordConfirm'}\n                     name=\"passwordConfirm\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.confirm_password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.passwordConfirm && errors.passwordConfirm && <div className=\"uk-text-warning\">{errors.passwordConfirm}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.send\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(PasswordForm));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\n/* import { ClipLoader } from 'react-spinners';*/\nimport PasswordForm from './PasswordForm';\nimport { injectIntl } from 'react-intl';\nimport { isEmptyObject } from '../../utils';\n\nclass NewPassword extends Component {\n\n  componentDidMount() {\n    const { params } = this.props.match;\n    const { token } = params;\n    this.token = token;\n    return this.props.fetchUser(token);\n  }\n\n  onClickSubmit(formData) {\n    const { password } = formData;\n    const { id } = this.props.state.auth.user;\n    const { history } = this.props;\n    const token = this.token;\n    return this.props.handleSubmit({ id, password, token, history });\n  }\n\n  render() {\n    const { user, isFetching } = this.props.state.auth;\n\n    if (isFetching) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    if (isEmptyObject(user)) {\n      return (\n        <main className=\"uk-container uk-container-small\">\n          <p>不正なアクセスです</p>\n        </main>\n      );\n    }\n\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.password_reset\"})}</h2>\n        <p>{formatMessage({id: \"messages.enter_new_password\"})}</p>\n        <PasswordForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(NewPassword);\n","import { connect } from 'react-redux';\nimport NewPassword from '../../components/users/NewPassword';\nimport {\n  saveUserPassword,\n  getUserByToken,\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchUser: (token) => dispatch(getUserByToken(token)),\n    handleSubmit: (data) => dispatch(saveUserPassword(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewPassword);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\nimport { isEmptyObject } from '../../utils';\n\nclass Activate extends Component {\n\n  componentDidMount() {\n    const { params } = this.props.match;\n    const { history } = this.props;\n    const { token } = params;\n    this.token = token;\n    return this.props.activateUser({ token, history });\n  }\n\n  render() {\n    const { user, isFetching } = this.props.state.auth;\n\n    if (isFetching) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    if (isEmptyObject(user)) {\n      return (\n        <main className=\"uk-container uk-container-small\">\n          <p>不正なアクセスです</p>\n        </main>\n      );\n    }\n\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.activate\"})}</h2>\n        <p>{formatMessage({id: \"messages.activate_completed\"})}</p>\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(Activate);\n","import { connect } from 'react-redux';\nimport Activate from '../../components/users/Activate';\nimport {\n  activateUser,\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    activateUser: (token) => dispatch(activateUser(token)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Activate);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Stampcard extends Component {\n  render() {\n    const { voteArray, repeatNum } = this.props\n\n    const tableContents =[];\n    for (let i =0;i<repeatNum;i++){\n        let voteList = voteArray.slice(i*5,i*5+5)\n        let contents = voteList.map((e) => {\n            if (!e) {\n                return (\n                    <td key={e.id}className=\"uk-text-center\"></td>\n                );  \n            }\n            return (\n                <td key={\"vote_translate\"+e.id}className=\"uk-text-center\">\n                    <Link to={e.user.profile_link}>\n                    <img className=\"uk-comment-avatar uk-border-circle uk-margin-rigth-small\" src={e.user.image_path} width=\"35\" height=\"35\" alt=\"\"/>\n                    </Link>\n                </td>\n            );\n        });\n        let rappedContents = <tr>{ contents }</tr>\n        tableContents.push(rappedContents);\n    }\n\n    return (\n        <table className=\"uk-table stamp-card uk-card uk-card-default uk-card-small uk-card-body uk-margin-top\">\n            <tbody>\n                {tableContents}\n            </tbody>\n        </table>\n    );\n\n   };\n};\n      \nexport default Stampcard;\n\n// <div>\n// <div class=\"uk-card uk-card-default uk-card-small uk-card-body\">\n//     <h3 class=\"uk-card-title\">Small</h3>\n//     <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>\n// </div>\n// </div>","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { connect } from 'react-redux';\nimport { getUserProfile } from '../../actions/User';\nimport QuestionListView from '../../components/QuestionListView';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { isEmptyObject } from '../../utils';\nimport { injectIntl } from 'react-intl';\nimport Stampcard from '../../components/Stampcard';\n\nclass Profile extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.state = {currentTab: 'questions'};\n    this.userId = parseInt(params.id, 10);\n    this.props.fetchUserProfile(this.userId);\n  }\n\n  onClickTab(newTabKey, e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.setState({\n      currentTab: newTabKey\n    });\n  }\n\n  getVoteList(voteLists){\n\n    const repeatNum = Math.ceil(voteLists.length/5);\n    const stampCardNum =  Math.ceil(voteLists.length/10);\n    const addArrayNum = stampCardNum*10 - voteLists.length;\n\n    for(let i=0 ; i < addArrayNum ; i++){\n      voteLists.push(\"\");\n    }\n    const tableContents =[];\n    for(let i =0; i < stampCardNum ;i++) {\n      const stampcard = <Stampcard \n        voteArray = { voteLists.slice((i*5)*2, (i*5)*2+10)}\n        repeatNum = { repeatNum }\n      />\n      tableContents.unshift(stampcard);\n    }\n\n    return tableContents;\n  };\n\n  getTabList() {\n    const { formatMessage } = this.props.intl;\n    const tabData = [\n      {\n        name: formatMessage({id: \"links.question\"}),\n        key: 'questions'\n      },\n      {\n        name: formatMessage({id: \"links.answer\"}),\n        key: 'answers'\n      },\n      {\n        name: formatMessage({id: \"links.comment\"}),\n        key: 'comments'\n      },\n      {\n        name: formatMessage({id: \"links.translate\"}),\n        key: 'translates'\n      }\n    ];\n\n    return (\n      <ul className=\"uk-tab\" >\n        {tabData.map(v => {\n           const active = this.state['currentTab'] === v.key\n                        ? 'uk-active'\n                        : '';\n           return (\n             <li className={active} onClick={this.onClickTab.bind(this, v.key)} key={v.key} >\n               <a href=\"\">{v.name}</a>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  getAnswerList(answers) {\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\">\n      {answers.map(answer => {\n        const { user } = answer;\n        const userName = user ? user.name : '不明なユーザー';\n        return (\n          <li key={answer.id} >\n            <p className=\"uk-text-lead uk-text-truncate\" ><Link to={`/questions/${answer.question_id}`}>{`${answer.content}`}</Link></p>\n            <p className=\"uk-text-meta\">{dayjs(answer.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n              <div className=\"uk-width-auto\">\n                <img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" />\n              </div>\n              <div className=\"uk-width-expand\">\n                <h4 className=\"uk-comment-meta uk-margin-remove\">{ userName }</h4>\n              </div>\n            </div>\n          </li>\n        );\n      })}\n      </ul>\n    );\n  }\n\n  getCommentList(comments) {\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\">\n        {comments.map(comment => {\n           const { user, answer } = comment;\n           const userName = user ? user.name : '不明なユーザー';\n           return (\n             <li key={comment.id} >\n               <p className=\"uk-text-lead uk-text-truncate\" ><Link to={`/questions/${answer.question_id}`}>{`${comment.content}`}</Link></p>\n               <p className=\"uk-text-meta\">{dayjs(comment.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n               <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n                 <div className=\"uk-width-auto\">\n                   <img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" />\n                 </div>\n                 <div className=\"uk-width-expand\">\n                   <h4 className=\"uk-comment-meta uk-margin-remove\">{ userName }</h4>\n                 </div>\n               </div>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  getTranslatedList(translates) {\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\">\n        {translates.map(translate => {\n           const link = translate.translation_link;\n           return (\n             <li key={`translate_${translate.key}`} >\n               <p className=\"uk-text-lead uk-text-truncate\" ><Link to={link}>{`${translate.content}`}</Link></p>\n               <p className=\"uk-text-meta\">{dayjs(translate.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  filterTranslatedContent(translate) {\n    const translatedContentArray = [];\n    for (const [key, value] of Object.entries(translate)){\n      value.forEach((e)=>{\n        e[\"key\"]=key+e.id;\n        translatedContentArray.push(e);\n      });\n  　};\n    return translatedContentArray;\n  }\n\n  getCurrentTabContents(tabState, currentTab) {\n    const { questions, answers, comments, translates } = tabState;\n    const { id } = this.props.state.auth.user\n    if (currentTab === 'questions') {\n      return (<QuestionListView questionArray={questions} translateLanguageId={id} />);\n    } else if (currentTab === 'answers') {\n      return this.getAnswerList(answers);\n    } else if (currentTab === 'comments') {\n      return this.getCommentList(comments);\n    } else if (currentTab === 'translates') {\n      const translateArray = this.filterTranslatedContent(translates);\n      return this.getTranslatedList(translateArray);\n    }\n  }\n\n  render() {\n    // とりあえずログインユーザーのプロフィールページを。\n    // propsで渡されたuserIdのプロフィールページを表示するようにする。\n    const { profile } = this.props.state;\n    const { user } = profile;\n    const { formatMessage } = this.props.intl;\n    const { vote_translations } = user;\n\n    if (isEmptyObject(user)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const tabList = this.getTabList();\n    const userPostList = this.getCurrentTabContents(profile, this.state.currentTab);\n    const voteTables = this.getVoteList(vote_translations);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        {/* <div className=\"uk-grid uk-grid-small uk-flex-middle uk-margin-bottom\"> */}\n        <div class=\"uk-grid uk-grid-small\">\n          <div className=\"uk-width-expand\">\n            <div className=\"uk-width-auto uk-flex-first\">\n              <img src={user.image_path} className=\"uk-border-circle\" alt=\"\" width=\"120\" height=\"\" />\n            </div>\n            <div className=\"uk-width-auto\" >\n              <p className=\"uk-text-lead\">{user.name}</p>\n              <p>{formatMessage({id: \"messages.birthplace\"})}: {user.country.name}</p>\n            </div>\n          </div>\n          <div className=\"uk-width-2-5@s\">\n            <p>いいねした人一覧</p>\n            {voteTables}\n          </div> \n        </div>\n        <div>\n          <p style={{\"whiteSpace\": \"pre-wrap\"}}>{user.profile}</p>\n        </div>\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.post_list\"})}</span></h3>\n        {tabList}\n        {userPostList}\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchUserProfile: (userId) => dispatch(getUserProfile(userId)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(Profile));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from '../LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\nimport CountryFormSelect from '../CountryFormSelect';\n\nclass ProfileForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      image_url: ''\n    };\n  }\n\n  handleImageChange(setFieldValue, e) {\n    const file = e.currentTarget.files[0];\n    setFieldValue(\"image\", file);\n    const createObjectURL = (window.URL || window.webkitURL).createObjectURL || window.createObjectURL;\n    const image_url = createObjectURL(file);\n    this.setState({ image_url });\n  }\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.country_id) {\n      errors.country_id = formatMessage({id: \"errors.profile_edit.country\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { user } = this.props.state.auth;\n    const { formatMessage } = this.props.intl;\n    const { id, name, profile, country_id } = user;\n    const imagePreview = this.state.image_url !== ''\n                       ? (<p><img src={this.state.image_url} alt=\"\" width=\"200\" /></p>)\n                       : '';\n\n    return (\n      <Formik\n      initialValues={{ id, name, profile, country_id, image: ''}}\n        enableReinitialize={true}\n        validate={this.validate}\n        onSubmit={(values, { setSubmitting, setErrors }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} className=\"uk-form-stacked\" >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <label className=\"uk-form-label\">{formatMessage({id: \"titles.profile_edit.user_name\"})}</label>\n                <Field\n                  id={'name'}\n                     name=\"name\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholder.profile_edit.nickname\"})}\n                     className={'uk-form-control uk-input'}\n                />\n                {touched.name && errors.name && <div>{errors.name}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <label className=\"uk-form-label\">{formatMessage({id: \"titles.profile_edit.birthplace\"})}</label>\n\n                <CountryFormSelect \n                  id={'counrty_id'}\n                  name=\"country_id\" \n                  placeholder={formatMessage({id: \"placeholders.sign_ups.country\"})} />\n                {/* <LanguageFormSelect name=\"country_id\" placeholder=\"出身地\" /> */}\n\n                {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{errors.country_id}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <label className=\"uk-form-label\">{formatMessage({id: \"titles.profile_edit.profile\"})}</label>\n                <Field\n                  id={'profile'}\n                     name=\"profile\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholder.profile_edit.profile\"})}\n                     className={'uk-form-control uk-textarea'}\n                     rows=\"5\"\n                />\n                {touched.profile && errors.profile && <div className=\"uk-text-warning\">{errors.profile}</div>}\n              </div>\n              <div className=\"uk-margin js-upload\" uk-form-custom=\"true\" >\n                <label className=\"uk-form-label\">{formatMessage({id: \"titles.profile_edit.user_image\"})}</label>\n                <input id=\"file\" name=\"image\" type=\"file\" onChange={this.handleImageChange.bind(this, setFieldValue)} />\n\n                {touched.image && errors.image && <div>{errors.image}</div>}\n                <button className=\"uk-button uk-button-default\" type=\"button\" tabIndex=\"-1\">{formatMessage({id: \"buttons.profile_edit.select\"})}</button>\n                {imagePreview}\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-primary\" disabled={isSubmitting}>\n                {formatMessage({id: \"buttons.profile_edit.save\"})}\n                </button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    )\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(ProfileForm));\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ClipLoader } from 'react-spinners';\nimport ProfileForm from './ProfileForm';\nimport { injectIntl } from 'react-intl';\n\nclass Profile extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const { id, name, country_id, profile } = this.props.state.auth.user;\n    console.log('user', this.props.state.auth.user);\n\n    this.setState({\n      user_id: id,\n      name,\n      profile,\n      country_id\n    });\n  }\n\n  onClickSubmit(formData) {\n    const { id, name, profile, country_id, image } = formData;\n\n    const postData = {\n      user_id: id,\n      name,\n      profile,\n      country_id,\n      image\n    };\n    this.props.clickedSaveButton(postData);\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.profile.edit\"})}</h2>\n        \n        <ProfileForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(Profile);","import { connect } from 'react-redux';\nimport Profile from '../../components/users/Profile';\nimport {\n    loginUser,\n    saveUserData\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        clickedSaveButton: (postData) => dispatch(saveUserData(postData)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\n","import React, { Component } from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport default class UserOnly extends Component {\n  static contextTypes = {\n    router: PropTypes.object.isRequired\n  }\n\n  componentWillMount() {\n    this.guestWillTransfer(this.props, this.context.router);\n  }\n\n  componentWillUpdate(nextProps) {\n    this.guestWillTransfer(nextProps, this.context.router);\n  }\n\n  guestWillTransfer(props, router) {\n    const { auth } = props.state;\n    const { history } = router;\n    if (!auth.isLoggedIn) {\n      return history.push('/users/login');\n    }\n    return true;\n  }\n\n  render() {\n    return (\n      <Route children={this.props.children} />\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport UserOnly from '../../components/auth/UserOnly';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserOnly);\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport default class GuestOnly extends Component {\n  static contextTypes = {\n    router: PropTypes.object.isRequired\n  }\n\n  componentWillMount() {\n    console.log('hoge');\n    this.userWillTransfer(this.props, this.context.router);\n  }\n\n  componentWillUpdate(nextProps) {\n    this.userWillTransfer(nextProps, this.context.router);\n  }\n\n  userWillTransfer(props, router) {\n    const { auth } = props.state;\n    const { history } = router;\n    if (auth.isLoggedIn) {\n      /* return <Redirect to={{ pathname: '/login', state: { from: this.props.location } }} />;*/\n      return history.replace('/');\n    }\n  }\n\n  render() {\n    return (\n      <Route children={this.props.children} />\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport GuestOnly from '../../components/auth/GuestOnly';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GuestOnly);\n","import ja_JP from './locales/ja_JP';\nimport en_US from './locales/en_US';\n\nexport const locales = {\n  ja: {\n    locale: 'ja',\n    messages: ja_JP,\n    translateLanguageId: 1,\n  },\n  en: {\n    locale: 'en',\n    messages: en_US,\n    translateLanguageId: 2,\n  }\n};\n\nexport const categories = {\n  all: {\n      category: 'all',\n      categoryId: 0,\n  },\n  comic_anime: {\n      category: 'comic_anime',\n      categoryId: 1,\n  },\n  culture: {\n      category: 'culture',\n      categoryId: 2,\n  },\n  tourism: {\n      category: 'tourism',\n      categoryId: 3,\n  },\n  music: {\n      category: 'music',\n      categoryId: 4,\n  },\n};\n\nexport const sorts = {\n  answerMany: {\n      sort: 'answerMany',\n      sortId: 1,\n  },\n  answerFew: {\n      sort: 'answerFew',\n      sortId: 2,\n  },\n  Asc: {\n      sort: 'Asc',\n      sortId: 3,\n  },\n  Des: {\n      sort: 'Des',\n      sortId: 4,\n  },\n};\n","const ja_JP = {\n  \"titles.sign_up\": '新規登録',\n  \"titles.login\": 'ログイン',\n  \"titles.activate\": '認証',\n  \"titles.password_reset\": 'パスワード再設定',\n  \"titles.question_list\": '質問一覧',\n  \"titles.answer_list\": '回答一覧',\n  \"titles.post_list\": '投稿一覧',\n  \"titles.translation_list\": '翻訳一覧',\n  \"titles.not_translated_list\": '未翻訳一覧',\n  \"titles.profile_edit.user_name\": 'ユーザー名',\n  \"titles.profile_edit.birthplace\": '出身地',\n  \"titles.profile_edit.profile\": 'プロフィール',\n  \"titles.profile_edit.user_image\": 'プロフィール画像',\n  \"titles.profile.edit\": 'プロフィール編集',\n  \"titles.question.edit\": '質問の編集',\n  \"titles.question.delete\": '質問の削除',\n  \"titles.question.return\": 'トップ', \n  \"messages.empty_answers\": 'まだ回答がありません。最初の投稿者になりましょう！',\n  \"messages.birthplace\": '出身地',\n  \"messages.you_are_not_target\": 'この質問は 「%s」 の方が回答対象者です。',\n  \"messages.enter_mail\": 'メールアドレスを入力してください',\n  \"messages.enter_new_password\": '新しいパスワードを入力してください',\n  \"messages.activate_completed\": '認証処理が完了しました。',\n  \"links.to_not_translated_list\": '未翻訳の一覧を見る',\n  \"links.edit\": '編集',\n  \"links.question\": '質問',\n  \"links.answer\": '回答',\n  \"links.comment\": 'コメント',\n  \"links.translate\": '翻訳',\n  \"links.profile\": 'プロフィール',\n  \"links.profile_edit\": 'プロフィール編集',\n  \"links.sign_up\": '新規登録',\n  \"links.login\": 'ログイン',\n  \"links.logout\": 'ログアウト',\n  \"links.password_reset\": 'パスワードを忘れた',\n  \"links.to_question_view\": '質問ページへ',\n  \"languages.japanese\": '日本語',\n  \"languages.english\": '英語',\n  \"countries.japan\": '日本',\n  \"countries.usa\": 'アメリカ合衆国',\n  \"countries.philippines\": 'フィリピン',\n  \"countries.england\": 'イギリス',\n  \"countries.newzealand\": 'ニュージーランド',\n  \"categories.all\": 'すべて',\n  \"categories.comic_anime\": '漫画・アニメ',\n  \"categories.culture\": '文化',\n  \"categories.tourism\": '観光',\n  \"categories.music\": '音楽',\n  \"errors.questions.content\": '質問文を入力してください',\n  \"errors.questions.country_id\": '回答対象国を指定してください',\n  \"errors.questions.translate_language_id\": '投稿言語を指定してください',\n  \"errors.questions.category_id\": 'カテゴリーを指定してください',\n  \"errors.answers.content\": '回答文を入力してください',\n  \"errors.answers.translate_language_id\": '投稿言語を指定してください',\n  \"errors.comments.content\": 'コメントを入力してください',\n  \"errors.comments.translate_language_id\": '投稿言語を指定してください',\n  \"errors.translations.content\": '翻訳を入力してください',\n  \"errors.translations.translate_language_id\": '投稿言語を指定してください',\n  \"errors.sign_ups.name\": 'ユーザー名を入力してください',\n  \"errors.sign_ups.mail\": 'メールアドレスを入力してください',\n  \"errors.sign_ups.country\": '出身地・所在地を選択してください',\n  \"errors.sign_ups.appropriate_mail\": '適切なメールアドレスを指定してください',\n  \"errors.sign_ups.password\": 'パスワードを入力してください',\n  \"errors.sign_ups.confirm_password\": 'パスワードが一致していません',\n  \"errors.login.mail\": 'メールアドレスを入力してください',\n  \"errors.login.appropriate_mail\": '適切なメールアドレスを指定してください',\n  \"errors.login.password\": 'パスワードを入力してください',\n  \"errors.profile_edit.country\": '出身地を選択してください',\n  \"placeholders.sign_ups.name\": '名前',\n  \"placeholders.sign_ups.mail\": 'メールアドレス',\n  \"placeholders.sign_ups.country\": '出身地・所在地',\n  \"placeholders.sign_ups.password\": 'パスワード',\n  \"placeholders.sign_ups.confirm_password\": 'パスワード確認',\n  \"placeholders.login.mail\": 'メールアドレス',\n  \"placeholders.login.password\": 'パスワード',\n  \"placeholders.questions.content\": '質問を入力してください',\n  \"placeholders.questions.country_id\": '回答対象国',\n  \"placeholders.questions.translate_language_id\": '投稿言語',\n  \"placeholders.questions.category_id\": 'カテゴリー',\n  \"placeholders.questions.submit_btn\": '投稿',\n  \"placeholders.answers.content\": '回答を入力してください',\n  \"placeholders.answers.translate_language_id\": '投稿言語',\n  \"placeholders.answers.submit_btn\": '投稿',\n  \"placeholders.comments.content\": 'コメントを入力してください',\n  \"placeholders.comments.translate_language_id\": '投稿言語',\n  \"placeholders.comments.submit_btn\": '投稿',\n  \"placeholders.translations.content\": '翻訳を入力してください',\n  \"placeholders.translations.translate_language_id\": '投稿言語',\n  \"placeholder.profile_edit.profile\": 'プロフィールを入力してください',\n  \"placeholder.profile_edit.country\": '出身地・所在地',\n  \"buttons.title.reply\": '返信',\n  \"buttons.title.post\": '投稿',\n  \"buttons.title.sign_up\": '新規登録',\n  \"buttons.title.login\": 'ログイン',\n  \"buttons.title.send\": '送信',\n  \"buttons.profile_edit.select\": '選択',\n  \"buttons.profile_edit.save\": '保存',\n  \"translated.name\": '翻訳者',\n  \"translated.state\": '未翻訳',\n  \"categories.comic_anime\": '漫画・アニメ',\n  \"categories.culture\": '文化',\n  \"categories.tourism\": '観光',\n  \"categories.music\": '音楽',\n  \"sort.answerMany\":'回答の多い順',\n  \"sort.answerFew\":'回答の少ない順',\n  \"sort.Asc\":'投稿の新しい順',\n  \"sort.Des\":'投稿の古い順',\n};\nexport default ja_JP;\n","const en_US = {\n  \"titles.sign_up\": 'Sign Up',\n  \"titles.login\": 'Login',\n  \"titles.activate\": 'Activation',\n  \"titles.password_reset\": 'Password Reset',\n  \"titles.question_list\": 'Questions',\n  \"titles.answer_list\": 'Answers',\n  \"titles.post_list\": 'Posts',\n  \"titles.translation_list\": 'Translations',\n  \"titles.not_translated_list\": 'Not Translated List',\n  \"titles.profile_edit.user_name\": 'User Name',\n  \"titles.profile_edit.birthplace\": 'Birthplace・Location',\n  \"titles.profile_edit.profile\": 'Profile',\n  \"titles.profile_edit.user_image\": 'Profile Image',\n  \"titles.profile.edit\": 'Profile Edit',\n  \"titles.question.edit\": 'Question Edit',\n  \"titles.question.delete\": 'Question Delete',\n  \"titles.question.return\": 'Top', \n  \"messages.empty_answers\": 'There is no answer yet. Be the first contributor!',\n  \"messages.birthplace\": 'BirthPlace',\n  \"messages.you_are_not_target\": 'This question is subject to answers in \"%s\".',\n  \"messages.enter_mail\": 'Enter your email address.',\n  \"messages.enter_new_password\": 'Enter new password.',\n  \"messages.activate_completed\": 'Activation is completed.',\n  \"links.to_not_translated_list\": 'See not translated lists',\n  \"links.edit\": 'Edit',\n  \"links.question\": 'Question',\n  \"links.answer\": 'Answer',\n  \"links.comment\": 'Comment',\n  \"links.translate\": 'translate',\n  \"links.profile\": 'Profile',\n  \"links.profile_edit\": 'Profile Edit',\n  \"links.sign_up\": 'Sign Up',\n  \"links.login\": 'Login',\n  \"links.password_reset\": 'Forgot password',\n  \"links.logout\": 'Logout',\n  \"links.to_question_view\": 'to question page',\n  \"languages.japanese\": 'Japanese',\n  \"languages.english\": 'English',\n  \"countries.japan\": 'Japan',\n  \"countries.usa\": 'USA',\n  \"countries.philippines\": 'Philippines',\n  \"countries.england\": 'England', \n  \"countries.newzealand\": 'Newzealand', \n  \"categories.all\": 'All',\n  \"categories.comic_anime\": 'Comic・Anime',\n  \"categories.culture\": 'Culture',\n  \"categories.tourism\": 'Tourism',\n  \"categories.music\": 'Music',\n  \"errors.questions.content\": 'Please write a question text.',\n  \"errors.questions.country_id\": 'Please select target country.',\n  \"errors.questions.translate_language_id\": 'Please select the language.',\n  \"errors.questions.category_id\": 'Please select the cateogry.',\n  \"errors.answers.content\": 'Please write an answer text.',\n  \"errors.answers.translate_language_id\": 'Please select the language.',\n  \"errors.comments.content\": 'Please write an comment text.',\n  \"errors.comments.translate_language_id\": 'Please select the language.',\n  \"errors.translations.content\": 'Please write a translated text.',\n  \"errors.translations.translate_language_id\": 'Please select the language.',\n  \"errors.sign_ups.name\": 'Please enter user name.',\n  \"errors.sign_ups.mail\": 'Please enter your e-mail address.',\n  \"errors.sign_ups.country\": 'Please enter your Birthplace・Location',\n  \"errors.sign_ups.appropriate_mail\": 'Please specify an appropriate email address.',\n  \"errors.sign_ups.password\": 'Please enter password.',\n  \"errors.sign_ups.confirm_password\": 'Password does not match.',\n  \"errors.login.mail\": 'Please enter your e-mail address.',\n  \"errors.login.appropriate_mail\": 'Please specify an appropriate email address.',\n  \"errors.login.password\": 'Please enter password.',\n  \"errors.profile_edit.country\": 'Please enter your Birthplace・Location',\n  \"placeholders.sign_ups.name\": 'Name',\n  \"placeholders.sign_ups.mail\": 'Mail',\n  \"placeholders.sign_ups.country\": 'Birthplace・Location',\n  \"placeholders.sign_ups.password\": 'Password',\n  \"placeholders.sign_ups.confirm_password\": 'Password Confirm',\n  \"placeholders.login.mail\": 'Mail',\n  \"placeholders.login.password\": 'Password',\n  \"placeholders.questions.content\": 'Write your question!!',\n  \"placeholders.questions.country_id\": 'Target User Country',\n  \"placeholders.questions.translate_language_id\": 'Language',\n  \"placeholders.questions.category_id\": 'Category',\n  \"placeholders.questions.submit_btn\": 'POST',\n  \"placeholders.answers.content\": 'Write your answer!!',\n  \"placeholders.answers.translate_language_id\": 'Language',\n  \"placeholders.answers.submit_btn\": 'POST',\n  \"placeholders.comments.content\": 'Write your comment!!',\n  \"placeholders.comments.translate_language_id\": 'Language',\n  \"placeholders.comments.submit_btn\": 'POST',\n  \"placeholders.translations.content\": 'Please write a translated text.',\n  \"placeholders.translations.translate_language_id\": 'Language',\n  \"placeholder.profile_edit.profile\": 'Please write your profile',\n  \"placeholder.profile_edit.country\": 'Birthplace・Location',\n  \"buttons.title.reply\": 'Reply',\n  \"buttons.title.post\": 'Post',\n  \"buttons.title.sign_up\": 'Sign Up',\n  \"buttons.title.login\": 'Login',\n  \"buttons.title.send\": 'Send',\n  \"buttons.profile_edit.select\": 'Select',\n  \"buttons.profile_edit.save\": 'Save',\n  \"translated.name\": 'Translator',\n  \"translated.state\": 'Untranslated',\n  \"categories.comic_anime\": 'Comic・Anime',\n  \"categories.culture\": 'culture',\n  \"categories.tourism\": 'tourism',\n  \"categories.music\": 'music',\n  \"sort.answerMany\":'Order of many answers',\n  \"sort.answerFew\":'Order of few answers',\n  \"sort.Asc\":'New order of posts',\n  \"sort.Des\":'Oldest order of posts',\n};\nexport default en_US;\n","import { locales, categories, sorts } from './intl';\n\nconst savedLocale = localStorage.getItem('locale');\nconst currentLocale = savedLocale ? savedLocale : 'ja';\n\nexport const initialState = {\n  intl: locales[currentLocale],\n  ctgr: {\n    category: 'all',\n    categoryId: 0\n  },\n  sort: {\n    sort: 'Asc',\n    sortId: 3\n  },\n  signUp: {\n    mail: '',\n    password: '',\n    mnemonic: '',\n    hash: '',\n  },\n  profile: {\n    isFetching: false,\n    user: {},\n    questions: [],\n    answers: [],\n    comments: [],\n  },\n  auth: {\n    isPrepared: false,\n    isFetching: false,\n    isLoggedIn: false,\n    user: {},\n    jwt: ''\n  },\n  answers: {\n    isFetching: false,\n    answerArray: [],\n    currentAnswer: {}\n  },\n  answerTranslations: {\n    isFetching: false,\n    currentTranslationList: [],\n    currentTranslation: {},\n  },\n  questions: {\n    isFetching: false,\n    translateLanguageId: 1,\n    questionArray: [],\n    currentQuestion: {},\n  },\n  questionTranslations: {\n    isFetching: false,\n    currentTranslationList: [],\n    currentTranslation: {},\n  },\n  comments: {\n    isFetching: false,\n    currentCommentList: [],\n    currentComment: {}\n  },\n  commentTranslations: {\n    isFetching: false,\n    currentTranslationList: [],\n    currentTranslation: {},\n  },\n  //未翻訳コメントリスト一覧表示\n  not_translate: {\n    //api接続中である場合（非同期処理をしている途中）はtrueになる\n    isFetching: false,\n    questions: [],\n    answers: [],\n    comments: [],\n  },\n  //評価機能\n  votes: {\n    //api接続中である場合（非同期処理をしている途中）はtrueになる\n    isFetching: false,\n    status: [],\n  },\n  //評価機能\n  voteTranslations: {\n    //api接続中である場合（非同期処理をしている途中）はtrueになる\n    isFetching: false,\n    status: [],\n  },\n};\n","import { combineReducers } from 'redux';\nimport { reducer as notificationsReducer } from 'reapop';\nimport * as questions from './reducers/Question';\nimport * as answers from './reducers/Answer';\nimport * as users from './reducers/User';\nimport * as comments from './reducers/Comment';\nimport * as questionTranslations from './reducers/QuestionTranslation';\nimport * as answerTranslations from './reducers/AnswerTranslation';\nimport * as commentTranslations from './reducers/CommentTranslation';\nimport * as notTranslated from './reducers/NotTranslated';\nimport * as votes from './reducers/Votes';\nimport * as voteTranslations from './reducers/VoteTranslation';\nimport { intl } from './reducers/Intl';\nimport { ctgr } from './reducers/Category';\nimport { sortRule } from './reducers/Sort';\nimport { addLocaleData } from 'react-intl';\n\nconst reducer = combineReducers({\n  intl: intl,\n  ctgr: ctgr,\n  sort: sortRule,\n  answers: answers.list,\n  questions: questions.list,\n  questionTranslations: questionTranslations.list,\n  answerTranslations: answerTranslations.list,\n  auth: users.auth,\n  signUp: users.signUp,\n  profile: users.profile,\n  comments: comments.list,\n  commentTranslations: commentTranslations.list,\n  not_translate: notTranslated.list,\n  votes: votes.list,\n  voteTranslations: voteTranslations.list,\n  notifications: notificationsReducer()\n});\n\nexport default reducer;\n","import {\n  UPDATE_CURRENT_LANGUAGE,\n} from '../actions/Intl';\nimport { initialState } from '../constants';\nimport { locales } from '../intl';\n\nexport const intl = (state = initialState.intl, action) => {\n  switch (action.type) {\n  case UPDATE_CURRENT_LANGUAGE:\n    const { locale, messages, translateLanguageId } = locales[action.payload];\n    localStorage.setItem('locale', locale);\n    return {\n      ...state,\n      locale,\n      messages,\n      translateLanguageId\n    };\n  default:\n    return state;\n  }\n};\n\n","import { UPDATE_CURRENT_CATEGORY } from '../actions/Category';\nimport { initialState } from '../constants';\nimport { categories } from '../intl';\n\nexport const ctgr = (state = initialState.ctgr, action) => {\n\n  switch (action.type) {\n  case UPDATE_CURRENT_CATEGORY:\n    const { category, categoryId } = categories[action.payload];\n    return {\n      ...state,\n      category,\n      categoryId\n    };\n  default:\n    return state;\n  }\n};\n","import { UPDATE_CURRENT_SORT } from '../actions/Sort';\nimport { initialState } from '../constants';\nimport { sorts } from '../intl';\n\nexport const sortRule = (state = initialState.ctgr, action) => {\n\n  switch (action.type) {\n  case UPDATE_CURRENT_SORT:\n    const { sort, sortId } = sorts[action.payload];\n    return {\n      ...state,\n      sort,\n      sortId\n    };\n  default:\n    return state;\n  }\n};\n","import {\n    CHANGE_ANSWER_FORM_CONTENT,\n    REQUEST_DATA,\n    RECEIVE_DATA_SUCCESS,\n    RECEIVE_SINGLE_DATA_SUCCESS,\n    RECEIVE_DATA_FAILED,\n    INITIALIZE_FORM,\n    POST_ANSWER_DATA\n} from '../actions/Answer';\nimport { initialState } from '../constants';\n\nexport const form = (state = initialState.answerForm, action) => {\n    switch (action.type) {\n    case CHANGE_ANSWER_FORM_CONTENT:\n        return {\n            ...state,\n            content: action.payload,\n        };\n    case POST_ANSWER_DATA:\n        return {\n            ...state\n        };\n    case REQUEST_DATA:\n        return {\n            ...state,\n            isFetching: true,\n        };\n    case RECEIVE_DATA_SUCCESS:\n        return {\n            ...state,\n            isFetching: false,\n        };\n    case RECEIVE_DATA_FAILED:\n        return {\n            ...state,\n            isFetching: false,\n        };\n    case INITIALIZE_FORM:\n        return {\n            ...state,\n            content: ''\n        };\n    default:\n        return state;\n    }\n};\n\nexport const list = (state = initialState.answers, action) => {\n    switch (action.type) {\n    case REQUEST_DATA:\n        return {\n            ...state,\n            isFetching: true,\n        };\n    case RECEIVE_DATA_SUCCESS:\n        return {\n            ...state,\n            isFetching: false,\n            answerArray: action.payload.data,         \n        };\n    case RECEIVE_SINGLE_DATA_SUCCESS:\n        return {\n            ...state,\n            isFetching: false,\n            currentAnswer: action.payload.data\n        };\n    case RECEIVE_DATA_FAILED:\n        return {\n            ...state,\n            isFetching: false,\n        };\n    case INITIALIZE_FORM:\n        return {\n            ...state,\n            content: ''\n        };\n    default:\n        return state;\n    }\n};\n","import {\n  POST_QUESTION_DATA,\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATE_CURRENT_TRANSLATE_LANGUAGE,\n  UPDATED_QUESTION_DATA\n} from '../actions/Question';\nimport { initialState } from '../constants';\n\nexport const form = (state = initialState.questionForm, action) => {\n  switch (action.type) {\n  case POST_QUESTION_DATA:\n    return {\n      ...state\n    };\n  default:\n    return state;\n  }\n};\n\nexport const list = (state = initialState.questions, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      questionArray: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentQuestion: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATE_CURRENT_TRANSLATE_LANGUAGE:\n    return {\n      ...state,\n      translateLanguageId: parseInt(action.payload)\n    };\n  case UPDATED_QUESTION_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      currentQuestion: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATED_SINGLE_QUESTION_TRANSLATION\n} from '../actions/QuestionTranslation';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.questionTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslationList: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslation: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_SINGLE_QUESTION_TRANSLATION:\n    return {\n      ...state,\n      currentTranslation: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  POST_ANSWER_TRANSLATION_DATA,\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATED_SINGLE_ANSWER_TRANSLATION\n} from '../actions/AnswerTranslation';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.answerTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslationList: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslation: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_SINGLE_ANSWER_TRANSLATION:\n    return {\n      ...state,\n      currentTranslation: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  CLICK_SUBMIT,\n  REQUEST_DATA,\n  RECEIVE_DATA_FAILED,\n  REMOVE_USER_DATA,\n  UPDATED_USER_DATA,\n  UPDATED_PROFILE_DATA,\n  UPDATED_PROFILE_QUESTION_DATA,\n  UPDATED_PROFILE_ANSWER_DATA,\n  UPDATED_PROFILE_COMMENT_DATA,\n  UPDATED_PROFILE_TRANSLATED_DATA,\n  LOGIN_SUCCESS,\n  LOGIN_FAILED,\n  PREPARED_AUTH\n} from '../actions/User';\nimport { initialState } from '../constants';\n\nexport const signUp = (state = initialState.signUp, action) => {\n  switch (action.type) {\n  case CLICK_SUBMIT:\n    return {\n      ...state,\n    };\n  default:\n    return state;\n  }\n};\n\nexport const auth = (state = initialState.auth, action) => {\n  switch (action.type) {\n  case LOGIN_SUCCESS:\n    return {\n      ...state,\n      isLoggedIn: true,\n      user: action.payload.data,\n      jwt: action.payload.data.jwt\n    };\n  case LOGIN_FAILED:\n    return {\n      ...state,\n      isLoggedIn: false,\n      user: {},\n      jwt: ''\n    };\n  case REMOVE_USER_DATA:\n    return {\n      ...state,\n      isLoggedIn: false,\n      user: {},\n      jwt: ''\n    };\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_USER_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      user: action.payload.data\n    };\n  case PREPARED_AUTH:\n    return {\n      ...state,\n      isPrepared: true\n    };\n  default:\n    return state;\n  }\n};\n\nexport const profile = (state = initialState.profile, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true\n    };\n  case UPDATED_PROFILE_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      user: action.payload.data\n    };\n  case UPDATED_PROFILE_QUESTION_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      questions: action.payload.data\n    };\n  case UPDATED_PROFILE_ANSWER_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      answers: action.payload.data\n    };\n  case UPDATED_PROFILE_COMMENT_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      comments: action.payload.data\n    };\n  case UPDATED_PROFILE_TRANSLATED_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      translates: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  REQUEST_DATA,\n  RECEIVE_COMMENT_DATA_SUCCESS,\n  POST_COMMENT,\n  UPDATED_COMMENT_DATA,\n  UPDATED_SINGLE_COMMENT_DATA,\n  UPDATED_COMMENT_ARRAY\n} from '../actions/Comment';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.comments, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true\n    };\n  case RECEIVE_COMMENT_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      commentArray: action.payload.data\n    };\n  case UPDATED_COMMENT_ARRAY:\n    return {\n      ...state,\n      isFetching: false,\n      commentArray: action.payload.data,\n    };\n  case UPDATED_COMMENT_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      currentCommentList: action.payload.data\n    };\n  case UPDATED_SINGLE_COMMENT_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      currentComment: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATED_SINGLE_COMMENT_TRANSLATION,\n} from '../actions/CommentTranslation';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.commentTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslationList: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslation: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_SINGLE_COMMENT_TRANSLATION:\n    return {\n      ...state,\n      currentTranslation: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n    REQUEST_DATA,\n    RECEIVE_DATA_SUCCESS,\n} from '../actions/NotTranslated';\n  \nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.not_translate, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      //...stateは他の状態は維持してisFetchingだけを変更する。\n      ...state,\n      isFetching: true,\n    };\n  \n  case RECEIVE_DATA_SUCCESS:\n\n    const { questions, answers, comments } = action.payload;\n\n    return {\n      ...state,\n      //isFetchingは終了したのでfalseにしている。\n      isFetching: false,\n      //ここでquestionArrayに値を入れている。\n      questions,\n      answers,\n      comments,\n    };\n  \n  default:\n    return state;\n  }\n};","import {\n    POST_VOTE,\n    REQUEST_DATA,\n    RECEIVE_DATA_SUCCESS,\n    RECEIVE_DATA_FAILED,\n  } from '../actions/VoteTranslation.js';\n\n  import { initialState } from '../constants';\n    \n  export const list = (state = initialState.votes, action) => {\n    switch (action.type) {\n    case POST_VOTE:\n      return {\n        ...state\n      }; \n    case REQUEST_DATA:\n      return {\n        ...state,\n        isFetching: true,\n      };\n    case RECEIVE_DATA_SUCCESS:\n      return {\n        ...state,\n        isFetching: false,\n        questionArray: action.payload.data                  \n      };\n    case RECEIVE_DATA_FAILED:\n      return {\n        ...state,\n        isFetching: false\n      };\n    default:\n      return state;\n    }\n  };\n  ","import {\n  POST_VOTE,\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n} from '../actions/VoteTranslation';\n\nimport { initialState } from '../constants';\n\nexport const form = (state = initialState.voteTranslations, action) => {\n  switch (action.type) {\n  case POST_VOTE:\n    return {\n      ...state\n    };\n  default:\n    return state;\n  }\n};\n\nexport const list = (state = initialState.voteTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      status: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  default:\n    return state;\n  }\n};\n","import axios from 'axios';\n\nexport const createUserAccount = (postData) => {\n    return axios.post('/api/users', postData);\n};\n\nexport const loginUser = (postData) => {\n    const username = postData.mail;\n    const { password } = postData;\n\n    return axios.post('/api/users/login', {\n        username,\n        password\n    });\n};\n\nexport const loginUserJwt = (postData) => {\n    const { jwt } = postData;\n    const headers = {\n        \"Content-Type\": 'application/json',\n        \"Authorization\": `Bearer ${jwt}`\n    };\n    return axios.post('/api/users/login_jwt', {}, { headers });\n};\n\nexport const activateUser = (postData) => {\n  const { token } = postData;\n  return axios.post(`/api/users/activate/${token}`, postData);\n};\n\nexport const resetPassword = (postData) => {\n  return axios.post(`/api/users/password_reset`, postData);\n};\n\nexport const saveUserPassword = (postData) => {\n  const { token } = postData;\n  return axios.put(\n    `/api/users/update_password/${token}`,\n    postData\n  );\n};\n\nexport const saveUserProfile = (postData) => {\n    const { user_id, name, profile, country_id, image } = postData;\n    let data = new FormData();\n    data.append('name', name);\n    data.append('profile', profile);\n    data.append('country_id', country_id);\n    data.append('image', image);\n    return axios.put(\n        `/api/users/${user_id}`,\n        data,\n        {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        }\n    );\n};\n\nexport const getUser = (user_id) => {\n    return axios.get(`/api/users/${user_id}`);\n};\n\nexport const getUserByToken = (token) => {\n  return axios.get(`/api/users/password_reset/${token}`);\n};\n","import axios from 'axios';\n\nexport const fetchQuestionList = (params) => {\n    return axios.get('/api/questions', {\n        params\n    });\n};\n\nexport const fetchQuestion = (id) => {\n    return axios.get(`/api/questions/${id}`);\n};\n\nexport const postQuestionData = (postData) => {\n    return axios.post('/api/questions', postData);\n};\n\nexport const saveQuestionData = (postData) => {\n  const { question_id } = postData;\n  return axios.put(`/api/questions/${question_id}`, postData);\n};\n\nexport const deleteQuestionData = (params) => {\n  const { question_id } = params;\n  return axios.delete(`/api/questions/${question_id}`, { params });\n};\n","import axios from 'axios';\n\nconst apiUrl = '/api/answers';\n\nexport const fetchAnswer = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const fetchAnswerList = (params) => {\n  return axios.get(apiUrl, {\n    params\n  });\n};\n\nexport const fetchAnswerListWithQuestion = (params) => {\n  return axios.get(`${apiUrl}_with_question`, {\n    params\n  });\n};\n\nexport const postAnswerData = (params) => {\n  return axios.post(apiUrl, params);\n};\n\nexport const saveAnswerData = (saveData) => {\n  const { answer_id } = saveData;\n  return axios.put(`${apiUrl}/${answer_id}`, saveData);\n};\n\nexport const deleteAnswerData = (params) => {\n  const { answer_id } = params;\n  return axios.delete(`${apiUrl}/${answer_id}`, { params });\n};\n","import axios from 'axios';\nconst apiUrl = '/api/comments';\n\nexport const fetchCommentWithUserList = (params) => {\n  return axios.get(`/api/comments_with_User`, {\n    params\n  });\n}\n\nexport const fetchCommentsList = (params) => {\n    return axios.get(apiUrl, {\n        params\n    });\n};\n\nexport const fetchComment = (id) => {\n    return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const fetchCommentListWithAnswer = (params) => {\n  return axios.get(`${apiUrl}_with_answer`, {\n    params\n  });\n};\n\nexport const postCommentData = (postData) => {\n    return axios.post(apiUrl, postData);\n};\n\nexport const saveCommentData = (saveData) => {\n  const { comment_id } = saveData;\n  return axios.put(`${apiUrl}/${comment_id}`, saveData);\n};\n\nexport const deleteCommentData = (params) => {\n  const { comment_id } = params;\n  return axios.delete(`${apiUrl}/${comment_id}`, { params });\n};\n","import axios from 'axios';\n\nexport const fetchContentTranslation = ( params ) => {\n    return axios.get(`/api/content_translations`,{\n      params\n    });\n};","import { addNotification as notify } from 'reapop';\n\nexport function notifySuccess(message) {\n  return notify({\n    message,\n    position: 'tc',\n    status: 'success',\n    dismissAfter: 2000\n  });\n}\n\nexport function notifyError(message) {\n  return notify({\n    message,\n    position: 'tc',\n    status: 'error',\n    dismissAfter: 2000\n  });\n}\n\nexport function notifyAlert(message) {\n  return notify({\n    message,\n    position: 'tc',\n    status: 'error',\n    dismissAfter: 2000\n  });\n}\n","import { takeEvery, call, put, select } from 'redux-saga/effects';\n// import { push } from 'react-router-redux';\nimport {\n  updateUserData, requestData, receiveDataSuccess, receiveDataFailed,\n  loginSuccess, loginFailed, removeUserData, updatedUserData,\n  updatedProfileData, preparedAuth, updatedProfileQuestionData,\n  updatedProfileAnswerData, updatedProfileCommentData, updatedProfileTranslatedData,\n} from '../actions/User';\nimport {\n  CREATE_USER_ACCOUNT,\n  SAVE_USER_DATA,\n  SAVE_USER_PASSWORD,\n  ACTIVATE_USER,\n  SEND_RESET_PASSWORD_MAIL,\n  GET_USER_PROFILE,\n  GET_USER_BY_TOKEN,\n  LOGIN_USER,\n  LOGIN_USER_JWT,\n  LOGOUT_USER\n} from '../actions/User';\nimport * as api from './apis/Users';\nimport { fetchQuestionList } from './apis/Questions';\nimport { fetchAnswerListWithQuestion } from './apis/Answers';\nimport { fetchCommentListWithAnswer } from './apis/Comments';\nimport { fetchContentTranslation } from './apis/ContentTranslations';\nimport { notifySuccess, notifyError } from './Util';\n\nexport function* createUserAccount(action) {\n  const { history } = action.payload;\n  try {\n    yield put(requestData());\n    const payload = yield call(api.createUserAccount, action.payload);\n    yield put(receiveDataSuccess(payload));\n    const message = '新規登録に成功しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/users/login');\n  } catch (e) {\n    yield put(receiveDataFailed());\n    const message = '新規登録に失敗しました';\n    yield put(notifyError(message));\n  }\n}\n\nexport function* loginUserAccount(action) {\n  const { history } = action.payload;\n  try {\n    const payload = yield call(api.loginUser, action.payload);\n    yield put(loginSuccess(payload));\n    const { jwt } = payload.data;\n    localStorage.setItem('jwt', jwt);\n    const message = 'ログインに成功しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n    // yield put(push('/'));\n  } catch (e) {\n    //yield put(loginFailed());\n    const message = 'アカウントが存在しないか、パスワードが間違っています';\n    yield put(notifyError(message));\n    yield call(history.push, '/users/login');\n  }\n}\n\nexport function* loginUserAccountJwt(action) {\n  try {\n    const jwt = localStorage.getItem('jwt');\n    if (!jwt) {\n      throw new Error('JWTがありません。');\n    }\n    const payload = yield call(api.loginUserJwt, { jwt });\n    yield put(loginSuccess(payload));\n    yield put(preparedAuth());\n  } catch (e) {\n    yield put(loginFailed());\n    yield put(preparedAuth());\n  }\n}\n\nexport function* logoutUserAccount(action) {\n  try {\n    const { history } = action.payload;\n    localStorage.removeItem('jwt');\n    yield put(removeUserData());\n    const message = 'ログアウトしました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n  } catch (e) {\n    //yield put(loginFailed());\n    //yield call(history.push, '/users/login');\n  }\n}\n\nexport function* saveUserData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveUserProfile, action.payload);\n    const message = 'プロフィールを更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedUserData(payload));\n  } catch (e) {\n    const message = 'プロフィールの更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveUserPassword(action) {\n  try {\n    const { history } = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.saveUserPassword, action.payload);\n    yield put(loginSuccess(payload));\n    const { jwt } = payload.data;\n    localStorage.setItem('jwt', jwt);\n    const message = 'パスワードを更新しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = 'パスワードの更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function *resetPassword(action) {\n  try {\n    const state = yield select();\n    const { locale } = state.intl;\n    action.payload.locale = locale;\n    yield put(requestData());\n    const payload = yield call(api.resetPassword, action.payload);\n    const message = 'メールを送信しました';\n    yield put(notifySuccess(message));\n  } catch (e) {\n    const message = 'メール送信に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* getUserProfile(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.getUser, action.payload);\n    const questionParams = {user_id : action.payload};\n    const questionPayload = yield call(fetchQuestionList, questionParams);\n\n    const answerParams = {user_id : action.payload};\n    const answerPayload = yield call(fetchAnswerListWithQuestion, answerParams);\n\n    const commentParams = {user_id : action.payload};\n    const commentPayload = yield call(fetchCommentListWithAnswer, commentParams);\n\n    const translateParams = {user_id : action.payload};\n    const translatedContent = yield call(fetchContentTranslation, translateParams);\n    \n    yield put(updatedProfileData(payload));\n    yield put(updatedProfileQuestionData(questionPayload));\n    yield put(updatedProfileAnswerData(answerPayload));\n    yield put(updatedProfileCommentData(commentPayload));\n    yield put(updatedProfileTranslatedData(translatedContent));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* getUserByToken(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.getUserByToken, action.payload);\n    yield put(updatedUserData(payload));\n  } catch (e) {\n    console.log('receiveDataFailed');\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* activateUser(action) {\n  try {\n    const { history } = action.payload;\n    console.log('history', history);\n    yield put(requestData());\n    const payload = yield call(api.activateUser, action.payload);\n    yield put(loginSuccess(payload));\n    const { jwt } = payload.data;\n    localStorage.setItem('jwt', jwt);\n    const message = '認証が完了しました。';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n  } catch (e) {\n    console.log('receiveDataFailed');\n    yield put(receiveDataFailed());\n  }\n}\n\nconst userSagas = [\n  takeEvery(CREATE_USER_ACCOUNT, createUserAccount),\n  takeEvery(LOGIN_USER, loginUserAccount),\n  takeEvery(LOGIN_USER_JWT, loginUserAccountJwt),\n  takeEvery(LOGOUT_USER, logoutUserAccount),\n  takeEvery(SAVE_USER_DATA, saveUserData),\n  takeEvery(SAVE_USER_PASSWORD, saveUserPassword),\n  takeEvery(GET_USER_PROFILE, getUserProfile),\n  takeEvery(GET_USER_BY_TOKEN, getUserByToken),\n  takeEvery(SEND_RESET_PASSWORD_MAIL, resetPassword),\n  takeEvery(ACTIVATE_USER, activateUser),\n];\n\nexport default userSagas;\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updateCurrentTranslateLanguage,\n  updatedQuestionData\n} from '../actions/Question';\nimport {\n  FETCH_QUESTION_LIST,\n  FETCH_QUESTION,\n  CHANGE_QUESTION_LIST_LANGUAGE,\n  POST_QUESTION_DATA,\n  SAVE_QUESTION_DATA,\n  DELETE_QUESTION,\n} from '../actions/Question';\n\nimport * as api from './apis/Questions';\nimport { notifySuccess, notifyError } from './Util';\n\nexport function* handleFetchData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestionList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* handleFetchQuestionById(action) {\n  try {\n    const  id   = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestion, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postQuestion(action) {\n  try {\n    yield put(requestData());\n    yield call(api.postQuestionData, action.payload);\n    const payload = yield call(api.fetchQuestionList);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* changeQuestionListLanguage(action) {\n  try {\n    const { translate_language_id } = action.payload;\n    yield put(requestData());\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveQuestionData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveQuestionData, action.payload);\n    const message = '質問を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedQuestionData(payload));\n  } catch (e) {\n    const message = '質問の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteQuestionData(action) {\n  try {\n    const { question_id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteQuestionData, action.payload);\n    const message = '質問を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchQuestionList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '質問の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst questionSagas = [\n  //FETCH_QUESTION_LISTというアクションが発火させた場合はhandleFetchDataを起動させる。\n  takeEvery(FETCH_QUESTION_LIST, handleFetchData),\n  takeEvery(FETCH_QUESTION, handleFetchQuestionById),\n  // takeEvery(CHANGE_QUESTION_LIST_LANGUAGE, changeQuestionListLanguage),\n  takeEvery(POST_QUESTION_DATA, postQuestion),\n  takeEvery(SAVE_QUESTION_DATA, saveQuestionData),\n  takeEvery(DELETE_QUESTION, deleteQuestionData),\n];\n\nexport default questionSagas;\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport { reset } from 'redux-form';\nimport {\n  requestData, receiveDataSuccess, receiveDataFailed, initializeForm,\n  receiveSingleDataSuccess,\n} from '../actions/Answer';\nimport {\n  FETCH_ANSWER,\n  FETCH_ANSWER_LIST,\n  POST_ANSWER_DATA,\n  SAVE_ANSWER_DATA,\n  DELETE_ANSWER,\n} from '../actions/Answer';\nimport * as api from './apis/Answers';\nimport * as act from '../actions/Comment';\nimport { notifySuccess, notifyError } from './Util';\nimport { fetchCommentWithUserList }from './apis/Comments';\n\nexport function* handleFetchAnswerData(action) {\n  try {\n    yield put(requestData());\n    const answerList = yield call(api.fetchAnswerList, action.payload);\n    const answerId = answerList.data.map(v =>{ return v.id });\n    const commentList = yield call(fetchCommentWithUserList, answerId);\n    yield put(receiveDataSuccess(answerList));\n    yield put(act.receiveCommentDataSuccess(commentList));\n    yield put(act.updatedCommentArray(action.payload));   \n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* postAnswer(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.postAnswerData, action.payload);\n    const { question_id, translate_language_id } = action.payload;\n    const answerPayload = yield call(api.fetchAnswerList, { question_id, translate_language_id });\n    yield put(receiveDataSuccess(answerPayload));\n    yield put(reset('answerForm'));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* fetchSingleAnswerData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchAnswer, action.payload);\n    yield put(receiveSingleDataSuccess(payload));\n    yield put(reset('answerForm'));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveAnswerData(action) {\n  try {\n    const { question_id, history } = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.saveAnswerData, action.payload);\n    const message = '回答を更新しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = '回答の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteAnswerData(action) {\n  try {\n    const { answer_id, question_id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteAnswerData, action.payload);\n    const message = '回答を削除しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = '回答の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\n\nconst answerSagas = [\n  takeEvery(FETCH_ANSWER_LIST, handleFetchAnswerData),\n  takeEvery(POST_ANSWER_DATA, postAnswer),\n  takeEvery(FETCH_ANSWER, fetchSingleAnswerData),\n  takeEvery(SAVE_ANSWER_DATA, saveAnswerData),\n  takeEvery(DELETE_ANSWER, deleteAnswerData),\n];\n\nexport default answerSagas;\n","import axios from 'axios';\n\nconst apiUrl = '/api/question_translations';\n\nexport const fetchQuestionTranslationList = (question_id) => {\n  return axios.get(apiUrl, {\n    params: { question_id }\n  });\n};\n\nexport const fetchQuestionTranslation = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const postQuestionTranslationData = (postData) => {\n  const {\n    content,\n    user_id,\n    question_id,\n    translate_language_id\n  } = postData;\n  return axios.post(apiUrl, {\n    content,\n    user_id,\n    question_id,\n    translate_language_id\n  });\n};\n\nexport const saveQuestionTranslationData = (saveData) => {\n  const { id } = saveData;\n  return axios.put(`${apiUrl}/${id}`, saveData);\n};\n\nexport const deleteQuestionTranslation= (params) => {\n  const { id } = params;\n  return axios.delete(`${apiUrl}/${id}`, { params });\n};\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updatedSingleQuestionTranslation\n} from '../actions/QuestionTranslation';\nimport {\n  FETCH_QUESTION_TRANSLATION_LIST,\n  FETCH_QUESTION_TRANSLATION,\n  POST_QUESTION_TRANSLATION_DATA,\n  SAVE_QUESTION_TRANSLATION_DATA,\n  DELETE_QUESTION_TRANSLATION,\n} from '../actions/QuestionTranslation';\nimport * as api from './apis/QuestionTranslations';\nimport { notifySuccess, notifyError } from './Util';\nimport * as questionSagas from './Question';\n\nexport function* handleFetchQuestionTranslationList(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestionTranslationList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* handleFetchQuestionTranslationById(action) {\n  try {\n    const id = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestionTranslation, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* postQuestionTranslation(action) {\n  try {\n    const { question_id } = action.payload;\n    yield put(requestData());\n    yield call(api.postQuestionTranslationData, action.payload);\n    const payload = yield call(api.fetchQuestionTranslationList, question_id);\n    yield put(receiveDataSuccess(payload));\n    const data = {payload: {}};\n    yield call(questionSagas.handleFetchData, data);\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveQuestionTranslationData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveQuestionTranslationData, action.payload);\n    const message = '翻訳を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedSingleQuestionTranslation(payload));\n  } catch (e) {\n    const message = '翻訳の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteQuestionTranslation(action) {\n  try {\n    const { id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteQuestionTranslation, action.payload);\n    const message = '翻訳を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchQuestionTranslationList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '翻訳の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst questionTranslationSagas = [\n  takeEvery(POST_QUESTION_TRANSLATION_DATA, postQuestionTranslation),\n  takeEvery(FETCH_QUESTION_TRANSLATION_LIST, handleFetchQuestionTranslationList),\n  takeEvery(FETCH_QUESTION_TRANSLATION, handleFetchQuestionTranslationById),\n  takeEvery(SAVE_QUESTION_TRANSLATION_DATA, saveQuestionTranslationData),\n  takeEvery(DELETE_QUESTION_TRANSLATION, deleteQuestionTranslation),\n];\n\nexport default questionTranslationSagas;\n","import axios from 'axios';\n\nconst apiUrl = '/api/answer_translations';\n\nexport const fetchAnswerTranslationList = (answer_id) => {\n  return axios.get(apiUrl, {\n    params: { answer_id }\n  });\n};\n\nexport const fetchAnswerTranslation = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const postAnswerTranslationData = (postData) => {\n  const {\n    content,\n    user_id,\n    answer_id,\n    translate_language_id\n  } = postData;\n  return axios.post(apiUrl, {\n    content,\n    user_id,\n    answer_id,\n    translate_language_id\n  });\n};\n\nexport const saveAnswerTranslationData = (saveData) => {\n  const { id } = saveData;\n  return axios.put(`${apiUrl}/${id}`, saveData);\n};\n\nexport const deleteAnswerTranslation= (params) => {\n  const { id } = params;\n  return axios.delete(`${apiUrl}/${id}`, { params });\n};\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updatedSingleAnswerTranslation\n} from '../actions/AnswerTranslation';\nimport {\n  FETCH_ANSWER_TRANSLATION_LIST,\n  FETCH_ANSWER_TRANSLATION,\n  POST_ANSWER_TRANSLATION_DATA,\n  SAVE_ANSWER_TRANSLATION_DATA,\n  DELETE_ANSWER_TRANSLATION,\n} from '../actions/AnswerTranslation';\nimport * as api from './apis/AnswerTranslations';\nimport { notifySuccess, notifyError } from './Util';\nimport * as questionSagas from './Question';\n\nexport function* handleFetchAnswerTranslationList(action) {\n  try {\n    // axios.get()を呼ぶ前にisFetchingをtrueにしておく\n    yield put(requestData());\n    const payload = yield call(api.fetchAnswerTranslationList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* handleFetchAnswerTranslationById(action) {\n  try {\n    const id  = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchAnswerTranslation, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postAnswerTranslation(action) {\n  try {\n    const { answer_id } = action.payload;\n    yield put(requestData());\n    yield call(api.postAnswerTranslationData, action.payload);\n    const payload = yield call(api.fetchAnswerTranslationList, answer_id);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveAnswerTranslationData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveAnswerTranslationData, action.payload);\n    const message = '翻訳を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedSingleAnswerTranslation(payload));\n  } catch (e) {\n    const message = '翻訳の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteAnswerTranslation(action) {\n  try {\n    const { id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteAnswerTranslation, action.payload);\n    const message = '翻訳を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchAnswerTranslationList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '翻訳の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst answerTranslationSagas = [\n  takeEvery(POST_ANSWER_TRANSLATION_DATA, postAnswerTranslation),\n  takeEvery(FETCH_ANSWER_TRANSLATION_LIST, handleFetchAnswerTranslationList),\n  takeEvery(FETCH_ANSWER_TRANSLATION, handleFetchAnswerTranslationById),\n  takeEvery(SAVE_ANSWER_TRANSLATION_DATA, saveAnswerTranslationData),\n  takeEvery(DELETE_ANSWER_TRANSLATION, deleteAnswerTranslation),\n];\n\nexport default answerTranslationSagas;\n","import { takeEvery, call, put } from 'redux-saga/effects';\n// import { push } from 'react-router-redux';\nimport * as act from '../actions/Comment';\nimport * as api from './apis/Comments';\nimport {\n  FETCH_SINGLE_COMMENT,\n  POST_COMMENT,\n  SAVE_COMMENT_DATA,\n  DELETE_COMMENT,\n} from '../actions/Comment';\nimport * as answerSaga from './Answer'; \nimport { notifySuccess, notifyError } from './Util';\n\nimport { fetchCommentWithUserList }from './apis/Comments';\nimport * as act2 from '../actions/Comment';\n\nexport function* fetchSingleComment(action) {\n  try {\n    yield put(act.requestData());\n    const comment_id = action.payload;\n    const comment = yield call(api.fetchComment, comment_id);\n    yield put(act.updatedSingleCommentData(comment));\n  } catch (e) {\n    const message = 'コメントの投稿に失敗しました。';\n    yield put(notifyError(message));\n    //yield put(updatedCommentData());\n  }\n}\n\nexport function* postComment(action) {\n  try {\n    yield put(act.requestData());\n    const { answer_id, question_id, current_translate_language_id, answerIdList } = action.payload;\n    yield call(api.postCommentData, action.payload);\n    const commentPayload = yield call(api.fetchCommentsList, { answer_id });    \n    const answerId = answerIdList;\n    const commentList = yield call(fetchCommentWithUserList, answerId);\n    yield put(act2.receiveCommentDataSuccess(commentList));\n\n    const message = 'コメントを投稿しました。';\n    yield put(notifySuccess(message));\n    const data = { payload: {\n      question_id,\n      translate_language_id: current_translate_language_id\n    } };\n    yield call(answerSaga.handleFetchAnswerData, data);\n  } catch (e) {\n    const message = 'コメントの投稿に失敗しました。';\n    yield put(notifyError(message));\n    //yield put(updatedCommentData());\n  }\n}\n\nexport function* saveComment(action) {\n  try {\n    yield put(act.requestData());\n    const {\n      comment_id,\n      question_id,\n      history\n    } = action.payload;\n    const comment = yield call(api.saveCommentData, action.payload);\n    yield put(act.updatedSingleCommentData(comment));\n    const message = 'コメントを編集しました。';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = 'コメントの編集に失敗しました。';\n    yield put(notifyError(message));\n    //yield put(updatedCommentData());\n  }\n}\n\nexport function* deleteCommentData(action) {\n  try {\n    const { comment_id, question_id, user_id, history } = action.payload;\n    yield put(act.requestData());\n    yield call(api.deleteCommentData, action.payload);\n    const message = 'コメントを削除しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = 'コメントの削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(act.receiveDataFailed());\n  }\n}\n\nconst commentSagas = [\n  takeEvery(FETCH_SINGLE_COMMENT, fetchSingleComment),\n  takeEvery(POST_COMMENT, postComment),\n  takeEvery(SAVE_COMMENT_DATA, saveComment),\n  takeEvery(DELETE_COMMENT, deleteCommentData),\n];\n\nexport default commentSagas;\n","import axios from 'axios';\n\nconst apiUrl = '/api/comment_translations';\n\nexport const fetchCommentTranslationList = (comment_id) => {\n  return axios.get(apiUrl, {\n    params: {\n      comment_id\n    }\n  });\n};\n\nexport const fetchCommentTranslation = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const postCommentTranslationData = (params) => {\n  return axios.post(apiUrl, {\n    params\n  });\n};\n\nexport const saveCommentTranslationData = (saveData) => {\n  const { id } = saveData;\n  return axios.put(`${apiUrl}/${id}`, saveData);\n};\n\nexport const deleteCommentTranslation = (params) => {\n  const { id } = params;\n  return axios.delete(`${apiUrl}/${id}`, { params });\n};\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updatedSingleCommentTranslation\n} from '../actions/CommentTranslation';\nimport {\n  FETCH_COMMENT_TRANSLATION_LIST,\n  FETCH_COMMENT_TRANSLATION,\n  POST_COMMENT_TRANSLATION_DATA,\n  SAVE_COMMENT_TRANSLATION_DATA,\n  DELETE_COMMENT_TRANSLATION,\n} from '../actions/CommentTranslation';\nimport * as api from './apis/CommentTranslations';\nimport { notifySuccess, notifyError } from './Util';\n\nexport function* handleFetchCommentTranslationList(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchCommentTranslationList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* handleFetchCommentTranslationById(action) {\n  try {\n    const id  = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchCommentTranslation, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postCommentTranslation(action) {\n  try {\n    const { comment_id } = action.payload;\n    yield put(requestData());\n    yield call(api.postCommentTranslationData, action.payload);\n    const payload = yield call(api.fetchCommentTranslationList, comment_id);\n    yield put(receiveDataSuccess(payload));\n    const message = '翻訳を投稿しました。';\n    yield put(notifySuccess(message));\n  } catch (e) {\n    yield put(receiveDataFailed());\n    const message = '翻訳の投稿に失敗しました。';\n    yield put(notifyError(message));\n  }\n}\n\nexport function* saveCommentTranslationData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveCommentTranslationData, action.payload);\n    const message = '翻訳を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedSingleCommentTranslation(payload));\n  } catch (e) {\n    const message = '翻訳の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteCommentTranslation(action) {\n  try {\n    const { id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteCommentTranslation, action.payload);\n    const message = '翻訳を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchCommentTranslationList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '翻訳の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst commentTranslationSagas = [\n  takeEvery(POST_COMMENT_TRANSLATION_DATA, postCommentTranslation),\n  takeEvery(FETCH_COMMENT_TRANSLATION_LIST, handleFetchCommentTranslationList),\n  takeEvery(FETCH_COMMENT_TRANSLATION, handleFetchCommentTranslationById),\n  takeEvery(SAVE_COMMENT_TRANSLATION_DATA, saveCommentTranslationData),\n  takeEvery(DELETE_COMMENT_TRANSLATION, deleteCommentTranslation),\n];\n\nexport default commentTranslationSagas;\n","import axios from 'axios';\n\n// 未翻訳の質問一覧取得するAPI\nexport const fetchNotTranslatedQuestions = (params) => {\n    return axios.get('/api/not_translated_questions', {\n        params\n    });\n};\n\n// 未翻訳の回答一覧取得するAPI\nexport const fetchNotTranslatedAnswers = (params) => {\n    return axios.get('/api/not_translated_answers', {\n        params\n    });\n};\n\n// 未翻訳のコメント一覧取得するAPI\nexport const fetchNotTranslatedComments = (params) => {\n    return axios.get('/api/not_translated_comments', {\n        params\n    });\n};\n\n","import { takeEvery, call, put } from 'redux-saga/effects';\n\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveDataFailed,\n  FETCH_NOT_TRANSLATED,\n} from '../actions/NotTranslated';\n\nimport {\n  fetchNotTranslatedQuestions,\n  fetchNotTranslatedAnswers,\n  fetchNotTranslatedComments,\n} from './apis/NotTranslated';\nimport { changeQuestionListLanguage } from './Question';\n\nexport function* handleFetchData(action) {\n  try {\n\n    yield put(requestData());\n\n    //未翻訳一覧を取り出す\n    // const questions = yield call(fetchNotTranslated, action.payload);\n\n    //質問を取り出す\n    const questions = yield call(fetchNotTranslatedQuestions, action.payload);\n\n    //回答を取り出す\n    const answers = yield call(fetchNotTranslatedAnswers, action.payload);\n\n    //コメントを取り出す\n    const comments = yield call(fetchNotTranslatedComments, action.payload);\n\n    const NotTranslatedList={\n      questions : questions.data,\n      answers : answers.data,\n      comments: comments.data,\n    };\n\n    //reducers/NotTranslated.jsで関数を実行する。\n    yield put(receiveDataSuccess(NotTranslatedList));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nconst NotTranslatedSagas = [\n  //FETCH_QUESTION_LISTというアクションが発火させた場合はhandleFetchDataを起動させる。\n  takeEvery(FETCH_NOT_TRANSLATED, handleFetchData),\n];\n\nexport default NotTranslatedSagas;\n","import axios from 'axios';\n\nexport const postVotes = (postData) => {\n    return axios.post('/api/votes', postData);\n};\n\nexport const deleteVotes = (params) => {\n    const { vote_id } = params;\n    return axios.delete(`/api/votes/${vote_id}`, { params });\n};\n\nexport const fetchQuestionVotesList = (question_id) => {\n    return axios.get('/api/votes/questions', {\n      params: { question_id }\n    });\n  };\n\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n    POST_VOTE,\n    DELETE_VOTE,\n    requestData,\n    receiveDataSuccess,\n    receiveDataFailed,\n} from '../actions/Vote.js';\n\nimport * as answerSaga from './Answer';\nimport * as questionSagas from './Question';\nimport {\n  postVotes,\n  deleteVotes,\n  fetchQuestionVotesList,\n} from './apis/Votes';\n\nimport {\n  notifySuccess,\n  notifyError\n} from './Util';\n\n\nexport function* handleFetchQestionVotesList(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(fetchQuestionVotesList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postVote(action) {\n  try {\n    const { sendVoteParams, key } = action.payload;\n    yield put(requestData());\n    yield call(postVotes, sendVoteParams);\n\n    let data;\n    switch (key) {\n      case \"comment\":\n      case \"answer\":\n          data = { payload: {\n            question_id: sendVoteParams.questionId,\n            translate_language_id: 1,\n          } };\n          yield call(answerSaga.handleFetchAnswerData, data);\n          break;\n      case \"questionList\":\n          data = { payload: {\n            country_id: sendVoteParams.country_id,\n          } };\n          yield call(questionSagas.handleFetchData, data);\n          break;\n      case \"questionView\":\n          data = { payload: sendVoteParams.question_id };\n          yield call(questionSagas.handleFetchQuestionById, data);\n          break;\n    }\n\n    const message = 'いいねしました';\n    yield put(notifySuccess(message));\n\n  } catch (e) {\n    const message = 'いいねに失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteVote(action) {\n  try {\n    const { deleteVoteParams, key } = action.payload;\n    yield put(requestData());\n    yield call(deleteVotes, deleteVoteParams);\n\n    let data;\n    switch (key) {\n      case \"comment\":\n      case \"answer\":\n          data = { payload: {\n            question_id: deleteVoteParams.questionId,\n            translate_language_id: 1,\n          } };\n          yield call(answerSaga.handleFetchAnswerData, data);\n          break;\n      case \"questionList\":\n          data = { payload: {\n            country_id: deleteVoteParams.country_id,\n          } };\n          yield call(questionSagas.handleFetchData, data);\n          break;\n      case \"questionView\":\n          data = { payload: deleteVoteParams.vote_id };\n          yield call(questionSagas.handleFetchQuestionById, data);\n          break;\n    }\n    const message = 'いいねを削除しました';\n    yield put(notifySuccess(message));\n  } catch (e) {\n    const message = 'いいねの削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst voteSagas = [\n  takeEvery(POST_VOTE, postVote),\n  takeEvery(DELETE_VOTE, deleteVote),\n];\n\nexport default voteSagas;\n","import axios from 'axios';\n\nexport const postVotes = (params) => {\n    return axios.post('/api/vote_translations', params);\n};\n\nexport const deleteVotes = (params) => {\n    const { vote_id } = params;\n    return axios.delete(`/api/vote_translations/${vote_id}`, { params });\n};","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n    POST_VOTE,\n    DELETE_VOTE,\n    requestData,\n    receiveDataSuccess,\n    receiveDataFailed,\n} from '../actions/VoteTranslation';\n\nimport * as answerTranslationSagas from './AnswerTranslation';\nimport * as questionTranslationSagas from './QuestionTranslation';\nimport * as commentTranslationSagas from './CommentTranslation';\n\nimport { \n  notifySuccess, \n  notifyError \n} from './Util';\n\nimport { postVotes, deleteVotes } from './apis/VoteTranslations';\n\nexport function* postVote(action) {\n  try {\n    const { sendVoteParams, key } = action.payload;\n    yield put(requestData());\n    yield call(postVotes, sendVoteParams);\n    let data;\n    switch (key) {\n      case \"comment\":\n          data = { payload: sendVoteParams.commentId } ;\n          yield call(commentTranslationSagas.handleFetchCommentTranslationList, data);\n          break;\n      case \"answer\":\n          data = { payload: sendVoteParams.answerId } ;\n          yield call(answerTranslationSagas.handleFetchAnswerTranslationList, data);\n          break;\n      case \"question\":\n          data = { payload: sendVoteParams.questionId } ;\n          yield call(questionTranslationSagas.handleFetchQuestionTranslationList, data);\n          break;\n    }\n\n    const message = 'いいねしました';\n    yield put(notifySuccess(message));\n\n  } catch (e) {\n    const message = 'いいねに失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteVote(action) {\n  try {\n    const { deleteVoteParams, key } = action.payload;\n    yield put(requestData());\n    yield call(deleteVotes, deleteVoteParams);\n\n    let data;\n    switch (key) {\n      case \"comment\":\n          data = { payload: deleteVoteParams.commentId } ;\n          yield call(commentTranslationSagas.handleFetchCommentTranslationList, data);\n          break;\n      case \"answer\":\n          data = { payload: deleteVoteParams.answerId };\n          yield call(answerTranslationSagas.handleFetchAnswerTranslationList, data);\n          break;\n      case \"question\":\n          data = { payload:  deleteVoteParams.questionId };\n          yield call(questionTranslationSagas.handleFetchQuestionTranslationList, data);\n          break;\n    }\n    const message = 'いいねを削除しました';\n    yield put(notifySuccess(message));\n  } catch (e) {\n    const message = 'いいねの削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst voteTranslationSagas = [\n  takeEvery(POST_VOTE, postVote),\n  takeEvery(DELETE_VOTE, deleteVote),\n];\n\nexport default voteTranslationSagas;","import { put, takeEvery } from 'redux-saga/effects';\nimport {\n    ACTION_ALERT_MESSAGE,\n} from '../actions/Notification';\nimport { notifyAlert } from './Util';\n\nexport function* alertMessage(action) {\n    yield put(notifyAlert(action.payload));\n}\n\n  const notificationSagas = [\n    takeEvery(ACTION_ALERT_MESSAGE, alertMessage),\n  ];\n  \nexport default notificationSagas;","import { all } from 'redux-saga/effects';\nimport userSagas from './sagas/User';\nimport questionSagas from './sagas/Question';\nimport answerSagas from './sagas/Answer';\nimport questionTranslationSagas from './sagas/QuestionTranslation';\nimport answerTranslationSagas from './sagas/AnswerTranslation';\nimport commentSagas from './sagas/Comment';\nimport commentTranslationSagas from './sagas/CommentTranslation';\nimport NotTranslatedSagas from './sagas/NotTranslated';     \nimport voteSagas from './sagas/Votes';\nimport voteTranslationSagas from './sagas/VoteTranslation';  \nimport notificationSagas from './sagas/Notification';            \n\nexport default function* rootSaga() {\n  yield all([\n    ...userSagas,\n    ...questionSagas,\n    ...answerSagas,\n    ...questionTranslationSagas,\n    ...answerTranslationSagas,\n    ...commentSagas,\n    ...commentTranslationSagas,\n    ...NotTranslatedSagas,\n    ...voteSagas,\n    ...voteTranslationSagas,\n    ...notificationSagas,\n  ]);\n}\n","import { createBrowserHistory as createHistory } from 'history';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { routerMiddleware } from 'react-router-redux';\nimport reducer from './reducer';\nimport { initialState } from './constants';\nimport rootSaga from './rootSaga';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from \"redux-logger\";\nimport ReactGA from 'react-ga';\n\n// Redux DevTools\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst history = createHistory();\nReactGA.initialize('UA-128421111-1');\nhistory.listen(({ pathname }) => {\n  console.log(\"GA---------\",pathname);\n//   ReactGA.set({ page: pathname });\n//   ReactGA.pageview(pathname);\n});\n\nconst routingMiddleware = routerMiddleware(history);\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n    reducer,\n    initialState,\n    composeEnhancers(\n        applyMiddleware(\n            thunkMiddleware,\n            routingMiddleware,\n            sagaMiddleware,\n            logger\n        )\n    )\n);\n\nsagaMiddleware.run(rootSaga, { history });\n\nexport { history }\nexport { store }\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { ConnectedRouter, routerReducer, routerMiddleware } from 'react-router-redux';\n\nimport Home from './containers/Home';\nimport QuestionView from './containers/QuestionView';\nimport QuestionEdit from './containers/QuestionEdit';\nimport NotTranslated from './containers/NotTranslated';\nimport AnswerEdit from './containers/AnswerEdit';\nimport CommentEdit from './containers/CommentEdit';\nimport QuestionTranslationView from './containers/QuestionTranslationView';\nimport QuestionTranslationEdit from './containers/QuestionTranslationEdit';\nimport AnswerTranslationView from './containers/AnswerTranslationView';\nimport AnswerTranslationEdit from './containers/AnswerTranslationEdit';\nimport CommentTranslationView from './containers/CommentTranslationView';\nimport CommentTranslationEdit from './containers/CommentTranslationEdit';\nimport App from './containers/App';\nimport ScrollToTop from './components/layouts/ScrollToTop';\nimport SignUp from './containers/users/SignUp';\nimport Login from './containers/users/Login';\nimport PasswordReset from './containers/users/PasswordReset';\nimport NewPassword from './containers/users/NewPassword';\nimport Activate from './containers/users/Activate';\nimport Profile from './containers/users/Profile';\nimport ProfileEdit from './containers/users/ProfileEdit';\nimport UserOnly from './containers/auth/UserOnly';\nimport GuestOnly from './containers/auth/GuestOnly';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport history from './store';\nimport UIkit from 'uikit';\n// import Icons from 'uikit/dist/js/uikit-icons';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { far } from '@fortawesome/free-regular-svg-icons';\n\n// Styles\nimport './css/normalize.css';\nimport './css/main.css';\nimport './css/uikit.min.css';\n\n// 言語設定\nimport { addLocaleData, IntlProvider } from 'react-intl';\nimport ja from 'react-intl/locale-data/ja';\nimport en from 'react-intl/locale-data/en';\nconst { intl } = store.getState();\nconst { locale, messages } = intl;\naddLocaleData([...ja, ...en]);\n\nlibrary.add(fas, far);\n\n// 取り急ぎの質問フォーム初期化処理\nlocalStorage.setItem('question-form', '');\n\nconst render = () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <IntlProvider locale={locale} messages={messages} >\n        <BrowserRouter> \n          <App>\n            <ScrollToTop>\n              <Switch>\n                <Route exact path='/' component={Home} />\n                <Route exact path='/questions/:id' component={QuestionView}  onEnter={() => window.scrollTo(0, 0)}/>\n                <Route exact path='/question_translations/:question_id' component={QuestionTranslationView} />\n                <Route exact path='/answer_translations/:answer_id' component={AnswerTranslationView} />\n                <Route exact path='/comment_translations/:comment_id' component={CommentTranslationView} />\n                <Route exact path='/users/profile/:id' component={Profile} />\n                <Route exact path='/users/login' component={Login} />\n                <Route exact path='/users/signup' component={SignUp} />\n                <Route exact path='/users/activate/:token' component={Activate} />\n                <Route exact path='/users/password_reset' component={PasswordReset} />\n                <Route exact path='/users/password_reset/:token' component={NewPassword} />\n                <UserOnly>\n                  <Switch>\n                    <Route exact path='/questions/edit/:id' component={QuestionEdit} />\n                    <Route exact path='/answers/edit/:id' component={AnswerEdit} />\n                    <Route exact path='/comments/edit/:id' component={CommentEdit} />\n                    <Route exact path='/users/profile_edit' component={ProfileEdit} />\n                    <Route exact path='/question_translations/edit/:id' component={QuestionTranslationEdit} />\n                    <Route exact path='/answer_translations/edit/:id' component={AnswerTranslationEdit} />\n                    <Route exact path='/comment_translations/edit/:id' component={CommentTranslationEdit} />\n                    {/*未翻訳の質問を抽出するルートパス*/}\n                    <Route exact path='/not_translated' component={NotTranslated} />\n                  </Switch>\n                </UserOnly>\n                <GuestOnly>\n                  <Switch>\n                  </Switch>\n                </GuestOnly>\n              </Switch>\n            </ScrollToTop>\n          </App>\n        </BrowserRouter>\n      </IntlProvider>\n    </Provider>,\n    document.getElementById('root')\n  );\n};\n\nstore.subscribe(() => {\n  render();\n});\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nrender()\n"],"sourceRoot":""}