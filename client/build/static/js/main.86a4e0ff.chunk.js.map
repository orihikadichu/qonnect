{"version":3,"sources":["actions/Question.js","utils/Translations.js","components/Translator.js","actions/Vote.js","components/PostUser.js","components/QuestionListView.js","components/QuestionList.js","containers/QuestionList.js","components/LanguageFormSelect.js","components/CategoryFormSelect.js","components/QuestionForm.js","components/Home.js","actions/Intl.js","actions/Category.js","actions/Notification.js","containers/Home.js","components/AnswerForm.js","actions/Answer.js","actions/Comment.js","components/Comment.js","components/CommentList.js","components/CommentForm.js","components/AnswerList.js","containers/AnswerList.js","utils/index.js","components/QuestionView.js","containers/QuestionView.js","components/QuestionEdit.js","containers/QuestionEdit.js","actions/NotTranslated.js","components/NotTranslated.js","containers/NotTranslated.js","components/AnswerEdit.js","containers/AnswerEdit.js","components/CommentEdit.js","containers/CommentEdit.js","components/QuestionTranslationForm.js","actions/QuestionTranslation.js","actions/VoteTranslation.js","components/QuestionTranslationList.js","containers/QuestionTranslationList.js","containers/QuestionTranslationView.js","components/TranslationForm.js","components/TranslationEdit.js","components/QuestionTranslationEdit.js","containers/QuestionTranslationEdit.js","components/AnswerTranslationForm.js","actions/AnswerTranslation.js","components/AnswerTranslationList.js","containers/AnswerTranslationList.js","containers/AnswerTranslationView.js","components/AnswerTranslationEdit.js","containers/AnswerTranslationEdit.js","components/CommentTranslationForm.js","actions/CommentTranslation.js","components/CommentTranslationList.js","containers/CommentTranslationList.js","containers/CommentTranslationView.js","components/CommentTranslationEdit.js","containers/CommentTranslationEdit.js","components/layouts/MenuDrawer.js","components/layouts/Header.js","actions/User.js","containers/layouts/Header.js","components/App.js","containers/App.js","components/layouts/ScrollToTop.js","components/CountryFormSelect.js","components/users/SignUpForm.js","components/users/SignUp.js","containers/users/SignUp.js","components/users/LoginForm.js","components/users/Login.js","containers/users/Login.js","components/users/PasswordResetForm.js","components/users/PasswordReset.js","containers/users/PasswordReset.js","components/users/PasswordForm.js","components/users/NewPassword.js","containers/users/NewPassword.js","components/users/Activate.js","containers/users/Activate.js","containers/users/Profile.js","components/users/ProfileForm.js","components/users/Profile.js","containers/users/ProfileEdit.js","components/auth/UserOnly.js","containers/auth/UserOnly.js","components/auth/GuestOnly.js","containers/auth/GuestOnly.js","intl/index.js","intl/locales/ja_JP.js","intl/locales/en_US.js","constants.js","reducer.js","reducers/Intl.js","reducers/Category.js","reducers/Answer.js","reducers/Question.js","reducers/QuestionTranslation.js","reducers/AnswerTranslation.js","reducers/User.js","reducers/Comment.js","reducers/CommentTranslation.js","reducers/NotTranslated.js","reducers/Votes.js","reducers/VoteTranslation.js","sagas/apis/Users.js","sagas/apis/Questions.js","sagas/apis/Answers.js","sagas/apis/Comments.js","sagas/apis/ContentTranslations.js","sagas/Util.js","sagas/User.js","sagas/Question.js","sagas/Answer.js","sagas/apis/QuestionTranslations.js","sagas/QuestionTranslation.js","sagas/apis/AnswerTranslations.js","sagas/AnswerTranslation.js","sagas/Comment.js","sagas/apis/CommentTranslations.js","sagas/CommentTranslation.js","sagas/apis/NotTranslated.js","sagas/NotTranslated.js","sagas/apis/Votes.js","sagas/Votes.js","sagas/apis/VoteTranslations.js","sagas/VoteTranslation.js","sagas/Notification.js","rootSaga.js","store.js","index.js"],"names":["FETCH_QUESTION_LIST","Symbol","FETCH_QUESTION","POST_QUESTION_DATA","REQUEST_DATA","RECEIVE_DATA_SUCCESS","RECEIVE_SINGLE_DATA_SUCCESS","RECEIVE_DATA_FAILED","UPDATE_CURRENT_TRANSLATE_LANGUAGE","SAVE_QUESTION_DATA","UPDATED_QUESTION_DATA","DELETE_QUESTION","fetchQuestionList","createAction","fetchQuestion","postQuestionData","requestData","receiveDataSuccess","receiveSingleDataSuccess","receiveDataFailed","saveQuestionData","updatedQuestionData","deleteQuestion","getFilteredContents","contentList","translateLanguageId","contentType","categoryId","filter","v","translate_language_id","length","getTranslatedContents","map","dispText","content","translation","Translator","user","this","props","name","image_path","profile_link","msg","formatMessage","intl","id","react_default","a","createElement","className","style","padding","Link","to","src","width","height","alt","Component","injectIntl","POST_VOTE","DELETE_VOTE","postVote","deleteVote","PostUser","countryId","concat","border","nationalFlag","selectedNationalFlag","country_id","userName","profileLink","QuestionListView","question","data","params","user_id","question_id","answer_id","comment_id","status","key","handlePostVote","vote_id","handleDeleteVote","questionArray","_this","filteredQuestions","translator","votes","votebutton","onClick","bind","react_fontawesome_index_es","icon","color","size","sendVote","voteNumbers","question_translations","components_Translator","category","intl_key","dayjs","created_at","format","components_PostUser","questionList","getQuestionList","_this$props","getQuestionListView","connect","state","auth","ctgr","dispatch","QuestionList","questions","category_id","handleFetchData","_this$props$state$que","isFetching","react_spinners","components_QuestionListView","loginUser","queryData","LanguageFormSelect","placeholder","formik_esm","component","value","CategoryFormSelect","QuestionForm","values","errors","initialValues","enableReinitialize","validate","onSubmit","_ref","setSubmitting","resetForm","setErrors","render","_ref2","touched","handleSubmit","isSubmitting","setFieldValue","type","rows","formik_persist_es6","components_LanguageFormSelect","components_CategoryFormSelect","Home","formData","_this$props$state$aut","isLoggedIn","console","log","history","alertMessage","push","postData","e","message","locale","preventDefault","stopPropagation","localStorage","setItem","window","location","href","changeCategory","selectedCategory","_this$props$state$int","onChangeLanguage","components_QuestionForm","submitQuestionForm","onChange","changeCateogryfunction","target","containers_QuestionList","React","UPDATE_CURRENT_LANGUAGE","updateCurrentLanguage","UPDATE_CURRENT_CATEGORY","updateCurrentCategory","ACTION_ALERT_MESSAGE","actionAlertMessage","changeLanguage","AnswerForm","CHANGE_ANSWER_FORM_CONTENT","FETCH_ANSWER_LIST","FETCH_ANSWER","POST_ANSWER_DATA","INITIALIZE_FORM","SAVE_ANSWER_DATA","DELETE_ANSWER","fetchAnswerList","fetchAnswer","postAnswerData","saveAnswerData","deleteAnswer","RECEIVE_COMMENT_DATA_SUCCESS","FETCH_SINGLE_COMMENT","FETCH__COMMENT_WITH_USER_LIST","POST_COMMENT","UPDATE_COMMENT","UPDATED_COMMENT_DATA","UPDATED_SINGLE_COMMENT_DATA","SAVE_COMMENT_DATA","DELETE_COMMENT","UPDATED_COMMENT_ARRAY","receiveCommentDataSuccess","postComment","fetchSingleComment","updatedSingleCommentData","deleteComment","saveCommentData","updatedCommentArray","Comment","commentId","currentQuestionId","questionId","isOwner","voteList","commentUser","comments","answerId","currentQuestion","editLink","commentArray","commentTranslated","comment_translations","whiteSpace","CommentList","commentList","list","filteredCommentList","translatedCommentList","i","voteState","components_Comment","CommentForm","postButton","class","ownProps","AnswerList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","qId","buttonState","answerIds","answers","answerArray","current_translate_language_id","answerIdList","handlePostComment","paddingLeft","components_CommentForm","form","onClickCommentForm","setState","_this2","filteredAnswers","answer","commentForm","getComment","answer_translations","Linkify_default","properties","components_CommentList","onClickReply","_this$props$state$ans","answerList","getAnswerList","isEmptyObject","obj","keys","QuestionView","match","parseInt","getQuestionById","questionTranslation","temp","mesasge","sprintf","country","components_AnswerForm","img","getTranslatedQuestion","answerForm","getAnswerForm","containers_AnswerList","fetchAnswers","QuestionEdit","owner","saveData","notOwnerWillTransfer","onClickDeleteBtn","conditions","CHANGE_QUESTION_LIST_LANGUAGE","FETCH_NOT_TRANSLATED","fetchNotTranslated","NotTranslated","currentTab","not_translate","contents","url","getNotTranslatedId","getNotTranslated","tabState","getNotTranslatedQuestions","getNotTranslatedAnswers","getNotTranslatedComments","newTabKey","_this3","tabData","active","onClickTab","tabContents","getCurrentTabContents","getNotTranslatedView","tabList","getTabList","AnswerEdit","getAnswerById","currentAnswer","CommentEdit","getCommentById","currentComment","QuestionTranslatinoForm","FETCH_QUESTION_TRANSLATION_LIST","FETCH_QUESTION_TRANSLATION","POST_QUESTION_TRANSLATION_DATA","UPDATED_SINGLE_QUESTION_TRANSLATION","SAVE_QUESTION_TRANSLATION_DATA","DELETE_QUESTION_TRANSLATION","fetchQuestionTranslationList","fetchQuestionTranslation","postQuestionTranslationData","updatedSingleQuestionTranslation","saveQuestionTranslationData","deleteQuestionTranslation","QuestionTranslationList","question_translation_id","answer_translation_id","commcomment_translation_id","translationList","vote_translations","questionTranslations","currentTranslationList","getTranslationList","QuestionTranslationView","Error","QuestionTranslationForm","containers_QuestionTranslationList","TranslationForm","TranslationEdit","currentTranslation","components_TranslationForm","QuestionTranslationEdit","qtId","getQuestionTranslationById","components_TranslationEdit","AnswerTranslatinoForm","FETCH_ANSWER_TRANSLATION_LIST","FETCH_ANSWER_TRANSLATION","POST_ANSWER_TRANSLATION_DATA","SAVE_ANSWER_TRANSLATION_DATA","DELETE_ANSWER_TRANSLATION","UPDATED_SINGLE_ANSWER_TRANSLATION","fetchAnswerTranslationList","fetchAnswerTranslation","postAnswerTranslationData","saveAnswerTranslationData","deleteAnswerTranslation","updatedSingleAnswerTranslation","AnswerTranslationList","aId","answerTranslations","AnswerTranslationView","AnswerTranslationForm","containers_AnswerTranslationList","AnswerTranslationEdit","atId","getAnswerTranslationById","CommentTranslatinoForm","FETCH_COMMENT_TRANSLATION_LIST","FETCH_COMMENT_TRANSLATION","POST_COMMENT_TRANSLATION_DATA","SAVE_COMMENT_TRANSLATION_DATA","DELETE_COMMENT_TRANSLATION","UPDATED_SINGLE_COMMENT_TRANSLATION","fetchCommentTranslationList","fetchCommentTranslation","postCommentTranslationData","saveCommentTranslationData","deleteCommentTranslation","updatedSingleCommentTranslation","CommentTranslationList","comment","comment_translation_id","_this$props$state$com","commentTranslations","CommentTranslationView","toQuestionViewLink","CommentTranslationForm","containers_CommentTranslationList","CommentTranslationEdit","ctId","getCommentTranslationById","MenuDrawer","top","left","bottom","right","toggleDrawer","side","open","defineProperty","actionData","logout","classes","displayName","menuDataList","text","sideList","List_default","menuData","index","ListItem_default","button","ListItemText_default","primary","Button_default","Drawer_default","anchor","onClose","tabIndex","role","onKeyDown","withStyles","fullList","Header","anchorEl","handleClose","handleLogout","onClickLogout","profileElem","MenuItem_default","uk-icon","getProfileElem","loginElem","getLoginElem","aria-owns","undefined","aria-haspopup","event","currentTarget","textTransform","Menu_default","Boolean","imagePath","displayMenuElem","menu","getMenu","maxHeight","CREATE_USER_ACCOUNT","CLICK_SUBMIT","SAVE_USER_MNEMONIC","LOGIN_USER","LOGIN_USER_JWT","LOGOUT_USER","UPDATE_USER_DATA","SAVE_USER_DATA","SAVE_USER_PASSWORD","UPDATED_USER_DATA","REMOVE_USER_DATA","LOGIN_SUCCESS","LOGIN_FAILED","GET_USER_PROFILE","GET_USER_BY_TOKEN","UPDATED_PROFILE_DATA","PREPARED_AUTH","UPDATED_PROFILE_QUESTION_DATA","UPDATED_PROFILE_ANSWER_DATA","UPDATED_PROFILE_COMMENT_DATA","UPDATED_PROFILE_TRANSLATED_DATA","SEND_RESET_PASSWORD_MAIL","RESET_PASSWORD","ACTIVATE_USER","createUserAccount","loginUserJwt","logoutUser","saveUserData","saveUserPassword","updatedUserData","removeUserData","loginSuccess","loginFailed","getUserProfile","getUserByToken","updatedProfileData","preparedAuth","updatedProfileQuestionData","updatedProfileAnswerData","updatedProfileCommentData","updatedProfileTranslatedData","sendResetPasswordMail","activateUser","App","fetchLoginState","children","isPrepared","BrowserRouter","containers_layouts_Header","lib_default","theme","ScrollToTop","prevProps","scrollTo","withRouter","CountryFormSelect","SignUpForm","mail","test","password","passwordConfirm","components_CountryFormSelect","SignUp","clickSubmit","users_SignUpForm","onClickSubmit","LoginForm","Login","users_LoginForm","PasswordResetForm","PasswordReset","users_PasswordResetForm","PasswordForm","NewPassword","token","fetchUser","users_PasswordForm","Activate","Profile","userId","fetchUserProfile","translates","translate","link","translation_link","translatedContentArray","getCommentList","translateArray","filterTranslatedContent","getTranslatedList","profile","userPostList","ProfileForm","image_url","file","files","URL","webkitURL","createObjectURL","imagePreview","image","uk-form-custom","handleImageChange","disabled","clickedSaveButton","users_ProfileForm","UserOnly","guestWillTransfer","context","router","nextProps","Route","contextTypes","PropTypes","object","isRequired","GuestOnly","userWillTransfer","replace","locales","ja","messages","_ja_JP","titles.sign_up","titles.login","titles.activate","titles.password_reset","titles.question_list","titles.answer_list","titles.post_list","titles.translation_list","titles.not_translated_list","messages.empty_answers","messages.birthplace","messages.you_are_not_target","messages.enter_mail","messages.enter_new_password","messages.activate_completed","links.to_not_translated_list","links.edit","links.question","links.answer","links.comment","links.translate","links.profile","links.profile_edit","links.sign_up","links.login","links.logout","links.password_reset","links.to_question_view","languages.japanese","languages.english","countries.japan","countries.usa","countries.SoutheastAsia","categories.all","categories.subculture","categories.culture","categories.tourism","categories.music","errors.questions.content","errors.questions.country_id","errors.questions.translate_language_id","errors.questions.category_id","errors.answers.content","errors.answers.translate_language_id","errors.translations.content","errors.translations.translate_language_id","errors.sign_ups.name","errors.sign_ups.mail","errors.sign_ups.country","errors.sign_ups.appropriate_mail","errors.sign_ups.password","errors.sign_ups.confirm_password","errors.login.mail","errors.login.appropriate_mail","errors.login.password","placeholders.sign_ups.name","placeholders.sign_ups.mail","placeholders.sign_ups.country","placeholders.sign_ups.password","placeholders.sign_ups.confirm_password","placeholders.login.mail","placeholders.login.password","placeholders.questions.content","placeholders.questions.country_id","placeholders.questions.translate_language_id","placeholders.questions.category_id","placeholders.questions.submit_btn","placeholders.answers.content","placeholders.answers.translate_language_id","placeholders.answers.submit_btn","placeholders.translations.content","placeholders.translations.translate_language_id","buttons.title.reply","buttons.title.post","buttons.title.sign_up","buttons.title.login","buttons.title.send","translated.name","translated.state","categories.comic_anime","en","_en_US","categories","all","subculture","culture","tourism","music","savedLocale","getItem","currentLocale","savedCategory","initialState","signUp","mnemonic","hash","jwt","currentCommentList","voteTranslations","reducer","combineReducers","arguments","action","_locales$action$paylo","payload","objectSpread","_categories$action$pa","_action$payload","notifications","notificationsReducer","axios","post","username","headers","Content-Type","Authorization","resetPassword","put","saveUserProfile","FormData","append","getUser","get","deleteQuestionData","delete","apiUrl","fetchAnswerListWithQuestion","deleteAnswerData","fetchCommentWithUserList","fetchCommentsList","fetchComment","fetchCommentListWithAnswer","postCommentData","deleteCommentData","fetchContentTranslation","notifySuccess","notify","position","dismissAfter","notifyError","loginUserAccount","loginUserAccountJwt","logoutUserAccount","regenerator_default","wrap","_context","prev","next","api","sent","t0","stop","_marked","_context2","_marked2","_context3","_marked3","_context4","removeItem","_marked4","_context5","_marked5","_context6","_marked6","_context7","_marked7","questionParams","questionPayload","answerParams","answerPayload","commentParams","commentPayload","translateParams","translatedContent","_context8","_marked8","_context9","_marked9","_context10","_marked10","userSagas","takeEvery","handleFetchQuestionById","postQuestion","Question_marked","Question_marked2","Question_marked3","Question_marked5","Question_marked6","questionSagas","handleFetchAnswerData","postAnswer","fetchSingleAnswerData","act","Answer_marked","reset","Answer_marked2","Answer_marked3","_action$payload2","Answer_marked4","_action$payload3","Answer_marked5","answerSagas","handleFetchQuestionTranslationList","handleFetchQuestionTranslationById","postQuestionTranslation","QuestionTranslation_marked","QuestionTranslation_marked2","QuestionTranslation_marked3","QuestionTranslation_marked4","QuestionTranslation_marked5","questionTranslationSagas","handleFetchAnswerTranslationList","handleFetchAnswerTranslationById","postAnswerTranslation","AnswerTranslation_marked","AnswerTranslation_marked2","AnswerTranslation_marked3","AnswerTranslation_marked4","AnswerTranslation_marked5","answerTranslationSagas","saveComment","Comment_marked","act2","answerSaga","Comment_marked2","Comment_marked3","Comment_marked4","commentSagas","handleFetchCommentTranslationList","handleFetchCommentTranslationById","postCommentTranslation","CommentTranslation_marked","CommentTranslation_marked2","CommentTranslation_marked3","CommentTranslation_marked4","CommentTranslation_marked5","commentTranslationSagas","fetchNotTranslatedQuestions","fetchNotTranslatedAnswers","fetchNotTranslatedComments","NotTranslatedList","NotTranslated_marked","NotTranslatedSagas","postVotes","deleteVotes","abrupt","t1","Votes_marked2","_data","Votes_marked3","voteSagas","VoteTranslation_marked","VoteTranslation_marked2","voteTranslationSagas","Notification_marked","notificationSagas","rootSaga","toConsumableArray","rootSaga_marked","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createHistory","routingMiddleware","routerMiddleware","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","thunkMiddleware","logger","run","getState","addLocaleData","library","add","fas","far","ReactDOM","es","index_es","containers_App","layouts_ScrollToTop","Switch","exact","path","onEnter","auth_UserOnly","ProfileEdit","auth_GuestOnly","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.86a4e0ff.chunk.js","sourcesContent":["import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_QUESTION_LIST = Symbol('FETCH_QUESTION_LIST');\nexport const FETCH_QUESTION = Symbol('FETCH_QUESTION');\nexport const POST_QUESTION_DATA = Symbol('POST_QUESTION_DATA');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATE_CURRENT_TRANSLATE_LANGUAGE = Symbol('UPDATE_CURRENT_TRANSLATE_LANGUAGE');\nexport const SAVE_QUESTION_DATA = Symbol('SAVE_QUESTION_DATA');\nexport const UPDATED_QUESTION_DATA = Symbol('UPDATED_QUESTION_DATA');\nexport const DELETE_QUESTION = Symbol('DELETE_QUESTION');\n\n\n//createAction(FETCH_QUESTION_LIST)はFETCH_QUESTION_LISTという名前でアクションを発火させる。\nexport const fetchQuestionList = createAction(FETCH_QUESTION_LIST);\nexport const fetchQuestion = createAction(FETCH_QUESTION);\nexport const postQuestionData = createAction(POST_QUESTION_DATA);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updateCurrentTranslateLanguage = createAction(UPDATE_CURRENT_TRANSLATE_LANGUAGE);\nexport const saveQuestionData = createAction(SAVE_QUESTION_DATA);\nexport const updatedQuestionData = createAction(UPDATED_QUESTION_DATA);\nexport const deleteQuestion = createAction(DELETE_QUESTION);\n\n","'use strict';\n\nexport const getFilteredContents = (contentList, translateLanguageId, contentType, categoryId) => {\n  const filteredContents = contentList.filter((v) => {\n    if (v.translate_language_id === translateLanguageId) {\n      return true ;\n    }\n\n    const targetTranslationsNum = v[contentType].filter((v) => {\n      return (v.translate_language_id === translateLanguageId);\n    }).length;\n    return (targetTranslationsNum !== 0);\n  });\n  return filteredContents;\n};\n\nexport const getTranslatedContents = (contentList, translateLanguageId, contentType, categoryId) => {\n  const translatedContents = contentList.map((v) => {\n    if (v.translate_language_id === translateLanguageId) {\n        v.dispText = v.content;\n        return v;\n    }\n\n    const translation = v[contentType].filter(v => {\n      return (v.translate_language_id === translateLanguageId);\n    })[0];\n\n    v.dispText = translation.content;\n    return v;\n\n  });\n\n  return translatedContents;\n};","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\n\nclass Translator extends Component {\n\n  render() {\n    const { user } = this.props;\n    const { name, image_path, profile_link } = user;\n    const { formatMessage } = this.props.intl;\n    const msg = formatMessage({id: \"translated.name\"});\n\n    return (\n      <div className=\"uk-text-right\">\n        <div className=\"uk-comment-meta uk-display-inline-block\" style={{padding: '0 10px'}}>{ msg }</div>\n        <div className=\"uk-display-inline-block\">\n          <Link to={profile_link}>\n            <img className=\"uk-comment-avatar uk-border-circle uk-text-right\" src={image_path} width=\"35\" height=\"35\" alt={name} />\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(Translator);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const POST_VOTE = Symbol('POST_VOTE');\nexport const DELETE_VOTE = Symbol('DELETE_VOTE');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\n\n//createAction(FETCH_QUESTION_LIST)はFETCH_QUESTION_LISTという名前でアクションを発火させる。\nexport const postVote = createAction(POST_VOTE);\nexport const deleteVote = createAction(DELETE_VOTE);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass PostUser extends Component {\n  \n    selectedNationalFlag(countryId) {\n        let src;\n        switch(countryId) {\n            case 1:\n            src = \"japan\";\n            break;\n            case 2:\n            src = \"america\";\n            break;\n            default :\n            src = \"japan\";\n            break;\n        }\n        return <img className=\"\" src={`/image/common/flag/${src}.png`} style={{border: \"1px solid #dcdcdc\"}} width=\"20\" height=\"20\" alt=\"\"/>;\n    }\n\n    render() {\n        const { user } = this.props;\n        const nationalFlag = this.selectedNationalFlag(user.country_id);\n        const userName = user ? user.name : '不明なユーザー';\n        const profileLink = `/users/profile/${user.id}`;\n\n        return (\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n                <div className=\"uk-width-auto\">\n                    <Link to={profileLink}><img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"43\" height=\"43\" alt=\"\" /></Link>\n                </div>\n                <div>\n                <div className=\"uk-width-auto\" >\n                    { nationalFlag }\n                </div>\n                    <div>\n                        <h4 className=\"uk-comment-meta uk-margin-remove\"><Link className=\"\" to={profileLink}>{ userName }</Link></h4>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PostUser;","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { getFilteredContents, getTranslatedContents } from '../utils/Translations';\nimport { injectIntl } from 'react-intl';\nimport { sprintf } from 'sprintf-js';\nimport Translator from './Translator';\n//componentの中でdispatchするための設定\nimport { connect } from 'react-redux';\n//評価するための関数\nimport { postVote, deleteVote } from '../actions/Vote';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport PostUser from './PostUser';\n\nclass QuestionListView extends Component {\n\n  sendVote(question) {\n    if (this.props.user.id == null) {\n      return;\n    }\n    const params = {\n      user_id: this.props.user.id,\n      question_id: question.id,\n      answer_id: null,\n      comment_id: null,\n      status: 1,\n      country_id: question.country_id,\n    };\n    const key = \"questionList\";\n    const data = { params,  key };\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(question) {\n    if (this.props.user.id == null) {\n      return;\n    }\n    const params = {\n      user_id: this.props.user.id,\n      key : \"question\",\n      //他のコンテンツと共通化するためvote_idというkeyにする\n      vote_id: question.id,\n      country_id: question.country_id,\n    };\n    const key = \"questionList\";\n    const data = { params,  key };\n    return this.props.handleDeleteVote(data);\n  }\n\n  getQuestionList(questionArray, translateLanguageId, categoryId) {\n    const contentType = 'question_translations';\n    const filteredQuestions = getFilteredContents(questionArray, translateLanguageId, contentType, categoryId);\n    const translatedQuestions = getTranslatedContents(filteredQuestions, translateLanguageId, contentType, categoryId);\n\n    return translatedQuestions.map(question => {\n      const { user } = question;\n      const { formatMessage } = this.props.intl\n\n      const { votes } = question;\n      const myVotes = votes.filter(v => {return v.user_id === this.props.user.id});\n      const voteState = myVotes.length !== 0;\n      const votebutton = voteState\n                       ? <a onClick={this.deleteVote.bind(this, question)}><FontAwesomeIcon icon=\"heart\" color=\"red\" size=\"lg\"/></a>\n                       : <a onClick={this.sendVote.bind(this, question)}><FontAwesomeIcon icon={['far','heart']} color=\"gray\" size=\"lg\"/></a>;\n\n      const voteNumbers = <span className=\"uk-text-default\">{ votes.length }</span>;\n\n      const { question_translations } = question;\n      let translator;\n      translator = (\n        <h4 className=\"uk-comment-meta uk-text-right\">\n          { formatMessage({id: \"translated.state\" })}\n        </h4>\n      );\n      if (question_translations.length !== 0) {\n        const { user } = question_translations[0];\n        translator = <Translator user={user} />;\n      }\n\n      return (\n        <li key={question.id} >\n          <p>\n            <span className=\"uk-text-muted\">{ formatMessage({id: question.category.intl_key })}</span>\n            <span className=\"uk-text-meta uk-margin-small-left\">{dayjs(question.created_at).format('YYYY/MM/DD HH:mm:ss')}</span>\n          </p>\n          <p className=\"uk-text-lead uk-text-truncate\" ><Link to={`/questions/${question.id}`}>{`${question.dispText}`}</Link></p>\n          <div className=\"button-area uk-margin-bottom\" >\n            <span>\n              { votebutton }\n              { voteNumbers }\n            </span>\n            <Link to={`/question_translations/${question.id}`} className=\"uk-margin-small-left\" >\n              <FontAwesomeIcon icon=\"globe-americas\" color=\"steelblue\" size=\"lg\"/>\n            </Link>\n          </div>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div>\n              <PostUser user={user} />\n            </div>\n            <div className=\"uk-width-expand\" >\n              { translator }\n            </div>\n          </div>\n        </li>\n      )\n    });\n  }\n\n  getQuestionListView(questionArray, translateLanguageId, categoryId) {\n    const questionList = this.getQuestionList(questionArray, translateLanguageId, categoryId);\n\n    return (\n      <div>\n        <ul className=\"uk-list uk-list-divider uk-list-large\">\n          {questionList}\n        </ul>\n      </div>\n    );\n  }\n\n  render() {\n    const { questionArray, translateLanguageId, categoryId } = this.props;\n    const content = this.getQuestionListView(questionArray, translateLanguageId, categoryId);\n\n    return (\n      <div>\n        {content}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  const { categoryId } = state.ctgr;\n  const { intl } = state;\n\n  return {\n    user,\n    categoryId,\n    intl\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    //評価機能\n    handlePostVote: (data) => dispatch(postVote(data)),\n    handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(QuestionListView));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport QuestionListView from './QuestionListView';\n\nclass QuestionList extends Component {\n\n  componentDidMount() {\n    const { questionArray } = this.props.state.questions;\n    const categoryId = this.props.state.ctgr.categoryId;\n\n    if (questionArray.length !== 0) {\n      return;\n    }\n\n    let params \n    params = {};\n    if (categoryId !== 0){\n      params = { category_id: categoryId };\n    }\n    this.props.handleFetchData(params);\n  }\n\n  render() {\n    const { isFetching, questionArray } = this.props.state.questions;\n    const { translateLanguageId } = this.props.state.intl;\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    return (\n      <QuestionListView questionArray={questionArray} translateLanguageId={translateLanguageId} loginUser={this.props.state.auth.user.id}/>\n    );\n  }\n}\n\nexport default QuestionList;\n","import { connect } from 'react-redux';\nimport { fetchQuestionList } from '../actions/Question';\nimport QuestionList from '../components/QuestionList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (queryData) => dispatch(fetchQuestionList(queryData)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionList);\n","import React, { Component } from 'react';\nimport { Field } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass LanguageFormSelect extends Component {\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { name, placeholder } =  this.props;\n\n    return (\n      <Field name={name} component=\"select\" className={'form-control uk-select'}>\n        <option value=\"\">{placeholder}</option>\n        <option value=\"1\" >{ formatMessage({id: \"languages.japanese\" })}</option>\n        <option value=\"2\" >{ formatMessage({id: \"languages.english\" })}</option>\n      </Field>\n    );\n  }\n}\n\nexport default injectIntl(LanguageFormSelect);\n","import React, { Component } from 'react';\nimport { Field } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass CategoryFormSelect extends Component {\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { name, placeholder } =  this.props;\n    \n    return (\n      <Field name={name} component=\"select\" className={'form-control uk-select'}>\n        <option value=\"\">{placeholder}</option>\n        <option value=\"1\" >{ formatMessage({id: \"categories.subculture\" })}</option>\n        <option value=\"2\" >{ formatMessage({id: \"categories.culture\" })}</option>\n        <option value=\"3\" >{ formatMessage({id: \"categories.tourism\" })}</option>\n        <option value=\"4\" >{ formatMessage({id: \"categories.music\" })}</option>\n      </Field>\n    );\n  }\n}\n\nexport default injectIntl(CategoryFormSelect);\n","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport CategoryFormSelect from './CategoryFormSelect';\nimport { injectIntl } from 'react-intl';\nimport { Persist } from 'formik-persist';\n\nclass QuestionForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      // errors.content = formatMessage({id: \"errors.questions.content\"});\n      errors.content = \"errors.questions.content\";\n    }\n    if (!values.country_id) {\n      // errors.country_id = formatMessage({id: \"errors.questions.country_id\"});\n      errors.country_id  = \"errors.questions.country_id\";\n    }\n    if (!values.translate_language_id) {\n      // errors.translate_language_id = formatMessage({id: \"errors.questions.translate_language_id\"});\n      errors.translate_language_id = \"errors.questions.translate_language_id\";\n    }\n    if (!values.category_id) {\n      // errors.category_id = formatMessage({id: \"errors.questions.category_id\"});\n      errors.category_id = \"errors.questions.category_id\";\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues } = this.props;\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: 'placeholders.questions.content'})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n                {touched.content && errors.content && <div className=\"uk-text-warning\">{ formatMessage({id: errors.content}) }</div>}\n                {/* {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>} */}\n                <Persist name=\"question-form\"/>\n              </div>\n              <div className=\"uk-margin uk-grid uk-grid-small uk-child-width-expand@s\" >\n                <div className=\"uk-grid-margin\" >\n                  <Field name=\"country_id\" component=\"select\" className={'form-control uk-select'}>\n                    <option value=\"\">{formatMessage({id: \"placeholders.questions.country_id\"})}</option>\n                    <option value=\"1\" >{ formatMessage({id: \"countries.japan\" })}</option>\n                    <option value=\"2\" >{ formatMessage({id: \"countries.usa\" })}</option>\n                  </Field>\n                  {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{ formatMessage({id: errors.country_id}) }</div>}\n                  {/* {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{errors.country_id}</div>} */}\n                </div>\n                <div className=\"uk-grid-margin\" >\n                  <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.questions.translate_language_id\"})} />\n                  {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{ formatMessage({id: errors.translate_language_id}) }</div>}\n                  {/* {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>} */}\n                </div>\n                {/* カテゴリー指定 */}\n                <div className=\"uk-grid-margin\" >\n                  <CategoryFormSelect name=\"category_id\" placeholder={formatMessage({id: \"placeholders.questions.category_id\"})} />\n                  {touched.category_id && errors.category_id && <div className=\"uk-text-warning\">{ formatMessage({id: errors.category_id}) }</div>}\n                  {/* {touched.category_id && errors.category_id && <div className=\"uk-text-warning\">{errors.category_id}</div>} */}\n                </div>\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-default\" >{formatMessage({id: \"placeholders.questions.submit_btn\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(QuestionForm);","import React from 'react';\nimport QuestionList from '../containers/QuestionList';\nimport QuestionForm from './QuestionForm';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\n\nclass Home extends React.Component {\n\n  submitQuestionForm(formData) {\n    try {\n      const { user, isLoggedIn } = this.props.state.auth;\n      console.log(\"this.props\",this.props);\n      if (!isLoggedIn) {\n        const { history } = this.props;\n        this.props.alertMessage(\"ログインしてください。\");\n        return history.push(\"/users/login\");\n      }\n      const { content, translate_language_id, country_id, category_id } = formData;\n      const user_id = user.id;\n      const postData = { content, user_id, translate_language_id, country_id, category_id };\n      return this.props.handleSubmit(postData);\n    } catch (e) {\n      console.log('e.message', e.message);\n      return;\n    }\n  }\n\n  selectedCategory(value) {\n    switch(value) {\n      case \"all\" :\n        return 0;\n      case \"subculture\":\n        return 1;\n      case \"culture\":\n        return 2;\n      case \"tourism\":\n        return 3;\n      case \"music\":\n        return 4;\n      default:\n        return 0;\n    }\n  }\n\n  onChangeLanguage(locale, e) {\n    e.preventDefault();\n    e.stopPropagation();\n    localStorage.setItem('locale', locale);\n    // かなり不適切な書き方だが一旦ここでリダイレクトさせるようにしておく\n    window.location.href = '/';\n    return;\n  }\n\n  changeCateogryfunction(value) {\n     this.props.changeCategory(value);\n     const categoryId = this.selectedCategory(value);\n     let params;\n     params = {};\n     if (categoryId !== 0) {\n       params = { category_id: categoryId };\n     }\n     this.props.handleFetchData(params);\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { locale, translateLanguageId } = this.props.state.intl;\n    const { category } = this.props.state.ctgr;\n    const { auth } = this.props.state;\n    const questionFormInitVals = {\n      content: '',\n      country_id: '',\n      translate_language_id: '',\n      category_id: ''\n    };\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-width-auto uk-margin-bottom uk-text-right\" >\n          {/* <select className=\"uk-select\" value={locale} onChange={this.onChangeLanguage.bind(this)} >\n              <option value=\"ja\" >{ formatMessage({id: \"languages.japanese\" })}</option>\n              <option value=\"en\" >{ formatMessage({id: \"languages.english\" })}</option>\n              </select> */}\n          <span>\n            <a href=\"/\" onClick={this.onChangeLanguage.bind(this, 'ja')} >\n              { formatMessage({id: \"languages.japanese\" })}\n            </a>\n          </span>\n          <span className=\"uk-margin-small-left\">\n            <a href=\"/\" onClick={this.onChangeLanguage.bind(this, 'en')} >\n              { formatMessage({id: \"languages.english\" })}\n            </a>\n          </span>\n        </div>\n        <QuestionForm initialValues={questionFormInitVals} loginUser={auth} onSubmit={this.submitQuestionForm.bind(this)} />\n        {/* 言語切り替え */}\n        <h3 className=\"uk-heading-line\"><span>{ formatMessage({id: \"titles.question_list\" })}</span></h3>\n        {/* カテゴリー切り替え */}\n        <div className=\"uk-margin\">\n          <select className=\"uk-select\" value={category} onChange={e => this.changeCateogryfunction( e.target.value )} >\n            <option value=\"all\" >{ formatMessage({id: \"categories.all\" })}</option>\n            <option value=\"subculture\" >{ formatMessage({id: \"categories.subculture\" })}</option>\n            <option value=\"culture\" >{ formatMessage({id: \"categories.culture\" })}</option>\n            <option value=\"tourism\" >{ formatMessage({id: \"categories.tourism\" })}</option>\n            <option value=\"music\" >{ formatMessage({id: \"categories.music\" })}</option>\n          </select>\n        </div>\n        <QuestionList translate_language_id={translateLanguageId}/>\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(Home);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const UPDATE_CURRENT_LANGUAGE = Symbol('UPDATE_CURRENT_LANGUAGE');\n\n\nexport const updateCurrentLanguage = createAction(UPDATE_CURRENT_LANGUAGE);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const UPDATE_CURRENT_CATEGORY = Symbol('UPDATE_CURRENT_CATEGORY');\nexport const updateCurrentCategory = createAction(UPDATE_CURRENT_CATEGORY);","import { createAction } from 'redux-actions';\n\nexport const ACTION_ALERT_MESSAGE = Symbol('ACTION_ALERT_MESSAGE');\n\nexport const actionAlertMessage = createAction(ACTION_ALERT_MESSAGE);\n\n","import { connect } from 'react-redux';\nimport Home from '../components/Home';\nimport {\n  postQuestionData,\n  fetchQuestionList\n} from '../actions/Question';\nimport {\n  updateCurrentLanguage,\n} from '../actions/Intl';\nimport {\n  updateCurrentCategory,\n} from '../actions/Category';\nimport {\n  actionAlertMessage,\n} from '../actions/Notification';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleSubmit: (postData) => dispatch(postQuestionData(postData)),\n    changeLanguage: (locale) => dispatch(updateCurrentLanguage(locale)),\n    changeCategory: (category) => dispatch(updateCurrentCategory(category)),\n    handleFetchData: (queryData) => dispatch(fetchQuestionList(queryData)),\n    alertMessage: (message) => dispatch(actionAlertMessage(message)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\n//<AnswerForm qId={this.qId} initialValues={answerFormInitVals} onSubmit={this.handleSubmit.bind(this)} />\n//この中のqId={this.qId} initialValues={answerFormInitVals} onSubmit={this.handleSubmit.bind(this)は\n//props（プロパティーの中に)入る。props.qIdという形式で値を取り出すことができる。\n\nclass AnswerForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.answers.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.answers.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues } = this.props;\n    const { formatMessage } = this.props.intl;\n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: 'placeholders.answers.content'})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n                {touched.content && errors.content && <div className=\"uk-text-warning\" >{errors.content}</div>}\n              </div>\n              <div className=\"uk-grid-margin\" >\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: 'placeholders.answers.translate_language_id'})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\" >{errors.translate_language_id}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"placeholders.answers.submit_btn\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(AnswerForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const CHANGE_ANSWER_FORM_CONTENT = Symbol('CHANGE_ANSWER_FORM_CONTENT');\nexport const FETCH_ANSWER_LIST = Symbol('FETCH_ANSWER_LIST');\nexport const FETCH_ANSWER = Symbol('FETCH_ANSWER');\nexport const POST_ANSWER_DATA = Symbol('POST_ANSWER_DATA');\nexport const INITIALIZE_FORM = Symbol('INITIALIZE_FORM');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const SAVE_ANSWER_DATA = Symbol('SAVE_ANSWER_DATA');\nexport const DELETE_ANSWER = Symbol('DELETE_ANSWER');\n\nexport const changeAnswerFormContent = createAction(CHANGE_ANSWER_FORM_CONTENT);\nexport const fetchAnswerList = createAction(FETCH_ANSWER_LIST);\nexport const fetchAnswer = createAction(FETCH_ANSWER);\nexport const postAnswerData = createAction(POST_ANSWER_DATA);\nexport const initializeForm = createAction(INITIALIZE_FORM);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const saveAnswerData = createAction(SAVE_ANSWER_DATA);\nexport const deleteAnswer = createAction(DELETE_ANSWER);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_COMMENT_DATA_SUCCESS = Symbol('RECEIVE_COMMENT_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const FETCH_SINGLE_COMMENT = Symbol('FETCH_SINGLE_COMMENT');\nexport const FETCH__COMMENT_WITH_USER_LIST = Symbol('FETCH__COMMENT_WITH_USER_LIST');\nexport const POST_COMMENT = Symbol('POST_COMMENT');\nexport const UPDATE_COMMENT = Symbol('UPDATE_COMMENT');\nexport const UPDATED_COMMENT_DATA = Symbol('UPDATED_COMMENT_DATA');\nexport const UPDATED_SINGLE_COMMENT_DATA = Symbol('UPDATED_SINGLE_COMMENT_DATA');\nexport const SAVE_COMMENT_DATA = Symbol('SAVE_COMMENT_DATA');\nexport const DELETE_COMMENT = Symbol('DELETE_COMMENT');\nexport const UPDATED_COMMENT_ARRAY = Symbol('UPDATED_COMMENT_ARRAY');\n\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveCommentDataSuccess = createAction(RECEIVE_COMMENT_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const postComment = createAction(POST_COMMENT);\nexport const fetchSingleComment = createAction(FETCH_SINGLE_COMMENT);\nexport const fetchCommentWithUserList = createAction(FETCH__COMMENT_WITH_USER_LIST);\nexport const updateComment = createAction(UPDATE_COMMENT);\nexport const updatedCommentData = createAction(UPDATED_COMMENT_DATA);\nexport const updatedSingleCommentData = createAction(UPDATED_SINGLE_COMMENT_DATA);\nexport const deleteComment = createAction(DELETE_COMMENT);\nexport const saveCommentData = createAction(SAVE_COMMENT_DATA);\nexport const updatedCommentArray = createAction(UPDATED_COMMENT_ARRAY);\n\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\n//componentの中でdispatchするための設定\nimport { connect } from 'react-redux';\n//評価するための関数\nimport { postVote, deleteVote } from '../actions/Vote';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { sprintf } from 'sprintf-js';\nimport { injectIntl } from 'react-intl';\nimport Translator from './Translator';\nimport PostUser from './PostUser';\n\nclass Comment extends Component {\n\n  sendVote(commentId, currentQuestionId){\n    if(this.props.user.id == null ){\n      return;\n    }\n    const params = {\n      user_id: this.props.user.id,\n      question_id: null,\n      answer_id: null,\n      comment_id: commentId,\n      status: 1,\n      //再レンダリングするためのquestion_id\n      questionId: currentQuestionId,\n    };\n    const key = \"comment\";\n    const data = { params, key };\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(commentId, currentQuestionId) {\n    if(this.props.user.id == null ){\n      return;\n    }\n    const params = {\n      user_id: this.props.user.id,\n      key : \"comment\",\n      //他のコンテンツと共通化するためvote_idというkeyにする\n      vote_id: commentId,\n      //再レンダリングするためのquestion_id\n      questionId: currentQuestionId,\n    };\n    const key = \"comment\";\n    const data = { params,  key };\n    return this.props.handleDeleteVote(data);\n  }\n\n  render() {\n    const { id, user, content, isOwner, voteList, questions, commentUser, comments, answerId, intl} = this.props;\n    const currentQuestionId = questions.currentQuestion.id;\n    const editLink = isOwner\n                   ? <Link to={`/comments/edit/${id}`}><FontAwesomeIcon className=\"uk-margin-small-right\" icon=\"edit\" color=\"steelblue\" size=\"lg\"/></Link>\n                   : '';   \n    const myVotes = voteList.filter(v => {return v.user_id === user.id});\n    const voteState = myVotes.length !== 0;\n    const votebutton = voteState\n                     ? <a onClick={this.deleteVote.bind(this, id, currentQuestionId)}><FontAwesomeIcon icon=\"heart\" color=\"red\" size=\"lg\"/></a>\n                     : <a onClick={this.sendVote.bind(this, id, currentQuestionId)}><FontAwesomeIcon icon={['far','heart']} color=\"gray\" size=\"lg\"/></a>;\n    const voteNumbers = <span className=\"uk-margin-small-right uk-text-default\">{ voteList.length }</span>;\n    const { formatMessage } = intl;\n    const { commentArray } = comments;\n\n    let translator;\n    translator = <h4 className=\"uk-comment-meta uk-text-right\">{formatMessage({id: 'translated.state'})}</h4>;\n    if(typeof commentArray !== 'undefined'){\n      const thisAnswerCommentList = commentArray[answerId] ;\n      const thisCommentData = thisAnswerCommentList.filter(v => v.id === id);\n      const commentTranslated = thisCommentData[0].comment_translations;\n      if (commentTranslated.length !== 0) {\n        const { user } = commentTranslated[0];\n        translator = <Translator user={user} />;\n      }\n    }\n\n    return (\n      <article className=\"uk-comment uk-comment-primary\">\n        <div className=\"uk-comment-header uk-comment-body\">\n          <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n            {content}\n            <br/>\n            <br/>\n            { votebutton }\n            { voteNumbers }\n            <Link className=\"uk-margin-small-right\" to={`/comment_translations/${id}`}><FontAwesomeIcon icon=\"globe-americas\" color=\"steelblue\" size=\"lg\"/></Link>\n            { editLink }\n          </p>\n        </div>\n        <div className=\"uk-grid uk-grid-small uk-flex-middle\">\n          <div>\n            <PostUser user={ commentUser } />\n          </div>\n          <div className=\"uk-width-expand\" >\n            { translator }\n          </div>\n        </div>\n      </article>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { questions, comments } = state;\n  const { user } = state.auth;\n  const { intl } = state;\n  return {\n    user,\n    questions,\n    comments,\n    intl,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    //評価機能\n    handlePostVote: (data, questionId) => dispatch(postVote(data, questionId)),\n    handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(Comment))\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Comment from './Comment';\nimport { getFilteredContents, getTranslatedContents } from '../utils/Translations';\n\n\nclass CommentList extends Component {\n\n  render() {\n    const { loginUser, translateLanguageId } = this.props;\n    const commentList = this.props.list ? this.props.list : [];\n    const contentType = 'comment_translations';\n    const filteredCommentList = getFilteredContents(commentList, translateLanguageId, contentType);\n    const translatedCommentList = getTranslatedContents(filteredCommentList, translateLanguageId, contentType);\n\n    return (\n      <ul className=\"uk-comment-list\" >\n        { translatedCommentList.map((v, i) => {\n            const isOwner = loginUser.id === v.user.id;\n            const voteState = v.votes;\n\n            return (\n              <li className=\"uk-margin-small-top\" key={i} >\n                <Comment id={v.id} answerId={v.answer_id} commentUser={v.user} content={v.dispText} isOwner={isOwner} voteList={ voteState } />\n              </li>\n            );\n        })}\n      </ul>\n    );\n  }\n}\n\nexport default CommentList;\n","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { Persist } from 'formik-persist';\n\nclass CommentForm extends Component {\n\n  validate(values) {\n    let errors = {};\n    if (!values.content) {\n      errors.content = 'コメントが空欄です';\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = '投稿言語を指定してください';\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues, state } = this.props;\n    const postButton = state.auth.isLoggedIn\n                     ? <div className=\"uk-margin\"><button className=\"uk-button uk-button-default\" >投稿</button></div>\n                     : <a class=\"uk-button uk-button-default\" href='/users/login'>投稿</a>;\n                     \n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        // validate={this.validate.bind(this)}\n\n        validate={this.validate}\n        onSubmit={(values, { setSubmitting, setErrors }) => {\n            return this.props.onSubmit(values);\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder=\"コメントを入力してください\"\n                     rows=\"3\"\n                     className={'form-control uk-textarea'}\n                />\n                <Persist name={`\"comment-form\"${values.answer_id}`}/>\n                {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder=\"投稿言語\" />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n              </div>\n              {postButton}\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    state\n  };\n};\n\nexport default connect(mapStateToProps)(CommentForm);\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport Linkify from 'react-linkify';\nimport CommentList from './CommentList';\nimport CommentForm from './CommentForm';\nimport dayjs from 'dayjs';\nimport { getFilteredContents, getTranslatedContents } from '../utils/Translations';\nimport { injectIntl } from 'react-intl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { sprintf } from 'sprintf-js';\nimport Translator from './Translator';\nimport PostUser from './PostUser';\n\nclass AnswerList extends Component {\n  constructor(props) {\n    super(props);\n    this.qId = this.props.qId;\n    //ここからはコメント機能を実装するところ\n    this.state = {\n      buttonState: {},//空のオブジェクト\n      voteState: {},//評価のための\n    };\n  }\n\n  componentWillMount() {\n    const question_id = this.props.qId;\n    /* const translate_language_id = this.props.translateLanguageId;*/\n    this.props.handleFetchData({ question_id });\n  }\n\n  onClickCommentForm(formData) {\n    const { user } = this.props.state.auth;\n    const { answer_id, translate_language_id, content } = formData;\n    const answerIds = this.props.state.answers.answerArray.map((v) =>{ return v.id })\n    const postData = {\n      user_id: user.id,\n      answer_id,\n      translate_language_id,\n      content,\n      question_id: this.qId,\n      current_translate_language_id: this.translateLanguageId,\n      //翻訳済みコメントのリストを取得するためのAnswer_idリスト\n      answerIdList: answerIds,\n    };\n    return this.props.handlePostComment(postData);\n  }\n\n  getComment(answerId) {\n\n    const { buttonState } = this.state;\n\n    if (buttonState[answerId] !== \"open\") {\n      return \"\";\n    }\n\n    const initialValues = {\n      answer_id: answerId,\n      content: \"\",\n      translate_language_id: \"\",\n    };\n    return (\n      <div className=\"uk-margin-bottom\" style={{\"paddingLeft\": \"30px\"}} >\n        {/*commentFormはコメントを投稿する場所*/}\n        <CommentForm form={`commentForm_${answerId}`} onSubmit={this.onClickCommentForm.bind(this)} initialValues={initialValues} />\n      </div>\n    );\n  }\n\n  onClickReply(answerId) {\n    //値がtrueかfalseか値を取得\n    let { buttonState } = this.state;\n\n    if (buttonState[answerId] && buttonState[answerId] === \"open\") {\n      buttonState[answerId] = \"close\";\n      this.setState({buttonState});\n      return\n    } else {\n      buttonState[answerId] = \"open\";\n      this.setState({buttonState});\n      return\n    }\n  }\n\n  sendVote(answerId, currentQuestionId){\n    if(this.props.state.auth.user.id == null ){\n      return;\n    }\n    const params = {\n      user_id: this.props.state.auth.user.id,\n      question_id: null,\n      answer_id: answerId,\n      comment_id: null,\n      status: 1,\n      //再レンダリングするためのquestion_id\n      questionId: currentQuestionId,\n    };\n    const key = \"answer\";\n    const data = { params, key };\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(answerId, currentQuestionId) {\n    if(this.props.state.auth.user.id == null ){\n      return;\n    }\n    const params = {\n      user_id: this.props.state.auth.user.id,\n      key : \"answer\",\n      //他のコンテンツと共通化するためvote_idというkeyにする\n      vote_id: answerId,\n      //再レンダリングするためのquestion_id\n      questionId: currentQuestionId,\n    };\n    const key = \"answer\";\n    const data = { params, key };\n    return this.props.handleDeleteVote(data);\n  }\n\n\n  getAnswerList(answerArray, translateLanguageId) {\n    const { formatMessage } = this.props.intl;\n    const loginUser = this.props.state.auth.user;\n\n    const contentType = 'answer_translations';\n    const filteredAnswers = getFilteredContents(answerArray, translateLanguageId, contentType);\n    const translatedAnswers = getTranslatedContents(filteredAnswers, translateLanguageId, contentType);\n\n    return translatedAnswers.map(answer => {\n      const editLink = answer.user.id === loginUser.id\n                     ? <Link className=\"uk-margin-small-right\" to={`/answers/edit/${answer.id}`}><FontAwesomeIcon icon=\"edit\" color=\"steelblue\" size=\"lg\"/></Link>\n                     : '';\n\n      const myVotes = answer.votes.filter(v => {return v.user_id === loginUser.id});\n      const voteState = myVotes.length !== 0;\n      const votebutton = voteState\n                       ? <a onClick={this.deleteVote.bind(this,  answer.id, this.props.qId)}><FontAwesomeIcon icon=\"heart\" color=\"red\" size=\"lg\"/></a>\n                       : <a onClick={this.sendVote.bind(this,  answer.id, this.props.qId)}><FontAwesomeIcon icon={['far','heart']} color=\"gray\" size=\"lg\"/></a>;\n      const voteNumbers = <span className=\"uk-margin-small-right uk-text-default\">{ answer.votes.length }</span>;\n      const commentForm = this.getComment(answer.id);\n\n      const { answer_translations } = answer;\n\n      let translator;\n      translator = <h4 className=\"uk-comment-meta uk-text-right\">{formatMessage({id: 'translated.state'})}</h4>;\n      if (answer_translations.length !== 0) {\n        const { user } = answer_translations[0];\n        translator = <Translator user={user} />;\n      }\n\n      return (\n        <li key={answer.id} >\n          <article className=\"uk-comment\">\n            <div className=\"uk-comment-header uk-comment-body\">\n              <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n                <Linkify properties={{ target: '_blank'}} >{answer.dispText}</Linkify>\n                <br/>\n                <br/>\n                { votebutton }\n                { voteNumbers }\n                <Link className=\"uk-margin-small-right\" to={`/answer_translations/${answer.id}`}><FontAwesomeIcon icon=\"globe-americas\" color=\"steelblue\" size=\"lg\"/></Link>\n                { editLink }\n\n              </p>\n              <p className=\"uk-text-meta\">{dayjs(answer.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n\n            </div>\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n              <div>\n                <PostUser user={ answer.user } />\n              </div>\n              <div className=\"uk-width-expand\" >\n                { translator }\n              </div>\n            </div>\n          </article>\n          <hr className=\"uk-divider-small\" />\n          <div className=\"uk-margin-bottom\" >\n            {/*CommentListはすでに投稿されたコメントの一覧を表示する*/}\n            <CommentList list={answer.comments} loginUser={loginUser} translateLanguageId={translateLanguageId} />\n            <div className=\"uk-text-right uk-margin-top\">\n              <p onClick={this.onClickReply.bind(this,answer.id)}><FontAwesomeIcon icon={['far','comment-dots']} color=\"black\" size=\"3x\"/></p>\n            </div>\n          </div>\n\n          {commentForm}\n\n        </li>\n      );\n    });\n  }\n\n  render() {\n    const { isFetching, answerArray } = this.props.state.answers;\n    const { formatMessage } = this.props.intl;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const { translateLanguageId } = this.props;\n    const answerList = this.getAnswerList(answerArray, translateLanguageId);\n\n    if (answerList.length === 0) {\n      return (\n        <div>\n          <h4 className=\"uk-text-success\">{formatMessage({id: \"messages.empty_answers\"})}</h4>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <ul className=\"uk-list uk-list-divider uk-list-large\" >\n          { answerList }\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(AnswerList);\n","import { connect } from 'react-redux';\nimport { fetchAnswerList } from '../actions/Answer';\nimport { postComment } from '../actions/Comment';\nimport AnswerList from '../components/AnswerList';\n//評価するための関数\nimport { postVote, deleteVote } from '../actions/Vote';\n\n\n\n//this.propsを取得する\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (data) => dispatch(fetchAnswerList(data)),\n        handlePostComment: (data) => dispatch(postComment(data)),\n        //評価機能\n        handlePostVote: (data) => dispatch(postVote(data)),\n        //評価の削除機能\n        handleDeleteVote: (data) => dispatch(deleteVote(data)),\n    };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerList);\n","'use strict';\n\nexport function isEmptyObject(obj) {\n  return !Object.keys(obj).length;\n}\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport Linkify from 'react-linkify';\nimport AnswerForm from './AnswerForm';\nimport AnswerList from '../containers/AnswerList';\nimport dayjs from 'dayjs';\nimport { sprintf } from 'sprintf-js';\nimport { injectIntl } from 'react-intl';\nimport { isEmptyObject } from '../utils';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Translator from './Translator';\nimport PostUser from './PostUser';\n\nclass QuestionView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.qId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getQuestionById(this.qId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      //authの中にあるuserキーに対応するvalueを取り出す。という意味\n      const { user } = this.props.state.auth;\n      //formDataの中のcontent,translate_langugase_idを取り出す\n      const { content, translate_language_id } = formData;\n      const question_id = this.qId;\n      const user_id = user.id;\n      /* const { translate_language_id } = currentQuestion;*/\n      return this.props.handleSubmit({content, question_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  getTranslatedQuestion(question, translateLanguageId) {\n    if (question.translate_language_id === translateLanguageId) {\n      question.dispText = question.content;\n      return question;\n    }\n    const questionTranslation = question.question_translations.filter(question => {\n      //「DBに保存されている言語id」と「画面に表示されている言語」が一致している要素だけを取得する。[0]とすることで最初にフィルタリングされたものを取り出す。\n      return (question.translate_language_id === translateLanguageId);\n    })[0];\n\n    //questionの中に新たなdispTextというプロパティを生成する\n    question.dispText = questionTranslation.content;\n    return question;\n  }\n\n  sendVote(question){\n    if (this.props.state.auth.user.id == null) {\n      return;\n    }\n    const params = {\n      user_id: this.props.state.auth.user.id,\n      question_id: question.id,\n      answer_id: null,\n      comment_id: null,\n      status: 1,\n    };\n    const key = \"questionView\";\n    const data = { params,  key };\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(question) {\n    if (this.props.state.auth.user.id == null) {\n      return;\n    }\n    const params = {\n      user_id: this.props.state.auth.user.id,\n      key : \"question\",\n      //他のコンテンツと共通化するためvote_idというkeyにする\n      vote_id: question.id,\n    };\n    const key = \"questionView\";\n    const data = { params,  key };\n    return this.props.handleDeleteVote(data);\n  }\n\n  getAnswerForm(currentQuestion, loginUser) {\n    const { formatMessage } = this.props.intl;\n    if (currentQuestion.country_id !== loginUser.country_id) {\n      const temp = formatMessage({id: \"messages.you_are_not_target\"})\n      const mesasge = sprintf(temp, currentQuestion.country.name);\n      return (\n        <div>\n          <p className=\"uk-text-meta\">{mesasge}</p>\n        </div>\n\n      );\n    }\n\n    const answerFormInitVals = { content: '', translate_language_id: '' };\n    return (\n      <AnswerForm qId={this.qId} initialValues={answerFormInitVals} onSubmit={this.handleSubmit.bind(this)}/>\n    );\n  }\n\n\n  getTranslateUser(img) {\n    const { formatMessage } = this.props.intl;\n    const msg = formatMessage({id: \"translated.name\"});\n\n    return (\n      <div className=\"uk-text-right\">\n        <div className=\"uk-comment-meta uk-display-inline-block\" style={{padding: '0 10px'}}>{ msg }</div>\n        <div className=\"uk-display-inline-block\">\n          <img className=\"uk-comment-avatar uk-border-circle uk-text-right\" src={img} width=\"35\" height=\"35\" alt=\"\" />\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { currentQuestion } = this.props.state.questions;\n    const { translateLanguageId } = this.props.state.intl;\n    const { formatMessage } = this.props.intl;\n\n    if (isEmptyObject(currentQuestion)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const loginUser = this.props.state.auth.user;\n    const question = this.getTranslatedQuestion(currentQuestion, translateLanguageId);\n    const { user, votes } = currentQuestion;\n    const answerForm = this.getAnswerForm(currentQuestion, loginUser);\n\n    const editLink = user.id === loginUser.id\n                   ? <Link className=\"uk-margin-small-right\" to={`/questions/edit/${this.qId}`}><FontAwesomeIcon icon=\"edit\" color=\"steelblue\" size=\"lg\"/></Link>\n                   : '';\n\n    const myVotes = votes.filter(v => {return v.user_id === loginUser.id});\n    const voteState = myVotes.length !== 0;\n    const votebutton = voteState\n                     ? <a onClick={this.deleteVote.bind(this, currentQuestion)}><FontAwesomeIcon icon=\"heart\" color=\"red\" size=\"lg\"/></a>\n                     : <a onClick={this.sendVote.bind(this, currentQuestion)}><FontAwesomeIcon icon={['far','heart']} color=\"gray\" size=\"lg\"/></a>;\n    const voteNumbers = <span className=\"uk-margin-small-right uk-text-default\">{ votes.length }</span>;\n\n    const { question_translations } = question;\n    let translator;\n    translator = <h4 className=\"uk-comment-meta uk-text-right\">{formatMessage({id: 'translated.state'})}</h4>;\n    if (question_translations.length !== 0) {\n      const { user } = question_translations[0];\n      translator = <Translator user={user} />;\n    }\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n          <p className=\"uk-text-muted\">{ question.category.category }</p>\n          <p>\n            <Linkify properties={{ target: '_blank'}} >{question.dispText}</Linkify>\n            <br/>\n            <br/>\n            { votebutton }\n            { voteNumbers }\n            { editLink }\n            <Link to={`/question_translations/${this.qId}`}><FontAwesomeIcon icon=\"globe-americas\" color=\"steelblue\" size=\"lg\"/></Link>\n          </p>\n          <p className=\"uk-text-meta\">{dayjs(question.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div>\n              <PostUser user={user} />\n            </div>\n            <div className=\"uk-width-expand\" >\n                { translator }\n            </div>\n          </div>\n        </div>\n\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.answer_list\"})}</span></h3>\n\n        <div className=\"uk-margin-bottom\">\n          { answerForm }\n        </div>\n          <AnswerList qId={this.qId} translateLanguageId={translateLanguageId} />\n        <hr className=\"uk-divider-icon\" />\n\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default injectIntl(QuestionView);\n","import { connect } from 'react-redux';\nimport QuestionView from '../components/QuestionView';\nimport {\n    fetchQuestion\n} from '../actions/Question';\nimport {\n    postAnswerData,\n    fetchAnswerList\n} from '../actions/Answer';\n//評価するための関数\nimport {\n    postVote,\n    deleteVote\n} from '../actions/Vote';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getQuestionById: (id) => dispatch(fetchQuestion(id)),\n        handleSubmit: (postData) => dispatch(postAnswerData(postData)),\n        fetchAnswers: (question_id) => dispatch(fetchAnswerList(question_id)),\n        handlePostVote: (data) => dispatch(postVote(data)),\n        handleDeleteVote: (data) => dispatch(deleteVote(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionView);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport QuestionForm from './QuestionForm';\nimport { isEmptyObject } from '../utils';\n\nclass QuestionEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.qId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getQuestionById(this.qId);\n  }\n\n  notOwnerWillTransfer(currentQuestion) {\n    const owner = currentQuestion.user;\n    const loginUser = this.props.state.auth.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const question_id = this.qId;\n      /* const { translate_language_id } = currentQuestion;*/\n      const saveData = { content, question_id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        question_id: this.qId,\n        history\n      };\n      return this.props.deleteQuestion(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentQuestion } = this.props.state.questions;\n    if (isEmptyObject(currentQuestion)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentQuestion);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>質問の編集</h2>\n        <QuestionForm initialValues={currentQuestion} onSubmit={this.handleSubmit.bind(this)} />\n        <p><button className=\"uk-button uk-button-danger\" onClick={this.onClickDeleteBtn.bind(this)}>この質問を削除</button></p>\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default QuestionEdit;\n","import { connect } from 'react-redux';\nimport QuestionEdit from '../components/QuestionEdit';\nimport {\n  fetchQuestion,\n  saveQuestionData,\n  deleteQuestion,\n} from '../actions/Question';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestionById: (id) => dispatch(fetchQuestion(id)),\n    handleSubmit: (postData) => dispatch(saveQuestionData(postData)),\n    deleteQuestion: (conditions) => dispatch(deleteQuestion(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionEdit);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const CHANGE_QUESTION_LIST_LANGUAGE = Symbol('CHANGE_QUESTION_LIST_LANGUAGE');\n// export const FETCH_QUESTION_LIST = Symbol('FETCH_QUESTION_LIST');\n\nexport const FETCH_NOT_TRANSLATED = Symbol('FETCH_NOT_TRANSLATED');\n\nexport const FETCH_QUESTION = Symbol('FETCH_QUESTION');\nexport const POST_QUESTION_DATA = Symbol('POST_QUESTION_DATA');\nexport const INITIALIZE_FORM = Symbol('INITIALIZE_FORM');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\n\nexport const changeQuestionListLanguage = createAction(CHANGE_QUESTION_LIST_LANGUAGE);\n// export const fetchQuestionList = createAction(FETCH_QUESTION_LIST);\n\nexport const fetchNotTranslated = createAction(FETCH_NOT_TRANSLATED);\n\nexport const fetchQuestion = createAction(FETCH_QUESTION);\nexport const postQuestionData = createAction(POST_QUESTION_DATA);\nexport const initializeForm = createAction(INITIALIZE_FORM);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nclass NotTranslated extends Component {\n\n  constructor(props) {\n    super(props);\n    //タブの切り替えのための要素\n    this.state = {currentTab: 'questions'};\n  }\n\n  componentDidMount() {\n    const { questions } = this.props.state.not_translate;\n    if (questions.length !== 0) {\n      return;\n    }\n    let params = {};\n    this.props.handleFetchData(params);\n  }\n\n  //各カテゴリの翻訳一覧を表示する関数\n  getNotTranslated(contents, url, key) {\n\n    // getNotTranslatedの関数\n    return contents.map((v) => {\n      const { user } = v;\n      const userName = user ? user.name : '不明なユーザー';\n      const profileLink = `/users/profile/${user.id}`;\n      //コンテンツに対応したidを返す関数\n      const id = this.getNotTranslatedId(v, key);\n\n      // ここreturnはmap関数のreturn\n      return (\n        //ここでcontentの種類+そのコンテンツのidの組み合わせをkeyとすることでこのHTML要素が一意になるようにする\n        <li key={`${key}_${v.id}`} >\n        {/* <li> */}\n          {/* 未翻訳の質問を表示する */}\n          <p className=\"uk-text-lead uk-text-truncate\" >\n            <Link to={`/questions/${id}`}>{`${v.content}`}</Link>\n            <Link to={`${url}${v.id}`}><FontAwesomeIcon icon=\"globe-americas\" color=\"steelblue\" size=\"lg\"/></Link>\n          </p>\n          {/* 作成時間を表示する */}\n          <p className=\"uk-text-meta\">{dayjs(v.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          {/* プロフィールを表示する */}\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div className=\"uk-width-auto\">\n              <Link to={profileLink}><img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" /></Link>\n            </div>\n            <div className=\"uk-width-expand\">\n              <h4 className=\"uk-comment-meta uk-margin-remove\"><Link className=\"\" to={profileLink}>{ userName }</Link></h4>\n            </div>\n          </div>\n        </li>\n      );\n    })\n  }\n\n  //コンテンツに対応したidを返す関数\n  getNotTranslatedId(v, key) {\n    switch(key) {\n      case \"questions\":\n        return v.id;\n      case \"answers\":\n        return v.question_id;\n      case \"comments\":\n        return v.answer.question_id;\n    }\n  }\n\n  //コンテンツに対応したurlを付加する関数\n  getNotTranslatedQuestions(contents) {\n    const url = \"/question_translations/\";\n    const key = \"questions\";\n    return this.getNotTranslated(contents, url, key);\n  }\n  getNotTranslatedAnswers(contents) {\n    const url = \"/answer_translations/\";\n    const key = \"answers\";\n    return this.getNotTranslated(contents, url, key);\n  }\n  getNotTranslatedComments(contents) {\n    const url = \"/comment_translations/\";\n    const key = \"comments\";\n    console.log('contents', contents);\n    return this.getNotTranslated(contents, url, key);\n  }\n\n  //現在のユーザーリスト\n  getCurrentTabContents(tabState, currentTab) {\n    //tabState = state.not_translate の中に3つの連想配列が入っている\n    const { questions, answers, comments } = tabState;\n    if (currentTab === 'questions') {\n      return this.getNotTranslatedQuestions(questions);\n    } else if (currentTab === 'answers') {\n      return  this.getNotTranslatedAnswers(answers);\n    } else if (currentTab === 'comments') {\n      return this.getNotTranslatedComments(comments);\n    }\n  }\n\n  onClickTab(newTabKey, e) {\n    e.preventDefault();\n    e.stopPropagation();\n    //stateの状態変更\n    this.setState({\n      currentTab: newTabKey\n    });\n  }\n\n  getTabList() {\n    const { formatMessage } = this.props.intl;\n    const tabData = [\n      {\n        name: formatMessage({id: \"links.question\"}),\n        key: 'questions'\n      },\n      {\n        name: formatMessage({id: \"links.answer\"}),\n        key: 'answers'\n      },\n      {\n        name: formatMessage({id: \"links.comment\"}),\n        key: 'comments'\n      }\n    ];\n\n    return (\n      <ul className=\"uk-tab\" >\n        {tabData.map(v => {\n           //currentTabとkeyが一致したとき、それをactiveにする\n           const active = this.state['currentTab'] === v.key\n                        ? 'uk-active'\n                        : '';\n           return (\n             <li key={v.key} className={active} onClick={this.onClickTab.bind(this, v.key)} >\n               <a href=\"\">{v.name}</a>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  getNotTranslatedView(state) {\n\n    const { isFetching } = state.not_translate;\n\n    //読み込み中であることを示すロゴを表示する\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const tabContents = this.getCurrentTabContents(state.not_translate, this.state.currentTab);\n\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\" >\n        {tabContents}\n      </ul>\n    );\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const content = this.getNotTranslatedView(this.props.state);\n    const tabList = this.getTabList();\n    \n    return (\n      <div>\n        <div className=\"uk-container uk-container-small\">\n          <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.not_translated_list\"})}</span></h3>\n          <br></br>\n        </div>\n        <div className=\"uk-container uk-container-small\">\n          {tabList}\n          {content}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(NotTranslated);\n","import { connect } from 'react-redux';\nimport { fetchNotTranslated } from '../actions/NotTranslated';\nimport NotTranslated from '../components/NotTranslated';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (queryData) => dispatch(fetchNotTranslated(queryData)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NotTranslated);","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport AnswerForm from './AnswerForm';\nimport { isEmptyObject } from '../utils';\n\nclass AnswerEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.answerId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getAnswerById(this.answerId);\n  }\n\n  notOwnerWillTransfer(currentAnswer) {\n    const owner = currentAnswer.user;\n    const loginUser = this.props.state.auth.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { currentAnswer } = this.props.state.answers;\n      const { content, translate_language_id, country_id } = formData;\n      const { history } = this.props;\n      const answer_id = this.answerId;\n      const { question_id } = currentAnswer;\n      /* const { translate_language_id } = currentQuestion;*/\n      const saveData = { content, answer_id, translate_language_id, country_id, history, question_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { currentAnswer } = this.props.state.answers;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        answer_id: this.answerId,\n        question_id: currentAnswer.question_id,\n        history\n      };\n      return this.props.deleteAnswer(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentAnswer } = this.props.state.answers;\n\n    if (isEmptyObject(currentAnswer)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentAnswer);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>回答の編集</h2>\n        <AnswerForm initialValues={currentAnswer} onSubmit={this.handleSubmit.bind(this)} />\n        <p><button className=\"uk-button uk-button-danger\" onClick={this.onClickDeleteBtn.bind(this)}>この回答を削除</button></p>\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default AnswerEdit;\n","import { connect } from 'react-redux';\nimport AnswerEdit from '../components/AnswerEdit';\nimport {\n  fetchAnswer,\n  saveAnswerData,\n  deleteAnswer,\n} from '../actions/Answer';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAnswerById: (id) => dispatch(fetchAnswer(id)),\n    handleSubmit: (postData) => dispatch(saveAnswerData(postData)),\n    deleteAnswer: (params) => dispatch(deleteAnswer(params)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerEdit);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport CommentForm from './CommentForm';\nimport { isEmptyObject } from '../utils';\n\nclass CommentEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.commentId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getCommentById(this.commentId);\n  }\n\n  notOwnerWillTransfer(currentComment) {\n    const owner = currentComment.user;\n    const loginUser = this.props.state.auth.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { currentComment } = this.props.state.comments;\n      const { content, translate_language_id } = formData;\n      const { history } = this.props;\n      const comment_id = this.commentId;\n      const { answer_id } = currentComment;\n      const { question_id } = currentComment.answer;\n      const saveData = { content, comment_id, translate_language_id, history, answer_id, question_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { currentComment } = this.props.state.comments;\n      const { question_id } = currentComment.answer;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        comment_id: this.commentId,\n        question_id,\n        history\n      };\n      return this.props.deleteComment(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentComment } = this.props.state.comments;\n\n    if (isEmptyObject(currentComment)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentComment);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>コメントの編集</h2>\n        <CommentForm initialValues={currentComment} onSubmit={this.handleSubmit.bind(this)} />\n        <p><button className=\"uk-button uk-button-danger\" onClick={this.onClickDeleteBtn.bind(this)}>このコメントを削除</button></p>\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default CommentEdit;\n","import { connect } from 'react-redux';\nimport CommentEdit from '../components/CommentEdit';\nimport {\n  fetchSingleComment,\n  saveCommentData,\n  deleteComment,\n} from '../actions/Comment';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCommentById: (id) => dispatch(fetchSingleComment(id)),\n    handleSubmit: (postData) => dispatch(saveCommentData(postData)),\n    deleteComment: (params) => dispatch(deleteComment(params)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentEdit);\n","import React, { Component } from 'react';\nimport { Formik, Field } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\nclass QuestionTranslatinoForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.translations.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.translations.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          content: '',\n          translate_language_id: ''\n        }}\n        validate={this.validate.bind(this)}\n        enableReinitialize={true}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: 'placeholders.translations.content'})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n              </div>\n              {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.translations.translate_language_id\"})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"buttons.title.post\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(QuestionTranslatinoForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_QUESTION_TRANSLATION_LIST = Symbol('FETCH_QUESTION_TRANSLATION_LIST');\nexport const FETCH_QUESTION_TRANSLATION = Symbol('FETCH_QUESTION_TRANSLATION');\nexport const POST_QUESTION_TRANSLATION_DATA = Symbol('POST_QUESTION_TRANSLATION_DATA');\nexport const INITIALIZE_FORM = Symbol('INITIALIZE_FORM');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATED_SINGLE_QUESTION_TRANSLATION = Symbol('UPDATED_SINGLE_QUESTION_TRANSLATION');\nexport const SAVE_QUESTION_TRANSLATION_DATA = Symbol('SAVE_QUESTION_TRANSLATION_DATA');\nexport const DELETE_QUESTION_TRANSLATION = Symbol('DELETE_QUESTION_TRANSLATION');\n\n\nexport const fetchQuestionTranslationList = createAction(FETCH_QUESTION_TRANSLATION_LIST);\nexport const fetchQuestionTranslation = createAction(FETCH_QUESTION_TRANSLATION);\nexport const postQuestionTranslationData = createAction(POST_QUESTION_TRANSLATION_DATA);\nexport const initializeForm = createAction(INITIALIZE_FORM);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updatedSingleQuestionTranslation = createAction(UPDATED_SINGLE_QUESTION_TRANSLATION);\nexport const saveQuestionTranslationData = createAction(SAVE_QUESTION_TRANSLATION_DATA);\nexport const deleteQuestionTranslation = createAction(DELETE_QUESTION_TRANSLATION);\n\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const POST_VOTE = Symbol('POST_VOTE');\nexport const DELETE_VOTE = Symbol('DELETE_VOTE');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\n\n//createAction(FETCH_QUESTION_LIST)はFETCH_QUESTION_LISTという名前でアクションを発火させる。\nexport const postVote = createAction(POST_VOTE);\nexport const deleteVote = createAction(DELETE_VOTE);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\n\n//componentの中でdispatchするための設定\nimport { connect } from 'react-redux';\n//評価するための関数\nimport { postVote, deleteVote } from '../actions/VoteTranslation';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PostUser from './PostUser';\n\nclass QuestionTranslationList extends Component {\n  constructor(props) {\n    super(props);\n    this.qId = this.props.qId;\n  }\n\n  componentWillMount() {\n    this.props.handleFetchData(this.qId);\n  }\n\n  sendVote(question){\n    if( this.props.user.id == null){\n      return;\n    }\n    const params = {\n      user_id: this.props.user.id,\n      question_translation_id: question.id,\n      answer_translation_id: null,\n      commcomment_translation_id: null,\n      status: 1,\n      //再レンダリング用のId\n      questionId: question.question_id,\n    };\n    const key = \"question\";\n    const data = { params,  key };\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(question) {\n    if( this.props.user.id == null){\n      return;\n    }\n    const params = {\n      user_id: this.props.user.id,\n      key : \"question\",\n      //他のコンテンツと共通化するためvote_idというkeyにする\n      vote_id: question.id,\n      //再レンダリング用のId\n      questionId: question.question_id,\n    };\n    const key = \"question\";\n    const data = { params,  key };\n    return this.props.handleDeleteVote(data);\n  }\n\n  getTranslationList(translationList, loginUser) {\n    const { formatMessage } = this.props.intl;\n\n    return translationList.map(translation => {\n      const editLink = translation.user.id === loginUser.id\n                     ? <Link className=\"uk-margin-small-right\" to={`/question_translations/edit/${translation.id}`}><FontAwesomeIcon icon=\"edit\" color=\"steelblue\" size=\"lg\"/></Link>\n                     : '';\n\n      const myVotes = translation.vote_translations.filter(v => {return v.user_id === loginUser.id});\n      const voteState = myVotes.length !== 0;\n      const votebutton = voteState\n                     ?<a onClick={this.deleteVote.bind(this, translation)}><FontAwesomeIcon icon=\"heart\" color=\"red\" size=\"lg\"/></a>\n                     :<a onClick={this.sendVote.bind(this,  translation)}><FontAwesomeIcon icon={['far','heart']} color=\"gray\" size=\"lg\"/></a>;\n      const voteNumbers = <span className=\"uk-margin-small-right uk-text-default\">{ translation.vote_translations.length }</span>;\n\n      return (\n        <li key={translation.id} >\n          <article className=\"uk-comment\">\n            <div className=\"uk-comment-header uk-comment-body\">\n              <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n                <Linkify properties={{ target: '_blank'}} >{translation.content}</Linkify>\n                <br/>\n                <br/>\n                { votebutton }\n                { voteNumbers }\n                { editLink }\n              </p>\n              <p className=\"uk-text-meta\">{dayjs(translation.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n\n            </div>\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n              <div>\n                <PostUser user={ translation.user } />\n              </div>\n            </div>\n          </article>\n        </li>\n      );})\n\n  }\n\n  render() {\n    const { isFetching, currentTranslationList } = this.props.state.questionTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const translationList = this.getTranslationList(currentTranslationList, loginUser);\n\n    return (\n      <div>\n        <ul className=\"uk-list uk-list-divider uk-list-large\" >\n          {translationList}\n        </ul>\n      </div>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  return {\n    user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      //評価機能\n      handlePostVote: (data) => dispatch(postVote(data)),\n      handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(QuestionTranslationList));\n","import { connect } from 'react-redux';\nimport { fetchQuestionTranslationList } from '../actions/QuestionTranslation';\nimport QuestionTranslationList from '../components/QuestionTranslationList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (question_id) => dispatch(fetchQuestionTranslationList(question_id)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionTranslationList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport QuestionTranslationForm from '../components/QuestionTranslationForm';\nimport QuestionTranslationList from '../containers/QuestionTranslationList';\nimport {\n  fetchQuestion\n} from '../actions/Question';\nimport {\n  fetchAnswerList\n} from '../actions/Answer';\nimport {\n    postQuestionTranslationData\n} from '../actions/QuestionTranslation';\nimport { isEmptyObject } from '../utils';\nimport { injectIntl } from 'react-intl';\nimport PostUser from '../components/PostUser';\n\nclass QuestionTranslationView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.qId = parseInt(params.question_id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getQuestionById(this.qId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id } = formData;\n      if (content === '') {\n        throw new Error('空文字で投稿はできません。');\n      }\n      const { user } = this.props.state.auth;\n      const question_id = this.qId;\n      const user_id = user.id;\n      return this.props.handleSubmit({content, question_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { currentQuestion } = this.props.state.questions;\n    if (isEmptyObject(currentQuestion)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const { user } = currentQuestion;\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n          <p><Linkify properties={{ target: '_blank'}} >{currentQuestion.content}</Linkify></p>\n          <p className=\"uk-text-meta\">{dayjs(currentQuestion.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div>\n              <PostUser user={user} />\n            </div>\n          </div>\n        </div>\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.translation_list\"})}</span></h3>\n        <QuestionTranslationForm qId={this.qId} onSubmit={this.handleSubmit.bind(this)} />\n        <QuestionTranslationList qId={this.qId} />\n        <hr className=\"uk-divider-icon\" />\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestionById: (id) => dispatch(fetchQuestion(id)),\n    fetchAnswers: (question_id) => dispatch(fetchAnswerList(question_id)),\n    handleSubmit: (postData) => dispatch(postQuestionTranslationData(postData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(QuestionTranslationView));\n","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\n\nclass TranslationForm extends Component {\n\n  validate(values) {\n    let errors = {};\n    if (!values.content) {\n      errors.content = '翻訳文を入力してください';\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = '投稿言語を指定してください';\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues } = this.props;\n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        validate={this.validate}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder=\"翻訳文を入力してください\"\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n                {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              </div>\n              <div className=\"uk-margin uk-grid uk-grid-small uk-child-width-expand@s\" >\n                <div className=\"uk-grid-margin\" >\n                  <LanguageFormSelect name=\"translate_language_id\" placeholder=\"投稿言語\" />\n                  {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n                </div>\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >投稿</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default TranslationForm;\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationForm from './TranslationForm';\nimport { isEmptyObject } from '../utils';\n\nclass TranslationEdit extends Component {\n\n  notOwnerWillTransfer(currentTranslation, loginUser) {\n    const owner = currentTranslation.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  render() {\n    const { currentTranslation, handleSubmit, onClickDeleteBtn, loginUser } = this.props;\n\n    if (isEmptyObject(currentTranslation)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentTranslation, loginUser);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>翻訳の編集</h2>\n        <TranslationForm initialValues={currentTranslation} onSubmit={handleSubmit} />\n        <p><button className=\"uk-button uk-button-danger\" onClick={onClickDeleteBtn}>この翻訳を削除</button></p>\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default TranslationEdit;\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationEdit from './TranslationEdit';\n\nclass QuestionTranslationEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.qtId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getQuestionTranslationById(this.qtId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const id = this.qtId;\n      /* const { translate_language_id } = currentTranslation;*/\n      const saveData = { content, id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        id: this.qtId,\n        history\n      };\n      return this.props.deleteQuestionTranslation(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentTranslation } = this.props.state.questionTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    return (\n      <TranslationEdit\n        currentTranslation={currentTranslation}\n        handleSubmit={this.handleSubmit.bind(this)}\n        onClickDeleteBtn={this.onClickDeleteBtn.bind(this)}\n        loginUser={loginUser}\n      />\n    );\n  }\n}\n\nexport default QuestionTranslationEdit;\n","import { connect } from 'react-redux';\nimport QuestionTranslationEdit from '../components/QuestionTranslationEdit';\nimport {\n  fetchQuestionTranslation,\n  saveQuestionTranslationData,\n  deleteQuestionTranslation,\n} from '../actions/QuestionTranslation';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestionTranslationById: (id) => dispatch(fetchQuestionTranslation(id)),\n    handleSubmit: (postData) => dispatch(saveQuestionTranslationData(postData)),\n    deleteQuestionTranslation: (conditions) => dispatch(deleteQuestionTranslation(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionTranslationEdit);\n","import React, { Component } from 'react';\nimport { Formik, Field } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\nclass AnswerTranslatinoForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.translations.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.translations.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          content: '',\n          translate_language_id: ''\n        }}\n        validate={this.validate.bind(this)}\n        enableReinitialize={true}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.translations.content\"})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n              </div>\n              {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.translations.translate_language_id\"})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"buttons.title.post\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(AnswerTranslatinoForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_ANSWER_TRANSLATION_LIST = Symbol('FETCH_ANSWER_TRANSLATION_LIST');\nexport const FETCH_ANSWER_TRANSLATION = Symbol('FETCH_ANSWER_TRANSLATION');\nexport const POST_ANSWER_TRANSLATION_DATA = Symbol('POST_ANSWER_TRANSLATION_DATA');\nexport const SAVE_ANSWER_TRANSLATION_DATA = Symbol('SAVE_ANSWER_TRANSLATION_DATA');\nexport const DELETE_ANSWER_TRANSLATION = Symbol('DELETE_ANSWER_TRANSLATION');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATED_SINGLE_ANSWER_TRANSLATION = Symbol('UPDATED_SINGLE_ANSWER_TRANSLATION');\n\nexport const fetchAnswerTranslationList = createAction(FETCH_ANSWER_TRANSLATION_LIST);\nexport const fetchAnswerTranslation = createAction(FETCH_ANSWER_TRANSLATION);\nexport const postAnswerTranslationData = createAction(POST_ANSWER_TRANSLATION_DATA);\nexport const saveAnswerTranslationData = createAction(SAVE_ANSWER_TRANSLATION_DATA);\nexport const deleteAnswerTranslation = createAction(DELETE_ANSWER_TRANSLATION);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updatedSingleAnswerTranslation = createAction(UPDATED_SINGLE_ANSWER_TRANSLATION);\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\n\nimport { connect } from 'react-redux';\nimport { postVote, deleteVote } from '../actions/VoteTranslation';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport PostUser from './PostUser';\n\nclass AnswerTranslationList extends Component {\n  constructor(props) {\n    super(props);\n    this.aId = this.props.aId;\n  }\n\n  componentWillMount() {\n    this.props.handleFetchData(this.aId);\n  }\n\n  sendVote(answer){\n    if( this.props.user.id == null){\n      return;\n    }\n    const params = {\n      user_id: this.props.user.id,\n      question_translation_id: null,\n      answer_translation_id: answer.id,\n      commcomment_translation_id: null,\n      status: 1,\n      //再レンダリング用のId\n      answerId: answer.answer_id\n    };\n    const key = \"answer\";\n    const data = { params,  key };\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(answer) {\n    if( this.props.user.id == null){\n      return;\n    }\n    const params = {\n      user_id: this.props.user.id,\n      key : \"answer\",\n      //他のコンテンツと共通化するためvote_idというkeyにする\n      vote_id: answer.id,\n      //再レンダリング用のId\n      answerId: answer.answer_id,\n    };\n    const key = \"answer\";\n    const data = { params,  key };\n    return this.props.handleDeleteVote(data);\n  }\n\n  getTranslationList(translationList, loginUser) {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\" >\n        {translationList.map(translation => {\n           const editLink = translation.user.id === loginUser.id\n                          ? <Link to={`/answer_translations/edit/${translation.id}`}><FontAwesomeIcon icon=\"edit\" color=\"steelblue\" size=\"lg\"/></Link>\n                          : '';\n\n           const myVotes = translation.vote_translations.filter(v => {return v.user_id === loginUser.id});\n           const voteState = myVotes.length !== 0;\n           const votebutton = voteState\n                          ?<a onClick={this.deleteVote.bind(this, translation)}><FontAwesomeIcon icon=\"heart\" color=\"red\" size=\"lg\"/></a>\n                          :<a onClick={this.sendVote.bind(this,  translation)}><FontAwesomeIcon icon={['far','heart']} color=\"gray\" size=\"lg\"/></a>;\n           const voteNumbers = <span className=\"uk-margin-small-right uk-text-default\">{ translation.vote_translations.length }</span>;                   \n           return (\n             <li key={translation.id} >\n               <article className=\"uk-comment\">\n                 <div className=\"uk-comment-header uk-comment-body\">\n                   <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n                     <Linkify properties={{ target: '_blank'}} >{translation.content}</Linkify>\n                     <br/>\n                     <br/>\n                     { votebutton }\n                     { voteNumbers }\n                     { editLink }\n\n                   </p>\n                   <p className=\"uk-text-meta\">{dayjs(translation.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n                 </div>\n                 <div>\n                   <PostUser user={ translation.user } />\n                 </div>\n               </article>\n             </li>\n           );\n        })}\n      </ul>\n    );\n\n  }\n\n  render() {\n    const { isFetching, currentTranslationList } = this.props.state.answerTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n    const content = this.getTranslationList(currentTranslationList, loginUser);\n    return (\n      <div>\n        {content}\n      </div>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  return {\n    user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      //評価機能\n      handlePostVote: (data) => dispatch(postVote(data)),\n      handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(AnswerTranslationList));\n","import { connect } from 'react-redux';\nimport { fetchAnswerTranslationList } from '../actions/AnswerTranslation';\nimport AnswerTranslationList from '../components/AnswerTranslationList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (answer_id) => dispatch(fetchAnswerTranslationList(answer_id)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerTranslationList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport AnswerTranslationForm from '../components/AnswerTranslationForm';\nimport AnswerTranslationList from '../containers/AnswerTranslationList';\nimport {\n  fetchAnswer,\n  fetchAnswerList\n} from '../actions/Answer';\nimport {\n  postAnswerTranslationData\n} from '../actions/AnswerTranslation';\nimport { isEmptyObject } from '../utils';\nimport { injectIntl } from 'react-intl';\nimport PostUser from '../components/PostUser';\n\nclass AnswerTranslationView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.aId = parseInt(params.answer_id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getAnswerById(this.aId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id } = formData;\n      if (content === '') {\n        const msg = '空文字で投稿はできません。';\n        throw new Error(msg);\n      }\n      const { user } = this.props.state.auth;\n      const answer_id = this.aId;\n      const user_id = user.id;\n      return this.props.handleSubmit({content, answer_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { currentAnswer } = this.props.state.answers;\n    if (isEmptyObject(currentAnswer)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const user = (currentAnswer.user) ? currentAnswer.user : null;\n    const userName = (user) ? user.name : '';\n    const { question_id } = currentAnswer;\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n          <p><Linkify properties={{ target: '_blank'}} >{currentAnswer.content}</Linkify></p>\n          <p className=\"uk-text-meta\">{dayjs(currentAnswer.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div>\n              <PostUser user={user} />\n            </div>\n          </div>\n\n        </div>\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.translation_list\"})}</span></h3>\n        <AnswerTranslationForm aId={this.aId} onSubmit={this.handleSubmit.bind(this)} />\n        <AnswerTranslationList aId={this.aId} />\n        <hr className=\"uk-divider-icon\" />\n        <p><Link to={`/questions/${question_id}`}>{formatMessage({id: \"links.to_question_view\"})}</Link></p>\n        <p><Link to=\"/\">Top</Link></p>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAnswerById: (id) => dispatch(fetchAnswer(id)),\n    fetchAnswers: (question_id) => dispatch(fetchAnswerList(question_id)),\n    handleSubmit: (postData) => dispatch(postAnswerTranslationData(postData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(AnswerTranslationView));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationEdit from './TranslationEdit';\n\nclass AnswerTranslationEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.atId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getAnswerTranslationById(this.atId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const id = this.atId;\n      /* const { translate_language_id } = currentTranslation;*/\n      const saveData = { content, id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        id: this.atId,\n        history\n      };\n      return this.props.deleteAnswerTranslation(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentTranslation } = this.props.state.answerTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    return (\n      <TranslationEdit\n        currentTranslation={currentTranslation}\n        handleSubmit={this.handleSubmit.bind(this)}\n        onClickDeleteBtn={this.onClickDeleteBtn.bind(this)}\n        loginUser={loginUser}\n      />\n    );\n  }\n}\n\nexport default AnswerTranslationEdit;\n","import { connect } from 'react-redux';\nimport AnswerTranslationEdit from '../components/AnswerTranslationEdit';\nimport {\n  fetchAnswerTranslation,\n  saveAnswerTranslationData,\n  deleteAnswerTranslation,\n} from '../actions/AnswerTranslation';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAnswerTranslationById: (id) => dispatch(fetchAnswerTranslation(id)),\n    handleSubmit: (postData) => dispatch(saveAnswerTranslationData(postData)),\n    deleteAnswerTranslation: (conditions) => dispatch(deleteAnswerTranslation(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerTranslationEdit);\n","import React, { Component } from 'react';\nimport { Formik, Field } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\nclass CommentTranslatinoForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.translations.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.translations.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          content: '',\n          translate_language_id: ''\n        }}\n        validate={this.validate.bind(this)}\n        enableReinitialize={true}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.translations.content\"})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n              </div>\n              {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.translations.translate_language_id\"})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"buttons.title.post\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(CommentTranslatinoForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_COMMENT_TRANSLATION_LIST = Symbol('FETCH_COMMENT_TRANSLATION_LIST');\nexport const FETCH_COMMENT_TRANSLATION = Symbol('FETCH_COMMENT_TRANSLATION');\nexport const POST_COMMENT_TRANSLATION_DATA = Symbol('POST_COMMENT_TRANSLATION_DATA');\nexport const SAVE_COMMENT_TRANSLATION_DATA = Symbol('SAVE_COMMENT_TRANSLATION_DATA');\nexport const DELETE_COMMENT_TRANSLATION = Symbol('DELETE_COMMENT_TRANSLATION');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATED_SINGLE_COMMENT_TRANSLATION = Symbol('UPDATED_SINGLE_COMMENT_TRANSLATION');\n\n\nexport const fetchCommentTranslationList = createAction(FETCH_COMMENT_TRANSLATION_LIST);\nexport const fetchCommentTranslation = createAction(FETCH_COMMENT_TRANSLATION);\nexport const postCommentTranslationData = createAction(POST_COMMENT_TRANSLATION_DATA);\nexport const saveCommentTranslationData = createAction(SAVE_COMMENT_TRANSLATION_DATA);\nexport const deleteCommentTranslation = createAction(DELETE_COMMENT_TRANSLATION);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updatedSingleCommentTranslation = createAction(UPDATED_SINGLE_COMMENT_TRANSLATION);\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\n\nimport { connect } from 'react-redux';\nimport { postVote, deleteVote } from '../actions/VoteTranslation';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PostUser from './PostUser';\n\nclass CommentTranslationList extends Component {\n  constructor(props) {\n    super(props);\n    this.commentId = this.props.commentId;\n  }\n\n  componentWillMount() {\n    this.props.handleFetchData(this.commentId);\n  }\n\n  sendVote(comment){\n    if( this.props.user.id == null){\n      return;\n    }\n    const params = {\n      user_id: this.props.user.id,\n      question_translation_id: null,\n      answer_translation_id: null,\n      comment_translation_id: comment.id,\n      status: 1,\n      //再レンダリング用のId\n      commentId: comment.comment_id\n    };\n    const key = \"comment\";\n    const data = { params,  key };\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(comment) {\n    if( this.props.user.id == null){\n      return;\n    }\n    const params = {\n      user_id: this.props.user.id,\n      key : \"comment\",\n      //他のコンテンツと共通化するためvote_idというkeyにする\n      vote_id: comment.id,\n      //再レンダリング用のId\n      commentId: comment.comment_id,\n    };\n    const key = \"comment\";\n    const data = { params,  key };\n    return this.props.handleDeleteVote(data);\n  }\n\n  getTranslationList(translationList, loginUser) {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\" >\n        {translationList.map(translation => {\n           const editLink = translation.user.id === loginUser.id\n                          ? <Link className=\"uk-margin-small-right\" to={`/comment_translations/edit/${translation.id}`}><FontAwesomeIcon icon=\"edit\" color=\"steelblue\" size=\"lg\"/></Link>\n                          : '';\n          \n           const myVotes = translation.vote_translations.filter(v => {return v.user_id === loginUser.id});\n           const voteState = myVotes.length !== 0;\n           const votebutton = voteState\n                          ?<a onClick={this.deleteVote.bind(this, translation)}><FontAwesomeIcon icon=\"heart\" color=\"red\" size=\"lg\"/></a>\n                          :<a onClick={this.sendVote.bind(this,  translation)}><FontAwesomeIcon icon={['far','heart']} color=\"gray\" size=\"lg\"/></a>;\n           const voteNumbers = <span className=\"uk-margin-small-right uk-text-default\">{ translation.vote_translations.length }</span>;\n\n           return (\n             <li key={translation.id} >\n               <article className=\"uk-comment\">\n                 <div className=\"uk-comment-header uk-comment-body\">\n                   <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n                     <Linkify properties={{ target: '_blank'}} >{translation.content}</Linkify>\n                     <br/>\n                     <br/>\n                     { votebutton }\n                     { voteNumbers }\n                     { editLink }\n                   </p>\n                   <p className=\"uk-text-meta\">{dayjs(translation.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n                 </div>\n                 <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n                   <div>\n                     <PostUser user={ translation.user } />\n                   </div>\n                 </div>\n               </article>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  render() {\n    const { isFetching, currentTranslationList } = this.props.state.commentTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const content = this.getTranslationList(currentTranslationList, loginUser);\n\n    return (\n      <div>\n        {content}\n      </div>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  return {\n    user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      //評価機能\n      handlePostVote: (data) => dispatch(postVote(data)),\n      handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(CommentTranslationList));\n","import { connect } from 'react-redux';\nimport { fetchCommentTranslationList } from '../actions/CommentTranslation';\nimport CommentTranslationList from '../components/CommentTranslationList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (answer_id) => dispatch(fetchCommentTranslationList(answer_id)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentTranslationList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport CommentTranslationForm from '../components/CommentTranslationForm';\nimport CommentTranslationList from '../containers/CommentTranslationList';\nimport {\n  fetchSingleComment,\n} from '../actions/Comment';\nimport {\n  postCommentTranslationData\n} from '../actions/CommentTranslation';\nimport { isEmptyObject } from '../utils';\nimport { injectIntl } from 'react-intl';\nimport PostUser from '../components/PostUser';\n\nclass CommentTranslationView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.commentId = parseInt(params.comment_id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getCommentById(this.commentId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id } = formData;\n      if (content === '') {\n        const msg = '空文字で投稿はできません。';\n        throw new Error(msg);\n      }\n      const { user } = this.props.state.auth;\n      const comment_id = this.commentId;\n      const user_id = user.id;\n      return this.props.handleSubmit({content, comment_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { currentComment } = this.props.state.comments;\n    const { currentQuestion } = this.props.state.questions;\n\n    if (isEmptyObject(currentComment)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const user = (currentComment.user) ? currentComment.user : null;\n    const userName = (user) ? user.name : '';\n    const toQuestionViewLink = !isEmptyObject(currentQuestion)\n                             ? (<p><Link to={`/questions/${currentQuestion.id}`}>{formatMessage({id: \"links.to_question_view\"})}</Link></p>)\n                             : '';                         \n\n    return (\n    <main className=\"uk-container uk-container-small\">\n      <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n        <p><Linkify properties={{ target: '_blank'}} >{currentComment.content}</Linkify></p>\n        <p className=\"uk-text-meta\">{dayjs(currentComment.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n        <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n          <div>\n            <PostUser user={user} />\n          </div>\n        </div>\n      </div>\n      <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.translation_list\"})}</span></h3>\n      <CommentTranslationForm commentId={this.commentId} onSubmit={this.handleSubmit.bind(this)} />\n      <CommentTranslationList commentId={this.commentId} />\n      <hr className=\"uk-divider-icon\" />\n      { toQuestionViewLink }\n      <p><Link to=\"/\">Top</Link></p>\n    </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCommentById: (id) => dispatch(fetchSingleComment(id)),\n    handleSubmit: (postData) => dispatch(postCommentTranslationData(postData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(CommentTranslationView));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationEdit from './TranslationEdit';\n\n\nclass CommentTranslationEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.ctId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    console.log('getCommentTranslationById');\n    this.props.getCommentTranslationById(this.ctId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const id = this.ctId;\n      /* const { translate_language_id } = currentTranslation;*/\n      const saveData = { content, id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        id: this.ctId,\n        history\n      };\n      return this.props.deleteCommentTranslation(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentTranslation } = this.props.state.commentTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    return (\n      <TranslationEdit\n        currentTranslation={currentTranslation}\n        handleSubmit={this.handleSubmit.bind(this)}\n        onClickDeleteBtn={this.onClickDeleteBtn.bind(this)}\n        loginUser={loginUser}\n      />\n    );\n  }\n}\n\nexport default CommentTranslationEdit;\n","import { connect } from 'react-redux';\nimport CommentTranslationEdit from '../components/CommentTranslationEdit';\nimport {\n  fetchCommentTranslation,\n  saveCommentTranslationData,\n  deleteCommentTranslation,\n} from '../actions/CommentTranslation';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCommentTranslationById: (id) => dispatch(fetchCommentTranslation(id)),\n    handleSubmit: (postData) => dispatch(saveCommentTranslationData(postData)),\n    deleteCommentTranslation: (conditions) => dispatch(deleteCommentTranslation(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentTranslationEdit);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Drawer from '@material-ui/core/Drawer';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = {\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: 'auto',\n  },\n};\n\nclass MenuDrawer extends React.Component {\n  state = {\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  };\n\n  toggleDrawer = (side, open) => () => {\n    this.setState({\n      [side]: open,\n    });\n  };\n\n  getLogoutLink(user) {\n    if (!user.id) {\n      return '';\n    }\n    const { history } = this.props;\n    const actionData = { history };\n    return (\n      <Link to=\"/\" onClick={this.props.logout.bind(this, actionData)}>Logout</Link>\n    );\n  }\n\n  render() {\n    const { classes, displayName } = this.props;\n\n    const menuDataList = [\n      {\n        text: 'プロフィール',\n        component: Link,\n        to: '/users/profile_edit',\n      },\n      {\n        text: 'ログアウト',\n        component: Link,\n        to: '/users/logout',\n      },\n    ];\n\n    const sideList = (\n      <div className={classes.list}>\n        <List>\n          {menuDataList.map((menuData, index) => (\n            <ListItem button component={menuData.component} to={menuData.to}  key={index} >\n              {/* <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon> */}\n              <ListItemText primary={menuData.text} />\n            </ListItem>\n          ))}\n        </List>\n      </div>\n    );\n\n    return (\n      <div className=\"uk-display-inline-block\" >\n        <Button onClick={this.toggleDrawer('right', true)}>{ displayName }</Button>\n        <Drawer anchor=\"right\" open={this.state.right} onClose={this.toggleDrawer('right', false)}>\n          <div\n            tabIndex={0}\n            role=\"button\"\n            onClick={this.toggleDrawer('right', false)}\n            onKeyDown={this.toggleDrawer('right', false)}\n          >\n            {sideList}\n          </div>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\nMenuDrawer.propTypes = {\n  classes: PropTypes.object.isRequired,\n  displayName: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(MenuDrawer);\n","import React from 'react';\n/* import MenuDrawer from '../../containers/layouts/MenuDrawer';*/\nimport MenuDrawer from './MenuDrawer';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      anchorEl: null\n    };\n  }\n\n  onClickLogout() {\n    const { user } = this.props.state.auth;\n    if (!user.id) {\n      return '';\n    }\n    const { history } = this.props;\n    const actionData = { history };\n    return this.props.logout(actionData);\n  }\n\n  getMenu(displayName) {\n    const { anchorEl } = this.state;\n    const { formatMessage } = this.props.intl;\n\n    const handleClick = event => {\n      this.setState({ anchorEl: event.currentTarget });\n    };\n\n    const handleClose = () => {\n      this.setState({ anchorEl: null });\n    };\n\n    const handleLogout = () => {\n      handleClose();\n      return this.onClickLogout();\n    };\n\n    const getProfileElem = (auth) => {\n      if (!auth.isLoggedIn) {\n        return '';\n      }\n      const { user } = auth;\n      const menuList = [\n        {\n          text: formatMessage({id: \"links.profile\"}),\n          to: `/users/profile/${user.id}`,\n          icon: \"user\"\n        },\n        {\n          text: formatMessage({id: \"links.profile_edit\"}),\n          to: '/users/profile_edit',\n          icon: \"pencil\",\n        },\n        {\n          text: formatMessage({id: \"links.to_not_translated_list\"}),\n          to: `/not_translated`,\n          icon: \"album\"\n        },\n      ];\n      return menuList.map((v, i) => (\n        <MenuItem key={i} onClick={handleClose}>\n          <Link to={v.to} >\n            <span uk-icon={v.icon} ></span>\n            <span>{v.text}</span>\n          </Link>\n        </MenuItem>\n      ));\n    };\n\n    const getLoginElem = (auth) => {\n      return (auth.isLoggedIn)\n           ? (\n             <MenuItem onClick={handleLogout.bind(this)}>\n               <Link to=\"\" >\n                 <span uk-icon=\"sign-out\" ></span>\n                 <span>{formatMessage({id: \"links.logout\"})}</span>\n               </Link>\n             </MenuItem>\n           )\n           : (\n             <MenuItem onClick={handleClose}>\n               <Link to=\"/users/login\" >\n                 <span uk-icon=\"sign-in\" ></span>\n                 <span>{formatMessage({id: \"links.login\"})}</span>\n               </Link>\n             </MenuItem>\n           );\n    };\n\n    const { auth } = this.props.state;\n    const profileElem = getProfileElem(auth);\n    const loginElem = getLoginElem(auth);\n\n    return (\n      <div className=\"uk-display-inline-block uk-height-1-1\" >\n        <Button\n          aria-owns={anchorEl ? 'simple-menu' : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleClick}\n          className=\"uk-height-1-1\"\n          style={{\"textTransform\": \"none\"}}\n        >\n          {displayName}\n        </Button>\n        <Menu\n          id=\"simple-menu\"\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={handleClose}\n        >\n          {profileElem}\n          {loginElem}\n          <MenuItem onClick={handleClose}>\n            <Link to=\"/users/signup\" >\n              <span uk-icon=\"check\" ></span>\n              <span>{formatMessage({id: \"links.sign_up\"})}</span>\n            </Link>\n          </MenuItem>\n        </Menu>\n      </div>\n    );\n  }\n\n  render() {\n    const { user } = this.props.state.auth;\n    const imagePath = user.image_path ? user.image_path : '/image/profile/blank-profile.png';\n    const displayMenuElem = <img src={imagePath} className=\"uk-border-circle\" width=\"50\" height=\"50\" alt=\"\" />;\n    const menu = this.getMenu(displayMenuElem);\n\n    return (\n      <header className=\"uk-margin-bottom uk-heading-divider uk-grid uk-grid-small\" >\n        <div className=\"uk-width-expand uk-margin-small-left\" >\n          <a href=\"/\" className=\"uk-display-inline-block\" >\n            <img src={`/logo.png`} alt=\"Logo\" style={{ \"maxHeight\": \"60px\" }} />\n          </a>\n          <span className=\"uk-text-meta uk-margin-small-left uk-display-inline-block\">\n            α ver.\n          </span>\n        </div>\n        <div className=\"uk-margin-small-right\">\n          { menu }\n        </div>\n      </header>\n    );\n  }\n};\n\nexport default injectIntl(Header);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const CREATE_USER_ACCOUNT = Symbol('CREATE_USER_ACCOUNT');\nexport const CLICK_SUBMIT = Symbol('CLICK_SUBMIT');\nexport const SAVE_USER_MNEMONIC = Symbol('SAVE_USER_MNEMONIC');\nexport const LOGIN_USER = Symbol('LOGIN_USER');\nexport const LOGIN_USER_JWT = Symbol('LOGIN_USER_JWT');\nexport const LOGOUT_USER = Symbol('LOGOUT_USER');\nexport const UPDATE_USER_DATA = Symbol('UPDATE_USER_DATA');\nexport const SAVE_USER_DATA = Symbol('SAVE_USER_DATA');\nexport const SAVE_USER_PASSWORD = Symbol('SAVE_USER_PASSWORD');\nexport const UPDATED_USER_DATA = Symbol('UPDATED_USER_DATA');\nexport const REMOVE_USER_DATA = Symbol('REMOVE_USER_DATA');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const LOGIN_SUCCESS = Symbol('LOGIN_SUCCESS');\nexport const LOGIN_FAILED = Symbol('LOGIN_FAILED');\nexport const GET_USER_PROFILE = Symbol('GET_USER_PROFILE');\nexport const GET_USER_BY_TOKEN = Symbol('GET_USER_BY_TOKEN');\nexport const UPDATED_PROFILE_DATA = Symbol('UPDATED_PROFILE_DATA');\nexport const PREPARED_AUTH = Symbol('PREPARED_AUTH');\nexport const UPDATED_PROFILE_QUESTION_DATA = Symbol('UPDATED_PROFILE_QUESTION_DATA');\nexport const UPDATED_PROFILE_ANSWER_DATA = Symbol('UPDATED_PROFILE_ANSWER_DATA');\nexport const UPDATED_PROFILE_COMMENT_DATA = Symbol('UPDATED_PROFILE_COMMENT_DATA');\nexport const UPDATED_PROFILE_TRANSLATED_DATA = Symbol('UPDATED_PROFILE_TRANSLATED_DATA');\nexport const SEND_RESET_PASSWORD_MAIL = Symbol('SEND_RESET_PASSWORD_MAIL');\nexport const RESET_PASSWORD = Symbol('RESET_PASSWORD');\nexport const ACTIVATE_USER = Symbol('ACTIVATE_USER');\n\n\nexport const createUserAccount = createAction(CREATE_USER_ACCOUNT);\nexport const clickSubmit = createAction(CLICK_SUBMIT);\nexport const saveUserMnemonic = createAction(SAVE_USER_MNEMONIC);\nexport const loginUser = createAction(LOGIN_USER);\nexport const loginUserJwt = createAction(LOGIN_USER_JWT);\nexport const logoutUser = createAction(LOGOUT_USER);\nexport const saveUserData = createAction(SAVE_USER_DATA);\nexport const saveUserPassword = createAction(SAVE_USER_PASSWORD);\nexport const updateUserData = createAction(UPDATE_USER_DATA);\nexport const updatedUserData = createAction(UPDATED_USER_DATA);\nexport const removeUserData = createAction(REMOVE_USER_DATA);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const loginSuccess = createAction(LOGIN_SUCCESS);\nexport const loginFailed = createAction(LOGIN_FAILED);\nexport const getUserProfile = createAction(GET_USER_PROFILE);\nexport const getUserByToken = createAction(GET_USER_BY_TOKEN);\nexport const updatedProfileData = createAction(UPDATED_PROFILE_DATA);\nexport const preparedAuth = createAction(PREPARED_AUTH);\nexport const updatedProfileQuestionData = createAction(UPDATED_PROFILE_QUESTION_DATA);\nexport const updatedProfileAnswerData = createAction(UPDATED_PROFILE_ANSWER_DATA);\nexport const updatedProfileCommentData = createAction(UPDATED_PROFILE_COMMENT_DATA);\nexport const updatedProfileTranslatedData = createAction(UPDATED_PROFILE_TRANSLATED_DATA);\nexport const sendResetPasswordMail = createAction(SEND_RESET_PASSWORD_MAIL);\nexport const resetPassword = createAction(RESET_PASSWORD);\nexport const activateUser = createAction(ACTIVATE_USER);\n","import { connect } from 'react-redux';\nimport Header from '../../components/layouts/Header';\nimport { logoutUser } from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        logout: (data) => dispatch(logoutUser(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React, { Component, PropTypes } from 'react';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\nimport NotificationsSystem from 'reapop';\nimport theme from 'reapop-theme-wybo';\nimport Header from '../containers/layouts/Header';\nimport { ClipLoader } from 'react-spinners';\n\nclass App extends Component {\n  componentWillMount() {\n    this.props.fetchLoginState();\n  }\n\n  handleLogout() {\n    //this.props.dispatch(clickLogout());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { auth } = this.props.state;\n\n    return auth.isPrepared ? (\n      <BrowserRouter >\n        <div className=\"uk-margin-bottom\" >\n          <Header />\n          {children}\n          <NotificationsSystem theme={theme} />\n        </div>\n      </BrowserRouter>\n    ) : (\n      <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n        <ClipLoader />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from '../components/App';\nimport { loginUserJwt } from '../actions/User.js';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchLoginState: () => dispatch(loginUserJwt())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nclass ScrollToTop extends Component {\n  componentDidUpdate(prevProps) {\n    if (this.props.location !== prevProps.location) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n\nexport default withRouter(ScrollToTop);\n","import React, { Component } from 'react';\nimport { Field } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass CountryFormSelect extends Component {\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { id, name, placeholder } =  this.props;\n\n    return (\n      <Field id={id} name={name} component=\"select\" className={'form-control uk-select'}>\n        <option value=\"\">{placeholder}</option>\n        <option value=\"1\" >{ formatMessage({id: \"countries.japan\" })}</option>\n        <option value=\"2\" >{ formatMessage({id: \"countries.usa\" })}</option>\n        <option value=\"3\" >{ formatMessage({id: \"countries.SoutheastAsia\" })}</option>\n      </Field>\n    );\n  }\n}\n\nexport default injectIntl(CountryFormSelect);","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\nimport CountryFormSelect from '../CountryFormSelect';\n\nclass SignUpForm extends React.Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.name) {\n      errors.name = formatMessage({id: \"errors.sign_ups.name\"});\n    }\n\n    if (!values.mail) {\n      errors.mail = formatMessage({id: \"errors.sign_ups.mail\"});\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.mail)) {\n      errors.mail = formatMessage({id: \"errors.sign_ups.appropriate_mail\"});\n    }\n\n    if (!values.country_id) {\n      errors.country_id = formatMessage({id: \"errors.sign_ups.country\"});\n    }\n\n    if (!values.password) {\n      errors.password = formatMessage({id: \"errors.sign_ups.password\"});\n    }\n\n    if (values.passwordConfirm !== values.password) {\n      errors.passwordConfirm = formatMessage({id: \"errors.sign_ups.confirm_password\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          mail: '',\n          country_id: '',\n          password: '',\n          passwordConfirm: ''\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'name'}\n                     name=\"name\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.name\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.name && errors.name && <div className=\"uk-text-warning\">{errors.name}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'mail'}\n                     name=\"mail\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.mail\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.mail && errors.mail && <div className=\"uk-text-warning\">{errors.mail}</div>}\n              </div>\n\n              <div className=\"uk-margin\" >\n                <CountryFormSelect \n                  id={'counrty_id'}\n                  name=\"country_id\" \n                  placeholder={formatMessage({id: \"placeholders.sign_ups.country\"})} />\n                {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{ formatMessage({id: \"errors.sign_ups.country\"}) }</div>}\n              </div>\n\n              <div className=\"uk-margin\">\n                <Field\n                  id={'password'}\n                     name=\"password\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.password && errors.password && <div className=\"uk-text-warning\">{errors.password}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'passwordConfirm'}\n                     name=\"passwordConfirm\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.confirm_password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.passwordConfirm && errors.passwordConfirm && <div className=\"uk-text-warning\">{errors.passwordConfirm}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.sign_up\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(SignUpForm));\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport SignUpForm from './SignUpForm';\nimport { injectIntl } from 'react-intl';\n\nclass SignUp extends React.Component {\n\n  onClickSubmit(formData) {\n    const { name, mail, country_id, password } = formData;\n    const { history } = this.props;\n    this.props.clickSubmit({ name, mail, country_id, password, history });\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{ formatMessage({id: \"titles.sign_up\"}) }</h2>\n\n        <SignUpForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(SignUp);\n","import { connect } from 'react-redux';\nimport SignUp from '../../components/users/SignUp';\nimport {\n    createUserAccount,\n    saveUserMnemonic\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        clickSubmit: (data) => dispatch(createUserAccount(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass LoginForm extends React.Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.mail) {\n      errors.mail = formatMessage({id: \"errors.login.mail\"});\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.mail)) {\n      errors.mail = formatMessage({id: \"errors.login.appropriate_mail\"});\n    }\n\n    if (!values.password) {\n      errors.password = formatMessage({id: \"errors.login.password\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          mail: '',\n          password: ''\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'mail'}\n                     name=\"mail\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.login.mail\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.mail && errors.mail && <div className=\"uk-text-warning\">{errors.mail}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'password'}\n                     name=\"password\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.login.password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.password && errors.password && <div className=\"uk-text-warning\">{errors.password}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.login\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(LoginForm));\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n/* import { ClipLoader } from 'react-spinners';*/\nimport LoginForm from './LoginForm';\nimport { injectIntl } from 'react-intl';\n\n\nclass Login extends React.Component {\n\n  onClickSubmit(formData) {\n    const { mail, password } = formData;\n    const { history } = this.props;\n    return this.props.handleSubmit({ mail, password, history });\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.login\"})}</h2>\n\n        <LoginForm onSubmit={this.onClickSubmit.bind(this)} />\n        <p><Link to=\"/users/password_reset\" >{formatMessage({id: \"links.password_reset\"})}</Link></p>\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(Login);\n","import { connect } from 'react-redux';\nimport Login from '../../components/users/Login';\nimport {\n    loginUser\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleSubmit: (data) => dispatch(loginUser(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass PasswordResetForm extends Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.mail) {\n      errors.mail = formatMessage({id: \"errors.login.mail\"});\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.mail)) {\n      errors.mail = formatMessage({id: \"errors.login.appropriate_mail\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          mail: '',\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'mail'}\n                     name=\"mail\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.login.mail\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.mail && errors.mail && <div className=\"uk-text-warning\">{errors.mail}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.send\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(PasswordResetForm));\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n/* import { ClipLoader } from 'react-spinners';*/\nimport PasswordResetForm from './PasswordResetForm';\nimport { injectIntl } from 'react-intl';\n\nclass PasswordReset extends Component {\n\n  onClickSubmit(formData) {\n    const { mail } = formData;\n    return this.props.handleSubmit(mail);\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.password_reset\"})}</h2>\n        <p>{formatMessage({id: \"messages.enter_mail\"})}</p>\n        <PasswordResetForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(PasswordReset);\n","import { connect } from 'react-redux';\nimport PasswordReset from '../../components/users/PasswordReset';\nimport {\n  sendResetPasswordMail\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleSubmit: (data) => dispatch(sendResetPasswordMail(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordReset);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass PasswordForm extends Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.password) {\n      errors.password = formatMessage({id: \"errors.sign_ups.password\"});\n    }\n\n    if (values.passwordConfirm !== values.password) {\n      errors.passwordConfirm = formatMessage({id: \"errors.sign_ups.confirm_password\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          password: '',\n          passwordConfirm: ''\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'password'}\n                     name=\"password\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.password && errors.password && <div className=\"uk-text-warning\">{errors.password}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'passwordConfirm'}\n                     name=\"passwordConfirm\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.confirm_password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.passwordConfirm && errors.passwordConfirm && <div className=\"uk-text-warning\">{errors.passwordConfirm}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.send\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(PasswordForm));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\n/* import { ClipLoader } from 'react-spinners';*/\nimport PasswordForm from './PasswordForm';\nimport { injectIntl } from 'react-intl';\nimport { isEmptyObject } from '../../utils';\n\nclass NewPassword extends Component {\n\n  componentDidMount() {\n    const { params } = this.props.match;\n    const { token } = params;\n    this.token = token;\n    return this.props.fetchUser(token);\n  }\n\n  onClickSubmit(formData) {\n    const { password } = formData;\n    const { id } = this.props.state.auth.user;\n    const { history } = this.props;\n    const token = this.token;\n    return this.props.handleSubmit({ id, password, token, history });\n  }\n\n  render() {\n    const { user, isFetching } = this.props.state.auth;\n\n    if (isFetching) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    if (isEmptyObject(user)) {\n      return (\n        <main className=\"uk-container uk-container-small\">\n          <p>不正なアクセスです</p>\n        </main>\n      );\n    }\n\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.password_reset\"})}</h2>\n        <p>{formatMessage({id: \"messages.enter_new_password\"})}</p>\n        <PasswordForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(NewPassword);\n","import { connect } from 'react-redux';\nimport NewPassword from '../../components/users/NewPassword';\nimport {\n  saveUserPassword,\n  getUserByToken,\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchUser: (token) => dispatch(getUserByToken(token)),\n    handleSubmit: (data) => dispatch(saveUserPassword(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewPassword);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\nimport { isEmptyObject } from '../../utils';\n\nclass Activate extends Component {\n\n  componentDidMount() {\n    const { params } = this.props.match;\n    const { history } = this.props;\n    const { token } = params;\n    this.token = token;\n    return this.props.activateUser({ token, history });\n  }\n\n  render() {\n    const { user, isFetching } = this.props.state.auth;\n\n    if (isFetching) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    if (isEmptyObject(user)) {\n      return (\n        <main className=\"uk-container uk-container-small\">\n          <p>不正なアクセスです</p>\n        </main>\n      );\n    }\n\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.activate\"})}</h2>\n        <p>{formatMessage({id: \"messages.activate_completed\"})}</p>\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(Activate);\n","import { connect } from 'react-redux';\nimport Activate from '../../components/users/Activate';\nimport {\n  activateUser,\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    activateUser: (token) => dispatch(activateUser(token)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Activate);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { connect } from 'react-redux';\nimport { getUserProfile } from '../../actions/User';\nimport QuestionListView from '../../components/QuestionListView';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { isEmptyObject } from '../../utils';\nimport { injectIntl } from 'react-intl';\n\nclass Profile extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.state = {currentTab: 'questions'};\n    this.userId = parseInt(params.id, 10);\n    this.props.fetchUserProfile(this.userId);\n  }\n\n  onClickTab(newTabKey, e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.setState({\n      currentTab: newTabKey\n    });\n  }\n\n  getTabList() {\n    const { formatMessage } = this.props.intl;\n    const tabData = [\n      {\n        name: formatMessage({id: \"links.question\"}),\n        key: 'questions'\n      },\n      {\n        name: formatMessage({id: \"links.answer\"}),\n        key: 'answers'\n      },\n      {\n        name: formatMessage({id: \"links.comment\"}),\n        key: 'comments'\n      },\n      {\n        name: formatMessage({id: \"links.translate\"}),\n        key: 'translates'\n      }\n    ];\n\n    return (\n      <ul className=\"uk-tab\" >\n        {tabData.map(v => {\n           const active = this.state['currentTab'] === v.key\n                        ? 'uk-active'\n                        : '';\n           return (\n             <li className={active} onClick={this.onClickTab.bind(this, v.key)} key={v.key} >\n               <a href=\"\">{v.name}</a>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  getAnswerList(answers) {\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\">\n      {answers.map(answer => {\n        const { user } = answer;\n        const userName = user ? user.name : '不明なユーザー';\n        return (\n          <li key={answer.id} >\n            <p className=\"uk-text-lead uk-text-truncate\" ><Link to={`/questions/${answer.question_id}`}>{`${answer.content}`}</Link></p>\n            <p className=\"uk-text-meta\">{dayjs(answer.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n              <div className=\"uk-width-auto\">\n                <img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" />\n              </div>\n              <div className=\"uk-width-expand\">\n                <h4 className=\"uk-comment-meta uk-margin-remove\">{ userName }</h4>\n              </div>\n            </div>\n          </li>\n        );\n      })}\n      </ul>\n    );\n  }\n\n  getCommentList(comments) {\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\">\n        {comments.map(comment => {\n           const { user, answer } = comment;\n           const userName = user ? user.name : '不明なユーザー';\n           return (\n             <li key={comment.id} >\n               <p className=\"uk-text-lead uk-text-truncate\" ><Link to={`/questions/${answer.question_id}`}>{`${comment.content}`}</Link></p>\n               <p className=\"uk-text-meta\">{dayjs(comment.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n               <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n                 <div className=\"uk-width-auto\">\n                   <img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" />\n                 </div>\n                 <div className=\"uk-width-expand\">\n                   <h4 className=\"uk-comment-meta uk-margin-remove\">{ userName }</h4>\n                 </div>\n               </div>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  getTranslatedList(translates) {\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\">\n        {translates.map(translate => {\n           const link = translate.translation_link;\n           return (\n             <li key={`translate_${translate.id}_${translate.user_id}`} >\n               <p className=\"uk-text-lead uk-text-truncate\" ><Link to={link}>{`${translate.content}`}</Link></p>\n               <p className=\"uk-text-meta\">{dayjs(translate.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  filterTranslatedContent(translate) {\n    const translatedContentArray = [];\n    translate.map((v) => {\n      if (v.length === 0) {\n        return;\n      };\n      v.map(e => translatedContentArray.push(e));\n    })\n    return translatedContentArray;\n  }\n\n  getCurrentTabContents(tabState, currentTab) {\n    const { questions, answers, comments, translates } = tabState;\n    if (currentTab === 'questions') {\n      return (<QuestionListView questionArray={questions} translateLanguageId={1} />);\n    } else if (currentTab === 'answers') {\n      return this.getAnswerList(answers);\n    } else if (currentTab === 'comments') {\n      return this.getCommentList(comments);\n    } else if (currentTab === 'translates') {\n      const translateArray = this.filterTranslatedContent(translates);\n      return this.getTranslatedList(translateArray);\n    }\n  }\n\n  render() {\n    // とりあえずログインユーザーのプロフィールページを。\n    // propsで渡されたuserIdのプロフィールページを表示するようにする。\n    const { profile } = this.props.state;\n    const { user } = profile;\n    const { formatMessage } = this.props.intl;\n\n    if (isEmptyObject(user)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const tabList = this.getTabList();\n    const userPostList = this.getCurrentTabContents(profile, this.state.currentTab);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-grid uk-grid-small uk-flex-middle uk-margin-bottom\">\n          <div className=\"uk-width-auto uk-flex-first\">\n            <img src={user.image_path} className=\"uk-border-circle\" alt=\"\" width=\"120\" height=\"\" />\n          </div>\n          <div className=\"uk-width-expand\" >\n            <p className=\"uk-text-lead\">{user.name}</p>\n            <p>{formatMessage({id: \"messages.birthplace\"})}: {user.country.name}</p>\n          </div>\n        </div>\n        <div>\n          <p style={{\"whiteSpace\": \"pre-wrap\"}}>{user.profile}</p>\n        </div>\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.post_list\"})}</span></h3>\n        {tabList}\n        {userPostList}\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchUserProfile: (userId) => dispatch(getUserProfile(userId)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(Profile));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from '../LanguageFormSelect';\n\nclass ProfileForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      image_url: ''\n    };\n  }\n\n  handleImageChange(setFieldValue, e) {\n    const file = e.currentTarget.files[0];\n    setFieldValue(\"image\", file);\n    const createObjectURL = (window.URL || window.webkitURL).createObjectURL || window.createObjectURL;\n    const image_url = createObjectURL(file);\n    this.setState({ image_url });\n  }\n\n  validate(values) {\n    let errors = {};\n    if (!values.country_id) {\n      errors.country_id = '出身地を設定してください';\n    }\n    return errors;\n  }\n\n  render() {\n    const { user } = this.props.state.auth;\n    const { id, name, profile, country_id } = user;\n    const imagePreview = this.state.image_url !== ''\n                       ? (<p><img src={this.state.image_url} alt=\"\" width=\"200\" /></p>)\n                       : '';\n\n    return (\n      <Formik\n      initialValues={{ id, name, profile, country_id, image: ''}}\n        enableReinitialize={true}\n        validate={this.validate}\n        onSubmit={(values, { setSubmitting, setErrors }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} className=\"uk-form-stacked\" >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <label className=\"uk-form-label\">ユーザー名</label>\n                <Field\n                  id={'name'}\n                     name=\"name\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder=\"ニックネーム\"\n                     className={'uk-form-control uk-input'}\n                />\n                {touched.name && errors.name && <div>{errors.name}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <label className=\"uk-form-label\">出身地</label>\n                <LanguageFormSelect name=\"country_id\" placeholder=\"出身地\" />\n                {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{errors.country_id}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <label className=\"uk-form-label\">プロフィール</label>\n                <Field\n                  id={'profile'}\n                     name=\"profile\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder=\"プロフィールを入力してください\"\n                     className={'uk-form-control uk-textarea'}\n                     rows=\"5\"\n                />\n                {touched.profile && errors.profile && <div className=\"uk-text-warning\">{errors.profile}</div>}\n              </div>\n              <div className=\"uk-margin js-upload\" uk-form-custom=\"true\" >\n                <label className=\"uk-form-label\">プロフィール画像</label>\n                <input id=\"file\" name=\"image\" type=\"file\" onChange={this.handleImageChange.bind(this, setFieldValue)} />\n\n                {touched.image && errors.image && <div>{errors.image}</div>}\n                <button className=\"uk-button uk-button-default\" type=\"button\" tabIndex=\"-1\">選択</button>\n                {imagePreview}\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-primary\" disabled={isSubmitting}>\n                  保存\n                </button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    )\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileForm);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ClipLoader } from 'react-spinners';\nimport ProfileForm from './ProfileForm';\n\nclass Profile extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const { id, name, country_id, profile } = this.props.state.auth.user;\n    console.log('user', this.props.state.auth.user);\n\n    this.setState({\n      user_id: id,\n      name,\n      profile,\n      country_id\n    });\n  }\n\n  onClickSubmit(formData) {\n    const { id, name, profile, country_id, image } = formData;\n\n    const postData = {\n      user_id: id,\n      name,\n      profile,\n      country_id,\n      image\n    };\n    this.props.clickedSaveButton(postData);\n  }\n\n  render() {\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >プロフィール編集</h2>\n        \n        <ProfileForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default Profile;\n","import { connect } from 'react-redux';\nimport Profile from '../../components/users/Profile';\nimport {\n    loginUser,\n    saveUserData\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        clickedSaveButton: (postData) => dispatch(saveUserData(postData)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\n","import React, { Component } from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport default class UserOnly extends Component {\n  static contextTypes = {\n    router: PropTypes.object.isRequired\n  }\n\n  componentWillMount() {\n    this.guestWillTransfer(this.props, this.context.router);\n  }\n\n  componentWillUpdate(nextProps) {\n    this.guestWillTransfer(nextProps, this.context.router);\n  }\n\n  guestWillTransfer(props, router) {\n    const { auth } = props.state;\n    const { history } = router;\n    if (!auth.isLoggedIn) {\n      return history.push('/users/login');\n    }\n    return true;\n  }\n\n  render() {\n    return (\n      <Route children={this.props.children} />\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport UserOnly from '../../components/auth/UserOnly';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserOnly);\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport default class GuestOnly extends Component {\n  static contextTypes = {\n    router: PropTypes.object.isRequired\n  }\n\n  componentWillMount() {\n    console.log('hoge');\n    this.userWillTransfer(this.props, this.context.router);\n  }\n\n  componentWillUpdate(nextProps) {\n    this.userWillTransfer(nextProps, this.context.router);\n  }\n\n  userWillTransfer(props, router) {\n    const { auth } = props.state;\n    const { history } = router;\n    if (auth.isLoggedIn) {\n      /* return <Redirect to={{ pathname: '/login', state: { from: this.props.location } }} />;*/\n      return history.replace('/');\n    }\n  }\n\n  render() {\n    return (\n      <Route children={this.props.children} />\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport GuestOnly from '../../components/auth/GuestOnly';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GuestOnly);\n","import ja_JP from './locales/ja_JP';\nimport en_US from './locales/en_US';\n\nexport const locales = {\n  ja: {\n    locale: 'ja',\n    messages: ja_JP,\n    translateLanguageId: 1,\n  },\n  en: {\n    locale: 'en',\n    messages: en_US,\n    translateLanguageId: 2,\n  }\n};\n\nexport const categories = {\n  all: {\n      category: 'all',\n      categoryId: 0,\n  },\n  subculture: {\n      category: 'subculture',\n      categoryId: 1,\n  },\n  culture: {\n      category: 'culture',\n      categoryId: 2,\n  },\n  tourism: {\n      category: 'tourism',\n      categoryId: 3,\n  },\n  music: {\n      category: 'music',\n      categoryId: 4,\n  },\n};","const ja_JP = {\n  \"titles.sign_up\": '新規登録',\n  \"titles.login\": 'ログイン',\n  \"titles.activate\": '認証',\n  \"titles.password_reset\": 'パスワード再設定',\n  \"titles.question_list\": '質問一覧',\n  \"titles.answer_list\": '回答一覧',\n  \"titles.post_list\": '投稿一覧',\n  \"titles.translation_list\": '翻訳一覧',\n  \"titles.not_translated_list\": '未翻訳一覧',\n  \"messages.empty_answers\": 'まだ回答がありません。最初の投稿者になりましょう！',\n  \"messages.birthplace\": '出身地',\n  \"messages.you_are_not_target\": 'この質問は 「%s」 の方が回答対象者です。',\n  \"messages.enter_mail\": 'メールアドレスを入力してください',\n  \"messages.enter_new_password\": '新しいパスワードを入力してください',\n  \"messages.activate_completed\": '認証処理が完了しました。',\n  \"links.to_not_translated_list\": '未翻訳の一覧を見る',\n  \"links.edit\": '編集',\n  \"links.question\": '質問',\n  \"links.answer\": '回答',\n  \"links.comment\": 'コメント',\n  \"links.translate\": '翻訳',\n  \"links.profile\": 'プロフィール',\n  \"links.profile_edit\": 'プロフィール編集',\n  \"links.sign_up\": '新規登録',\n  \"links.login\": 'ログイン',\n  \"links.logout\": 'ログアウト',\n  \"links.password_reset\": 'パスワードを忘れた',\n  \"links.to_question_view\": '質問ページへ',\n  \"languages.japanese\": '日本語',\n  \"languages.english\": '英語',\n  \"countries.japan\": '日本',\n  \"countries.usa\": 'アメリカ合衆国',\n  \"countries.SoutheastAsia\": '東南アジア', \n  \"categories.all\": 'すべて',\n  \"categories.subculture\": '漫画・アニメ',\n  \"categories.culture\": '文化',\n  \"categories.tourism\": '観光',\n  \"categories.music\": '音楽',\n  \"errors.questions.content\": '質問文を入力してください',\n  \"errors.questions.country_id\": '回答対象国を指定してください',\n  \"errors.questions.translate_language_id\": '投稿言語を指定してください',\n  \"errors.questions.category_id\": 'カテゴリーを指定してください',\n  \"errors.answers.content\": '回答文を入力してください',\n  \"errors.answers.translate_language_id\": '投稿言語を指定してください',\n  \"errors.translations.content\": '翻訳を入力してください',\n  \"errors.translations.translate_language_id\": '投稿言語を指定してください',\n  \"errors.sign_ups.name\": 'ユーザー名を入力してください',\n  \"errors.sign_ups.mail\": 'メールアドレスを入力してください',\n  \"errors.sign_ups.country\": '出身地・所在地を選択してください', \n  \"errors.sign_ups.appropriate_mail\": '適切なメールアドレスを指定してください',\n  \"errors.sign_ups.password\": 'パスワードを入力してください',\n  \"errors.sign_ups.confirm_password\": 'パスワードが一致していません',\n  \"errors.login.mail\": 'メールアドレスを入力してください',\n  \"errors.login.appropriate_mail\": '適切なメールアドレスを指定してください',\n  \"errors.login.password\": 'パスワードを入力してください',\n  \"placeholders.sign_ups.name\": '名前',\n  \"placeholders.sign_ups.mail\": 'メールアドレス',\n  \"placeholders.sign_ups.country\": '出身地・所在地', \n  \"placeholders.sign_ups.password\": 'パスワード',\n  \"placeholders.sign_ups.confirm_password\": 'パスワード確認',\n  \"placeholders.login.mail\": 'メールアドレス',\n  \"placeholders.login.password\": 'パスワード',\n  \"placeholders.questions.content\": '質問を入力してください',\n  \"placeholders.questions.country_id\": '回答対象国',\n  \"placeholders.questions.translate_language_id\": '投稿言語',\n  \"placeholders.questions.category_id\": 'カテゴリー',\n  \"placeholders.questions.submit_btn\": '投稿',\n  \"placeholders.answers.content\": '回答を入力してください',\n  \"placeholders.answers.translate_language_id\": '投稿言語',\n  \"placeholders.answers.submit_btn\": '投稿',\n  \"placeholders.translations.content\": '翻訳を入力してください',\n  \"placeholders.translations.translate_language_id\": '投稿言語',\n  \"buttons.title.reply\": '返信',\n  \"buttons.title.post\": '投稿',\n  \"buttons.title.sign_up\": '新規登録',\n  \"buttons.title.login\": 'ログイン',\n  \"buttons.title.send\": '送信',\n  \"translated.name\": '翻訳者',\n  \"translated.state\": '未翻訳',\n  \"categories.comic_anime\": '漫画・アニメ',\n  \"categories.culture\": '文化',\n  \"categories.tourism\": '観光',\n  \"categories.music\": '音楽',\n};\nexport default ja_JP;\n","const en_US = {\n  \"titles.sign_up\": 'Sign Up',\n  \"titles.login\": 'Login',\n  \"titles.activate\": 'Activation',\n  \"titles.password_reset\": 'Password Reset',\n  \"titles.question_list\": 'Questions',\n  \"titles.answer_list\": 'Answers',\n  \"titles.post_list\": 'Posts',\n  \"titles.translation_list\": 'Translations',\n  \"titles.not_translated_list\": 'Not Translated List',\n  \"messages.empty_answers\": 'There is no answer yet. Be the first contributor!',\n  \"messages.birthplace\": 'BirthPlace',\n  \"messages.you_are_not_target\": 'This question is subject to answers in \"%s\".',\n  \"messages.enter_mail\": 'Enter your email address.',\n  \"messages.enter_new_password\": 'Enter new password.',\n  \"messages.activate_completed\": 'Activation is completed.',\n  \"links.to_not_translated_list\": 'See not translated lists',\n  \"links.edit\": 'Edit',\n  \"links.question\": 'Question',\n  \"links.answer\": 'Answer',\n  \"links.comment\": 'Comment',\n  \"links.translate\": 'translate',\n  \"links.profile\": 'Profile',\n  \"links.profile_edit\": 'Profile Edit',\n  \"links.sign_up\": 'Sign Up',\n  \"links.login\": 'Login',\n  \"links.password_reset\": 'Forgot password',\n  \"links.logout\": 'Logout',\n  \"links.to_question_view\": 'to question page',\n  \"languages.japanese\": 'Japanese',\n  \"languages.english\": 'English',\n  \"countries.japan\": 'Japan',\n  \"countries.usa\": 'USA',\n  \"countries.SoutheastAsia\": 'SoutheastAsia', \n  \"categories.all\": 'All',\n  \"categories.subculture\": 'Comic・Anime',\n  \"categories.culture\": 'Culture',\n  \"categories.tourism\": 'Tourism',\n  \"categories.music\": 'Music',\n  \"errors.questions.content\": 'Please write a question text.',\n  \"errors.questions.country_id\": 'Please select target country.',\n  \"errors.questions.translate_language_id\": 'Please select the language.',\n  \"errors.questions.category_id\": 'Please select the cateogry.',\n  \"errors.answers.content\": 'Please write an answer text.',\n  \"errors.answers.translate_language_id\": 'Please select the language.',\n  \"errors.translations.content\": 'Please write a translated text.',\n  \"errors.translations.translate_language_id\": 'Please select the language.',\n  \"errors.sign_ups.name\": 'Please enter user name.',\n  \"errors.sign_ups.mail\": 'Please enter your e-mail address.',\n  \"errors.sign_ups.country\": 'Please enter your Birthplace・Location', \n  \"errors.sign_ups.appropriate_mail\": 'Please specify an appropriate email address.',\n  \"errors.sign_ups.password\": 'Please enter password.',\n  \"errors.sign_ups.confirm_password\": 'Password does not match.',\n  \"errors.login.mail\": 'Please enter your e-mail address.',\n  \"errors.login.appropriate_mail\": 'Please specify an appropriate email address.',\n  \"errors.login.password\": 'Please enter password.',\n  \"placeholders.sign_ups.name\": 'Name',\n  \"placeholders.sign_ups.mail\": 'Mail',\n  \"placeholders.sign_ups.country\": 'Birthplace・Location',\n  \"placeholders.sign_ups.password\": 'Password',\n  \"placeholders.sign_ups.confirm_password\": 'Password Confirm',\n  \"placeholders.login.mail\": 'Mail',\n  \"placeholders.login.password\": 'Password',\n  \"placeholders.questions.content\": 'Write your question!!',\n  \"placeholders.questions.country_id\": 'Target User Country',\n  \"placeholders.questions.translate_language_id\": 'Language',\n  \"placeholders.questions.category_id\": 'Category',\n  \"placeholders.questions.submit_btn\": 'POST',\n  \"placeholders.answers.content\": 'Write your answer!!',\n  \"placeholders.answers.translate_language_id\": 'Language',\n  \"placeholders.answers.submit_btn\": 'POST',\n  \"placeholders.translations.content\": 'Please write a translated text.',\n  \"placeholders.translations.translate_language_id\": 'Language',\n  \"buttons.title.reply\": 'Reply',\n  \"buttons.title.post\": 'Post',\n  \"buttons.title.sign_up\": 'Sign Up',\n  \"buttons.title.login\": 'Login',\n  \"buttons.title.send\": 'Send',\n  \"translated.name\": 'Translator',\n  \"translated.state\": 'Untranslated',\n  \"categories.comic_anime\": 'Comic・Anime',\n  \"categories.culture\": 'culture',\n  \"categories.tourism\": 'tourism',\n  \"categories.music\": 'music',\n};\nexport default en_US;\n","import { locales, categories } from './intl';\n\nconst savedLocale = localStorage.getItem('locale');\nconst currentLocale = savedLocale ? savedLocale : 'ja';\nconst savedCategory = localStorage.getItem('category');\nconst currentCategory = savedCategory ? savedCategory : 'all';\n\nexport const initialState = {\n  intl: locales[currentLocale],\n  ctgr: categories[currentCategory],\n  signUp: {\n    mail: '',\n    password: '',\n    mnemonic: '',\n    hash: '',\n  },\n  profile: {\n    isFetching: false,\n    user: {},\n    questions: [],\n    answers: [],\n    comments: [],\n  },\n  auth: {\n    isPrepared: false,\n    isFetching: false,\n    isLoggedIn: false,\n    user: {},\n    jwt: ''\n  },\n  answers: {\n    isFetching: false,\n    answerArray: [],\n    currentAnswer: {}\n  },\n  answerTranslations: {\n    isFetching: false,\n    currentTranslationList: [],\n    currentTranslation: {},\n  },\n  questions: {\n    isFetching: false,\n    translateLanguageId: 1,\n    questionArray: [],\n    currentQuestion: {},\n  },\n  questionTranslations: {\n    isFetching: false,\n    currentTranslationList: [],\n    currentTranslation: {},\n  },\n  comments: {\n    isFetching: false,\n    currentCommentList: [],\n    currentComment: {}\n  },\n  commentTranslations: {\n    isFetching: false,\n    currentTranslationList: [],\n    currentTranslation: {},\n  },\n  //未翻訳コメントリスト一覧表示\n  not_translate: {\n    //api接続中である場合（非同期処理をしている途中）はtrueになる\n    isFetching: false,\n    questions: [],\n    answers: [],\n    comments: [],\n  },\n  //評価機能\n  votes: {\n    //api接続中である場合（非同期処理をしている途中）はtrueになる\n    isFetching: false,\n    status: [],\n  },\n  //評価機能\n  voteTranslations: {\n    //api接続中である場合（非同期処理をしている途中）はtrueになる\n    isFetching: false,\n    status: [],\n  },\n};\n","import { combineReducers } from 'redux';\nimport { reducer as notificationsReducer } from 'reapop';\nimport * as questions from './reducers/Question';\nimport * as answers from './reducers/Answer';\nimport * as users from './reducers/User';\nimport * as comments from './reducers/Comment';\nimport * as questionTranslations from './reducers/QuestionTranslation';\nimport * as answerTranslations from './reducers/AnswerTranslation';\nimport * as commentTranslations from './reducers/CommentTranslation';\nimport * as notTranslated from './reducers/NotTranslated';\nimport * as votes from './reducers/Votes';\nimport * as voteTranslations from './reducers/VoteTranslation';\nimport { intl } from './reducers/Intl';\nimport { ctgr } from './reducers/Category';\nimport { addLocaleData } from 'react-intl';\n\nconst reducer = combineReducers({\n  intl: intl,\n  ctgr: ctgr,\n  answers: answers.list,\n  questions: questions.list,\n  questionTranslations: questionTranslations.list,\n  answerTranslations: answerTranslations.list,\n  auth: users.auth,\n  signUp: users.signUp,\n  profile: users.profile,\n  comments: comments.list,\n  commentTranslations: commentTranslations.list,\n  not_translate: notTranslated.list,\n  votes: votes.list,\n  voteTranslations: voteTranslations.list,\n  notifications: notificationsReducer()\n});\n\nexport default reducer;\n","import {\n  UPDATE_CURRENT_LANGUAGE,\n} from '../actions/Intl';\nimport { initialState } from '../constants';\nimport { locales } from '../intl';\n\nexport const intl = (state = initialState.intl, action) => {\n  switch (action.type) {\n  case UPDATE_CURRENT_LANGUAGE:\n    const { locale, messages, translateLanguageId } = locales[action.payload];\n    localStorage.setItem('locale', locale);\n    return {\n      ...state,\n      locale,\n      messages,\n      translateLanguageId\n    };\n  default:\n    return state;\n  }\n};\n\n","import { UPDATE_CURRENT_CATEGORY } from '../actions/Category';\nimport { initialState } from '../constants';\nimport { categories } from '../intl';\n\nexport const ctgr = (state = initialState.ctgr, action) => {\n\nswitch (action.type) {\ncase UPDATE_CURRENT_CATEGORY:\n    const { category, categoryId } = categories[action.payload];\n    localStorage.setItem('category', category);\n    return {\n    ...state,\n    category,\n    categoryId\n    };\ndefault:\n    return state;\n}\n};","import {\n    CHANGE_ANSWER_FORM_CONTENT,\n    REQUEST_DATA,\n    RECEIVE_DATA_SUCCESS,\n    RECEIVE_SINGLE_DATA_SUCCESS,\n    RECEIVE_DATA_FAILED,\n    INITIALIZE_FORM,\n    POST_ANSWER_DATA\n} from '../actions/Answer';\nimport { initialState } from '../constants';\n\nexport const form = (state = initialState.answerForm, action) => {\n    switch (action.type) {\n    case CHANGE_ANSWER_FORM_CONTENT:\n        return {\n            ...state,\n            content: action.payload,\n        };\n    case POST_ANSWER_DATA:\n        return {\n            ...state\n        };\n    case REQUEST_DATA:\n        return {\n            ...state,\n            isFetching: true,\n        };\n    case RECEIVE_DATA_SUCCESS:\n        return {\n            ...state,\n            isFetching: false,\n        };\n    case RECEIVE_DATA_FAILED:\n        return {\n            ...state,\n            isFetching: false,\n        };\n    case INITIALIZE_FORM:\n        return {\n            ...state,\n            content: ''\n        };\n    default:\n        return state;\n    }\n};\n\nexport const list = (state = initialState.answers, action) => {\n    switch (action.type) {\n    case REQUEST_DATA:\n        return {\n            ...state,\n            isFetching: true,\n        };\n    case RECEIVE_DATA_SUCCESS:\n        return {\n            ...state,\n            isFetching: false,\n            answerArray: action.payload.data,         \n        };\n    case RECEIVE_SINGLE_DATA_SUCCESS:\n        return {\n            ...state,\n            isFetching: false,\n            currentAnswer: action.payload.data\n        };\n    case RECEIVE_DATA_FAILED:\n        return {\n            ...state,\n            isFetching: false,\n        };\n    case INITIALIZE_FORM:\n        return {\n            ...state,\n            content: ''\n        };\n    default:\n        return state;\n    }\n};\n","import {\n  POST_QUESTION_DATA,\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATE_CURRENT_TRANSLATE_LANGUAGE,\n  UPDATED_QUESTION_DATA\n} from '../actions/Question';\nimport { initialState } from '../constants';\n\nexport const form = (state = initialState.questionForm, action) => {\n  switch (action.type) {\n  case POST_QUESTION_DATA:\n    return {\n      ...state\n    };\n  default:\n    return state;\n  }\n};\n\nexport const list = (state = initialState.questions, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      //...stateは他の状態は維持してisFetchingだけを変更するというコード\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      //isFetchingは終了したのでfalseにしている。\n      isFetching: false,\n      //ここでquestionArrayに値を入れている。\n      questionArray: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentQuestion: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATE_CURRENT_TRANSLATE_LANGUAGE:\n    return {\n      ...state,\n      translateLanguageId: parseInt(action.payload)\n    };\n  case UPDATED_QUESTION_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      currentQuestion: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATED_SINGLE_QUESTION_TRANSLATION\n} from '../actions/QuestionTranslation';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.questionTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslationList: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslation: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_SINGLE_QUESTION_TRANSLATION:\n    return {\n      ...state,\n      currentTranslation: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  POST_ANSWER_TRANSLATION_DATA,\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATED_SINGLE_ANSWER_TRANSLATION\n} from '../actions/AnswerTranslation';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.answerTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslationList: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslation: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_SINGLE_ANSWER_TRANSLATION:\n    return {\n      ...state,\n      currentTranslation: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  CLICK_SUBMIT,\n  REQUEST_DATA,\n  RECEIVE_DATA_FAILED,\n  REMOVE_USER_DATA,\n  UPDATED_USER_DATA,\n  UPDATED_PROFILE_DATA,\n  UPDATED_PROFILE_QUESTION_DATA,\n  UPDATED_PROFILE_ANSWER_DATA,\n  UPDATED_PROFILE_COMMENT_DATA,\n  UPDATED_PROFILE_TRANSLATED_DATA,\n  LOGIN_SUCCESS,\n  LOGIN_FAILED,\n  PREPARED_AUTH\n} from '../actions/User';\nimport { initialState } from '../constants';\n\nexport const signUp = (state = initialState.signUp, action) => {\n  switch (action.type) {\n  case CLICK_SUBMIT:\n    return {\n      ...state,\n    };\n  default:\n    return state;\n  }\n};\n\nexport const auth = (state = initialState.auth, action) => {\n  switch (action.type) {\n  case LOGIN_SUCCESS:\n    return {\n      ...state,\n      isLoggedIn: true,\n      user: action.payload.data,\n      jwt: action.payload.data.jwt\n    };\n  case LOGIN_FAILED:\n    return {\n      ...state,\n      isLoggedIn: false,\n      user: {},\n      jwt: ''\n    };\n  case REMOVE_USER_DATA:\n    return {\n      ...state,\n      isLoggedIn: false,\n      user: {},\n      jwt: ''\n    };\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_USER_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      user: action.payload.data\n    };\n  case PREPARED_AUTH:\n    return {\n      ...state,\n      isPrepared: true\n    };\n  default:\n    return state;\n  }\n};\n\nexport const profile = (state = initialState.profile, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true\n    };\n  case UPDATED_PROFILE_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      user: action.payload.data\n    };\n  case UPDATED_PROFILE_QUESTION_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      questions: action.payload.data\n    };\n  case UPDATED_PROFILE_ANSWER_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      answers: action.payload.data\n    };\n  case UPDATED_PROFILE_COMMENT_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      comments: action.payload.data\n    };\n  case UPDATED_PROFILE_TRANSLATED_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      translates: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  REQUEST_DATA,\n  RECEIVE_COMMENT_DATA_SUCCESS,\n  POST_COMMENT,\n  UPDATED_COMMENT_DATA,\n  UPDATED_SINGLE_COMMENT_DATA,\n  UPDATED_COMMENT_ARRAY\n} from '../actions/Comment';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.comments, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true\n    };\n  case RECEIVE_COMMENT_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      commentArray: action.payload.data\n    };\n  case UPDATED_COMMENT_ARRAY:\n    return {\n      ...state,\n      isFetching: false,\n      commentArray: action.payload.data,\n    };\n  case UPDATED_COMMENT_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      currentCommentList: action.payload.data\n    };\n  case UPDATED_SINGLE_COMMENT_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      currentComment: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATED_SINGLE_COMMENT_TRANSLATION,\n} from '../actions/CommentTranslation';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.commentTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslationList: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslation: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_SINGLE_COMMENT_TRANSLATION:\n    return {\n      ...state,\n      currentTranslation: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n    REQUEST_DATA,\n    RECEIVE_DATA_SUCCESS,\n} from '../actions/NotTranslated';\n  \nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.not_translate, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      //...stateは他の状態は維持してisFetchingだけを変更する。\n      ...state,\n      isFetching: true,\n    };\n  \n  case RECEIVE_DATA_SUCCESS:\n\n    const { questions, answers, comments } = action.payload;\n\n    return {\n      ...state,\n      //isFetchingは終了したのでfalseにしている。\n      isFetching: false,\n      //ここでquestionArrayに値を入れている。\n      questions,\n      answers,\n      comments,\n    };\n  \n  default:\n    return state;\n  }\n};","import {\n    POST_VOTE,\n    REQUEST_DATA,\n    RECEIVE_DATA_SUCCESS,\n    RECEIVE_DATA_FAILED,\n  } from '../actions/VoteTranslation.js';\n\n  import { initialState } from '../constants';\n    \n  export const list = (state = initialState.votes, action) => {\n    switch (action.type) {\n    case POST_VOTE:\n      return {\n        ...state\n      }; \n    case REQUEST_DATA:\n      return {\n        ...state,\n        isFetching: true,\n      };\n    case RECEIVE_DATA_SUCCESS:\n      return {\n        ...state,\n        isFetching: false,\n        questionArray: action.payload.data                  \n      };\n    case RECEIVE_DATA_FAILED:\n      return {\n        ...state,\n        isFetching: false\n      };\n    default:\n      return state;\n    }\n  };\n  ","import {\n  POST_VOTE,\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n} from '../actions/VoteTranslation';\n\nimport { initialState } from '../constants';\n\nexport const form = (state = initialState.voteTranslations, action) => {\n  switch (action.type) {\n  case POST_VOTE:\n    return {\n      ...state\n    };\n  default:\n    return state;\n  }\n};\n\nexport const list = (state = initialState.voteTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      status: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  default:\n    return state;\n  }\n};\n","import axios from 'axios';\n\nexport const createUserAccount = (postData) => {\n    return axios.post('/api/users', postData);\n};\n\nexport const loginUser = (postData) => {\n    const username = postData.mail;\n    const { password } = postData;\n\n    return axios.post('/api/users/login', {\n        username,\n        password\n    });\n};\n\nexport const loginUserJwt = (postData) => {\n    const { jwt } = postData;\n    const headers = {\n        \"Content-Type\": 'application/json',\n        \"Authorization\": `Bearer ${jwt}`\n    };\n    return axios.post('/api/users/login_jwt', {}, { headers });\n};\n\nexport const activateUser = (postData) => {\n  const { token } = postData;\n  return axios.post(`/api/users/activate/${token}`, postData);\n};\n\nexport const resetPassword = (mail) => {\n  return axios.post(`/api/users/password_reset`, { mail });\n};\n\nexport const saveUserPassword = (postData) => {\n  const { token } = postData;\n  return axios.put(\n    `/api/users/update_password/${token}`,\n    postData\n  );\n};\n\nexport const saveUserProfile = (postData) => {\n    const { user_id, name, profile, country_id, image } = postData;\n    let data = new FormData();\n    data.append('name', name);\n    data.append('profile', profile);\n    data.append('country_id', country_id);\n    data.append('image', image);\n    return axios.put(\n        `/api/users/${user_id}`,\n        data,\n        {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        }\n    );\n};\n\nexport const getUser = (user_id) => {\n    return axios.get(`/api/users/${user_id}`);\n};\n\nexport const getUserByToken = (token) => {\n  return axios.get(`/api/users/password_reset/${token}`);\n};\n","import axios from 'axios';\n\nexport const fetchQuestionList = (params) => {\n    return axios.get('/api/questions', {\n        params\n    });\n};\n\nexport const fetchQuestion = (id) => {\n    return axios.get(`/api/questions/${id}`);\n};\n\nexport const postQuestionData = (postData) => {\n    return axios.post('/api/questions', postData);\n};\n\nexport const saveQuestionData = (postData) => {\n  const { question_id } = postData;\n  return axios.put(`/api/questions/${question_id}`, postData);\n};\n\nexport const deleteQuestionData = (params) => {\n  const { question_id } = params;\n  return axios.delete(`/api/questions/${question_id}`, { params });\n};\n","import axios from 'axios';\n\nconst apiUrl = '/api/answers';\n\nexport const fetchAnswer = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const fetchAnswerList = (params) => {\n  return axios.get(apiUrl, {\n    params\n  });\n};\n\nexport const fetchAnswerListWithQuestion = (params) => {\n  return axios.get(`${apiUrl}_with_question`, {\n    params\n  });\n};\n\nexport const postAnswerData = (params) => {\n  return axios.post(apiUrl, params);\n};\n\nexport const saveAnswerData = (saveData) => {\n  const { answer_id } = saveData;\n  return axios.put(`${apiUrl}/${answer_id}`, saveData);\n};\n\nexport const deleteAnswerData = (params) => {\n  const { answer_id } = params;\n  return axios.delete(`${apiUrl}/${answer_id}`, { params });\n};\n","import axios from 'axios';\nconst apiUrl = '/api/comments';\n\nexport const fetchCommentWithUserList = (params) => {\n  return axios.get(`/api/comments_with_User`, {\n    params\n  });\n}\n\nexport const fetchCommentsList = (params) => {\n    return axios.get(apiUrl, {\n        params\n    });\n};\n\nexport const fetchComment = (id) => {\n    return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const fetchCommentListWithAnswer = (params) => {\n  return axios.get(`${apiUrl}_with_answer`, {\n    params\n  });\n};\n\nexport const postCommentData = (postData) => {\n    return axios.post(apiUrl, postData);\n};\n\nexport const saveCommentData = (saveData) => {\n  const { comment_id } = saveData;\n  return axios.put(`${apiUrl}/${comment_id}`, saveData);\n};\n\nexport const deleteCommentData = (params) => {\n  const { comment_id } = params;\n  return axios.delete(`${apiUrl}/${comment_id}`, { params });\n};\n","import axios from 'axios';\n\nexport const fetchContentTranslation = ( params ) => {\n    return axios.get(`/api/content_translations`,{\n      params\n    });\n};","import { addNotification as notify } from 'reapop';\n\nexport function notifySuccess(message) {\n  return notify({\n    message,\n    position: 'tc',\n    status: 'success',\n    dismissAfter: 2000\n  });\n}\n\nexport function notifyError(message) {\n  return notify({\n    message,\n    position: 'tc',\n    status: 'error',\n    dismissAfter: 2000\n  });\n}\n\nexport function notifyAlert(message) {\n  return notify({\n    message,\n    position: 'tc',\n    status: 'error',\n    dismissAfter: 2000\n  });\n}\n","import { takeEvery, call, put } from 'redux-saga/effects';\n// import { push } from 'react-router-redux';\nimport {\n  updateUserData, requestData, receiveDataSuccess, receiveDataFailed,\n  loginSuccess, loginFailed, removeUserData, updatedUserData,\n  updatedProfileData, preparedAuth, updatedProfileQuestionData,\n  updatedProfileAnswerData, updatedProfileCommentData, updatedProfileTranslatedData,\n} from '../actions/User';\nimport {\n  CREATE_USER_ACCOUNT,\n  SAVE_USER_DATA,\n  SAVE_USER_PASSWORD,\n  ACTIVATE_USER,\n  SEND_RESET_PASSWORD_MAIL,\n  GET_USER_PROFILE,\n  GET_USER_BY_TOKEN,\n  LOGIN_USER,\n  LOGIN_USER_JWT,\n  LOGOUT_USER\n} from '../actions/User';\nimport * as api from './apis/Users';\nimport { fetchQuestionList } from './apis/Questions';\nimport { fetchAnswerListWithQuestion } from './apis/Answers';\nimport { fetchCommentListWithAnswer } from './apis/Comments';\nimport { fetchContentTranslation } from './apis/ContentTranslations';\nimport { notifySuccess, notifyError } from './Util';\n\nexport function* createUserAccount(action) {\n  const { history } = action.payload;\n  try {\n    yield put(requestData());\n    const payload = yield call(api.createUserAccount, action.payload);\n    yield put(receiveDataSuccess(payload));\n    const message = '新規登録に成功しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/users/login');\n  } catch (e) {\n    yield put(receiveDataFailed());\n    const message = '新規登録に失敗しました';\n    yield put(notifyError(message));\n  }\n}\n\nexport function* loginUserAccount(action) {\n  const { history } = action.payload;\n  try {\n    const payload = yield call(api.loginUser, action.payload);\n    yield put(loginSuccess(payload));\n    const { jwt } = payload.data;\n    localStorage.setItem('jwt', jwt);\n    const message = 'ログインに成功しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n    // yield put(push('/'));\n  } catch (e) {\n    //yield put(loginFailed());\n    const message = 'アカウントが存在しないか、パスワードが間違っています';\n    yield put(notifyError(message));\n    yield call(history.push, '/users/login');\n  }\n}\n\nexport function* loginUserAccountJwt(action) {\n  try {\n    const jwt = localStorage.getItem('jwt');\n    if (!jwt) {\n      throw new Error('JWTがありません。');\n    }\n    const payload = yield call(api.loginUserJwt, { jwt });\n    yield put(loginSuccess(payload));\n    yield put(preparedAuth());\n  } catch (e) {\n    yield put(loginFailed());\n    yield put(preparedAuth());\n  }\n}\n\nexport function* logoutUserAccount(action) {\n  try {\n    const { history } = action.payload;\n    localStorage.removeItem('jwt');\n    yield put(removeUserData());\n    const message = 'ログアウトしました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n  } catch (e) {\n    //yield put(loginFailed());\n    //yield call(history.push, '/users/login');\n  }\n}\n\nexport function* saveUserData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveUserProfile, action.payload);\n    const message = 'プロフィールを更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedUserData(payload));\n  } catch (e) {\n    const message = 'プロフィールの更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveUserPassword(action) {\n  try {\n    const { history } = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.saveUserPassword, action.payload);\n    yield put(loginSuccess(payload));\n    const { jwt } = payload.data;\n    localStorage.setItem('jwt', jwt);\n    const message = 'パスワードを更新しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = 'パスワードの更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function *resetPassword(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.resetPassword, action.payload);\n    const message = 'メールを送信しました';\n    yield put(notifySuccess(message));\n  } catch (e) {\n    const message = 'メール送信に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* getUserProfile(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.getUser, action.payload);\n    const questionParams = {user_id : action.payload};\n    const questionPayload = yield call(fetchQuestionList, questionParams);\n\n    const answerParams = {user_id : action.payload};\n    const answerPayload = yield call(fetchAnswerListWithQuestion, answerParams);\n\n    const commentParams = {user_id : action.payload};\n    const commentPayload = yield call(fetchCommentListWithAnswer, commentParams);\n\n    const translateParams = {user_id : action.payload};\n    const translatedContent = yield call(fetchContentTranslation, translateParams);\n    \n    yield put(updatedProfileData(payload));\n    yield put(updatedProfileQuestionData(questionPayload));\n    yield put(updatedProfileAnswerData(answerPayload));\n    yield put(updatedProfileCommentData(commentPayload));\n    yield put(updatedProfileTranslatedData(translatedContent));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* getUserByToken(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.getUserByToken, action.payload);\n    yield put(updatedUserData(payload));\n  } catch (e) {\n    console.log('receiveDataFailed');\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* activateUser(action) {\n  try {\n    const { history } = action.payload;\n    console.log('history', history);\n    yield put(requestData());\n    const payload = yield call(api.activateUser, action.payload);\n    yield put(loginSuccess(payload));\n    const { jwt } = payload.data;\n    localStorage.setItem('jwt', jwt);\n    const message = '認証が完了しました。';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n  } catch (e) {\n    console.log('receiveDataFailed');\n    yield put(receiveDataFailed());\n  }\n}\n\nconst userSagas = [\n  takeEvery(CREATE_USER_ACCOUNT, createUserAccount),\n  takeEvery(LOGIN_USER, loginUserAccount),\n  takeEvery(LOGIN_USER_JWT, loginUserAccountJwt),\n  takeEvery(LOGOUT_USER, logoutUserAccount),\n  takeEvery(SAVE_USER_DATA, saveUserData),\n  takeEvery(SAVE_USER_PASSWORD, saveUserPassword),\n  takeEvery(GET_USER_PROFILE, getUserProfile),\n  takeEvery(GET_USER_BY_TOKEN, getUserByToken),\n  takeEvery(SEND_RESET_PASSWORD_MAIL, resetPassword),\n  takeEvery(ACTIVATE_USER, activateUser),\n];\n\nexport default userSagas;\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updateCurrentTranslateLanguage,\n  updatedQuestionData\n} from '../actions/Question';\nimport {\n  FETCH_QUESTION_LIST,\n  FETCH_QUESTION,\n  CHANGE_QUESTION_LIST_LANGUAGE,\n  POST_QUESTION_DATA,\n  SAVE_QUESTION_DATA,\n  DELETE_QUESTION,\n} from '../actions/Question';\n\nimport * as api from './apis/Questions';\nimport { notifySuccess, notifyError } from './Util';\n\nexport function* handleFetchData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestionList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* handleFetchQuestionById(action) {\n  try {\n    const  id   = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestion, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postQuestion(action) {\n  try {\n    yield put(requestData());\n    yield call(api.postQuestionData, action.payload);\n    const payload = yield call(api.fetchQuestionList);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* changeQuestionListLanguage(action) {\n  try {\n    const { translate_language_id } = action.payload;\n    yield put(requestData());\n    // const payload = yield call(fetchQuestionList, action.payload);\n    // yield put(updateCurrentTranslateLanguage(action));\n    // yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveQuestionData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveQuestionData, action.payload);\n    const message = '質問を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedQuestionData(payload));\n  } catch (e) {\n    const message = '質問の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteQuestionData(action) {\n  try {\n    const { question_id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteQuestionData, action.payload);\n    const message = '質問を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchQuestionList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '質問の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst questionSagas = [\n  //FETCH_QUESTION_LISTというアクションが発火させた場合はhandleFetchDataを起動させる。\n  takeEvery(FETCH_QUESTION_LIST, handleFetchData),\n  takeEvery(FETCH_QUESTION, handleFetchQuestionById),\n  // takeEvery(CHANGE_QUESTION_LIST_LANGUAGE, changeQuestionListLanguage),\n  takeEvery(POST_QUESTION_DATA, postQuestion),\n  takeEvery(SAVE_QUESTION_DATA, saveQuestionData),\n  takeEvery(DELETE_QUESTION, deleteQuestionData),\n];\n\nexport default questionSagas;\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport { reset } from 'redux-form';\nimport {\n  requestData, receiveDataSuccess, receiveDataFailed, initializeForm,\n  receiveSingleDataSuccess,\n} from '../actions/Answer';\nimport {\n  FETCH_ANSWER,\n  FETCH_ANSWER_LIST,\n  POST_ANSWER_DATA,\n  SAVE_ANSWER_DATA,\n  DELETE_ANSWER,\n} from '../actions/Answer';\nimport * as api from './apis/Answers';\nimport * as act from '../actions/Comment';\nimport { notifySuccess, notifyError } from './Util';\nimport { fetchCommentWithUserList }from './apis/Comments';\n\nexport function* handleFetchAnswerData(action) {\n  try {\n    yield put(requestData());\n    const answerList = yield call(api.fetchAnswerList, action.payload);\n    const answerId = answerList.data.map(v =>{ return v.id });\n    const commentList = yield call(fetchCommentWithUserList, answerId);\n    yield put(receiveDataSuccess(answerList));\n    yield put(act.receiveCommentDataSuccess(commentList));\n    yield put(act.updatedCommentArray(action.payload));   \n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* postAnswer(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.postAnswerData, action.payload);\n    const { question_id, translate_language_id } = action.payload;\n    const answerPayload = yield call(api.fetchAnswerList, { question_id, translate_language_id });\n    yield put(receiveDataSuccess(answerPayload));\n    yield put(reset('answerForm'));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* fetchSingleAnswerData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchAnswer, action.payload);\n    yield put(receiveSingleDataSuccess(payload));\n    yield put(reset('answerForm'));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveAnswerData(action) {\n  try {\n    const { question_id, history } = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.saveAnswerData, action.payload);\n    const message = '回答を更新しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = '回答の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteAnswerData(action) {\n  try {\n    const { answer_id, question_id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteAnswerData, action.payload);\n    const message = '回答を削除しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = '回答の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\n\nconst answerSagas = [\n  takeEvery(FETCH_ANSWER_LIST, handleFetchAnswerData),\n  takeEvery(POST_ANSWER_DATA, postAnswer),\n  takeEvery(FETCH_ANSWER, fetchSingleAnswerData),\n  takeEvery(SAVE_ANSWER_DATA, saveAnswerData),\n  takeEvery(DELETE_ANSWER, deleteAnswerData),\n];\n\nexport default answerSagas;\n","import axios from 'axios';\n\nconst apiUrl = '/api/question_translations';\n\nexport const fetchQuestionTranslationList = (question_id) => {\n  return axios.get(apiUrl, {\n    params: { question_id }\n  });\n};\n\nexport const fetchQuestionTranslation = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const postQuestionTranslationData = (postData) => {\n  const {\n    content,\n    user_id,\n    question_id,\n    translate_language_id\n  } = postData;\n  return axios.post(apiUrl, {\n    content,\n    user_id,\n    question_id,\n    translate_language_id\n  });\n};\n\nexport const saveQuestionTranslationData = (saveData) => {\n  const { id } = saveData;\n  return axios.put(`${apiUrl}/${id}`, saveData);\n};\n\nexport const deleteQuestionTranslation= (params) => {\n  const { id } = params;\n  return axios.delete(`${apiUrl}/${id}`, { params });\n};\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updatedSingleQuestionTranslation\n} from '../actions/QuestionTranslation';\nimport {\n  FETCH_QUESTION_TRANSLATION_LIST,\n  FETCH_QUESTION_TRANSLATION,\n  POST_QUESTION_TRANSLATION_DATA,\n  SAVE_QUESTION_TRANSLATION_DATA,\n  DELETE_QUESTION_TRANSLATION,\n} from '../actions/QuestionTranslation';\nimport * as api from './apis/QuestionTranslations';\nimport { notifySuccess, notifyError } from './Util';\nimport * as questionSagas from './Question';\n\nexport function* handleFetchQuestionTranslationList(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestionTranslationList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* handleFetchQuestionTranslationById(action) {\n  try {\n    const id = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestionTranslation, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* postQuestionTranslation(action) {\n  try {\n    const { question_id } = action.payload;\n    yield put(requestData());\n    yield call(api.postQuestionTranslationData, action.payload);\n    const payload = yield call(api.fetchQuestionTranslationList, question_id);\n    yield put(receiveDataSuccess(payload));\n    const data = {payload: {}};\n    yield call(questionSagas.handleFetchData, data);\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveQuestionTranslationData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveQuestionTranslationData, action.payload);\n    const message = '翻訳を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedSingleQuestionTranslation(payload));\n  } catch (e) {\n    const message = '翻訳の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteQuestionTranslation(action) {\n  try {\n    const { id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteQuestionTranslation, action.payload);\n    const message = '翻訳を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchQuestionTranslationList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '翻訳の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst questionTranslationSagas = [\n  takeEvery(POST_QUESTION_TRANSLATION_DATA, postQuestionTranslation),\n  takeEvery(FETCH_QUESTION_TRANSLATION_LIST, handleFetchQuestionTranslationList),\n  takeEvery(FETCH_QUESTION_TRANSLATION, handleFetchQuestionTranslationById),\n  takeEvery(SAVE_QUESTION_TRANSLATION_DATA, saveQuestionTranslationData),\n  takeEvery(DELETE_QUESTION_TRANSLATION, deleteQuestionTranslation),\n];\n\nexport default questionTranslationSagas;\n","import axios from 'axios';\n\nconst apiUrl = '/api/answer_translations';\n\nexport const fetchAnswerTranslationList = (answer_id) => {\n  return axios.get(apiUrl, {\n    params: { answer_id }\n  });\n};\n\nexport const fetchAnswerTranslation = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const postAnswerTranslationData = (postData) => {\n  const {\n    content,\n    user_id,\n    answer_id,\n    translate_language_id\n  } = postData;\n  return axios.post(apiUrl, {\n    content,\n    user_id,\n    answer_id,\n    translate_language_id\n  });\n};\n\nexport const saveAnswerTranslationData = (saveData) => {\n  const { id } = saveData;\n  return axios.put(`${apiUrl}/${id}`, saveData);\n};\n\nexport const deleteAnswerTranslation= (params) => {\n  const { id } = params;\n  return axios.delete(`${apiUrl}/${id}`, { params });\n};\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updatedSingleAnswerTranslation\n} from '../actions/AnswerTranslation';\nimport {\n  FETCH_ANSWER_TRANSLATION_LIST,\n  FETCH_ANSWER_TRANSLATION,\n  POST_ANSWER_TRANSLATION_DATA,\n  SAVE_ANSWER_TRANSLATION_DATA,\n  DELETE_ANSWER_TRANSLATION,\n} from '../actions/AnswerTranslation';\nimport * as api from './apis/AnswerTranslations';\nimport { notifySuccess, notifyError } from './Util';\nimport * as questionSagas from './Question';\n\nexport function* handleFetchAnswerTranslationList(action) {\n  try {\n    // axios.get()を呼ぶ前にisFetchingをtrueにしておく\n    yield put(requestData());\n    const payload = yield call(api.fetchAnswerTranslationList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* handleFetchAnswerTranslationById(action) {\n  try {\n    const id  = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchAnswerTranslation, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postAnswerTranslation(action) {\n  try {\n    const { answer_id } = action.payload;\n    yield put(requestData());\n    yield call(api.postAnswerTranslationData, action.payload);\n    const payload = yield call(api.fetchAnswerTranslationList, answer_id);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveAnswerTranslationData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveAnswerTranslationData, action.payload);\n    const message = '翻訳を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedSingleAnswerTranslation(payload));\n  } catch (e) {\n    const message = '翻訳の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteAnswerTranslation(action) {\n  try {\n    const { id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteAnswerTranslation, action.payload);\n    const message = '翻訳を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchAnswerTranslationList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '翻訳の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst answerTranslationSagas = [\n  takeEvery(POST_ANSWER_TRANSLATION_DATA, postAnswerTranslation),\n  takeEvery(FETCH_ANSWER_TRANSLATION_LIST, handleFetchAnswerTranslationList),\n  takeEvery(FETCH_ANSWER_TRANSLATION, handleFetchAnswerTranslationById),\n  takeEvery(SAVE_ANSWER_TRANSLATION_DATA, saveAnswerTranslationData),\n  takeEvery(DELETE_ANSWER_TRANSLATION, deleteAnswerTranslation),\n];\n\nexport default answerTranslationSagas;\n","import { takeEvery, call, put } from 'redux-saga/effects';\n// import { push } from 'react-router-redux';\nimport * as act from '../actions/Comment';\nimport * as api from './apis/Comments';\nimport {\n  FETCH_SINGLE_COMMENT,\n  POST_COMMENT,\n  SAVE_COMMENT_DATA,\n  DELETE_COMMENT,\n} from '../actions/Comment';\nimport * as answerSaga from './Answer'; \nimport { notifySuccess, notifyError } from './Util';\n\nimport { fetchCommentWithUserList }from './apis/Comments';\nimport * as act2 from '../actions/Comment';\n\nexport function* fetchSingleComment(action) {\n  try {\n    yield put(act.requestData());\n    const comment_id = action.payload;\n    const comment = yield call(api.fetchComment, comment_id);\n    yield put(act.updatedSingleCommentData(comment));\n  } catch (e) {\n    const message = 'コメントの投稿に失敗しました。';\n    yield put(notifyError(message));\n    //yield put(updatedCommentData());\n  }\n}\n\nexport function* postComment(action) {\n  try {\n    yield put(act.requestData());\n    const { answer_id, question_id, current_translate_language_id, answerIdList } = action.payload;\n    yield call(api.postCommentData, action.payload);\n    const commentPayload = yield call(api.fetchCommentsList, { answer_id });    \n    const answerId = answerIdList;\n    const commentList = yield call(fetchCommentWithUserList, answerId);\n    yield put(act2.receiveCommentDataSuccess(commentList));\n\n    const message = 'コメントを投稿しました。';\n    yield put(notifySuccess(message));\n    const data = { payload: {\n      question_id,\n      translate_language_id: current_translate_language_id\n    } };\n    yield call(answerSaga.handleFetchAnswerData, data);\n  } catch (e) {\n    const message = 'コメントの投稿に失敗しました。';\n    yield put(notifyError(message));\n    //yield put(updatedCommentData());\n  }\n}\n\nexport function* saveComment(action) {\n  try {\n    yield put(act.requestData());\n    const {\n      comment_id,\n      question_id,\n      history\n    } = action.payload;\n    const comment = yield call(api.saveCommentData, action.payload);\n    yield put(act.updatedSingleCommentData(comment));\n    const message = 'コメントを編集しました。';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = 'コメントの編集に失敗しました。';\n    yield put(notifyError(message));\n    //yield put(updatedCommentData());\n  }\n}\n\nexport function* deleteCommentData(action) {\n  try {\n    const { comment_id, question_id, user_id, history } = action.payload;\n    yield put(act.requestData());\n    yield call(api.deleteCommentData, action.payload);\n    const message = 'コメントを削除しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = 'コメントの削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(act.receiveDataFailed());\n  }\n}\n\nconst commentSagas = [\n  takeEvery(FETCH_SINGLE_COMMENT, fetchSingleComment),\n  takeEvery(POST_COMMENT, postComment),\n  takeEvery(SAVE_COMMENT_DATA, saveComment),\n  takeEvery(DELETE_COMMENT, deleteCommentData),\n];\n\nexport default commentSagas;\n","import axios from 'axios';\n\nconst apiUrl = '/api/comment_translations';\n\nexport const fetchCommentTranslationList = (comment_id) => {\n  return axios.get(apiUrl, {\n    params: {\n      comment_id\n    }\n  });\n};\n\nexport const fetchCommentTranslation = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const postCommentTranslationData = (params) => {\n  return axios.post(apiUrl, {\n    params\n  });\n};\n\nexport const saveCommentTranslationData = (saveData) => {\n  const { id } = saveData;\n  return axios.put(`${apiUrl}/${id}`, saveData);\n};\n\nexport const deleteCommentTranslation = (params) => {\n  const { id } = params;\n  return axios.delete(`${apiUrl}/${id}`, { params });\n};\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updatedSingleCommentTranslation\n} from '../actions/CommentTranslation';\nimport {\n  FETCH_COMMENT_TRANSLATION_LIST,\n  FETCH_COMMENT_TRANSLATION,\n  POST_COMMENT_TRANSLATION_DATA,\n  SAVE_COMMENT_TRANSLATION_DATA,\n  DELETE_COMMENT_TRANSLATION,\n} from '../actions/CommentTranslation';\nimport * as api from './apis/CommentTranslations';\nimport { notifySuccess, notifyError } from './Util';\n\nexport function* handleFetchCommentTranslationList(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchCommentTranslationList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* handleFetchCommentTranslationById(action) {\n  try {\n    const id  = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchCommentTranslation, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postCommentTranslation(action) {\n  try {\n    const { comment_id } = action.payload;\n    yield put(requestData());\n    yield call(api.postCommentTranslationData, action.payload);\n    const payload = yield call(api.fetchCommentTranslationList, comment_id);\n    yield put(receiveDataSuccess(payload));\n    const message = '翻訳を投稿しました。';\n    yield put(notifySuccess(message));\n  } catch (e) {\n    yield put(receiveDataFailed());\n    const message = '翻訳の投稿に失敗しました。';\n    yield put(notifyError(message));\n  }\n}\n\nexport function* saveCommentTranslationData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveCommentTranslationData, action.payload);\n    const message = '翻訳を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedSingleCommentTranslation(payload));\n  } catch (e) {\n    const message = '翻訳の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteCommentTranslation(action) {\n  try {\n    const { id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteCommentTranslation, action.payload);\n    const message = '翻訳を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchCommentTranslationList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '翻訳の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst commentTranslationSagas = [\n  takeEvery(POST_COMMENT_TRANSLATION_DATA, postCommentTranslation),\n  takeEvery(FETCH_COMMENT_TRANSLATION_LIST, handleFetchCommentTranslationList),\n  takeEvery(FETCH_COMMENT_TRANSLATION, handleFetchCommentTranslationById),\n  takeEvery(SAVE_COMMENT_TRANSLATION_DATA, saveCommentTranslationData),\n  takeEvery(DELETE_COMMENT_TRANSLATION, deleteCommentTranslation),\n];\n\nexport default commentTranslationSagas;\n","import axios from 'axios';\n\n// 未翻訳の質問一覧取得するAPI\nexport const fetchNotTranslatedQuestions = (params) => {\n    return axios.get('/api/not_translated_questions', {\n        params\n    });\n};\n\n// 未翻訳の回答一覧取得するAPI\nexport const fetchNotTranslatedAnswers = (params) => {\n    return axios.get('/api/not_translated_answers', {\n        params\n    });\n};\n\n// 未翻訳のコメント一覧取得するAPI\nexport const fetchNotTranslatedComments = (params) => {\n    return axios.get('/api/not_translated_comments', {\n        params\n    });\n};\n\n","import { takeEvery, call, put } from 'redux-saga/effects';\n\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveDataFailed,\n  FETCH_NOT_TRANSLATED,\n} from '../actions/NotTranslated';\n\nimport {\n  fetchNotTranslatedQuestions,\n  fetchNotTranslatedAnswers,\n  fetchNotTranslatedComments,\n} from './apis/NotTranslated';\nimport { changeQuestionListLanguage } from './Question';\n\nexport function* handleFetchData(action) {\n  try {\n\n    yield put(requestData());\n\n    //未翻訳一覧を取り出す\n    // const questions = yield call(fetchNotTranslated, action.payload);\n\n    //質問を取り出す\n    const questions = yield call(fetchNotTranslatedQuestions, action.payload);\n\n    //回答を取り出す\n    const answers = yield call(fetchNotTranslatedAnswers, action.payload);\n\n    //コメントを取り出す\n    const comments = yield call(fetchNotTranslatedComments, action.payload);\n\n    const NotTranslatedList={\n      questions : questions.data,\n      answers : answers.data,\n      comments: comments.data,\n    };\n\n    //reducers/NotTranslated.jsで関数を実行する。\n    yield put(receiveDataSuccess(NotTranslatedList));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nconst NotTranslatedSagas = [\n  //FETCH_QUESTION_LISTというアクションが発火させた場合はhandleFetchDataを起動させる。\n  takeEvery(FETCH_NOT_TRANSLATED, handleFetchData),\n];\n\nexport default NotTranslatedSagas;\n","import axios from 'axios';\n\nexport const postVotes = (postData) => {\n    return axios.post('/api/votes', postData);\n};\n\nexport const deleteVotes = (params) => {\n    const { vote_id } = params;\n    return axios.delete(`/api/votes/${vote_id}`, { params });\n};\n\nexport const fetchQuestionVotesList = (question_id) => {\n    return axios.get('/api/votes/questions', {\n      params: { question_id }\n    });\n  };\n\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n    POST_VOTE,\n    DELETE_VOTE,\n    requestData,\n    receiveDataSuccess,\n    receiveDataFailed,\n} from '../actions/Vote.js';\n\nimport * as answerSaga from './Answer';\nimport * as questionSagas from './Question';\nimport {\n  postVotes,\n  deleteVotes,\n  fetchQuestionVotesList,\n} from './apis/Votes';\n\nimport {\n  notifySuccess,\n  notifyError\n} from './Util';\n\n\nexport function* handleFetchQestionVotesList(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(fetchQuestionVotesList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postVote(action) {\n  try {\n    const { params, key } = action.payload;\n    yield put(requestData());\n    yield call(postVotes, params);\n\n    let data;\n    switch (key) {\n      case \"comment\":\n      case \"answer\":\n          data = { payload: {\n            question_id: params.questionId,\n            translate_language_id: 1,\n          } };\n          yield call(answerSaga.handleFetchAnswerData, data);\n          break;\n      case \"questionList\":\n          data = { payload: {\n            country_id: params.country_id,\n          } };\n          yield call(questionSagas.handleFetchData, data);\n          break;\n      case \"questionView\":\n          data = { payload: params.question_id };\n          yield call(questionSagas.handleFetchQuestionById, data);\n          break;\n    }\n\n    const message = 'いいねしました';\n    yield put(notifySuccess(message));\n\n  } catch (e) {\n    const message = 'いいねに失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteVote(action) {\n  try {\n    const { params, key } = action.payload;\n    yield put(requestData());\n    yield call(deleteVotes, params);\n\n    let data;\n    switch (key) {\n      case \"comment\":\n      case \"answer\":\n          data = { payload: {\n            question_id: params.questionId,\n            translate_language_id: 1,\n          } };\n          yield call(answerSaga.handleFetchAnswerData, data);\n          break;\n      case \"questionList\":\n          data = { payload: {\n            country_id: params.country_id,\n          } };\n          yield call(questionSagas.handleFetchData, data);\n          break;\n      case \"questionView\":\n          data = { payload: params.vote_id };\n          yield call(questionSagas.handleFetchQuestionById, data);\n          break;\n    }\n    const message = 'いいねを削除しました';\n    yield put(notifySuccess(message));\n  } catch (e) {\n    const message = 'いいねの削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst voteSagas = [\n  takeEvery(POST_VOTE, postVote),\n  takeEvery(DELETE_VOTE, deleteVote),\n];\n\nexport default voteSagas;\n","import axios from 'axios';\n\nexport const postVotes = (params) => {\n    return axios.post('/api/vote_translations', params);\n};\n\nexport const deleteVotes = (params) => {\n    const { vote_id } = params;\n    return axios.delete(`/api/vote_translations/${vote_id}`, { params });\n};","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n    POST_VOTE,\n    DELETE_VOTE,\n    requestData,\n    receiveDataSuccess,\n    receiveDataFailed,\n} from '../actions/VoteTranslation';\n\nimport * as answerTranslationSagas from './AnswerTranslation';\nimport * as questionTranslationSagas from './QuestionTranslation';\nimport * as commentTranslationSagas from './CommentTranslation';\n\nimport { \n  notifySuccess, \n  notifyError \n} from './Util';\n\nimport { postVotes, deleteVotes } from './apis/VoteTranslations';\n\nexport function* postVote(action) {\n  try {\n    const { params, key } = action.payload;\n    yield put(requestData());\n    yield call(postVotes, params);\n    let data;\n    switch (key) {\n      case \"comment\":\n          data = { payload: params.commentId } ;\n          yield call(commentTranslationSagas.handleFetchCommentTranslationList, data);\n          break;\n      case \"answer\":\n          data = { payload: params.answerId } ;\n          yield call(answerTranslationSagas.handleFetchAnswerTranslationList, data);\n          break;\n      case \"question\":\n          data = { payload: params.questionId } ;\n          yield call(questionTranslationSagas.handleFetchQuestionTranslationList, data);\n          break;\n    }\n\n    const message = 'いいねしました';\n    yield put(notifySuccess(message));\n\n  } catch (e) {\n    const message = 'いいねに失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteVote(action) {\n  try {\n    const { params, key } = action.payload;\n    yield put(requestData());\n    yield call(deleteVotes, params);\n\n    let data;\n    switch (key) {\n      case \"comment\":\n          data = { payload: params.commentId } ;\n          yield call(commentTranslationSagas.handleFetchCommentTranslationList, data);\n          break;\n      case \"answer\":\n          data = { payload: params.answerId };\n          yield call(answerTranslationSagas.handleFetchAnswerTranslationList, data);\n          break;\n      case \"question\":\n          data = { payload:  params.questionId };\n          yield call(questionTranslationSagas.handleFetchQuestionTranslationList, data);\n          break;\n    }\n    const message = 'いいねを削除しました';\n    yield put(notifySuccess(message));\n  } catch (e) {\n    const message = 'いいねの削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst voteTranslationSagas = [\n  takeEvery(POST_VOTE, postVote),\n  takeEvery(DELETE_VOTE, deleteVote),\n];\n\nexport default voteTranslationSagas;","import { put, takeEvery } from 'redux-saga/effects';\nimport {\n    ACTION_ALERT_MESSAGE,\n} from '../actions/Notification';\nimport { notifyAlert } from './Util';\n\nexport function* alertMessage(action) {\n    yield put(notifyAlert(action.payload));\n}\n\n  const notificationSagas = [\n    takeEvery(ACTION_ALERT_MESSAGE, alertMessage),\n  ];\n  \nexport default notificationSagas;","import { all } from 'redux-saga/effects';\nimport userSagas from './sagas/User';\nimport questionSagas from './sagas/Question';\nimport answerSagas from './sagas/Answer';\nimport questionTranslationSagas from './sagas/QuestionTranslation';\nimport answerTranslationSagas from './sagas/AnswerTranslation';\nimport commentSagas from './sagas/Comment';\nimport commentTranslationSagas from './sagas/CommentTranslation';\nimport NotTranslatedSagas from './sagas/NotTranslated';     \nimport voteSagas from './sagas/Votes';\nimport voteTranslationSagas from './sagas/VoteTranslation';  \nimport notificationSagas from './sagas/Notification';            \n\nexport default function* rootSaga() {\n  yield all([\n    ...userSagas,\n    ...questionSagas,\n    ...answerSagas,\n    ...questionTranslationSagas,\n    ...answerTranslationSagas,\n    ...commentSagas,\n    ...commentTranslationSagas,\n    ...NotTranslatedSagas,\n    ...voteSagas,\n    ...voteTranslationSagas,\n    ...notificationSagas,\n  ]);\n}\n","import { createBrowserHistory as createHistory } from 'history';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { routerMiddleware } from 'react-router-redux';\nimport reducer from './reducer';\nimport { initialState } from './constants';\nimport rootSaga from './rootSaga';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from \"redux-logger\";\n\n// Redux DevTools\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst history = createHistory();\n\nconst routingMiddleware = routerMiddleware(history);\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n    reducer,\n    initialState,\n    composeEnhancers(\n        applyMiddleware(\n            thunkMiddleware,\n            routingMiddleware,\n            sagaMiddleware,\n            logger\n        )\n    )\n);\n\nsagaMiddleware.run(rootSaga, { history });\n\nexport { history }\nexport { store }\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport Home from './containers/Home';\nimport QuestionView from './containers/QuestionView';\nimport QuestionEdit from './containers/QuestionEdit';\n\n//未翻訳の質問一覧を表示するコンポーネント\n//containerを介していないと、connectの処理をしていないのでエラーになる。\n//containerを介してcomponentsの作業を行う。\nimport NotTranslated from './containers/NotTranslated';\n\nimport AnswerEdit from './containers/AnswerEdit';\nimport CommentEdit from './containers/CommentEdit';\nimport QuestionTranslationView from './containers/QuestionTranslationView';\nimport QuestionTranslationEdit from './containers/QuestionTranslationEdit';\nimport AnswerTranslationView from './containers/AnswerTranslationView';\nimport AnswerTranslationEdit from './containers/AnswerTranslationEdit';\nimport CommentTranslationView from './containers/CommentTranslationView';\nimport CommentTranslationEdit from './containers/CommentTranslationEdit';\nimport App from './containers/App';\nimport ScrollToTop from './components/layouts/ScrollToTop';\nimport SignUp from './containers/users/SignUp';\nimport Login from './containers/users/Login';\nimport PasswordReset from './containers/users/PasswordReset';\nimport NewPassword from './containers/users/NewPassword';\nimport Activate from './containers/users/Activate';\nimport Profile from './containers/users/Profile';\nimport ProfileEdit from './containers/users/ProfileEdit';\nimport UserOnly from './containers/auth/UserOnly';\nimport GuestOnly from './containers/auth/GuestOnly';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport UIkit from 'uikit';\n// import Icons from 'uikit/dist/js/uikit-icons';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\nimport { far } from '@fortawesome/free-regular-svg-icons'\n\n// Styles\nimport './css/normalize.css';\nimport './css/main.css';\nimport './css/uikit.min.css';\n\n// 言語設定\nimport { addLocaleData, IntlProvider } from 'react-intl';\nimport ja from 'react-intl/locale-data/ja';\nimport en from 'react-intl/locale-data/en';\nconst { intl } = store.getState();\nconst { locale, messages } = intl;\naddLocaleData([...ja, ...en]);\n\nlibrary.add( fas, far );\n\n// 取り急ぎの質問フォーム初期化処理\nlocalStorage.setItem('question-form', '');\n\n\n// JS\n// UIkit.use(Icons);\n\nconst render = () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <IntlProvider locale={locale} messages={messages} >\n        <BrowserRouter>\n          <App>\n            <ScrollToTop>\n              <Switch>\n                <Route exact path='/' component={Home} />\n                <Route exact path='/questions/:id' component={QuestionView}  onEnter={() => window.scrollTo(0, 0)}/>\n                <Route exact path='/question_translations/:question_id' component={QuestionTranslationView} />\n                <Route exact path='/answer_translations/:answer_id' component={AnswerTranslationView} />\n                <Route exact path='/comment_translations/:comment_id' component={CommentTranslationView} />\n                <Route exact path='/users/profile/:id' component={Profile} />\n                <Route exact path='/users/login' component={Login} />\n                <Route exact path='/users/signup' component={SignUp} />\n                <Route exact path='/users/activate/:token' component={Activate} />\n                <Route exact path='/users/password_reset' component={PasswordReset} />\n                <Route exact path='/users/password_reset/:token' component={NewPassword} />\n                <UserOnly>\n                  <Switch>\n                    <Route exact path='/questions/edit/:id' component={QuestionEdit} />\n                    <Route exact path='/answers/edit/:id' component={AnswerEdit} />\n                    <Route exact path='/comments/edit/:id' component={CommentEdit} />\n                    <Route exact path='/users/profile_edit' component={ProfileEdit} />\n                    <Route exact path='/question_translations/edit/:id' component={QuestionTranslationEdit} />\n                    <Route exact path='/answer_translations/edit/:id' component={AnswerTranslationEdit} />\n                    <Route exact path='/comment_translations/edit/:id' component={CommentTranslationEdit} />\n                    {/*未翻訳の質問を抽出するルートパス*/}\n                    <Route exact path='/not_translated' component={NotTranslated} />\n                  </Switch>\n                </UserOnly>\n                <GuestOnly>\n                  <Switch>\n                  </Switch>\n                </GuestOnly>\n              </Switch>\n            </ScrollToTop>\n          </App>\n        </BrowserRouter>\n      </IntlProvider>\n    </Provider>,\n    document.getElementById('root')\n  );\n};\n\nstore.subscribe(() => {\n  render();\n});\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nrender()\n"],"sourceRoot":""}