{"version":3,"sources":["actions/Question.js","utils/index.js","utils/Translations.js","components/Translator.js","actions/Vote.js","components/PostAnswerCount.js","components/PostUser.js","components/PostIcons.js","components/QuestionContent.js","components/QuestionListView.js","components/QuestionList.js","containers/QuestionList.js","components/LanguageFormSelect.js","components/CategoryFormSelect.js","components/CountryFormSelect.js","components/QuestionForm.js","components/Home.js","actions/Intl.js","actions/Category.js","actions/Sort.js","actions/Notification.js","containers/Home.js","components/AnswerForm.js","actions/Answer.js","actions/Comment.js","components/Comment.js","components/CommentList.js","components/CommentForm.js","components/AnswerList.js","containers/AnswerList.js","components/QuestionView.js","containers/QuestionView.js","components/QuestionEdit.js","containers/QuestionEdit.js","actions/NotTranslated.js","components/NotTranslated.js","containers/NotTranslated.js","components/AnswerEdit.js","containers/AnswerEdit.js","components/CommentEdit.js","containers/CommentEdit.js","components/QuestionTranslationForm.js","actions/QuestionTranslation.js","actions/VoteTranslation.js","components/QuestionTranslationList.js","containers/QuestionTranslationList.js","containers/QuestionTranslationView.js","components/TranslationForm.js","components/TranslationEdit.js","components/QuestionTranslationEdit.js","containers/QuestionTranslationEdit.js","components/AnswerTranslationForm.js","actions/AnswerTranslation.js","components/AnswerTranslationList.js","containers/AnswerTranslationList.js","containers/AnswerTranslationView.js","components/AnswerTranslationEdit.js","containers/AnswerTranslationEdit.js","components/CommentTranslationForm.js","actions/CommentTranslation.js","components/CommentTranslationList.js","containers/CommentTranslationList.js","containers/CommentTranslationView.js","components/CommentTranslationEdit.js","containers/CommentTranslationEdit.js","components/layouts/MenuDrawer.js","components/layouts/Header.js","actions/User.js","containers/layouts/Header.js","components/App.js","containers/App.js","components/layouts/ScrollToTop.js","components/users/SignUpForm.js","components/users/SignUp.js","containers/users/SignUp.js","components/users/LoginForm.js","components/users/Login.js","containers/users/Login.js","components/users/PasswordResetForm.js","components/users/PasswordReset.js","containers/users/PasswordReset.js","components/users/PasswordForm.js","components/users/NewPassword.js","containers/users/NewPassword.js","components/users/Activate.js","containers/users/Activate.js","components/Stampcard.js","containers/users/Profile.js","components/users/ProfileForm.js","components/users/Profile.js","containers/users/ProfileEdit.js","containers/Contact.js","components/auth/UserOnly.js","containers/auth/UserOnly.js","components/auth/GuestOnly.js","containers/auth/GuestOnly.js","intl/index.js","intl/locales/ja_JP.js","intl/locales/en_US.js","constants.js","reducer.js","reducers/Intl.js","reducers/Category.js","reducers/Sort.js","reducers/Answer.js","reducers/Question.js","reducers/QuestionTranslation.js","reducers/AnswerTranslation.js","reducers/User.js","reducers/Comment.js","reducers/CommentTranslation.js","reducers/NotTranslated.js","reducers/Votes.js","reducers/VoteTranslation.js","sagas/apis/Users.js","sagas/apis/Questions.js","sagas/apis/Answers.js","sagas/apis/Comments.js","sagas/apis/ContentTranslations.js","sagas/Util.js","sagas/User.js","sagas/Question.js","sagas/Answer.js","sagas/apis/QuestionTranslations.js","sagas/QuestionTranslation.js","sagas/apis/AnswerTranslations.js","sagas/AnswerTranslation.js","sagas/Comment.js","sagas/apis/CommentTranslations.js","sagas/CommentTranslation.js","sagas/apis/NotTranslated.js","sagas/NotTranslated.js","sagas/apis/Votes.js","sagas/Votes.js","sagas/apis/VoteTranslations.js","sagas/VoteTranslation.js","sagas/Notification.js","rootSaga.js","store.js","index.js"],"names":["FETCH_QUESTION_LIST","Symbol","FETCH_QUESTION","POST_QUESTION_DATA","REQUEST_DATA","RECEIVE_DATA_SUCCESS","RECEIVE_SINGLE_DATA_SUCCESS","RECEIVE_DATA_FAILED","UPDATE_CURRENT_TRANSLATE_LANGUAGE","SAVE_QUESTION_DATA","UPDATED_QUESTION_DATA","DELETE_QUESTION","fetchQuestionList","createAction","fetchQuestion","postQuestionData","requestData","receiveDataSuccess","receiveSingleDataSuccess","receiveDataFailed","saveQuestionData","updatedQuestionData","deleteQuestion","isEmptyObject","obj","Object","keys","length","getTranslatedContents","contentList","translateLanguageId","contentType","map","v","getTranslatedContent","content","translate_language_id","setDispText","translationList","filter","translation","text","dispText","Translator","user","this","props","name","image_path","profile_link","msg","formatMessage","intl","id","react_default","a","createElement","className","style","padding","Link","to","src","width","height","alt","Component","injectIntl","POST_VOTE","DELETE_VOTE","HANDLE_VOTE","handleVote","PostAnswerCount","reply","commentCount","reduce","accumulator","currentValue","comments","replyState","react_fontawesome_index_es","icon","color","size","replyCount","commentState","PostUser","countryId","concat","border","nationalFlag","selectedNationalFlag","country_id","userName","profileLink","PostIcons","voteState","_this$props","loginUser","onClickHandleVote","onClick","_this$props2","votes","editLink","translateLink","translate","editLinkButton","votebutton","getVoteButton","voteNumbers","translateButton","QuestionContent","voteParams","loginUserId","_this","action_type_id","question_translations","defaultElem","components_Translator","question","userData","answers","myVoteList","user_id","myVoteId","postActionType","thisPageKey","question_id","answer_id","comment_id","status","deleteColumnKey","vote_id","voteIdForPoint","contentCount","components_PostAnswerCount","handleSubmit","getOnClickPostVote","bind","translator","getTranslator","key","category","intl_key","dayjs","created_at","format","components_PostIcons","components_PostUser","connect","state","dispatch","data","QuestionListView","array","e","category_id","categoryQuestions","sortId","editArray","num","sort","b","questionArray","categoryId","translatedQuestions","categoryFilteredContents","sortQuestions","sortFilteredContents","components_QuestionContent","questionList","getQuestionList","auth","ctgr","QuestionList","questions","params","handleFetchData","_this$props$state$que","isFetching","react_spinners","components_QuestionListView","queryData","LanguageFormSelect","placeholder","formik_esm","component","value","CategoryFormSelect","CountryFormSelect","QuestionForm","values","errors","initialValues","persistTab","fromName","formik_persist_es6","enableReinitialize","validate","onSubmit","_ref","setSubmitting","resetForm","setErrors","render","_ref2","touched","isSubmitting","setFieldValue","type","rows","components_CountryFormSelect","components_LanguageFormSelect","components_CategoryFormSelect","Home","formData","_this$props$state$aut","isLoggedIn","history","alertMessage","push","postData","console","log","message","locale","preventDefault","stopPropagation","localStorage","setItem","window","location","href","changeSort","changeCategory","_this$props$state$int","onChangeLanguage","components_QuestionForm","submitQuestionForm","formName","onChange","changeCateogryfunction","target","changeSortfunction","containers_QuestionList","React","UPDATE_CURRENT_LANGUAGE","updateCurrentLanguage","UPDATE_CURRENT_CATEGORY","updateCurrentCategory","UPDATE_CURRENT_SORT","updateCurrentSort","ACTION_ALERT_MESSAGE","actionAlertMessage","changeLanguage","AnswerForm","CHANGE_ANSWER_FORM_CONTENT","FETCH_ANSWER_LIST","FETCH_ANSWER","POST_ANSWER_DATA","INITIALIZE_FORM","SAVE_ANSWER_DATA","DELETE_ANSWER","fetchAnswerList","fetchAnswer","postAnswerData","saveAnswerData","deleteAnswer","RECEIVE_COMMENT_DATA_SUCCESS","FETCH_SINGLE_COMMENT","FETCH__COMMENT_WITH_USER_LIST","POST_COMMENT","UPDATE_COMMENT","UPDATED_COMMENT_DATA","UPDATED_SINGLE_COMMENT_DATA","SAVE_COMMENT_DATA","DELETE_COMMENT","receiveCommentDataSuccess","postComment","fetchSingleComment","updatedSingleCommentData","deleteComment","saveCommentData","Comment","currentCommentList","answerId","commentId","thisAnswerCommentList","commentTranslated","comment_translations","_this2","voteList","isOwner","commentUser","currentQuestionId","currentQuestion","commentUserId","thisPageContentId","whiteSpace","CommentList","commentList","list","translatedCommentList","i","components_Comment","CommentForm","buttonStr","postButton","class","ownProps","AnswerList","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","qId","buttonState","answerIds","answerArray","current_translate_language_id","answerIdList","handlePostComment","answer_translations","paddingLeft","components_CommentForm","form","onClickCommentForm","isOpened","setState","_this3","answer","commentForm","getComment","Linkify_default","properties","components_CommentList","onClickReply","_this$props$state$ans","answerList","getAnswerList","QuestionView","match","parseInt","getQuestionById","country","temp","sprintf","components_AnswerForm","img","answerForm","getAnswerForm","containers_AnswerList","fetchAnswers","QuestionEdit","owner","saveData","notOwnerWillTransfer","onClickDeleteBtn","conditions","CHANGE_QUESTION_LIST_LANGUAGE","FETCH_NOT_TRANSLATED","fetchNotTranslated","NotTranslated","currentTab","not_translate","contents","url","getNotTranslatedId","getNotTranslated","tabState","getNotTranslatedQuestions","getNotTranslatedAnswers","getNotTranslatedComments","newTabKey","tabData","active","onClickTab","tabContents","getCurrentTabContents","getNotTranslatedView","tabList","getTabList","AnswerEdit","getAnswerById","currentAnswer","CommentEdit","getCommentById","currentComment","QuestionTranslatinoForm","FETCH_QUESTION_TRANSLATION_LIST","FETCH_QUESTION_TRANSLATION","POST_QUESTION_TRANSLATION_DATA","UPDATED_SINGLE_QUESTION_TRANSLATION","SAVE_QUESTION_TRANSLATION_DATA","DELETE_QUESTION_TRANSLATION","fetchQuestionTranslationList","fetchQuestionTranslation","postQuestionTranslationData","updatedSingleQuestionTranslation","saveQuestionTranslationData","deleteQuestionTranslation","QuestionTranslationList","vote_translations","question_translation_id","answer_translation_id","comment_translation_id","questionTranslations","currentTranslationList","getTranslationList","QuestionTranslationView","Error","QuestionTranslationForm","containers_QuestionTranslationList","TranslationForm","TranslationEdit","currentTranslation","components_TranslationForm","QuestionTranslationEdit","qtId","getQuestionTranslationById","components_TranslationEdit","AnswerTranslatinoForm","FETCH_ANSWER_TRANSLATION_LIST","FETCH_ANSWER_TRANSLATION","POST_ANSWER_TRANSLATION_DATA","SAVE_ANSWER_TRANSLATION_DATA","DELETE_ANSWER_TRANSLATION","UPDATED_SINGLE_ANSWER_TRANSLATION","fetchAnswerTranslationList","fetchAnswerTranslation","postAnswerTranslationData","saveAnswerTranslationData","deleteAnswerTranslation","updatedSingleAnswerTranslation","AnswerTranslationList","aId","answerTranslations","AnswerTranslationView","AnswerTranslationForm","containers_AnswerTranslationList","AnswerTranslationEdit","atId","getAnswerTranslationById","CommentTranslatinoForm","FETCH_COMMENT_TRANSLATION_LIST","FETCH_COMMENT_TRANSLATION","POST_COMMENT_TRANSLATION_DATA","SAVE_COMMENT_TRANSLATION_DATA","DELETE_COMMENT_TRANSLATION","UPDATED_SINGLE_COMMENT_TRANSLATION","fetchCommentTranslationList","fetchCommentTranslation","postCommentTranslationData","saveCommentTranslationData","deleteCommentTranslation","updatedSingleCommentTranslation","CommentTranslationList","_this$props$state$com","commentTranslations","CommentTranslationView","toQuestionViewLink","CommentTranslationForm","containers_CommentTranslationList","CommentTranslationEdit","ctId","getCommentTranslationById","MenuDrawer","top","left","bottom","right","toggleDrawer","side","open","defineProperty","actionData","logout","classes","displayName","menuDataList","sideList","List_default","menuData","index","ListItem_default","button","ListItemText_default","primary","Button_default","Drawer_default","anchor","onClose","tabIndex","role","onKeyDown","withStyles","fullList","Header","anchorEl","handleClose","handleLogout","onClickLogout","profileElem","MenuItem_default","getProfileElem","loginElem","getLoginElem","aria-owns","undefined","aria-haspopup","event","currentTarget","textTransform","Menu_default","Boolean","imagePath","displayMenuElem","menu","getMenu","maxHeight","CREATE_USER_ACCOUNT","CLICK_SUBMIT","SAVE_USER_MNEMONIC","LOGIN_USER","LOGIN_USER_JWT","LOGOUT_USER","UPDATE_USER_DATA","SAVE_USER_DATA","SAVE_USER_PASSWORD","UPDATED_USER_DATA","REMOVE_USER_DATA","LOGIN_SUCCESS","LOGIN_FAILED","GET_USER_PROFILE","GET_USER_BY_TOKEN","UPDATED_PROFILE_DATA","PREPARED_AUTH","UPDATED_PROFILE_QUESTION_DATA","UPDATED_PROFILE_ANSWER_DATA","UPDATED_PROFILE_COMMENT_DATA","UPDATED_PROFILE_TRANSLATED_DATA","SEND_RESET_PASSWORD_MAIL","RESET_PASSWORD","ACTIVATE_USER","createUserAccount","loginUserJwt","logoutUser","saveUserData","saveUserPassword","updatedUserData","removeUserData","loginSuccess","loginFailed","getUserProfile","getUserByToken","updatedProfileData","preparedAuth","updatedProfileQuestionData","updatedProfileAnswerData","updatedProfileCommentData","updatedProfileTranslatedData","sendResetPasswordMail","activateUser","App","fetchLoginState","children","isPrepared","BrowserRouter","containers_layouts_Header","reapop_lib_default","theme","ScrollToTop","prevProps","scrollTo","withRouter","SignUpForm","mail","test","password","passwordConfirm","SignUp","clickSubmit","users_SignUpForm","onClickSubmit","LoginForm","Login","users_LoginForm","PasswordResetForm","PasswordReset","users_PasswordResetForm","PasswordForm","NewPassword","token","fetchUser","users_PasswordForm","Activate","Stampcard","voteArray","stampCardRowNum","tableContents","slice","rappedContents","Profile","userId","fetchUserProfile","voteLists","Math","ceil","stampCardNum","emptyTdNum","stampcard","components_Stampcard","unshift","comment","translates","link","translation_link","translatedContentArray","_loop","_Object$entries","_i3","slicedToArray","forEach","entries","getCommentList","translateArray","filterTranslatedContent","getTranslatedList","profile","userPostList","voteTables","getVoteList","points","ProfileForm","image_url","file","files","URL","webkitURL","createObjectURL","imagePreview","image","uk-form-custom","handleImageChange","disabled","clickedSaveButton","users_ProfileForm","Contact","UserOnly","guestWillTransfer","context","router","nextProps","Route","contextTypes","PropTypes","object","isRequired","GuestOnly","userWillTransfer","replace","locales","ja","messages","titles.sign_up","titles.login","titles.activate","titles.password_reset","titles.question_list","titles.answer_list","titles.post_list","titles.translation_list","titles.not_translated_list","titles.profile_edit.user_name","titles.profile_edit.birthplace","titles.profile_edit.profile","titles.profile_edit.user_image","titles.profile.edit","titles.profile.votes","titles.question.edit","titles.question.delete","titles.question.return","messages.empty_answers","messages.birthplace","messages.you_are_not_target","messages.enter_mail","messages.enter_new_password","messages.activate_completed","messages.contact_info","links.to_not_translated_list","links.edit","links.question","links.answer","links.comment","links.translate","links.profile","links.profile_edit","links.sign_up","links.login","links.logout","links.contact","links.password_reset","links.to_question_view","languages.japanese","languages.english","countries.japan","countries.usa","countries.philippines","countries.england","countries.newzealand","countries.korea","countries.thailand","categories.all","categories.comic_anime","categories.culture","categories.tourism","categories.music","errors.questions.content","errors.questions.country_id","errors.questions.translate_language_id","errors.questions.category_id","errors.answers.content","errors.answers.translate_language_id","errors.comments.content","errors.comments.translate_language_id","errors.translations.content","errors.translations.translate_language_id","errors.sign_ups.name","errors.sign_ups.mail","errors.sign_ups.country","errors.sign_ups.appropriate_mail","errors.sign_ups.password","errors.sign_ups.confirm_password","errors.login.mail","errors.login.appropriate_mail","errors.login.password","errors.profile_edit.country","placeholders.sign_ups.name","placeholders.sign_ups.mail","placeholders.sign_ups.country","placeholders.sign_ups.password","placeholders.sign_ups.confirm_password","placeholders.login.mail","placeholders.login.password","placeholders.questions.content","placeholders.questions.country_id","placeholders.questions.translate_language_id","placeholders.questions.category_id","placeholders.questions.submit_btn","placeholders.answers.content","placeholders.answers.translate_language_id","placeholders.answers.submit_btn","placeholders.comments.content","placeholders.comments.translate_language_id","placeholders.comments.submit_btn","placeholders.translations.content","placeholders.translations.translate_language_id","placeholder.profile_edit.profile","placeholder.profile_edit.country","placeholder.profile_edit.nickname","buttons.title.reply","buttons.title.post","buttons.title.sign_up","buttons.title.login","buttons.title.send","buttons.profile_edit.select","buttons.profile_edit.save","translated.name","translated.state","sort.answerMany","sort.answerFew","sort.Asc","sort.Des","en","categories","all","comic_anime","culture","tourism","music","sorts","answerMany","answerFew","Asc","Des","savedLocale","getItem","initialState","signUp","mnemonic","hash","jwt","voteTranslations","reducer","combineReducers","arguments","action","_locales$action$paylo","payload","objectSpread","_categories$action$pa","_sorts$action$payload","_action$payload","notifications","notificationsReducer","axios","post","username","headers","Content-Type","Authorization","resetPassword","put","saveUserProfile","FormData","append","getUser","get","deleteQuestionData","delete","apiUrl","fetchAnswerListWithQuestion","deleteAnswerData","fetchCommentWithUserList","fetchCommentsList","fetchComment","fetchCommentListWithAnswer","postCommentData","deleteCommentData","fetchContentTranslation","notifySuccess","notify","position","dismissAfter","notifyError","loginUserAccount","loginUserAccountJwt","logoutUserAccount","regenerator_default","wrap","_context","prev","next","api","sent","t0","stop","_marked","_context2","_marked2","_context3","_marked3","_context4","removeItem","_marked4","_context5","_marked5","_context6","_marked6","_context7","select","_marked7","questionParams","questionPayload","answerParams","answerPayload","commentParams","commentPayload","translateParams","translatedContent","_context8","_marked8","_context9","_marked9","_context10","_marked10","userSagas","takeEvery","handleFetchQuestionById","postQuestion","Question_marked","Question_marked2","Question_marked3","Question_marked5","Question_marked6","questionSagas","handleFetchAnswerData","postAnswer","fetchSingleAnswerData","act","Answer_marked","reset","Answer_marked2","Answer_marked3","_action$payload2","Answer_marked4","_action$payload3","Answer_marked5","answerSagas","handleFetchQuestionTranslationList","handleFetchQuestionTranslationById","postQuestionTranslation","QuestionTranslation_marked","QuestionTranslation_marked2","QuestionTranslation_marked3","QuestionTranslation_marked4","QuestionTranslation_marked5","questionTranslationSagas","handleFetchAnswerTranslationList","handleFetchAnswerTranslationById","postAnswerTranslation","AnswerTranslation_marked","AnswerTranslation_marked2","AnswerTranslation_marked3","AnswerTranslation_marked4","AnswerTranslation_marked5","answerTranslationSagas","saveComment","Comment_marked","act2","answerSaga","Comment_marked2","Comment_marked3","Comment_marked4","commentSagas","handleFetchCommentTranslationList","handleFetchCommentTranslationById","postCommentTranslation","CommentTranslation_marked","CommentTranslation_marked2","CommentTranslation_marked3","CommentTranslation_marked4","CommentTranslation_marked5","commentTranslationSagas","fetchNotTranslatedQuestions","fetchNotTranslatedAnswers","fetchNotTranslatedComments","NotTranslatedList","NotTranslated_marked","NotTranslatedSagas","postVotes","deleteVotes","commentAnswerData","questionData","singleQuestionData","_message","abrupt","t1","Votes_marked2","voteSagas","VoteTranslation_marked","voteTranslationSagas","Notification_marked","notificationSagas","rootSaga","toConsumableArray","rootSaga_marked","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createHistory","ReactGA","initialize","listen","pathname","routingMiddleware","routerMiddleware","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","thunkMiddleware","logger","run","getState","addLocaleData","library","add","fas","far","ReactDOM","es","index_es","containers_App","layouts_ScrollToTop","Switch","exact","path","onEnter","auth_UserOnly","ProfileEdit","auth_GuestOnly","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.cf496f7b.chunk.js","sourcesContent":["import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_QUESTION_LIST = Symbol('FETCH_QUESTION_LIST');\nexport const FETCH_QUESTION = Symbol('FETCH_QUESTION');\nexport const POST_QUESTION_DATA = Symbol('POST_QUESTION_DATA');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATE_CURRENT_TRANSLATE_LANGUAGE = Symbol('UPDATE_CURRENT_TRANSLATE_LANGUAGE');\nexport const SAVE_QUESTION_DATA = Symbol('SAVE_QUESTION_DATA');\nexport const UPDATED_QUESTION_DATA = Symbol('UPDATED_QUESTION_DATA');\nexport const DELETE_QUESTION = Symbol('DELETE_QUESTION');\n\n\n//createAction(FETCH_QUESTION_LIST)はFETCH_QUESTION_LISTという名前でアクションを発火させる。\nexport const fetchQuestionList = createAction(FETCH_QUESTION_LIST);\nexport const fetchQuestion = createAction(FETCH_QUESTION);\nexport const postQuestionData = createAction(POST_QUESTION_DATA);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updateCurrentTranslateLanguage = createAction(UPDATE_CURRENT_TRANSLATE_LANGUAGE);\nexport const saveQuestionData = createAction(SAVE_QUESTION_DATA);\nexport const updatedQuestionData = createAction(UPDATED_QUESTION_DATA);\nexport const deleteQuestion = createAction(DELETE_QUESTION);\n\n","'use strict';\n\nexport const isEmptyObject = (obj) => {\n  if (typeof obj === 'undefined') {\n    return true;\n  }\n  return !Object.keys(obj).length;\n}\n","'use strict';\nimport { isEmptyObject } from './index';\n\nexport const getFilteredContents = (contentList, translateLanguageId, contentType) => {\n  return contentList.filter((v) => {\n    if (v.translate_language_id === translateLanguageId) {\n      return true ;\n    }\n\n    const targetTranslationsNum = v[contentType].filter((v) => {\n      return (v.translate_language_id === translateLanguageId);\n    }).length;\n    return (targetTranslationsNum !== 0);\n  });\n};\n\nexport const getTranslatedContents = (contentList, translateLanguageId, contentType) => {\n  return contentList.map(v => getTranslatedContent(v, translateLanguageId, contentType));\n};\n\nexport const getTranslatedContent = (content, translateLanguageId, contentType) => {\n  if (content.translate_language_id === translateLanguageId) {\n    return setDispText(content, content.content);\n  }\n\n  if (isEmptyObject(content[contentType])) {\n    return setDispText(content, content.content);\n  }\n\n  const translationList = content[contentType].filter(content => {\n    return (content.translate_language_id === translateLanguageId);\n  });\n\n  if (translationList.length === 0) {\n    return setDispText(content, content.content);\n  }\n  const translation = translationList[0];\n  return setDispText(content, translation.content);\n};\n\nconst setDispText = (content, text) => {\n  content.dispText = text;\n  return content;\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\n\nclass Translator extends Component {\n\n  render() {\n    const { user } = this.props;\n    const { name, image_path, profile_link } = user;\n    const { formatMessage } = this.props.intl;\n    const msg = formatMessage({id: \"translated.name\"});\n\n    return (\n      <div className=\"uk-text-right\">\n        <div className=\"uk-comment-meta uk-display-inline-block\" style={{padding: '0 10px'}}>{ msg }</div>\n        <div className=\"uk-display-inline-block\">\n          <Link to={profile_link}>\n            <img className=\"uk-comment-avatar uk-border-circle uk-text-right\" src={image_path} width=\"35\" height=\"35\" alt={name} />\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(Translator);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const POST_VOTE = Symbol('POST_VOTE');\nexport const DELETE_VOTE = Symbol('DELETE_VOTE');\nexport const HANDLE_VOTE = Symbol('HANDLE_VOTE');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\n\n//createAction(FETCH_QUESTION_LIST)はFETCH_QUESTION_LISTという名前でアクションを発火させる。\nexport const postVote = createAction(POST_VOTE);\nexport const deleteVote = createAction(DELETE_VOTE);\nexport const handleVote = createAction(HANDLE_VOTE);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass PostAnswerCount extends Component {\n  render() {\n    const { reply } = this.props;\n\n    const commentCount = reply.reduce((accumulator, currentValue) => {\n      return accumulator + currentValue.comments.length;\n    }, 0);\n\n    const replyState = <FontAwesomeIcon icon={['fas','reply']} color=\"steelblue\" size=\"1x\"/> ;\n    const replyCount = reply.length;\n    const commentState = <FontAwesomeIcon className=\"uk-margin-left\" icon={['far','comment-dots']} color=\"steelblue\" size=\"1x\"/> ;\n\n    return (\n      <div className=\"uk-margin-left\">\n        { replyState }\n        { replyCount }\n        { commentState }\n        { commentCount }\n      </div>\n    );\n  }\n}\n\nexport default PostAnswerCount;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass PostUser extends Component {\n  \n    selectedNationalFlag(countryId) {\n        let src;\n        switch(countryId) {\n            case 1:\n                src = \"japan\";\n                break;\n            case 2:\n                src = \"usa\";\n                break;\n            case 3:\n                src = \"philippines\";\n                break;\n            case 4:\n                src = \"england\";\n                break;\n            case 5:\n                src = \"newzealand\";\n                break;\n            default :\n                src = \"japan\";\n                break;\n        }\n        return <img className=\"\" src={`/image/common/flag/${src}.png`} style={{border: \"1px solid #dcdcdc\"}} width=\"20\" height=\"20\" alt=\"\"/>;\n    }\n\n    render() {\n        const { user } = this.props;\n        const nationalFlag = this.selectedNationalFlag(user.country_id);\n        const userName = user ? user.name : '不明なユーザー';\n        const profileLink = `/users/profile/${user.id}`;\n\n        return (\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n                <div className=\"uk-width-auto\">\n                    <Link to={profileLink}><img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"43\" height=\"43\" alt=\"\" /></Link>\n                </div>\n                <div>\n                <div className=\"uk-width-auto\" >\n                    { nationalFlag }\n                </div>\n                    <div>\n                        <h4 className=\"uk-comment-meta uk-margin-remove\"><Link className=\"\" to={profileLink}>{ userName }</Link></h4>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PostUser;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass PostIcons extends Component {\n\n    getVoteButton(voteState) {\n        const {\n            user,\n            loginUser,\n            onClickHandleVote,\n        } = this.props;\n\n        if (user.id === loginUser.id) {\n            return (\n                <a>\n                    <FontAwesomeIcon icon={['far','heart']} color=\"gray\"  size=\"lg\" className=\"NoUser\"/>\n                </a>\n            );\n        }\n        if (voteState) {\n            return (\n                //sends\n                <a onClick={onClickHandleVote}>\n                    <FontAwesomeIcon icon={['far','heart']} color=\"gray\"  size=\"lg\"/>\n                </a>\n            );\n        }\n        return (\n            //delete\n            <a onClick={onClickHandleVote}>\n            <FontAwesomeIcon icon=\"heart\" color=\"red\" size=\"lg\"/>\n            </a>\n        );\n    }\n\n    render() {\n        const { \n            user, \n            loginUser, \n            votes, \n            editLink,\n            translateLink,\n            voteState,\n            translate\n        } = this.props;\n        \n        const editLinkButton = user.id === loginUser.id\n                             ? <Link className=\"uk-margin-small-right\" to={editLink}><FontAwesomeIcon icon=\"edit\" color=\"steelblue\" size=\"lg\"/></Link>\n                             : '';\n\n        const votebutton = this.getVoteButton(voteState);\n\n        const voteNumbers = <span className=\"uk-margin-small-right uk-text-default\">{ votes.length }</span>;\n\n        const translateButton = translate === true\n        ? (\n          <Link to={translateLink}>\n            <FontAwesomeIcon icon=\"globe-americas\" color=\"steelblue\" size=\"lg\"/>\n          </Link>\n        )\n        : \"\";\n\n        return (\n        <div>\n            { votebutton }\n            { voteNumbers }\n            { editLinkButton }\n            { translateButton }\n        </div>\n        );\n  }\n}\n\nexport default PostIcons;\n","import React, { Component } from 'react';\nimport { handleVote } from '../actions/Vote';\nimport PostAnswerCount from './PostAnswerCount';\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\nimport Translator from './Translator';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { connect } from 'react-redux';\n\nclass QuestionContent extends Component {\n\n  getOnClickPostVote(voteParams, loginUserId) {\n    return () => {\n      if (loginUserId == null) {\n        return;\n      }\n      const ACTION_TYPE_VOTE = 6;\n      voteParams.action_type_id = ACTION_TYPE_VOTE;\n      return this.props.handleVote(voteParams);\n    };\n  }\n\n  getTranslator(question_translations, formatMessage) {\n    const defaultElem = (\n      <h4 className=\"uk-comment-meta uk-text-right\">\n        { formatMessage({id: \"translated.state\" })}\n      </h4>\n    );\n\n    if (question_translations.length === 0) {\n      return defaultElem;\n    }\n\n    const { user } = question_translations[0];\n    return <Translator user={user} />;\n  }\n\n  render() {\n\n    const { question, formatMessage, userData } = this.props;\n\n    const { user } = question;\n    const { answers } = question;\n    const { votes } = question;\n    \n    const myVoteList = votes.filter(v => v.user_id === userData.id);\n    const myVoteId = myVoteList.length !== 0 ? myVoteList[0].id : 0;\n\n    const voteState = (myVoteList.length === 0);\n    const voteParams = (voteState)\n                     ? {\n                        postActionType: \"post\",\n                        thisPageKey: \"questionList\",\n                        user_id: userData.id,\n                        question_id: question.id,\n                        answer_id: null,\n                        comment_id: null,\n                        status: 1,\n                     } : {\n                        postActionType: \"delete\",\n                        thisPageKey: \"questionList\",\n                        user_id: userData.id,\n                        deleteColumnKey: \"question\",\n                        vote_id: question.id,\n                        voteIdForPoint: myVoteId,\n                     };\n  \n    const  contentCount = answers.length !==0\n                        ? <PostAnswerCount reply={ answers } />\n                        : \"\";\n\n    const handleSubmit = this.getOnClickPostVote(voteParams, userData.id).bind(this);\n\n    const { question_translations } = question;\n    const translator = this.getTranslator(question_translations, formatMessage);\n\n    return (\n      <li key={question.id} >\n        <p>\n          <span className=\"uk-text-muted\">{ formatMessage({id: question.category.intl_key })}</span>\n          <span className=\"uk-text-meta uk-margin-small-left\">{dayjs(question.created_at).format('YYYY/MM/DD HH:mm:ss')}</span>\n        </p>\n        <p className=\"uk-text-lead uk-text-truncate\" ><Link to={`/questions/${question.id}`}>{`${question.dispText}`}</Link></p>\n        <div className=\"button-area uk-margin-bottom\" >\n        <PostIcons\n            user = { user }\n            loginUser = { userData  }\n            votes = { votes }\n            voteState = { voteState }\n            onClickHandleVote = { handleSubmit }\n            editLink = {`/questions/edit/${question.id}`}\n            translateLink = {`/question_translations/${question.id}`}\n            translate = { true }\n        />\n        </div>\n        <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n          <div>\n            <PostUser user={user} />\n          </div>\n          <div>\n            { contentCount }\n          </div>\n          <div className=\"uk-width-expand\" >\n            { translator }\n          </div>\n        </div>\n      </li>\n    )\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleVote: (data) => dispatch(handleVote(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionContent);","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { getTranslatedContents } from '../utils/Translations';\nimport { injectIntl } from 'react-intl';\nimport { sprintf } from 'sprintf-js';\nimport Translator from './Translator';\nimport { connect } from 'react-redux';\n\nimport { handleVote } from '../actions/Vote';\nimport QuestionContent from './QuestionContent';\n\nclass QuestionListView extends Component {\n  categoryFilteredContents(array, id) {\n\n    const CREATED_ALL = 0;\n    const CREATED_COMIC_ANIME = 1;\n    const CREATED_CULTURE = 2;\n    const CREATED_TOURISM = 3;\n    const CREATED_MUSIC = 4;\n\n    switch (id) {\n      case CREATED_ALL:\n        return array;\n      case CREATED_COMIC_ANIME:\n      case CREATED_CULTURE:\n      case CREATED_TOURISM:\n      case CREATED_MUSIC:\n        return array.filter((e) => {\n          return e.category_id === id;\n        });\n      default:\n        return [];\n    }\n  }\n\n  sortFilteredContents(categoryQuestions, sortId) {\n    const CREATED_ANSWER_MANY = 1;\n    const CREATED_ANSWER_FEW = 2;\n    const CREATED_CREATED_ASC = 3;\n    const CREATED_CREATED_DES = 4;\n\n    const editArray = categoryQuestions.map(v => {\n      return { \"num\": v.answers.length, \"question\": v };\n    });\n\n    switch (sortId) {\n      case CREATED_ANSWER_MANY:\n        return editArray.sort(function (a, b) {\n          return (a.num < b.num ? 1 : -1);\n        }).map((e) => { return e.array });\n      case CREATED_ANSWER_FEW:\n        return editArray.sort(function (a, b) {\n          return (a.num > b.num ? 1 : -1);\n        }).map((e) => { return e.array })\n      case CREATED_CREATED_ASC:\n        return categoryQuestions.sort(function (a, b) {\n          return (a.created_at < b.created_at ? 1 : -1);\n        });\n      case CREATED_CREATED_DES:\n        return categoryQuestions.sort(function (a, b) {\n          return (a.created_at > b.created_at ? 1 : -1);\n        });\n      default:\n        return [];\n    }\n  }\n\n  getQuestionList(questionArray, translateLanguageId, categoryId, sortId) {\n\n    const contentType = 'question_translations';\n    const translatedQuestions = getTranslatedContents(questionArray, translateLanguageId, contentType);\n    const categoryQuestions = this.categoryFilteredContents(translatedQuestions, categoryId);\n    const sortQuestions = this.sortFilteredContents(categoryQuestions, sortId);\n    const { formatMessage } = this.props.intl;\n    const userData = this.props.user;\n\n    return sortQuestions.map(question =>\n      <QuestionContent\n        key={`question_id_${question.id}`}\n        question={question}\n        formatMessage={formatMessage}\n        userData={userData}\n      />\n    );\n  }\n\n  render() {\n    const { questionArray, translateLanguageId, categoryId, sortId } = this.props;\n    const questionList = this.getQuestionList(questionArray, translateLanguageId, categoryId, sortId);\n\n    return (\n      <div>\n        <ul className=\"uk-list uk-list-divider uk-list-large\">\n          {questionList}\n        </ul>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  const { categoryId } = state.ctgr;\n  const { sortId } = state.sort;\n  const { intl } = state;\n\n  return {\n    user,\n    categoryId,\n    sortId,\n    intl\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    // handlePostVote: (data) => dispatch(postVote(data)),\n    // handleDeleteVote: (data) => dispatch(deleteVote(data)),\n    handleVote: (data) => dispatch(handleVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(QuestionListView));\n\n// export default injectIntl(QuestionListView)\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport QuestionListView from './QuestionListView';\n\nclass QuestionList extends Component {\n\n  componentDidMount() {\n    const { questionArray } = this.props.state.questions;\n    const category_id = this.props.state.ctgr.categoryId;\n\n    if (questionArray.length !== 0) {\n      return;\n    }\n\n    const params = (category_id === 0) ? {} : { category_id };\n    this.props.handleFetchData(params);\n  }\n\n  render() {\n    const { isFetching, questionArray } = this.props.state.questions;\n    const { translateLanguageId } = this.props.state.intl;\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    return (\n      <QuestionListView questionArray={questionArray} translateLanguageId={translateLanguageId} loginUser={this.props.state.auth.user.id}/>\n    );\n  }\n}\n\nexport default QuestionList;\n","import { connect } from 'react-redux';\nimport { fetchQuestionList } from '../actions/Question';\nimport QuestionList from '../components/QuestionList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (queryData) => dispatch(fetchQuestionList(queryData)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionList);\n","import React, { Component } from 'react';\nimport { Field } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass LanguageFormSelect extends Component {\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { name, placeholder } =  this.props;\n\n    return (\n      <Field name={name} component=\"select\" className={'form-control uk-select'}>\n        <option value=\"\">{placeholder}</option>\n        <option value=\"1\" >{ formatMessage({id: \"languages.japanese\" })}</option>\n        <option value=\"2\" >{ formatMessage({id: \"languages.english\" })}</option>\n      </Field>\n    );\n  }\n}\n\nexport default injectIntl(LanguageFormSelect);\n","import React, { Component } from 'react';\nimport { Field } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass CategoryFormSelect extends Component {\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { name, placeholder } =  this.props;\n    \n    return (\n      <Field name={name} component=\"select\" className={'form-control uk-select'}>\n        <option value=\"\">{placeholder}</option>\n        <option value=\"1\" >{ formatMessage({id: \"categories.comic_anime\" })}</option>\n        <option value=\"2\" >{ formatMessage({id: \"categories.culture\" })}</option>\n        <option value=\"3\" >{ formatMessage({id: \"categories.tourism\" })}</option>\n        <option value=\"4\" >{ formatMessage({id: \"categories.music\" })}</option>\n      </Field>\n    );\n  }\n}\n\nexport default injectIntl(CategoryFormSelect);\n","import React, { Component } from 'react';\nimport { Field } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass CountryFormSelect extends Component {\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { id, name, placeholder } =  this.props;\n\n    return (\n      <Field id={id} name={name} component=\"select\" className={'form-control uk-select'}>\n        <option value=\"\">{placeholder}</option>\n        <option value=\"1\" >{ formatMessage({id: \"countries.japan\" })}</option>\n        <option value=\"2\" >{ formatMessage({id: \"countries.usa\" })}</option>\n        <option value=\"3\" >{ formatMessage({id: \"countries.philippines\" })}</option>\n        <option value=\"4\" >{ formatMessage({id: \"countries.england\" })}</option>\n        <option value=\"5\" >{ formatMessage({id: \"countries.newzealand\" })}</option>\n        <option value=\"6\" >{ formatMessage({id: \"countries.korea\" })}</option>\n        <option value=\"7\" >{ formatMessage({id: \"countries.thailand\" })}</option>\n      </Field>\n    );\n  }\n}\n\nexport default injectIntl(CountryFormSelect);\n","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport CategoryFormSelect from './CategoryFormSelect';\nimport { injectIntl } from 'react-intl';\nimport { Persist } from 'formik-persist';\nimport CountryFormSelect from './CountryFormSelect';\n\nclass QuestionForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = \"errors.questions.content\";\n    }\n    if (!values.country_id) {\n      errors.country_id = \"errors.questions.country_id\";\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = \"errors.questions.translate_language_id\";\n    }\n    if (!values.category_id) {\n      errors.category_id = \"errors.questions.category_id\";\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues } = this.props;\n    const { formatMessage } = this.props.intl;\n\n    const persistTab = this.props.fromName === \"questionForm\"\n                     ? <Persist name={this.props.fromName} />\n                     : \"\";\n\n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n          this.props.onSubmit(values);\n          setSubmitting(false);\n          resetForm();\n          return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                  name=\"content\"\n                  component=\"textarea\"\n                  type=\"text\"\n                  placeholder={formatMessage({ id: 'placeholders.questions.content' })}\n                  rows=\"5\"\n                  className={'form-control uk-textarea'}\n                />\n                {touched.content && errors.content && <div className=\"uk-text-warning\">{formatMessage({ id: errors.content })}</div>}\n                {/* {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>} */}\n                {persistTab}\n              </div>\n              <div className=\"uk-margin uk-grid uk-grid-small uk-child-width-expand@s\" >\n                <div className=\"uk-grid-margin\" >\n\n                  <CountryFormSelect\n                    id={'counrty_id'}\n                    name=\"country_id\"\n                    placeholder={formatMessage({ id: \"placeholders.questions.country_id\" })} />\n\n                  {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{formatMessage({ id: errors.country_id })}</div>}\n                  {/* {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{errors.country_id}</div>} */}\n                </div>\n                <div className=\"uk-grid-margin\" >\n                  <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({ id: \"placeholders.questions.translate_language_id\" })} />\n                  {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{formatMessage({ id: errors.translate_language_id })}</div>}\n                  {/* {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>} */}\n                </div>\n\n                <div className=\"uk-grid-margin\" >\n                  <CategoryFormSelect name=\"category_id\" placeholder={formatMessage({ id: \"placeholders.questions.category_id\" })} />\n                  {touched.category_id && errors.category_id && <div className=\"uk-text-warning\">{formatMessage({ id: errors.category_id })}</div>}\n                  {/* {touched.category_id && errors.category_id && <div className=\"uk-text-warning\">{errors.category_id}</div>} */}\n                </div>\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-default\" >{formatMessage({ id: \"placeholders.questions.submit_btn\" })}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(QuestionForm);","import React from 'react';\nimport QuestionList from '../containers/QuestionList';\nimport QuestionForm from './QuestionForm';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\n\nclass Home extends React.Component {\n\n  submitQuestionForm(formData) {\n    try {\n      const { user, isLoggedIn } = this.props.state.auth;\n      if (!isLoggedIn) {\n        const { history } = this.props;\n        this.props.alertMessage(\"ログインしてください。\");\n        return history.push(\"/users/login\");\n      }\n      const { content, translate_language_id, country_id, category_id } = formData;\n      const user_id = user.id;\n      const postData = { content, user_id, translate_language_id, country_id, category_id };\n      return this.props.handleSubmit(postData);\n    } catch (e) {\n      console.log('e.message', e.message);\n      return;\n    }\n  }\n\n  selectedCategory(value) {\n    switch(value) {\n      case \"all\" :\n        return 0;\n      case \"comic_anime\":\n        return 1;\n      case \"culture\":\n        return 2;\n      case \"tourism\":\n        return 3;\n      case \"music\":\n        return 4;\n      default:\n        return 0;\n    }\n  }\n\n  selectedSort(value) {\n    switch(value) {\n      case \"answerMany\":\n        return 1;\n      case \"answerFew\":\n        return 2;\n      case \"Asc\":\n        return 3;\n      case \"Des\":\n        return 4;\n      default:\n        return 4;\n    }\n  }\n\n  onChangeLanguage(locale, e) {\n    e.preventDefault();\n    e.stopPropagation();\n    localStorage.setItem('locale', locale);\n    // かなり不適切な書き方だが一旦ここでリダイレクトさせるようにしておく\n    window.location.href = '/';\n    return;\n  }\n\n  changeSortfunction(value){\n    this.props.changeSort(value);\n    const params = {};\n    this.props.handleFetchData(params);\n  }\n\n  changeCateogryfunction(value) {\n     this.props.changeCategory(value);\n     const params = {};\n     this.props.handleFetchData(params);\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { locale, translateLanguageId } = this.props.state.intl;\n    const { category } = this.props.state.ctgr;\n    const { sort } = this.props.state.sort;\n    const { auth } = this.props.state;\n    const questionFormInitVals = {\n      content: '',\n      country_id: '',\n      translate_language_id: '',\n      category_id: ''\n    };\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-width-auto uk-margin-bottom uk-text-right\" >\n          <span>\n            <a href=\"/\" onClick={this.onChangeLanguage.bind(this, 'ja')} >\n              日本語\n            </a>\n          </span>\n          <span className=\"uk-margin-small-left\">\n            <a href=\"/\" onClick={this.onChangeLanguage.bind(this, 'en')} >\n              English\n            </a>\n          </span>\n        </div>\n        <QuestionForm initialValues={questionFormInitVals} loginUser={auth} onSubmit={this.submitQuestionForm.bind(this)} formName=\"questionForm\"/>\n        {/* 言語切り替え */}\n        <h3 className=\"uk-heading-line\"><span>{ formatMessage({id: \"titles.question_list\" })}</span></h3>\n        <div className=\"uk-margin uk-grid uk-grid-small uk-child-width-expand@s\" >\n          {/* カテゴリー切り替え */}\n          <div className=\"uk-grid-margin\" >\n            <select className=\"uk-select\" value={category} onChange={e => this.changeCateogryfunction( e.target.value )} >\n              <option value=\"all\" >{ formatMessage({id: \"categories.all\" })}</option>\n              <option value=\"comic_anime\" >{ formatMessage({id: \"categories.comic_anime\" })}</option>\n              <option value=\"culture\" >{ formatMessage({id: \"categories.culture\" })}</option>\n              <option value=\"tourism\" >{ formatMessage({id: \"categories.tourism\" })}</option>\n              <option value=\"music\" >{ formatMessage({id: \"categories.music\" })}</option>\n            </select>\n          </div>\n          {/* ソート */}\n          <div className=\"uk-grid-margin\" >\n            <select className=\"uk-select\" value={sort} onChange={e => this.changeSortfunction( e.target.value )} >\n              <option value=\"answerMany\" >{ formatMessage({id: \"sort.answerMany\" })}</option>\n              <option value=\"answerFew\" >{ formatMessage({id: \"sort.answerFew\" })}</option>\n              <option value=\"Asc\" >{ formatMessage({id: \"sort.Asc\" })}</option>\n              <option value=\"Des\" >{ formatMessage({id: \"sort.Des\" })}</option>\n            </select>\n          </div>\n        </div>\n        <QuestionList translate_language_id={translateLanguageId}/>\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(Home);","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const UPDATE_CURRENT_LANGUAGE = Symbol('UPDATE_CURRENT_LANGUAGE');\n\n\nexport const updateCurrentLanguage = createAction(UPDATE_CURRENT_LANGUAGE);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const UPDATE_CURRENT_CATEGORY = Symbol('UPDATE_CURRENT_CATEGORY');\nexport const updateCurrentCategory = createAction(UPDATE_CURRENT_CATEGORY);","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const UPDATE_CURRENT_SORT = Symbol('UPDATE_CURRENT_SORT');\nexport const updateCurrentSort = createAction(UPDATE_CURRENT_SORT);","import { createAction } from 'redux-actions';\n\nexport const ACTION_ALERT_MESSAGE = Symbol('ACTION_ALERT_MESSAGE');\n\nexport const actionAlertMessage = createAction(ACTION_ALERT_MESSAGE);\n\n","import { connect } from 'react-redux';\nimport Home from '../components/Home';\nimport {\n  postQuestionData,\n  fetchQuestionList\n} from '../actions/Question';\nimport {\n  updateCurrentLanguage,\n} from '../actions/Intl';\nimport {\n  updateCurrentCategory,\n} from '../actions/Category';\nimport {\n  updateCurrentSort,\n} from '../actions/Sort';\nimport {\n  actionAlertMessage,\n} from '../actions/Notification';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleSubmit: (postData) => dispatch(postQuestionData(postData)),\n    changeLanguage: (locale) => dispatch(updateCurrentLanguage(locale)),\n    changeCategory: (category) => dispatch(updateCurrentCategory(category)),\n    changeSort: (sort) => dispatch(updateCurrentSort(sort)),\n    handleFetchData: (queryData) => dispatch(fetchQuestionList(queryData)),\n    alertMessage: (message) => dispatch(actionAlertMessage(message)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\n//<AnswerForm qId={this.qId} initialValues={answerFormInitVals} onSubmit={this.handleSubmit.bind(this)} />\n//この中のqId={this.qId} initialValues={answerFormInitVals} onSubmit={this.handleSubmit.bind(this)は\n//props（プロパティーの中に)入る。props.qIdという形式で値を取り出すことができる。\n\nclass AnswerForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.answers.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.answers.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues } = this.props;\n    const { formatMessage } = this.props.intl;\n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: 'placeholders.answers.content'})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n                {touched.content && errors.content && <div className=\"uk-text-warning\" >{errors.content}</div>}\n              </div>\n              <div className=\"uk-grid-margin\" >\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: 'placeholders.answers.translate_language_id'})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\" >{errors.translate_language_id}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"placeholders.answers.submit_btn\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(AnswerForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const CHANGE_ANSWER_FORM_CONTENT = Symbol('CHANGE_ANSWER_FORM_CONTENT');\nexport const FETCH_ANSWER_LIST = Symbol('FETCH_ANSWER_LIST');\nexport const FETCH_ANSWER = Symbol('FETCH_ANSWER');\nexport const POST_ANSWER_DATA = Symbol('POST_ANSWER_DATA');\nexport const INITIALIZE_FORM = Symbol('INITIALIZE_FORM');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const SAVE_ANSWER_DATA = Symbol('SAVE_ANSWER_DATA');\nexport const DELETE_ANSWER = Symbol('DELETE_ANSWER');\n\nexport const changeAnswerFormContent = createAction(CHANGE_ANSWER_FORM_CONTENT);\nexport const fetchAnswerList = createAction(FETCH_ANSWER_LIST);\nexport const fetchAnswer = createAction(FETCH_ANSWER);\nexport const postAnswerData = createAction(POST_ANSWER_DATA);\nexport const initializeForm = createAction(INITIALIZE_FORM);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const saveAnswerData = createAction(SAVE_ANSWER_DATA);\nexport const deleteAnswer = createAction(DELETE_ANSWER);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_COMMENT_DATA_SUCCESS = Symbol('RECEIVE_COMMENT_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const FETCH_SINGLE_COMMENT = Symbol('FETCH_SINGLE_COMMENT');\nexport const FETCH__COMMENT_WITH_USER_LIST = Symbol('FETCH__COMMENT_WITH_USER_LIST');\nexport const POST_COMMENT = Symbol('POST_COMMENT');\nexport const UPDATE_COMMENT = Symbol('UPDATE_COMMENT');\nexport const UPDATED_COMMENT_DATA = Symbol('UPDATED_COMMENT_DATA');\nexport const UPDATED_SINGLE_COMMENT_DATA = Symbol('UPDATED_SINGLE_COMMENT_DATA');\nexport const SAVE_COMMENT_DATA = Symbol('SAVE_COMMENT_DATA');\nexport const DELETE_COMMENT = Symbol('DELETE_COMMENT');\n\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveCommentDataSuccess = createAction(RECEIVE_COMMENT_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const postComment = createAction(POST_COMMENT);\nexport const fetchSingleComment = createAction(FETCH_SINGLE_COMMENT);\nexport const fetchCommentWithUserList = createAction(FETCH__COMMENT_WITH_USER_LIST);\nexport const updateComment = createAction(UPDATE_COMMENT);\nexport const updatedCommentData = createAction(UPDATED_COMMENT_DATA);\nexport const updatedSingleCommentData = createAction(UPDATED_SINGLE_COMMENT_DATA);\nexport const deleteComment = createAction(DELETE_COMMENT);\nexport const saveCommentData = createAction(SAVE_COMMENT_DATA);\n\n\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\n//componentの中でdispatchするための設定\nimport { connect } from 'react-redux';\nimport { postVote, deleteVote, handleVote} from '../actions/Vote';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { sprintf } from 'sprintf-js';\nimport { injectIntl } from 'react-intl';\nimport Translator from './Translator';\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\nimport { isEmptyObject } from '../utils';\n\nclass Comment extends Component {\n\n  getOnClickPostVote(voteParams, loginUserId) {\n    return () => {\n      if (loginUserId == null) {\n        return;\n      }\n      const ACTION_TYPE_VOTE = 6;\n      voteParams.action_type_id = ACTION_TYPE_VOTE; \n      return this.props.handleVote(voteParams);\n    };\n  }\n\n  getTranslator(currentCommentList, answerId, commentId, formatMessage) {\n    const defaultElem = (\n      <h4 className=\"uk-comment-meta uk-text-right\">{formatMessage({id: 'translated.state'})}</h4>\n    );\n    if (currentCommentList.length === 0) {\n      return defaultElem;\n    }\n\n    const thisAnswerCommentList = currentCommentList[answerId];\n    if (!thisAnswerCommentList) {\n      return defaultElem;\n    }\n    \n    const thisCommentData = thisAnswerCommentList.filter(v => v.id === commentId);\n    const commentTranslated = thisCommentData[0].comment_translations;\n    if (commentTranslated.length === 0) {\n      return defaultElem;\n    }\n    const { user } = commentTranslated[0];\n    return <Translator user={user} />;\n  }\n\n  render() {\n    const { commentId, content, isOwner, voteList, commentUser, answerId, comments, user, questions, intl } = this.props;\n\n    const currentQuestionId = questions.currentQuestion.id;\n    const { formatMessage } = intl;\n    const { currentCommentList } = comments;\n\n    const myVoteList = voteList.filter(v => v.user_id === this.props.user.id); \n    const myVoteId = myVoteList.length !== 0 ? myVoteList[0].id : 0;\n    const commentUserId = myVoteList.length !== 0 ? myVoteList[0].user_id : 0;\n\n    const voteState = (myVoteList.length === 0);\n    const voteParams = (voteState) \n                     ?{\n                      postActionType:\"post\",\n                      thisPageKey: \"comment\",\n                      user_id: this.props.user.id,\n                      question_id: null,\n                      answer_id: null,\n                      comment_id: commentId,\n                      status: 1,\n                      thisPageContentId: currentQuestionId,\n                     }:{\n                      postActionType:\"delete\",\n                      thisPageKey: \"comment\",\n                      user_id: this.props.user.commentId,\n                      deleteColumnKey : \"comment\",\n                      vote_id: commentId,\n                      voteIdForPoint: myVoteId,\n                      thisPageContentId: currentQuestionId,\n                     };\n\n    const handleSubmit = this.getOnClickPostVote(voteParams, this.props.user.id).bind(this);\n    const translator = this.getTranslator(currentCommentList, answerId, commentId,  formatMessage);\n\n    return (\n      <article className=\"uk-comment uk-comment-primary\">\n        <div className=\"uk-comment-header uk-comment-body\">\n          <p className=\"uk-margin-small-bottom\" style={{\"whiteSpace\": \"pre-wrap\"}} >\n            {content}\n          </p>\n          <PostIcons \n                user = { commentUserId } \n                loginUser = { this.props.user } \n                votes = { voteList }\n                voteState = { voteState }\n                editLink = {`/comments/edit/${commentId}`}\n                translateLink = {`/comment_translations/${commentId}`}\n                onClickHandleVote = { handleSubmit }\n                translate = { true }\n          />\n        </div>\n        <div className=\"uk-grid uk-grid-small uk-flex-middle\">\n          <div>\n            <PostUser user={ commentUser } />\n          </div>\n          <div className=\"uk-width-expand\" >\n            { translator }\n          </div>\n        </div>\n      </article>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { questions, comments, intl } = state;\n  const { user } = state.auth;\n  return {\n    user,\n    questions,\n    comments,\n    intl,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleVote: (data) => dispatch(handleVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(Comment))\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Comment from './Comment';\nimport { getFilteredContents, getTranslatedContents } from '../utils/Translations';\n\n\nclass CommentList extends Component {\n\n  render() {\n    const { loginUser, translateLanguageId } = this.props;\n    const commentList = this.props.list ? this.props.list : [];\n    const contentType = 'comment_translations';\n    const translatedCommentList = getTranslatedContents(commentList, translateLanguageId, contentType);\n\n    return (\n      <ul className=\"uk-comment-list\" >\n        { translatedCommentList.map((v, i) => {\n            const isOwner = loginUser.id === v.user.id;\n            const voteState = v.votes;\n\n            return (\n              <li className=\"uk-margin-small-top\" key={i} >\n                <Comment commentId={v.id} answerId={v.answer_id} commentUser={v.user} content={v.dispText} isOwner={isOwner} voteList={ voteState } />\n              </li>\n            );\n        })}\n      </ul>\n    );\n  }\n}\n\nexport default CommentList;\n","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { Persist } from 'formik-persist';\nimport { injectIntl } from 'react-intl';\n\nclass CommentForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.comments.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.comments.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues, state } = this.props;\n    const { formatMessage } = this.props.intl;\n    const buttonStr = formatMessage({id: 'placeholders.comments.submit_btn'});\n    const postButton = state.auth.isLoggedIn\n                     ? <div className=\"uk-margin\"><button className=\"uk-button uk-button-default\" >{buttonStr}</button></div>\n                     : <a class=\"uk-button uk-button-default\" href='/users/login'>{buttonStr}</a>;\n\n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: 'placeholders.comments.content'})}\n                     rows=\"3\"\n                     className={'form-control uk-textarea'}\n                />\n                <Persist name={`\"comment-form\"${values.answer_id}`}/>\n                {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: 'placeholders.comments.translate_language_id'})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n              </div>\n              {postButton}\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    state\n  };\n};\n\nexport default connect(mapStateToProps)(injectIntl(CommentForm));\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport Linkify from 'react-linkify';\nimport CommentList from './CommentList';\nimport CommentForm from './CommentForm';\nimport dayjs from 'dayjs';\nimport { getFilteredContents, getTranslatedContents } from '../utils/Translations';\nimport { injectIntl } from 'react-intl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { sprintf } from 'sprintf-js';\nimport Translator from './Translator';\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass AnswerList extends Component {\n  constructor(props) {\n    super(props);\n    this.qId = this.props.qId;\n    //ここからはコメント機能を実装するところ\n    this.state = {\n      buttonState: {},//空のオブジェクト\n      voteState: {},//評価のための\n    };\n  }\n\n  componentWillMount() {\n    const question_id = this.props.qId;\n    /* const translate_language_id = this.props.translateLanguageId;*/\n    this.props.handleFetchData({ question_id });\n  }\n\n  onClickCommentForm(formData) {\n    const { user } = this.props.state.auth;\n    const { answer_id, translate_language_id, content } = formData;\n    const answerIds = this.props.state.answers.answerArray.map((v) =>{ return v.id })\n    const postData = {\n      user_id: user.id,\n      answer_id,\n      translate_language_id,\n      content,\n      question_id: this.qId,\n      current_translate_language_id: this.translateLanguageId,\n      answerIdList: answerIds,\n    };\n    return this.props.handlePostComment(postData);\n  }\n\n  getTranslator(answer_translations, formatMessage) {\n\n    const defaultElem = (\n      <h4 className=\"uk-comment-meta uk-text-right\">\n        { formatMessage({id: \"translated.state\" })}\n      </h4>\n    );\n\n    if (answer_translations.length === 0) {\n      return defaultElem;\n    }\n\n    const { user } = answer_translations[0];\n    return <Translator user={user} />;\n  }\n\n  getComment(answerId) {\n\n    const { buttonState } = this.state;\n\n    if (buttonState[answerId] !== \"open\") {\n      return \"\";\n    }\n\n    const initialValues = {\n      answer_id: answerId,\n      content: \"\",\n      translate_language_id: \"\",\n    };\n    return (\n      <div className=\"uk-margin-bottom\" style={{\"paddingLeft\": \"30px\"}} >\n        <CommentForm form={`commentForm_${answerId}`} onSubmit={this.onClickCommentForm.bind(this)} initialValues={initialValues} />\n      </div>\n    );\n  }\n\n  onClickReply(answerId) {\n    let { buttonState } = this.state;\n    const isOpened = ( buttonState[answerId] && buttonState[answerId] === \"open\" );\n    buttonState[answerId] = isOpened ? \"close\" : \"open\" ;\n    return this.setState({buttonState});\n  }\n\n  getOnClickPostVote(voteParams, loginUserId) {\n    return () => {\n      if (loginUserId == null) {\n        return;\n      }\n      const ACTION_TYPE_VOTE = 6;\n      voteParams.action_type_id = ACTION_TYPE_VOTE; \n      return this.props.handleVote(voteParams);\n    };\n  }\n\n  getAnswerList(answerArray, translateLanguageId) {\n    const { formatMessage } = this.props.intl;\n    const loginUser = this.props.state.auth.user;\n\n    const contentType = 'answer_translations';\n    const translatedAnswers = getTranslatedContents(answerArray, translateLanguageId, contentType);\n\n    return translatedAnswers.map(answer => {\n\n      const { user, votes } = answer;\n\n      const myVoteList = votes.filter(v => v.user_id === loginUser.id);  \n      const myVoteId = myVoteList.length !== 0 ? myVoteList[0].id : 0;\n\n      const voteState = (myVoteList.length === 0);\n    const voteParams = (voteState) \n                     ? {\n                      postActionType:\"post\",\n                      thisPageKey: \"answer\",\n                      user_id: this.props.state.auth.user.id,\n                      question_id: null,\n                      answer_id: answer.id,\n                      comment_id: null,\n                      status: 1,\n                      thisPageContentId: this.props.qId,\n                     }:{\n                      postActionType:\"delete\",\n                      thisPageKey: \"answer\",\n                      user_id: this.props.state.auth.user.id,\n                      deleteColumnKey : \"answer\",\n                      vote_id: answer.id,\n                      voteIdForPoint: myVoteId,\n                      thisPageContentId: this.props.qId,\n                     };\n      const handleSubmit = this.getOnClickPostVote(voteParams, loginUser.id).bind(this);\n      const commentForm = this.getComment(answer.id);\n      const { answer_translations } = answer;\n\n      const translator = this.getTranslator(answer_translations, formatMessage);\n\n      return (\n        <li key={answer.id} >\n          <article className=\"uk-comment\">\n            <div className=\"uk-comment-header uk-comment-body\">\n              <p className=\"uk-margin-small-bottom\" style={{\"whiteSpace\": \"pre-wrap\"}} >\n                <Linkify properties={{ target: '_blank'}} >{answer.dispText}</Linkify>\n              </p>\n              <PostIcons \n                    user = { user } \n                    loginUser = { this.props.state.auth.user } \n                    votes = { votes }\n                    voteState={voteState}\n                    editLink = {`/answers/edit/${answer.id}`}\n                    translateLink = {`/answer_translations/${answer.id}`}\n                    onClickHandleVote = { handleSubmit }\n                    translate = { true }\n                />\n              <p className=\"uk-text-meta\">{dayjs(answer.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n\n            </div>\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n              <div>\n                <PostUser user={ answer.user } />\n              </div>\n              <div className=\"uk-width-expand\" >\n                { translator }\n              </div>\n            </div>\n          </article>\n          <hr className=\"uk-divider-small\" />\n          <div className=\"uk-margin-bottom\" >\n            {/*CommentListはすでに投稿されたコメントの一覧を表示する*/}\n            <CommentList list={answer.comments} loginUser={loginUser} translateLanguageId={translateLanguageId} />\n            <div className=\"uk-text-right uk-margin-top\">\n              <p onClick={this.onClickReply.bind(this,answer.id)}><FontAwesomeIcon icon={['far','comment-dots']} color=\"black\" size=\"2x\"/></p>\n            </div>\n          </div>\n\n          {commentForm}\n\n        </li>\n      );\n    });\n  }\n\n  render() {\n    const { isFetching, answerArray } = this.props.state.answers;\n    const { formatMessage } = this.props.intl;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const { translateLanguageId } = this.props;\n    const answerList = this.getAnswerList(answerArray, translateLanguageId);\n\n    if (answerList.length === 0) {\n      return (\n        <div>\n          <h4 className=\"uk-text-success\">{formatMessage({id: \"messages.empty_answers\"})}</h4>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <ul className=\"uk-list uk-list-divider uk-list-large\" >\n          { answerList }\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(AnswerList);\n","import { connect } from 'react-redux';\nimport { fetchAnswerList } from '../actions/Answer';\nimport { postComment } from '../actions/Comment';\nimport AnswerList from '../components/AnswerList';\n//評価するための関数\n// import { postVote, deleteVote, handleVote } from '../actions/Vote';\nimport { handleVote } from '../actions/Vote';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (data) => dispatch(fetchAnswerList(data)),\n        handlePostComment: (data) => dispatch(postComment(data)),\n        // //評価機能\n        // handlePostVote: (data) => dispatch(postVote(data)),\n        // //評価の削除機能\n        // handleDeleteVote: (data) => dispatch(deleteVote(data)),\n        //評価の削除機能\n        handleVote: (data) => dispatch(handleVote(data)),\n    };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerList);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport Linkify from 'react-linkify';\nimport AnswerForm from './AnswerForm';\nimport AnswerList from '../containers/AnswerList';\nimport dayjs from 'dayjs';\nimport { sprintf } from 'sprintf-js';\nimport { injectIntl } from 'react-intl';\nimport { isEmptyObject } from '../utils';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Translator from './Translator';\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\nimport { getTranslatedContent } from '../utils/Translations';\n\nclass QuestionView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.qId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getQuestionById(this.qId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { user } = this.props.state.auth;\n      const { content, translate_language_id } = formData;\n      const question_id = this.qId;\n      const user_id = user.id;\n      /* const { translate_language_id } = currentQuestion;*/\n      return this.props.handleSubmit({content, question_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  getOnClickPostVote(voteParams, loginUserId) {\n    return () => {\n      if (loginUserId == null) {\n        return;\n      }\n      const ACTION_TYPE_VOTE = 6;\n      voteParams.action_type_id = ACTION_TYPE_VOTE;\n      return this.props.handleVote(voteParams);\n    };\n  }\n\n  getTranslator(question_translations, formatMessage) {\n    const defaultElem = (\n      <h4 className=\"uk-comment-meta uk-text-right\">\n        { formatMessage({id: \"translated.state\" })}\n      </h4>\n    );\n\n    if (question_translations.length === 0) {\n      return defaultElem;\n    }\n\n    const { user } = question_translations[0];\n    return <Translator user={user} />;\n  }\n\n  getAnswerForm(currentQuestion, loginUser) {\n    const { formatMessage } = this.props.intl;\n    const { intl_key } = currentQuestion.country;\n    if (currentQuestion.country_id !== loginUser.country_id) {\n      const temp = formatMessage({id: \"messages.you_are_not_target\"});\n      const message = sprintf(temp, formatMessage({id: intl_key}));\n      return (\n        <div>\n          <p className=\"uk-text-meta\">{message}</p>\n        </div>\n      );\n    }\n\n    const answerFormInitVals = { content: '', translate_language_id: '' };\n    return (\n      <AnswerForm qId={this.qId} initialValues={answerFormInitVals} onSubmit={this.handleSubmit.bind(this)}/>\n    );\n  }\n\n  getTranslateUser(img) {\n    const { formatMessage } = this.props.intl;\n    const msg = formatMessage({id: \"translated.name\"});\n\n    return (\n      <div className=\"uk-text-right\">\n        <div className=\"uk-comment-meta uk-display-inline-block\" style={{padding: '0 10px'}}>{ msg }</div>\n        <div className=\"uk-display-inline-block\">\n          <img className=\"uk-comment-avatar uk-border-circle uk-text-right\" src={img} width=\"35\" height=\"35\" alt=\"\" />\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { currentQuestion } = this.props.state.questions;\n    const { translateLanguageId } = this.props.state.intl;\n    const { formatMessage } = this.props.intl;\n\n    if (isEmptyObject(currentQuestion)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const loginUser = this.props.state.auth.user;\n    const contentType = 'question_translations';\n    const question = getTranslatedContent(currentQuestion, translateLanguageId, contentType);\n    const { user, votes } = currentQuestion;\n\n    const answerForm = this.getAnswerForm(currentQuestion, loginUser);\n    const myVoteList = votes.filter(v => v.user_id === loginUser.id);\n    const myVoteId = myVoteList.length !== 0 ? myVoteList[0].id : 0;\n\n    const voteState = (myVoteList.length === 0);\n    const voteParams = (voteState)\n                     ? {\n                      postActionType:\"post\",\n                      thisPageKey: \"questionView\",\n                      user_id: this.props.state.auth.user.id,\n                      question_id: currentQuestion.id,\n                      answer_id: null,\n                      comment_id: null,\n                      thisPageContentId: currentQuestion.id,\n                      status: 1,\n                    } : {\n                      postActionType:\"delete\",\n                      thisPageKey: \"questionView\",\n                      user_id: this.props.state.auth.user.id,\n                      deleteColumnKey : \"question\",\n                      vote_id: currentQuestion.id,\n                      voteIdForPoint: myVoteId,\n                      thisPageContentId: currentQuestion.id\n                    };\n    const handleSubmit = this.getOnClickPostVote(voteParams, loginUser.id).bind(this);\n\n    const { question_translations } = question;\n\n    const translator = this.getTranslator(question_translations, formatMessage)\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n          <p className=\"uk-text-muted\">{ question.category.category }</p>\n          <p className=\"uk-margin-small-bottom\" >\n            <Linkify properties={{ target: '_blank'}} >{question.dispText}</Linkify>\n          </p>\n          <PostIcons\n              user = { user }\n              loginUser = { loginUser }\n              votes = { votes }\n              voteState = { voteState }\n              editLink = {`/questions/edit/${this.qId}`}\n              translateLink = {`/question_translations/${this.qId}`}\n              onClickHandleVote = { handleSubmit }\n              translate = { true }\n            />\n          <p className=\"uk-text-meta\">{dayjs(question.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div>\n              <PostUser user={user} />\n            </div>\n            <div className=\"uk-width-expand\" >\n              { translator }\n            </div>\n          </div>\n        </div>\n\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.answer_list\"})}</span></h3>\n\n        <div className=\"uk-margin-bottom\">\n          { answerForm }\n        </div>\n        <AnswerList qId={this.qId} translateLanguageId={translateLanguageId} />\n        <hr className=\"uk-divider-icon\" />\n\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default injectIntl(QuestionView);\n","import { connect } from 'react-redux';\nimport QuestionView from '../components/QuestionView';\nimport {\n  fetchQuestion\n} from '../actions/Question';\nimport {\n  postAnswerData,\n  fetchAnswerList\n} from '../actions/Answer';\n//評価するための関数\nimport {\n  handleVote\n} from '../actions/Vote';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestionById: (id) => dispatch(fetchQuestion(id)),\n    handleSubmit: (postData) => dispatch(postAnswerData(postData)),\n    fetchAnswers: (question_id) => dispatch(fetchAnswerList(question_id)),\n    handleVote: (data) => dispatch(handleVote(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionView);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport QuestionForm from './QuestionForm';\nimport { isEmptyObject } from '../utils';\nimport { injectIntl } from 'react-intl';\n\nclass QuestionEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.qId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    console.log(\"発火\")\n    this.props.getQuestionById(this.qId);\n  }\n\n  notOwnerWillTransfer(currentQuestion) {\n    const owner = currentQuestion.user;\n    const loginUser = this.props.state.auth.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const question_id = this.qId;\n      /* const { translate_language_id } = currentQuestion;*/\n      const saveData = { content, question_id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        question_id: this.qId,\n        history\n      };\n      return this.props.deleteQuestion(params);\n    } catch (e) {\n      return;\n    }\n  }s\n\n  render() {\n    const { currentQuestion } = this.props.state.questions;\n    const { formatMessage } = this.props.intl;\n\n    if(currentQuestion.length===0){\n      return;\n    };\n\n    if (isEmptyObject(currentQuestion)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentQuestion);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>{ formatMessage({id: \"titles.question.edit\" })}</h2>\n        <QuestionForm initialValues={currentQuestion} onSubmit={this.handleSubmit.bind(this)}/>\n        <p><button className=\"uk-button uk-button-danger\" onClick={this.onClickDeleteBtn.bind(this)}>{ formatMessage({id: \"titles.question.delete\" })}</button></p>\n        <Link to=\"/\">{ formatMessage({id: \"titles.question.return\" })}</Link>\n      </main>\n    );\n  }\n}\n\nexport default injectIntl(QuestionEdit);","import { connect } from 'react-redux';\nimport QuestionEdit from '../components/QuestionEdit';\nimport {\n  fetchQuestion,\n  saveQuestionData,\n  deleteQuestion,\n} from '../actions/Question';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestionById: (id) => dispatch(fetchQuestion(id)),\n    handleSubmit: (postData) => dispatch(saveQuestionData(postData)),\n    deleteQuestion: (conditions) => dispatch(deleteQuestion(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionEdit);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const CHANGE_QUESTION_LIST_LANGUAGE = Symbol('CHANGE_QUESTION_LIST_LANGUAGE');\n// export const FETCH_QUESTION_LIST = Symbol('FETCH_QUESTION_LIST');\n\nexport const FETCH_NOT_TRANSLATED = Symbol('FETCH_NOT_TRANSLATED');\n\nexport const FETCH_QUESTION = Symbol('FETCH_QUESTION');\nexport const POST_QUESTION_DATA = Symbol('POST_QUESTION_DATA');\nexport const INITIALIZE_FORM = Symbol('INITIALIZE_FORM');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\n\nexport const changeQuestionListLanguage = createAction(CHANGE_QUESTION_LIST_LANGUAGE);\n// export const fetchQuestionList = createAction(FETCH_QUESTION_LIST);\n\nexport const fetchNotTranslated = createAction(FETCH_NOT_TRANSLATED);\n\nexport const fetchQuestion = createAction(FETCH_QUESTION);\nexport const postQuestionData = createAction(POST_QUESTION_DATA);\nexport const initializeForm = createAction(INITIALIZE_FORM);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nclass NotTranslated extends Component {\n\n  constructor(props) {\n    super(props);\n    //タブの切り替えのための要素\n    this.state = {currentTab: 'questions'};\n  }\n\n  componentDidMount() {\n    const { questions } = this.props.state.not_translate;\n    if (questions.length !== 0) {\n      return;\n    }\n    let params = {};\n    this.props.handleFetchData(params);\n  }\n\n  //各カテゴリの翻訳一覧を表示する関数\n  getNotTranslated(contents, url, key) {\n\n    // getNotTranslatedの関数\n    return contents.map((v) => {\n      const { user } = v;\n      const userName = user ? user.name : '不明なユーザー';\n      const profileLink = `/users/profile/${user.id}`;\n      //コンテンツに対応したidを返す関数\n      const id = this.getNotTranslatedId(v, key);\n\n      // ここreturnはmap関数のreturn\n      return (\n        //ここでcontentの種類+そのコンテンツのidの組み合わせをkeyとすることでこのHTML要素が一意になるようにする\n        <li key={`${key}_${v.id}`} >\n        {/* <li> */}\n          {/* 未翻訳の質問を表示する */}\n          <p className=\"uk-text-lead uk-text-truncate\" >\n            <Link to={`/questions/${id}`}>{`${v.content}`}</Link>\n            <Link to={`${url}${v.id}`}><FontAwesomeIcon icon=\"globe-americas\" color=\"steelblue\" size=\"lg\"/></Link>\n          </p>\n          {/* 作成時間を表示する */}\n          <p className=\"uk-text-meta\">{dayjs(v.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          {/* プロフィールを表示する */}\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div className=\"uk-width-auto\">\n              <Link to={profileLink}><img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" /></Link>\n            </div>\n            <div className=\"uk-width-expand\">\n              <h4 className=\"uk-comment-meta uk-margin-remove\"><Link className=\"\" to={profileLink}>{ userName }</Link></h4>\n            </div>\n          </div>\n        </li>\n      );\n    })\n  }\n\n  //コンテンツに対応したidを返す関数\n  getNotTranslatedId(v, key) {\n    switch(key) {\n      case \"questions\":\n        return v.id;\n      case \"answers\":\n        return v.question_id;\n      case \"comments\":\n        return v.answer.question_id;\n    }\n  }\n\n  //コンテンツに対応したurlを付加する関数\n  getNotTranslatedQuestions(contents) {\n    const url = \"/question_translations/\";\n    const key = \"questions\";\n    return this.getNotTranslated(contents, url, key);\n  }\n  getNotTranslatedAnswers(contents) {\n    const url = \"/answer_translations/\";\n    const key = \"answers\";\n    return this.getNotTranslated(contents, url, key);\n  }\n  getNotTranslatedComments(contents) {\n    const url = \"/comment_translations/\";\n    const key = \"comments\";\n    console.log('contents', contents);\n    return this.getNotTranslated(contents, url, key);\n  }\n\n  //現在のユーザーリスト\n  getCurrentTabContents(tabState, currentTab) {\n    //tabState = state.not_translate の中に3つの連想配列が入っている\n    const { questions, answers, comments } = tabState;\n    if (currentTab === 'questions') {\n      return this.getNotTranslatedQuestions(questions);\n    } else if (currentTab === 'answers') {\n      return  this.getNotTranslatedAnswers(answers);\n    } else if (currentTab === 'comments') {\n      return this.getNotTranslatedComments(comments);\n    }\n  }\n\n  onClickTab(newTabKey, e) {\n    e.preventDefault();\n    e.stopPropagation();\n    //stateの状態変更\n    this.setState({\n      currentTab: newTabKey\n    });\n  }\n\n  getTabList() {\n    const { formatMessage } = this.props.intl;\n    const tabData = [\n      {\n        name: formatMessage({id: \"links.question\"}),\n        key: 'questions'\n      },\n      {\n        name: formatMessage({id: \"links.answer\"}),\n        key: 'answers'\n      },\n      {\n        name: formatMessage({id: \"links.comment\"}),\n        key: 'comments'\n      }\n    ];\n\n    return (\n      <ul className=\"uk-tab\" >\n        {tabData.map(v => {\n           //currentTabとkeyが一致したとき、それをactiveにする\n           const active = this.state['currentTab'] === v.key\n                        ? 'uk-active'\n                        : '';\n           return (\n             <li key={v.key} className={active} onClick={this.onClickTab.bind(this, v.key)} >\n               <a href=\"\">{v.name}</a>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  getNotTranslatedView(state) {\n\n    const { isFetching } = state.not_translate;\n\n    //読み込み中であることを示すロゴを表示する\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const tabContents = this.getCurrentTabContents(state.not_translate, this.state.currentTab);\n\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\" >\n        {tabContents}\n      </ul>\n    );\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const content = this.getNotTranslatedView(this.props.state);\n    const tabList = this.getTabList();\n    \n    return (\n      <div>\n        <div className=\"uk-container uk-container-small\">\n          <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.not_translated_list\"})}</span></h3>\n          <br></br>\n        </div>\n        <div className=\"uk-container uk-container-small\">\n          {tabList}\n          {content}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(NotTranslated);\n","import { connect } from 'react-redux';\nimport { fetchNotTranslated } from '../actions/NotTranslated';\nimport NotTranslated from '../components/NotTranslated';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (queryData) => dispatch(fetchNotTranslated(queryData)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NotTranslated);","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport AnswerForm from './AnswerForm';\nimport { isEmptyObject } from '../utils';\n\nclass AnswerEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.answerId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getAnswerById(this.answerId);\n  }\n\n  notOwnerWillTransfer(currentAnswer) {\n    const owner = currentAnswer.user;\n    const loginUser = this.props.state.auth.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { currentAnswer } = this.props.state.answers;\n      const { content, translate_language_id, country_id } = formData;\n      const { history } = this.props;\n      const answer_id = this.answerId;\n      const { question_id } = currentAnswer;\n      /* const { translate_language_id } = currentQuestion;*/\n      const saveData = { content, answer_id, translate_language_id, country_id, history, question_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { currentAnswer } = this.props.state.answers;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        answer_id: this.answerId,\n        question_id: currentAnswer.question_id,\n        history\n      };\n      return this.props.deleteAnswer(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentAnswer } = this.props.state.answers;\n\n    if (isEmptyObject(currentAnswer)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentAnswer);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>回答の編集</h2>\n        <AnswerForm initialValues={currentAnswer} onSubmit={this.handleSubmit.bind(this)} />\n        <p><button className=\"uk-button uk-button-danger\" onClick={this.onClickDeleteBtn.bind(this)}>この回答を削除</button></p>\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default AnswerEdit;\n","import { connect } from 'react-redux';\nimport AnswerEdit from '../components/AnswerEdit';\nimport {\n  fetchAnswer,\n  saveAnswerData,\n  deleteAnswer,\n} from '../actions/Answer';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAnswerById: (id) => dispatch(fetchAnswer(id)),\n    handleSubmit: (postData) => dispatch(saveAnswerData(postData)),\n    deleteAnswer: (params) => dispatch(deleteAnswer(params)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerEdit);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport CommentForm from './CommentForm';\nimport { isEmptyObject } from '../utils';\n\nclass CommentEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.commentId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getCommentById(this.commentId);\n  }\n\n  notOwnerWillTransfer(currentComment) {\n    const owner = currentComment.user;\n    const loginUser = this.props.state.auth.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { currentComment } = this.props.state.comments;\n      const { content, translate_language_id } = formData;\n      const { history } = this.props;\n      const comment_id = this.commentId;\n      const { answer_id } = currentComment;\n      const { question_id } = currentComment.answer;\n      const saveData = { content, comment_id, translate_language_id, history, answer_id, question_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { currentComment } = this.props.state.comments;\n      const { question_id } = currentComment.answer;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        comment_id: this.commentId,\n        question_id,\n        history\n      };\n      return this.props.deleteComment(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentComment } = this.props.state.comments;\n\n    if (isEmptyObject(currentComment)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentComment);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>コメントの編集</h2>\n        <CommentForm initialValues={currentComment} onSubmit={this.handleSubmit.bind(this)} />\n        <p><button className=\"uk-button uk-button-danger\" onClick={this.onClickDeleteBtn.bind(this)}>このコメントを削除</button></p>\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default CommentEdit;\n","import { connect } from 'react-redux';\nimport CommentEdit from '../components/CommentEdit';\nimport {\n  fetchSingleComment,\n  saveCommentData,\n  deleteComment,\n} from '../actions/Comment';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCommentById: (id) => dispatch(fetchSingleComment(id)),\n    handleSubmit: (postData) => dispatch(saveCommentData(postData)),\n    deleteComment: (params) => dispatch(deleteComment(params)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentEdit);\n","import React, { Component } from 'react';\nimport { Formik, Field } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\nclass QuestionTranslatinoForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.translations.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.translations.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          content: '',\n          translate_language_id: ''\n        }}\n        validate={this.validate.bind(this)}\n        enableReinitialize={true}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: 'placeholders.translations.content'})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n              </div>\n              {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.translations.translate_language_id\"})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"buttons.title.post\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(QuestionTranslatinoForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_QUESTION_TRANSLATION_LIST = Symbol('FETCH_QUESTION_TRANSLATION_LIST');\nexport const FETCH_QUESTION_TRANSLATION = Symbol('FETCH_QUESTION_TRANSLATION');\nexport const POST_QUESTION_TRANSLATION_DATA = Symbol('POST_QUESTION_TRANSLATION_DATA');\nexport const INITIALIZE_FORM = Symbol('INITIALIZE_FORM');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATED_SINGLE_QUESTION_TRANSLATION = Symbol('UPDATED_SINGLE_QUESTION_TRANSLATION');\nexport const SAVE_QUESTION_TRANSLATION_DATA = Symbol('SAVE_QUESTION_TRANSLATION_DATA');\nexport const DELETE_QUESTION_TRANSLATION = Symbol('DELETE_QUESTION_TRANSLATION');\n\n\nexport const fetchQuestionTranslationList = createAction(FETCH_QUESTION_TRANSLATION_LIST);\nexport const fetchQuestionTranslation = createAction(FETCH_QUESTION_TRANSLATION);\nexport const postQuestionTranslationData = createAction(POST_QUESTION_TRANSLATION_DATA);\nexport const initializeForm = createAction(INITIALIZE_FORM);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updatedSingleQuestionTranslation = createAction(UPDATED_SINGLE_QUESTION_TRANSLATION);\nexport const saveQuestionTranslationData = createAction(SAVE_QUESTION_TRANSLATION_DATA);\nexport const deleteQuestionTranslation = createAction(DELETE_QUESTION_TRANSLATION);\n\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const POST_VOTE = Symbol('POST_VOTE');\nexport const DELETE_VOTE = Symbol('DELETE_VOTE');\nexport const HANDLE_VOTE = Symbol('HANDLE_VOTE');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\n\n//createAction(FETCH_QUESTION_LIST)はFETCH_QUESTION_LISTという名前でアクションを発火させる。\nexport const postVote = createAction(POST_VOTE);\nexport const deleteVote = createAction(HANDLE_VOTE);\nexport const handleVote = createAction(HANDLE_VOTE);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\n\n//componentの中でdispatchするための設定\nimport { connect } from 'react-redux';\nimport { postVote, deleteVote, handleVote } from '../actions/VoteTranslation';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass QuestionTranslationList extends Component {\n  constructor(props) {\n    super(props);\n    this.qId = this.props.qId;\n  }\n\n  componentWillMount() {\n    this.props.handleFetchData(this.qId);\n  }\n\n  getOnClickPostVote(voteParams, loginUserId) {\n    return () => {\n      if (loginUserId == null) {\n        return;\n      }\n      const ACTION_TYPE_VOTE = 6;\n      voteParams.action_type_id = ACTION_TYPE_VOTE; \n      return this.props.handleVote(voteParams);\n    };\n  }\n\n  getTranslationList(translationList, loginUser) {\n\n    return translationList.map(translation => {\n\n      const { vote_translations } = translation;\n      const myVoteList = vote_translations.filter(v => v.user_id === loginUser.id);  \n      const myVoteId = myVoteList.length !== 0 ? myVoteList[0].id : 0;\n\n      const voteState = (myVoteList.length === 0);\n      const voteParams = (voteState) \n                       ? {\n                          postActionType:\"post\",\n                          thisPageKey: \"question\",\n                          user_id: this.props.user.id,\n                          question_translation_id: translation.id,\n                          answer_translation_id:  null,\n                          comment_translation_id: null,\n                          vote_id: translation.id,\n                          status: 1,\n                          thisPageContentId: translation.question_id,\n                       } : {\n                          postActionType:\"delete\",\n                          thisPageKey: \"question\",\n                          user_id: this.props.user.id,\n                          deleteColumnKey : \"question\",\n                          vote_id: translation.id,\n                          voteIdForPoint: myVoteId,\n                          thisPageContentId: translation.question_id,\n                       };\n      const handleSubmit = this.getOnClickPostVote(voteParams, loginUser.id).bind(this);\n\n      return (\n        <li key={translation.id} >\n          <article className=\"uk-comment\">\n            <div className=\"uk-comment-header uk-comment-body\">\n              <p className=\"uk-margin-small-bottom\" style={{\"whiteSpace\": \"pre-wrap\"}} >\n                <Linkify properties={{ target: '_blank'}} >{translation.content}</Linkify>\n              </p>\n              <PostIcons \n                    user = { translation.user } \n                    loginUser = { loginUser  } \n                    votes = { translation.vote_translations }\n                    voteState = { voteState }\n                    editLink = {`/question_translations/edit/${translation.id}`}\n                    onClickHandleVote = { handleSubmit }\n                    translate = { false }\n                />\n              <p className=\"uk-text-meta\">{dayjs(translation.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n\n            </div>\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n              <div>\n                <PostUser user={ translation.user } />\n              </div>\n            </div>\n          </article>\n        </li>\n      );})\n\n  }\n\n  render() {\n    const { isFetching, currentTranslationList } = this.props.state.questionTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const translationList = this.getTranslationList(currentTranslationList, loginUser);\n\n    return (\n      <div>\n        <ul className=\"uk-list uk-list-divider uk-list-large\" >\n          {translationList}\n        </ul>\n      </div>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  return {\n    user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      handleVote: (data) => dispatch(handleVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(QuestionTranslationList));\n","import { connect } from 'react-redux';\nimport { fetchQuestionTranslationList } from '../actions/QuestionTranslation';\nimport QuestionTranslationList from '../components/QuestionTranslationList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (question_id) => dispatch(fetchQuestionTranslationList(question_id)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionTranslationList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport QuestionTranslationForm from '../components/QuestionTranslationForm';\nimport QuestionTranslationList from '../containers/QuestionTranslationList';\nimport {\n  fetchQuestion\n} from '../actions/Question';\nimport {\n  fetchAnswerList\n} from '../actions/Answer';\nimport {\n    postQuestionTranslationData\n} from '../actions/QuestionTranslation';\nimport { isEmptyObject } from '../utils';\nimport { injectIntl } from 'react-intl';\nimport PostUser from '../components/PostUser';\n\nclass QuestionTranslationView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.qId = parseInt(params.question_id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getQuestionById(this.qId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id } = formData;\n      if (content === '') {\n        throw new Error('空文字で投稿はできません。');\n      }\n      const { user } = this.props.state.auth;\n      const question_id = this.qId;\n      const user_id = user.id;\n      return this.props.handleSubmit({content, question_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { currentQuestion } = this.props.state.questions;\n    if (isEmptyObject(currentQuestion)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const { user } = currentQuestion;\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n          <p><Linkify properties={{ target: '_blank'}} >{currentQuestion.content}</Linkify></p>\n          <p className=\"uk-text-meta\">{dayjs(currentQuestion.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div>\n              <PostUser user={user} />\n            </div>\n          </div>\n        </div>\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.translation_list\"})}</span></h3>\n        <QuestionTranslationForm qId={this.qId} onSubmit={this.handleSubmit.bind(this)} />\n        <QuestionTranslationList qId={this.qId} />\n        <hr className=\"uk-divider-icon\" />\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestionById: (id) => dispatch(fetchQuestion(id)),\n    fetchAnswers: (question_id) => dispatch(fetchAnswerList(question_id)),\n    handleSubmit: (postData) => dispatch(postQuestionTranslationData(postData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(QuestionTranslationView));\n","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\n\nclass TranslationForm extends Component {\n\n  validate(values) {\n    let errors = {};\n    if (!values.content) {\n      errors.content = '翻訳文を入力してください';\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = '投稿言語を指定してください';\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues } = this.props;\n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        validate={this.validate}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder=\"翻訳文を入力してください\"\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n                {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              </div>\n              <div className=\"uk-margin uk-grid uk-grid-small uk-child-width-expand@s\" >\n                <div className=\"uk-grid-margin\" >\n                  <LanguageFormSelect name=\"translate_language_id\" placeholder=\"投稿言語\" />\n                  {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n                </div>\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >投稿</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default TranslationForm;\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationForm from './TranslationForm';\nimport { isEmptyObject } from '../utils';\n\nclass TranslationEdit extends Component {\n\n  notOwnerWillTransfer(currentTranslation, loginUser) {\n    const owner = currentTranslation.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  render() {\n    const { currentTranslation, handleSubmit, onClickDeleteBtn, loginUser } = this.props;\n\n    if (isEmptyObject(currentTranslation)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentTranslation, loginUser);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>翻訳の編集</h2>\n        <TranslationForm initialValues={currentTranslation} onSubmit={handleSubmit} />\n        <p><button className=\"uk-button uk-button-danger\" onClick={onClickDeleteBtn}>この翻訳を削除</button></p>\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default TranslationEdit;\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationEdit from './TranslationEdit';\n\nclass QuestionTranslationEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.qtId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getQuestionTranslationById(this.qtId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const id = this.qtId;\n      /* const { translate_language_id } = currentTranslation;*/\n      const saveData = { content, id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        id: this.qtId,\n        history\n      };\n      return this.props.deleteQuestionTranslation(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentTranslation } = this.props.state.questionTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    return (\n      <TranslationEdit\n        currentTranslation={currentTranslation}\n        handleSubmit={this.handleSubmit.bind(this)}\n        onClickDeleteBtn={this.onClickDeleteBtn.bind(this)}\n        loginUser={loginUser}\n      />\n    );\n  }\n}\n\nexport default QuestionTranslationEdit;\n","import { connect } from 'react-redux';\nimport QuestionTranslationEdit from '../components/QuestionTranslationEdit';\nimport {\n  fetchQuestionTranslation,\n  saveQuestionTranslationData,\n  deleteQuestionTranslation,\n} from '../actions/QuestionTranslation';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestionTranslationById: (id) => dispatch(fetchQuestionTranslation(id)),\n    handleSubmit: (postData) => dispatch(saveQuestionTranslationData(postData)),\n    deleteQuestionTranslation: (conditions) => dispatch(deleteQuestionTranslation(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionTranslationEdit);\n","import React, { Component } from 'react';\nimport { Formik, Field } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\nclass AnswerTranslatinoForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.translations.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.translations.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          content: '',\n          translate_language_id: ''\n        }}\n        validate={this.validate.bind(this)}\n        enableReinitialize={true}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.translations.content\"})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n              </div>\n              {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.translations.translate_language_id\"})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"buttons.title.post\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(AnswerTranslatinoForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_ANSWER_TRANSLATION_LIST = Symbol('FETCH_ANSWER_TRANSLATION_LIST');\nexport const FETCH_ANSWER_TRANSLATION = Symbol('FETCH_ANSWER_TRANSLATION');\nexport const POST_ANSWER_TRANSLATION_DATA = Symbol('POST_ANSWER_TRANSLATION_DATA');\nexport const SAVE_ANSWER_TRANSLATION_DATA = Symbol('SAVE_ANSWER_TRANSLATION_DATA');\nexport const DELETE_ANSWER_TRANSLATION = Symbol('DELETE_ANSWER_TRANSLATION');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATED_SINGLE_ANSWER_TRANSLATION = Symbol('UPDATED_SINGLE_ANSWER_TRANSLATION');\n\nexport const fetchAnswerTranslationList = createAction(FETCH_ANSWER_TRANSLATION_LIST);\nexport const fetchAnswerTranslation = createAction(FETCH_ANSWER_TRANSLATION);\nexport const postAnswerTranslationData = createAction(POST_ANSWER_TRANSLATION_DATA);\nexport const saveAnswerTranslationData = createAction(SAVE_ANSWER_TRANSLATION_DATA);\nexport const deleteAnswerTranslation = createAction(DELETE_ANSWER_TRANSLATION);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updatedSingleAnswerTranslation = createAction(UPDATED_SINGLE_ANSWER_TRANSLATION);\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\n\nimport { connect } from 'react-redux';\nimport { postVote, deleteVote, handleVote } from '../actions/VoteTranslation';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass AnswerTranslationList extends Component {\n  constructor(props) {\n    super(props);\n    this.aId = this.props.aId;\n  }\n\n  componentWillMount() {\n    this.props.handleFetchData(this.aId);\n  }\n\n  getOnClickPostVote(voteParams, loginUserId) {\n    return () => {\n      if (loginUserId == null) {\n        return;\n      }\n      const ACTION_TYPE_VOTE = 6;\n      voteParams.action_type_id = ACTION_TYPE_VOTE; \n      return this.props.handleVote(voteParams);\n    };\n  }\n\n  getTranslationList(translationList, loginUser) {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\" >\n        {translationList.map(translation => {\n\n          const votes = translation.vote_translations;\n          const myVoteList = votes.filter(v => v.user_id === loginUser.id);  \n          const myVoteId = myVoteList.length !== 0 ? myVoteList[0].id : 0;\n\n          const voteState = (myVoteList.length === 0);\n          const voteParams = (voteState) \n                           ?{\n                              postActionType:\"post\",\n                              thisPageKey: \"answer\",\n                              user_id: this.props.user.id,\n                              question_translation_id: null,\n                              answer_translation_id:  translation.id,\n                              comment_translation_id: null,\n                              vote_id: translation.id,\n                              status: 1,\n                              thisPageContentId: translation.answer_id\n                           }:{\n                              postActionType:\"delete\",\n                              thisPageKey: \"answer\",\n                              user_id: this.props.user.id,\n                              deleteColumnKey : \"answer\",\n                              vote_id: translation.id,\n                              voteIdForPoint: myVoteId,\n                              thisPageContentId: translation.answer_id\n                           };\n          const handleSubmit = this.getOnClickPostVote(voteParams, loginUser.id).bind(this);\n                  \n           return (\n             <li key={translation.id} >\n               <article className=\"uk-comment\">\n                 <div className=\"uk-comment-header uk-comment-body\">\n                   <p className=\"uk-margin-small-bottom\" style={{\"whiteSpace\": \"pre-wrap\"}} >\n                     <Linkify properties={{ target: '_blank'}} >{translation.content}</Linkify>\n                   </p>\n                   <PostIcons \n                        user = { translation.user } \n                        loginUser = { loginUser  } \n                        votes = { translation.vote_translations }\n                        voteState = { voteState }\n                        editLink = {`/answer_translations/edit/${translation.id}`}\n                        onClickHandleVote = { handleSubmit }\n                        translate = { false }\n                     />\n                   <p className=\"uk-text-meta\">{dayjs(translation.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n                 </div>\n                 <div>\n                   <PostUser user={ translation.user } />\n                 </div>\n               </article>\n             </li>\n           );\n        })}\n      </ul>\n    );\n\n  }\n\n  render() {\n    const { isFetching, currentTranslationList } = this.props.state.answerTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n    const content = this.getTranslationList(currentTranslationList, loginUser);\n    return (\n      <div>\n        {content}\n      </div>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  return {\n    user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      handleVote: (data) => dispatch(handleVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(AnswerTranslationList));\n","import { connect } from 'react-redux';\nimport { fetchAnswerTranslationList } from '../actions/AnswerTranslation';\nimport AnswerTranslationList from '../components/AnswerTranslationList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (answer_id) => dispatch(fetchAnswerTranslationList(answer_id)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerTranslationList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport AnswerTranslationForm from '../components/AnswerTranslationForm';\nimport AnswerTranslationList from '../containers/AnswerTranslationList';\nimport {\n  fetchAnswer,\n  fetchAnswerList\n} from '../actions/Answer';\nimport {\n  postAnswerTranslationData\n} from '../actions/AnswerTranslation';\nimport { isEmptyObject } from '../utils';\nimport { injectIntl } from 'react-intl';\nimport PostUser from '../components/PostUser';\n\nclass AnswerTranslationView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.aId = parseInt(params.answer_id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getAnswerById(this.aId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id } = formData;\n      if (content === '') {\n        const msg = '空文字で投稿はできません。';\n        throw new Error(msg);\n      }\n      const { user } = this.props.state.auth;\n      const answer_id = this.aId;\n      const user_id = user.id;\n      return this.props.handleSubmit({content, answer_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { currentAnswer } = this.props.state.answers;\n    if (isEmptyObject(currentAnswer)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const user = (currentAnswer.user) ? currentAnswer.user : null;\n    const userName = (user) ? user.name : '';\n    const { question_id } = currentAnswer;\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n          <p><Linkify properties={{ target: '_blank'}} >{currentAnswer.content}</Linkify></p>\n          <p className=\"uk-text-meta\">{dayjs(currentAnswer.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div>\n              <PostUser user={user} />\n            </div>\n          </div>\n\n        </div>\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.translation_list\"})}</span></h3>\n        <AnswerTranslationForm aId={this.aId} onSubmit={this.handleSubmit.bind(this)} />\n        <AnswerTranslationList aId={this.aId} />\n        <hr className=\"uk-divider-icon\" />\n        <p><Link to={`/questions/${question_id}`}>{formatMessage({id: \"links.to_question_view\"})}</Link></p>\n        <p><Link to=\"/\">Top</Link></p>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAnswerById: (id) => dispatch(fetchAnswer(id)),\n    fetchAnswers: (question_id) => dispatch(fetchAnswerList(question_id)),\n    handleSubmit: (postData) => dispatch(postAnswerTranslationData(postData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(AnswerTranslationView));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationEdit from './TranslationEdit';\n\nclass AnswerTranslationEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.atId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getAnswerTranslationById(this.atId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const id = this.atId;\n      /* const { translate_language_id } = currentTranslation;*/\n      const saveData = { content, id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        id: this.atId,\n        history\n      };\n      return this.props.deleteAnswerTranslation(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentTranslation } = this.props.state.answerTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    return (\n      <TranslationEdit\n        currentTranslation={currentTranslation}\n        handleSubmit={this.handleSubmit.bind(this)}\n        onClickDeleteBtn={this.onClickDeleteBtn.bind(this)}\n        loginUser={loginUser}\n      />\n    );\n  }\n}\n\nexport default AnswerTranslationEdit;\n","import { connect } from 'react-redux';\nimport AnswerTranslationEdit from '../components/AnswerTranslationEdit';\nimport {\n  fetchAnswerTranslation,\n  saveAnswerTranslationData,\n  deleteAnswerTranslation,\n} from '../actions/AnswerTranslation';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAnswerTranslationById: (id) => dispatch(fetchAnswerTranslation(id)),\n    handleSubmit: (postData) => dispatch(saveAnswerTranslationData(postData)),\n    deleteAnswerTranslation: (conditions) => dispatch(deleteAnswerTranslation(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerTranslationEdit);\n","import React, { Component } from 'react';\nimport { Formik, Field } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\nclass CommentTranslatinoForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.translations.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.translations.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          content: '',\n          translate_language_id: ''\n        }}\n        validate={this.validate.bind(this)}\n        enableReinitialize={true}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.translations.content\"})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n              </div>\n              {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.translations.translate_language_id\"})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"buttons.title.post\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(CommentTranslatinoForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_COMMENT_TRANSLATION_LIST = Symbol('FETCH_COMMENT_TRANSLATION_LIST');\nexport const FETCH_COMMENT_TRANSLATION = Symbol('FETCH_COMMENT_TRANSLATION');\nexport const POST_COMMENT_TRANSLATION_DATA = Symbol('POST_COMMENT_TRANSLATION_DATA');\nexport const SAVE_COMMENT_TRANSLATION_DATA = Symbol('SAVE_COMMENT_TRANSLATION_DATA');\nexport const DELETE_COMMENT_TRANSLATION = Symbol('DELETE_COMMENT_TRANSLATION');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATED_SINGLE_COMMENT_TRANSLATION = Symbol('UPDATED_SINGLE_COMMENT_TRANSLATION');\n\n\nexport const fetchCommentTranslationList = createAction(FETCH_COMMENT_TRANSLATION_LIST);\nexport const fetchCommentTranslation = createAction(FETCH_COMMENT_TRANSLATION);\nexport const postCommentTranslationData = createAction(POST_COMMENT_TRANSLATION_DATA);\nexport const saveCommentTranslationData = createAction(SAVE_COMMENT_TRANSLATION_DATA);\nexport const deleteCommentTranslation = createAction(DELETE_COMMENT_TRANSLATION);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updatedSingleCommentTranslation = createAction(UPDATED_SINGLE_COMMENT_TRANSLATION);\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\n\nimport { connect } from 'react-redux';\nimport { postVote, deleteVote, handleVote } from '../actions/VoteTranslation';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass CommentTranslationList extends Component {\n  constructor(props) {\n    super(props);\n    this.commentId = this.props.commentId;\n  }\n\n  componentWillMount() {\n    this.props.handleFetchData(this.commentId);\n  }\n\n  getOnClickPostVote(voteParams, loginUserId) {\n    return () => {\n      if (loginUserId == null) {\n        return;\n      }\n      const ACTION_TYPE_VOTE = 6;\n      voteParams.action_type_id = ACTION_TYPE_VOTE; \n      return this.props.handleVote(voteParams);\n    };\n  }\n\n  getTranslationList(translationList, loginUser) {\n\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\" >\n        {translationList.map(translation => {\n\n            const { vote_translations } = translation;\n            const myVoteList = vote_translations.filter(v => v.user_id === loginUser.id);  \n            const myVoteId = myVoteList.length !== 0 ? myVoteList[0].id : 0;\n\n            const voteState = (myVoteList.length === 0);\n            const voteParams = (voteState) \n                             ?{\n                              postActionType:\"post\",\n                              thisPageKey: \"comment\",\n                              user_id: this.props.user.id,\n                              question_translation_id: null,\n                              answer_translation_id: null,\n                              comment_translation_id: translation.id,\n                              vote_id: translation.id,\n                              status: 1,\n                              thisPageContentId: translation.comment_id\n                             }:{\n                              postActionType:\"delete\",\n                              thisPageKey: \"comment\",\n                              user_id: this.props.user.id,\n                              deleteColumnKey : \"comment\",\n                              vote_id: translation.id,\n                              voteIdForPoint: myVoteId,\n                              thisPageContentId: translation.comment_id,\n                             };\n           const handleSubmit = this.getOnClickPostVote(voteParams, this.props.user.id).bind(this);\n\n           return (\n             <li key={translation.id} >\n               <article className=\"uk-comment\">\n                 <div className=\"uk-comment-header uk-comment-body\">\n                   <p className=\"uk-margin-small-bottom\" style={{\"whiteSpace\": \"pre-wrap\"}} >\n                     <Linkify properties={{ target: '_blank'}} >{translation.content}</Linkify>\n                   </p>\n                   <PostIcons \n                        user = { translation.user } \n                        loginUser = { loginUser  } \n                        votes = { translation.vote_translations }\n                        voteState = { voteState }\n                        onClickHandleVote = { handleSubmit }\n                        editLink = {`/comment_translations/edit/${translation.id}`}\n                        translate = { false }\n                     />\n                   <p className=\"uk-text-meta\">{dayjs(translation.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n                 </div>\n                 <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n                   <div>\n                     <PostUser user={ translation.user } />\n                   </div>\n                 </div>\n               </article>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  render() {\n    const { isFetching, currentTranslationList } = this.props.state.commentTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const content = this.getTranslationList(currentTranslationList, loginUser);\n\n    return (\n      <div>\n        {content}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  return {\n    user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      // handlePostVote: (data) => dispatch(postVote(data)),\n      // handleDeleteVote: (data) => dispatch(deleteVote(data)),\n      handleVote: (data) => dispatch(handleVote(data)),     \n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(CommentTranslationList));\n","import { connect } from 'react-redux';\nimport { fetchCommentTranslationList } from '../actions/CommentTranslation';\nimport CommentTranslationList from '../components/CommentTranslationList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (answer_id) => dispatch(fetchCommentTranslationList(answer_id)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentTranslationList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport CommentTranslationForm from '../components/CommentTranslationForm';\nimport CommentTranslationList from '../containers/CommentTranslationList';\nimport {\n  fetchSingleComment,\n} from '../actions/Comment';\nimport {\n  postCommentTranslationData\n} from '../actions/CommentTranslation';\nimport { isEmptyObject } from '../utils';\nimport { injectIntl } from 'react-intl';\nimport PostUser from '../components/PostUser';\n\nclass CommentTranslationView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.commentId = parseInt(params.comment_id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getCommentById(this.commentId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id } = formData;\n      if (content === '') {\n        const msg = '空文字で投稿はできません。';\n        throw new Error(msg);\n      }\n      const { user } = this.props.state.auth;\n      const comment_id = this.commentId;\n      const user_id = user.id;\n      return this.props.handleSubmit({content, comment_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { currentComment } = this.props.state.comments;\n    const { currentQuestion } = this.props.state.questions;\n\n    if (isEmptyObject(currentComment)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const user = (currentComment.user) ? currentComment.user : null;\n    const userName = (user) ? user.name : '';\n    const toQuestionViewLink = !isEmptyObject(currentQuestion)\n                             ? (<p><Link to={`/questions/${currentQuestion.id}`}>{formatMessage({id: \"links.to_question_view\"})}</Link></p>)\n                             : '';                         \n\n    return (\n    <main className=\"uk-container uk-container-small\">\n      <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n        <p><Linkify properties={{ target: '_blank'}} >{currentComment.content}</Linkify></p>\n        <p className=\"uk-text-meta\">{dayjs(currentComment.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n        <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n          <div>\n            <PostUser user={user} />\n          </div>\n        </div>\n      </div>\n      <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.translation_list\"})}</span></h3>\n      <CommentTranslationForm commentId={this.commentId} onSubmit={this.handleSubmit.bind(this)} />\n      <CommentTranslationList commentId={this.commentId} />\n      <hr className=\"uk-divider-icon\" />\n      { toQuestionViewLink }\n      <p><Link to=\"/\">Top</Link></p>\n    </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCommentById: (id) => dispatch(fetchSingleComment(id)),\n    handleSubmit: (postData) => dispatch(postCommentTranslationData(postData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(CommentTranslationView));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationEdit from './TranslationEdit';\n\n\nclass CommentTranslationEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.ctId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    console.log('getCommentTranslationById');\n    this.props.getCommentTranslationById(this.ctId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const id = this.ctId;\n      /* const { translate_language_id } = currentTranslation;*/\n      const saveData = { content, id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        id: this.ctId,\n        history\n      };\n      return this.props.deleteCommentTranslation(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentTranslation } = this.props.state.commentTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    return (\n      <TranslationEdit\n        currentTranslation={currentTranslation}\n        handleSubmit={this.handleSubmit.bind(this)}\n        onClickDeleteBtn={this.onClickDeleteBtn.bind(this)}\n        loginUser={loginUser}\n      />\n    );\n  }\n}\n\nexport default CommentTranslationEdit;\n","import { connect } from 'react-redux';\nimport CommentTranslationEdit from '../components/CommentTranslationEdit';\nimport {\n  fetchCommentTranslation,\n  saveCommentTranslationData,\n  deleteCommentTranslation,\n} from '../actions/CommentTranslation';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCommentTranslationById: (id) => dispatch(fetchCommentTranslation(id)),\n    handleSubmit: (postData) => dispatch(saveCommentTranslationData(postData)),\n    deleteCommentTranslation: (conditions) => dispatch(deleteCommentTranslation(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentTranslationEdit);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Drawer from '@material-ui/core/Drawer';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = {\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: 'auto',\n  },\n};\n\nclass MenuDrawer extends React.Component {\n  state = {\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  };\n\n  toggleDrawer = (side, open) => () => {\n    this.setState({\n      [side]: open,\n    });\n  };\n\n  getLogoutLink(user) {\n    if (!user.id) {\n      return '';\n    }\n    const { history } = this.props;\n    const actionData = { history };\n    return (\n      <Link to=\"/\" onClick={this.props.logout.bind(this, actionData)}>Logout</Link>\n    );\n  }\n\n  render() {\n    const { classes, displayName } = this.props;\n\n    const menuDataList = [\n      {\n        text: 'プロフィール',\n        component: Link,\n        to: '/users/profile_edit',\n      },\n      {\n        text: 'ログアウト',\n        component: Link,\n        to: '/users/logout',\n      },\n    ];\n\n    const sideList = (\n      <div className={classes.list}>\n        <List>\n          {menuDataList.map((menuData, index) => (\n            <ListItem button component={menuData.component} to={menuData.to}  key={index} >\n              {/* <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon> */}\n              <ListItemText primary={menuData.text} />\n            </ListItem>\n          ))}\n        </List>\n      </div>\n    );\n\n    return (\n      <div className=\"uk-display-inline-block\" >\n        <Button onClick={this.toggleDrawer('right', true)}>{ displayName }</Button>\n        <Drawer anchor=\"right\" open={this.state.right} onClose={this.toggleDrawer('right', false)}>\n          <div\n            tabIndex={0}\n            role=\"button\"\n            onClick={this.toggleDrawer('right', false)}\n            onKeyDown={this.toggleDrawer('right', false)}\n          >\n            {sideList}\n          </div>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\nMenuDrawer.propTypes = {\n  classes: PropTypes.object.isRequired,\n  displayName: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(MenuDrawer);\n","import React from 'react';\n/* import MenuDrawer from '../../containers/layouts/MenuDrawer';*/\nimport MenuDrawer from './MenuDrawer';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      anchorEl: null\n    };\n  }\n\n  onClickLogout() {\n    const { user } = this.props.state.auth;\n    if (!user.id) {\n      return '';\n    }\n    const { history } = this.props;\n    const actionData = { history };\n    return this.props.logout(actionData);\n  }\n\n  getMenu(displayName) {\n    const { anchorEl } = this.state;\n    const { formatMessage } = this.props.intl;\n\n    const handleClick = event => {\n      this.setState({ anchorEl: event.currentTarget });\n    };\n\n    const handleClose = () => {\n      this.setState({ anchorEl: null });\n    };\n\n    const handleLogout = () => {\n      handleClose();\n      return this.onClickLogout();\n    };\n\n    const getProfileElem = (auth) => {\n      if (!auth.isLoggedIn) {\n        return '';\n      }\n      const { user } = auth;\n      const menuList = [\n        {\n          text: formatMessage({id: \"links.profile\"}),\n          to: `/users/profile/${user.id}`,\n          icon: \"user\"\n        },\n        {\n          text: formatMessage({id: \"links.profile_edit\"}),\n          to: '/users/profile_edit',\n          icon: \"pen\",\n        },\n        {\n          text: formatMessage({id: \"links.to_not_translated_list\"}),\n          to: `/not_translated`,\n          icon: \"file-alt\"\n        },\n      ];\n      return menuList.map((v, i) => (\n        <MenuItem key={i} onClick={handleClose}>\n          <Link to={v.to} >\n            <span><FontAwesomeIcon icon={v.icon} color=\"steelblue\" size=\"lg\"/></span>\n            <span className=\"uk-margin-small-left\">\n              {v.text}\n            </span>\n          </Link>\n        </MenuItem>\n      ));\n    };\n\n    const getLoginElem = (auth) => {\n      return (auth.isLoggedIn)\n           ? (\n             <MenuItem onClick={handleLogout.bind(this)}>\n               <Link to=\"\" >\n                 <span><FontAwesomeIcon icon=\"sign-out-alt\" color=\"steelblue\" size=\"lg\"/></span>\n                 <span className=\"uk-margin-small-left\">\n                   {formatMessage({id: \"links.logout\"})}\n                 </span>\n               </Link>\n             </MenuItem>\n           )\n           : (\n             <MenuItem onClick={handleClose}>\n               <Link to=\"/users/login\" >\n                 <span><FontAwesomeIcon icon=\"sign-in-alt\" color=\"steelblue\" size=\"lg\"/></span>\n                 <span className=\"uk-margin-small-left\">\n                   {formatMessage({id: \"links.login\"})}\n                 </span>\n               </Link>\n             </MenuItem>\n           );\n    };\n\n    const { auth } = this.props.state;\n    const profileElem = getProfileElem(auth);\n    const loginElem = getLoginElem(auth);\n\n    return (\n      <div className=\"uk-display-inline-block uk-height-1-1\" >\n        <Button\n          aria-owns={anchorEl ? 'simple-menu' : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleClick}\n          className=\"uk-height-1-1\"\n          style={{\"textTransform\": \"none\"}}\n        >\n          {displayName}\n        </Button>\n        <Menu\n          id=\"simple-menu\"\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={handleClose}\n        >\n          {profileElem}\n          {loginElem}\n          <MenuItem onClick={handleClose}>\n            <Link to=\"/users/signup\" >\n              <span><FontAwesomeIcon icon=\"user-plus\" color=\"steelblue\" size=\"lg\"/></span>\n              <span className=\"uk-margin-small-left\">\n                {formatMessage({id: \"links.sign_up\"})}\n              </span>\n            </Link>\n          </MenuItem>\n          <MenuItem onClick={handleClose}>\n            <Link to=\"/contact\" >\n              <span><FontAwesomeIcon icon=\"envelope\" color=\"steelblue\" size=\"lg\"/></span>\n              <span className=\"uk-margin-small-left\">\n                {formatMessage({id: \"links.contact\"})}\n              </span>\n            </Link>\n          </MenuItem>\n        </Menu>\n      </div>\n    );\n  }\n\n  render() {\n    const { user } = this.props.state.auth;\n    const imagePath = user.image_path ? user.image_path : '/image/profile/blank-profile.png';\n    const displayMenuElem = <img src={imagePath} className=\"uk-border-circle\" width=\"50\" height=\"50\" alt=\"\" />;\n    const menu = this.getMenu(displayMenuElem);\n\n    return (\n      <header className=\"uk-margin-bottom uk-heading-divider uk-grid uk-grid-small\" >\n        <div className=\"uk-width-expand uk-margin-small-left\" >\n          <a href=\"/\" className=\"uk-display-inline-block\" >\n            <img src={`/logo.png`} alt=\"Logo\" style={{ \"maxHeight\": \"60px\" }} />\n          </a>\n          <span className=\"uk-text-meta uk-margin-small-left uk-display-inline-block\">\n            α ver.\n          </span>\n        </div>\n        <div className=\"uk-margin-small-right\">\n          { menu }\n        </div>\n      </header>\n    );\n  }\n};\n\nexport default injectIntl(Header);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const CREATE_USER_ACCOUNT = Symbol('CREATE_USER_ACCOUNT');\nexport const CLICK_SUBMIT = Symbol('CLICK_SUBMIT');\nexport const SAVE_USER_MNEMONIC = Symbol('SAVE_USER_MNEMONIC');\nexport const LOGIN_USER = Symbol('LOGIN_USER');\nexport const LOGIN_USER_JWT = Symbol('LOGIN_USER_JWT');\nexport const LOGOUT_USER = Symbol('LOGOUT_USER');\nexport const UPDATE_USER_DATA = Symbol('UPDATE_USER_DATA');\nexport const SAVE_USER_DATA = Symbol('SAVE_USER_DATA');\nexport const SAVE_USER_PASSWORD = Symbol('SAVE_USER_PASSWORD');\nexport const UPDATED_USER_DATA = Symbol('UPDATED_USER_DATA');\nexport const REMOVE_USER_DATA = Symbol('REMOVE_USER_DATA');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const LOGIN_SUCCESS = Symbol('LOGIN_SUCCESS');\nexport const LOGIN_FAILED = Symbol('LOGIN_FAILED');\nexport const GET_USER_PROFILE = Symbol('GET_USER_PROFILE');\nexport const GET_USER_BY_TOKEN = Symbol('GET_USER_BY_TOKEN');\nexport const UPDATED_PROFILE_DATA = Symbol('UPDATED_PROFILE_DATA');\nexport const PREPARED_AUTH = Symbol('PREPARED_AUTH');\nexport const UPDATED_PROFILE_QUESTION_DATA = Symbol('UPDATED_PROFILE_QUESTION_DATA');\nexport const UPDATED_PROFILE_ANSWER_DATA = Symbol('UPDATED_PROFILE_ANSWER_DATA');\nexport const UPDATED_PROFILE_COMMENT_DATA = Symbol('UPDATED_PROFILE_COMMENT_DATA');\nexport const UPDATED_PROFILE_TRANSLATED_DATA = Symbol('UPDATED_PROFILE_TRANSLATED_DATA');\nexport const SEND_RESET_PASSWORD_MAIL = Symbol('SEND_RESET_PASSWORD_MAIL');\nexport const RESET_PASSWORD = Symbol('RESET_PASSWORD');\nexport const ACTIVATE_USER = Symbol('ACTIVATE_USER');\n\n\nexport const createUserAccount = createAction(CREATE_USER_ACCOUNT);\nexport const clickSubmit = createAction(CLICK_SUBMIT);\nexport const saveUserMnemonic = createAction(SAVE_USER_MNEMONIC);\nexport const loginUser = createAction(LOGIN_USER);\nexport const loginUserJwt = createAction(LOGIN_USER_JWT);\nexport const logoutUser = createAction(LOGOUT_USER);\nexport const saveUserData = createAction(SAVE_USER_DATA);\nexport const saveUserPassword = createAction(SAVE_USER_PASSWORD);\nexport const updateUserData = createAction(UPDATE_USER_DATA);\nexport const updatedUserData = createAction(UPDATED_USER_DATA);\nexport const removeUserData = createAction(REMOVE_USER_DATA);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const loginSuccess = createAction(LOGIN_SUCCESS);\nexport const loginFailed = createAction(LOGIN_FAILED);\nexport const getUserProfile = createAction(GET_USER_PROFILE);\nexport const getUserByToken = createAction(GET_USER_BY_TOKEN);\nexport const updatedProfileData = createAction(UPDATED_PROFILE_DATA);\nexport const preparedAuth = createAction(PREPARED_AUTH);\nexport const updatedProfileQuestionData = createAction(UPDATED_PROFILE_QUESTION_DATA);\nexport const updatedProfileAnswerData = createAction(UPDATED_PROFILE_ANSWER_DATA);\nexport const updatedProfileCommentData = createAction(UPDATED_PROFILE_COMMENT_DATA);\nexport const updatedProfileTranslatedData = createAction(UPDATED_PROFILE_TRANSLATED_DATA);\nexport const sendResetPasswordMail = createAction(SEND_RESET_PASSWORD_MAIL);\nexport const resetPassword = createAction(RESET_PASSWORD);\nexport const activateUser = createAction(ACTIVATE_USER);\n","import { connect } from 'react-redux';\nimport Header from '../../components/layouts/Header';\nimport { logoutUser } from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        logout: (data) => dispatch(logoutUser(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React, { Component, PropTypes } from 'react';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\nimport NotificationsSystem from 'reapop';\nimport theme from 'reapop-theme-wybo';\nimport Header from '../containers/layouts/Header';\nimport { ClipLoader } from 'react-spinners';\nimport ReactGA from 'react-ga';\n\nclass App extends Component {\n  componentWillMount() {\n    this.props.fetchLoginState();\n  }\n\n  componentDidMount() {\n    // const { pathname } = this.props.location;\n    /* console.log(\"appjs-------------\",this.props);*/\n    // ReactGA.set({ page: pathname });\n    // ReactGA.pageview(pathname);\n  }\n\n  handleLogout() {\n    //this.props.dispatch(clickLogout());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { auth } = this.props.state;\n\n    return auth.isPrepared ? (\n      <BrowserRouter >\n        <div className=\"uk-margin-bottom\" >\n          <Header />\n          {children}\n          <NotificationsSystem theme={theme} />\n        </div>\n      </BrowserRouter>\n    ) : (\n      <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n        <ClipLoader />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from '../components/App';\nimport { loginUserJwt } from '../actions/User.js';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchLoginState: () => dispatch(loginUserJwt())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nclass ScrollToTop extends Component {\n  componentDidUpdate(prevProps) {\n    if (this.props.location !== prevProps.location) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n\nexport default withRouter(ScrollToTop);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\nimport CountryFormSelect from '../CountryFormSelect';\n\nclass SignUpForm extends React.Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.name) {\n      errors.name = formatMessage({id: \"errors.sign_ups.name\"});\n    }\n\n    if (!values.mail) {\n      errors.mail = formatMessage({id: \"errors.sign_ups.mail\"});\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.mail)) {\n      errors.mail = formatMessage({id: \"errors.sign_ups.appropriate_mail\"});\n    }\n\n    if (!values.country_id) {\n      errors.country_id = formatMessage({id: \"errors.sign_ups.country\"});\n    }\n\n    if (!values.password) {\n      errors.password = formatMessage({id: \"errors.sign_ups.password\"});\n    }\n\n    if (values.passwordConfirm !== values.password) {\n      errors.passwordConfirm = formatMessage({id: \"errors.sign_ups.confirm_password\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          mail: '',\n          country_id: '',\n          password: '',\n          passwordConfirm: ''\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'name'}\n                     name=\"name\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.name\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.name && errors.name && <div className=\"uk-text-warning\">{errors.name}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'mail'}\n                     name=\"mail\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.mail\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.mail && errors.mail && <div className=\"uk-text-warning\">{errors.mail}</div>}\n              </div>\n\n              <div className=\"uk-margin\" >\n                <CountryFormSelect \n                  id={'counrty_id'}\n                  name=\"country_id\" \n                  placeholder={formatMessage({id: \"placeholders.sign_ups.country\"})} />\n                {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{ formatMessage({id: \"errors.sign_ups.country\"}) }</div>}\n              </div>\n\n              <div className=\"uk-margin\">\n                <Field\n                  id={'password'}\n                     name=\"password\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.password && errors.password && <div className=\"uk-text-warning\">{errors.password}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'passwordConfirm'}\n                     name=\"passwordConfirm\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.confirm_password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.passwordConfirm && errors.passwordConfirm && <div className=\"uk-text-warning\">{errors.passwordConfirm}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.sign_up\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(SignUpForm));\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport SignUpForm from './SignUpForm';\nimport { injectIntl } from 'react-intl';\n\nclass SignUp extends React.Component {\n\n  onClickSubmit(formData) {\n    const { name, mail, country_id, password } = formData;\n    const { history } = this.props;\n    this.props.clickSubmit({ name, mail, country_id, password, history });\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{ formatMessage({id: \"titles.sign_up\"}) }</h2>\n\n        <SignUpForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(SignUp);\n","import { connect } from 'react-redux';\nimport SignUp from '../../components/users/SignUp';\nimport {\n    createUserAccount,\n    saveUserMnemonic\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        clickSubmit: (data) => dispatch(createUserAccount(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass LoginForm extends React.Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.mail) {\n      errors.mail = formatMessage({id: \"errors.login.mail\"});\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.mail)) {\n      errors.mail = formatMessage({id: \"errors.login.appropriate_mail\"});\n    }\n\n    if (!values.password) {\n      errors.password = formatMessage({id: \"errors.login.password\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          mail: '',\n          password: ''\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'mail'}\n                     name=\"mail\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.login.mail\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.mail && errors.mail && <div className=\"uk-text-warning\">{errors.mail}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'password'}\n                     name=\"password\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.login.password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.password && errors.password && <div className=\"uk-text-warning\">{errors.password}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.login\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(LoginForm));\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n/* import { ClipLoader } from 'react-spinners';*/\nimport LoginForm from './LoginForm';\nimport { injectIntl } from 'react-intl';\n\n\nclass Login extends React.Component {\n\n  onClickSubmit(formData) {\n    const { mail, password } = formData;\n    const { history } = this.props;\n    return this.props.handleSubmit({ mail, password, history });\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.login\"})}</h2>\n\n        <LoginForm onSubmit={this.onClickSubmit.bind(this)} />\n        <p><Link to=\"/users/password_reset\" >{formatMessage({id: \"links.password_reset\"})}</Link></p>\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(Login);\n","import { connect } from 'react-redux';\nimport Login from '../../components/users/Login';\nimport {\n    loginUser\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleSubmit: (data) => dispatch(loginUser(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass PasswordResetForm extends Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.mail) {\n      errors.mail = formatMessage({id: \"errors.login.mail\"});\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.mail)) {\n      errors.mail = formatMessage({id: \"errors.login.appropriate_mail\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          mail: '',\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'mail'}\n                     name=\"mail\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.login.mail\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.mail && errors.mail && <div className=\"uk-text-warning\">{errors.mail}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.send\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(PasswordResetForm));\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n/* import { ClipLoader } from 'react-spinners';*/\nimport PasswordResetForm from './PasswordResetForm';\nimport { injectIntl } from 'react-intl';\n\nclass PasswordReset extends Component {\n\n  onClickSubmit(formData) {\n    const { mail } = formData;\n    return this.props.handleSubmit({ mail });\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.password_reset\"})}</h2>\n        <p>{formatMessage({id: \"messages.enter_mail\"})}</p>\n        <PasswordResetForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(PasswordReset);\n","import { connect } from 'react-redux';\nimport PasswordReset from '../../components/users/PasswordReset';\nimport {\n  sendResetPasswordMail\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleSubmit: (data) => dispatch(sendResetPasswordMail(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordReset);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass PasswordForm extends Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.password) {\n      errors.password = formatMessage({id: \"errors.sign_ups.password\"});\n    }\n\n    if (values.passwordConfirm !== values.password) {\n      errors.passwordConfirm = formatMessage({id: \"errors.sign_ups.confirm_password\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          password: '',\n          passwordConfirm: ''\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'password'}\n                     name=\"password\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.password && errors.password && <div className=\"uk-text-warning\">{errors.password}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'passwordConfirm'}\n                     name=\"passwordConfirm\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.confirm_password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.passwordConfirm && errors.passwordConfirm && <div className=\"uk-text-warning\">{errors.passwordConfirm}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.send\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(PasswordForm));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\n/* import { ClipLoader } from 'react-spinners';*/\nimport PasswordForm from './PasswordForm';\nimport { injectIntl } from 'react-intl';\nimport { isEmptyObject } from '../../utils';\n\nclass NewPassword extends Component {\n\n  componentDidMount() {\n    const { params } = this.props.match;\n    const { token } = params;\n    this.token = token;\n    return this.props.fetchUser(token);\n  }\n\n  onClickSubmit(formData) {\n    const { password } = formData;\n    const { id } = this.props.state.auth.user;\n    const { history } = this.props;\n    const token = this.token;\n    return this.props.handleSubmit({ id, password, token, history });\n  }\n\n  render() {\n    const { user, isFetching } = this.props.state.auth;\n\n    if (isFetching) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    if (isEmptyObject(user)) {\n      return (\n        <main className=\"uk-container uk-container-small\">\n          <p>不正なアクセスです</p>\n        </main>\n      );\n    }\n\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.password_reset\"})}</h2>\n        <p>{formatMessage({id: \"messages.enter_new_password\"})}</p>\n        <PasswordForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(NewPassword);\n","import { connect } from 'react-redux';\nimport NewPassword from '../../components/users/NewPassword';\nimport {\n  saveUserPassword,\n  getUserByToken,\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchUser: (token) => dispatch(getUserByToken(token)),\n    handleSubmit: (data) => dispatch(saveUserPassword(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewPassword);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\nimport { isEmptyObject } from '../../utils';\n\nclass Activate extends Component {\n\n  componentDidMount() {\n    const { params } = this.props.match;\n    const { history } = this.props;\n    const { token } = params;\n    this.token = token;\n    return this.props.activateUser({ token, history });\n  }\n\n  render() {\n    const { user, isFetching } = this.props.state.auth;\n\n    if (isFetching) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    if (isEmptyObject(user)) {\n      return (\n        <main className=\"uk-container uk-container-small\">\n          <p>不正なアクセスです</p>\n        </main>\n      );\n    }\n\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.activate\"})}</h2>\n        <p>{formatMessage({id: \"messages.activate_completed\"})}</p>\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(Activate);\n","import { connect } from 'react-redux';\nimport Activate from '../../components/users/Activate';\nimport {\n  activateUser,\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    activateUser: (token) => dispatch(activateUser(token)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Activate);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Stampcard extends Component {\n  render() {\n    const { voteArray, stampCardRowNum } = this.props\n    const tableContents = [];\n    const columnNum = 5;\n    for (let i = 0; i < stampCardRowNum; i++) {\n        const voteList = voteArray.slice(i * columnNum, (i + 1) * columnNum);\n        const contents = voteList.map((e, key) => {\n            if (e.length === 0) {\n                return (\n                    <td key={`vote_translate_empty_td${key}`}　className=\"uk-text-center\"></td>\n                );  \n            }\n            return (\n                <td key={`vote_translate_td${e.id}`}className=\"uk-text-center\">\n                    <Link to={e.user.profile_link}>\n                    <img className=\"uk-comment-avatar uk-border-circle uk-margin-rigth-small\" src={e.user.image_path} width=\"35\" height=\"35\" alt=\"\"/>\n                    </Link>\n                </td>\n            );\n        });\n        const rappedContents = <tr key={`vote_translate_tr_${i}`}>{ contents }</tr>\n        tableContents.push(rappedContents);\n    }\n\n    return (\n        <table className=\"uk-table stamp-card uk-card uk-card-default uk-card-small uk-card-body uk-margin-top\">\n            <tbody>\n                {tableContents}\n            </tbody>\n        </table>\n    );\n\n   };\n};\n      \nexport default Stampcard;","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { connect } from 'react-redux';\nimport { getUserProfile } from '../../actions/User';\nimport QuestionListView from '../../components/QuestionListView';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { isEmptyObject } from '../../utils';\nimport { injectIntl } from 'react-intl';\nimport Stampcard from '../../components/Stampcard';\n\nclass Profile extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.state = {currentTab: 'questions'};\n    this.userId = parseInt(params.id, 10);\n    this.props.fetchUserProfile(this.userId);\n  }\n\n  onClickTab(newTabKey, e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.setState({\n      currentTab: newTabKey\n    });\n  }\n\n  getVoteList(voteLists) {\n\n    const stampCardRowNum = Math.ceil(voteLists.length / 5);\n    const stampCardNum =  Math.ceil(voteLists.length / 10);\n    const emptyTdNum = stampCardNum * 10 - voteLists.length;\n\n    for (let i = 0; i < emptyTdNum; i++) {\n      voteLists.push(\"\");\n    }\n    const tableContents = [];\n    for (let i = 0; i < stampCardNum; i++) {\n      const stampcard = (\n        <Stampcard\n          key={`stampcard_${i}`}\n          voteArray={ voteLists.slice((i*5)*2, (i*5)*2+10) }\n          stampCardRowNum ={ stampCardRowNum }\n        />\n      );\n      tableContents.unshift(stampcard);\n    }\n\n    // いいね数が０の場合\n    if (voteLists.length === 0) {\n      let contents=[]\n      for (let i = 0; i < 5; i++) {\n        contents.push(<td className=\"uk-text-center\"></td>);\n      }\n      tableContents.push(<table className=\"uk-table stamp-card uk-card uk-card-default uk-card-small uk-card-body uk-margin-top\" style={{\"width\": \"90%\"}}>\n                        <tbody className=\"uk-table stamp-card uk-card uk-card-default uk-card-small uk-card-body uk-margin-top\">\n                          <tr>\n                            {contents}\n                          </tr>\n                          <tr>\n                            {contents}\n                          </tr>\n                        </tbody>\n                      </table>)\n    }\n\n    return tableContents;\n  };\n\n  getTabList() {\n    const { formatMessage } = this.props.intl;\n    const tabData = [\n      {\n        name: formatMessage({id: \"links.question\"}),\n        key: 'questions'\n      },\n      {\n        name: formatMessage({id: \"links.answer\"}),\n        key: 'answers'\n      },\n      {\n        name: formatMessage({id: \"links.comment\"}),\n        key: 'comments'\n      },\n      {\n        name: formatMessage({id: \"links.translate\"}),\n        key: 'translates'\n      }\n    ];\n\n    return (\n      <ul className=\"uk-tab\" >\n        {tabData.map(v => {\n           const active = this.state['currentTab'] === v.key\n                        ? 'uk-active'\n                        : '';\n           return (\n             <li className={active} onClick={this.onClickTab.bind(this, v.key)} key={v.key} >\n               <a href=\"\">{v.name}</a>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  getAnswerList(answers) {\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\">\n      {answers.map(answer => {\n        const { user } = answer;\n        const userName = user ? user.name : '不明なユーザー';\n        return (\n          <li key={answer.id} >\n            <p className=\"uk-text-lead uk-text-truncate\" ><Link to={`/questions/${answer.question_id}`}>{`${answer.content}`}</Link></p>\n            <p className=\"uk-text-meta\">{dayjs(answer.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n              <div className=\"uk-width-auto\">\n                <img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" />\n              </div>\n              <div className=\"uk-width-expand\">\n                <h4 className=\"uk-comment-meta uk-margin-remove\">{ userName }</h4>\n              </div>\n            </div>\n          </li>\n        );\n      })}\n      </ul>\n    );\n  }\n\n  getCommentList(comments) {\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\">\n        {comments.map(comment => {\n           const { user, answer } = comment;\n           const userName = user ? user.name : '不明なユーザー';\n           return (\n             <li key={comment.id} >\n               <p className=\"uk-text-lead uk-text-truncate\" ><Link to={`/questions/${answer.question_id}`}>{`${comment.content}`}</Link></p>\n               <p className=\"uk-text-meta\">{dayjs(comment.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n               <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n                 <div className=\"uk-width-auto\">\n                   <img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" />\n                 </div>\n                 <div className=\"uk-width-expand\">\n                   <h4 className=\"uk-comment-meta uk-margin-remove\">{ userName }</h4>\n                 </div>\n               </div>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  getTranslatedList(translates) {\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\">\n        {translates.map(translate => {\n           const link = translate.translation_link;\n           return (\n             <li key={`translate_${translate.key}`} >\n               <p className=\"uk-text-lead uk-text-truncate\" ><Link to={link}>{`${translate.content}`}</Link></p>\n               <p className=\"uk-text-meta\">{dayjs(translate.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  filterTranslatedContent(translate) {\n    const translatedContentArray = [];\n    for (const [key, value] of Object.entries(translate)){\n      value.forEach((e)=>{\n        e[\"key\"]=key+e.id;\n        translatedContentArray.push(e);\n      });\n  　};\n    return translatedContentArray;\n  }\n\n  getCurrentTabContents(tabState, currentTab) {\n    const { questions, answers, comments, translates } = tabState;\n    const { id } = this.props.state.auth.user\n    if (currentTab === 'questions') {\n      return (<QuestionListView questionArray={questions} translateLanguageId={id} />);\n    } else if (currentTab === 'answers') {\n      return this.getAnswerList(answers);\n    } else if (currentTab === 'comments') {\n      return this.getCommentList(comments);\n    } else if (currentTab === 'translates') {\n      const translateArray = this.filterTranslatedContent(translates);\n      return this.getTranslatedList(translateArray);\n    }\n  }\n\n  render() {\n    const { profile } = this.props.state;\n    const { user } = profile;\n    const { formatMessage } = this.props.intl;\n    const { vote_translations } = user;\n    console.log(\"thisprops\",this.props.state);\n\n    if (isEmptyObject(user)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const tabList = this.getTabList();\n    const userPostList = this.getCurrentTabContents(profile, this.state.currentTab);\n    const voteTables = this.getVoteList(vote_translations);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-grid uk-grid-small\">\n          <div className=\"uk-width-expand\">\n            <div className=\"uk-width-auto uk-flex-first\">\n              <img src={user.image_path} className=\"uk-border-circle\" alt=\"\" width=\"120\" height=\"\" />\n            </div>\n            <div className=\"uk-width-auto\" >\n              <p className=\"uk-text-lead\">{user.name}</p>\n              <p>{formatMessage({id: \"messages.birthplace\"})}: {user.country.name}</p>\n            </div>\n            <div>\n              <p style={{\"whiteSpace\": \"pre-wrap\"}}>{user.profile}</p>\n            </div>\n            <div>\n              <p style={{\"whiteSpace\": \"pre-wrap\"}}>ポイント:{user.points.length}</p>\n            </div>\n          </div>\n          <div className=\"uk-width-2-5@s\">\n            <p>{formatMessage({id: \"titles.profile.votes\"})}</p>\n            {voteTables}\n          </div>\n        </div>\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.post_list\"})}</span></h3>\n        {tabList}\n        {userPostList}\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchUserProfile: (userId) => dispatch(getUserProfile(userId)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(Profile));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from '../LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\nimport CountryFormSelect from '../CountryFormSelect';\n\nclass ProfileForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      image_url: ''\n    };\n  }\n\n  handleImageChange(setFieldValue, e) {\n    const file = e.currentTarget.files[0];\n    setFieldValue(\"image\", file);\n    const createObjectURL = (window.URL || window.webkitURL).createObjectURL || window.createObjectURL;\n    const image_url = createObjectURL(file);\n    this.setState({ image_url });\n  }\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.country_id) {\n      errors.country_id = formatMessage({id: \"errors.profile_edit.country\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { user } = this.props.state.auth;\n    const { formatMessage } = this.props.intl;\n    const { id, name, profile, country_id } = user;\n    const imagePreview = this.state.image_url !== ''\n                       ? (<p><img src={this.state.image_url} alt=\"\" width=\"200\" /></p>)\n                       : '';\n\n\n    return (\n      <Formik\n      initialValues={{ id, name, profile, country_id, image: ''}}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} className=\"uk-form-stacked\" >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <label className=\"uk-form-label\">{formatMessage({id: \"titles.profile_edit.user_name\"})}</label>\n                <Field\n                  id={'name'}\n                     name=\"name\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholder.profile_edit.nickname\"})}\n                     className={'uk-form-control uk-input'}\n                />\n                {touched.name && errors.name && <div className=\"uk-text-warning\">{errors.name}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <label className=\"uk-form-label\">{formatMessage({id: \"titles.profile_edit.birthplace\"})}</label>\n\n                <CountryFormSelect\n                  id={'counrty_id'}\n                  name=\"country_id\"\n                  placeholder={formatMessage({id: \"placeholders.sign_ups.country\"})} />\n                {/* <LanguageFormSelect name=\"country_id\" placeholder=\"出身地\" /> */}\n\n                {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{errors.country_id}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <label className=\"uk-form-label\">{formatMessage({id: \"titles.profile_edit.profile\"})}</label>\n                <Field\n                  id={'profile'}\n                     name=\"profile\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholder.profile_edit.profile\"})}\n                     className={'uk-form-control uk-textarea'}\n                     rows=\"5\"\n                />\n                {touched.profile && errors.profile && <div className=\"uk-text-warning\">{errors.profile}</div>}\n              </div>\n              <div className=\"uk-margin js-upload\" uk-form-custom=\"true\" >\n                <label className=\"uk-form-label\">{formatMessage({id: \"titles.profile_edit.user_image\"})}</label>\n                <input id=\"file\" name=\"image\" type=\"file\" onChange={this.handleImageChange.bind(this, setFieldValue)} />\n\n                {touched.image && errors.image && <div>{errors.image}</div>}\n                <button className=\"uk-button uk-button-default\" type=\"button\" tabIndex=\"-1\">{formatMessage({id: \"buttons.profile_edit.select\"})}</button>\n                {imagePreview}\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-primary\" disabled={isSubmitting}>\n                {formatMessage({id: \"buttons.profile_edit.save\"})}\n                </button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    )\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(ProfileForm));\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ClipLoader } from 'react-spinners';\nimport ProfileForm from './ProfileForm';\nimport { injectIntl } from 'react-intl';\n\nclass Profile extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const { id, name, country_id, profile } = this.props.state.auth.user;\n    console.log('user', this.props.state.auth.user);\n\n    this.setState({\n      user_id: id,\n      name,\n      profile,\n      country_id\n    });\n  }\n\n  onClickSubmit(formData) {\n    const { id, name, profile, country_id, image } = formData;\n\n    const postData = {\n      user_id: id,\n      name,\n      profile,\n      country_id,\n      image\n    };\n    this.props.clickedSaveButton(postData);\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.profile.edit\"})}</h2>\n        \n        <ProfileForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(Profile);","import { connect } from 'react-redux';\nimport Profile from '../../components/users/Profile';\nimport {\n    loginUser,\n    saveUserData\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        clickedSaveButton: (postData) => dispatch(saveUserData(postData)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\n\nclass Contact extends Component {\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <p>{ formatMessage({id: \"messages.contact_info\"}) }</p>\n        <p>qonnect.2019@gmail.com</p>\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(Contact));\n","import React, { Component } from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport default class UserOnly extends Component {\n  static contextTypes = {\n    router: PropTypes.object.isRequired\n  }\n\n  componentWillMount() {\n    this.guestWillTransfer(this.props, this.context.router);\n  }\n\n  componentWillUpdate(nextProps) {\n    this.guestWillTransfer(nextProps, this.context.router);\n  }\n\n  guestWillTransfer(props, router) {\n    const { auth } = props.state;\n    const { history } = router;\n    if (!auth.isLoggedIn) {\n      return history.push('/users/login');\n    }\n    return true;\n  }\n\n  render() {\n    return (\n      <Route children={this.props.children} />\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport UserOnly from '../../components/auth/UserOnly';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserOnly);\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport default class GuestOnly extends Component {\n  static contextTypes = {\n    router: PropTypes.object.isRequired\n  }\n\n  componentWillMount() {\n    console.log('hoge');\n    this.userWillTransfer(this.props, this.context.router);\n  }\n\n  componentWillUpdate(nextProps) {\n    this.userWillTransfer(nextProps, this.context.router);\n  }\n\n  userWillTransfer(props, router) {\n    const { auth } = props.state;\n    const { history } = router;\n    if (auth.isLoggedIn) {\n      /* return <Redirect to={{ pathname: '/login', state: { from: this.props.location } }} />;*/\n      return history.replace('/');\n    }\n  }\n\n  render() {\n    return (\n      <Route children={this.props.children} />\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport GuestOnly from '../../components/auth/GuestOnly';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GuestOnly);\n","import ja_JP from './locales/ja_JP';\nimport en_US from './locales/en_US';\n\nexport const locales = {\n  ja: {\n    locale: 'ja',\n    messages: ja_JP,\n    translateLanguageId: 1,\n  },\n  en: {\n    locale: 'en',\n    messages: en_US,\n    translateLanguageId: 2,\n  }\n};\n\nexport const categories = {\n  all: {\n      category: 'all',\n      categoryId: 0,\n  },\n  comic_anime: {\n      category: 'comic_anime',\n      categoryId: 1,\n  },\n  culture: {\n      category: 'culture',\n      categoryId: 2,\n  },\n  tourism: {\n      category: 'tourism',\n      categoryId: 3,\n  },\n  music: {\n      category: 'music',\n      categoryId: 4,\n  },\n};\n\nexport const sorts = {\n  answerMany: {\n      sort: 'answerMany',\n      sortId: 1,\n  },\n  answerFew: {\n      sort: 'answerFew',\n      sortId: 2,\n  },\n  Asc: {\n      sort: 'Asc',\n      sortId: 3,\n  },\n  Des: {\n      sort: 'Des',\n      sortId: 4,\n  },\n};\n","const ja_JP = {\n  \"titles.sign_up\": '新規登録',\n  \"titles.login\": 'ログイン',\n  \"titles.activate\": '認証',\n  \"titles.password_reset\": 'パスワード再設定',\n  \"titles.question_list\": '質問一覧',\n  \"titles.answer_list\": '回答一覧',\n  \"titles.post_list\": '投稿一覧',\n  \"titles.translation_list\": '翻訳一覧',\n  \"titles.not_translated_list\": '未翻訳一覧',\n  \"titles.profile_edit.user_name\": 'ユーザー名',\n  \"titles.profile_edit.birthplace\": '出身地',\n  \"titles.profile_edit.profile\": 'プロフィール',\n  \"titles.profile_edit.user_image\": 'プロフィール画像',\n  \"titles.profile.edit\": 'プロフィール編集',\n  \"titles.profile.votes\": 'いいねした人一覧',\n  \"titles.question.edit\": '質問の編集',\n  \"titles.question.delete\": '質問の削除',\n  \"titles.question.return\": 'トップ',\n  \"messages.empty_answers\": 'まだ回答がありません。最初の投稿者になりましょう！',\n  \"messages.birthplace\": '出身地',\n  \"messages.you_are_not_target\": 'この質問は 「%s」 の方が回答対象者です。',\n  \"messages.enter_mail\": 'メールアドレスを入力してください',\n  \"messages.enter_new_password\": '新しいパスワードを入力してください',\n  \"messages.activate_completed\": '認証処理が完了しました。',\n  \"messages.contact_info\": 'お問い合わせは、お手数ですが以下のメールアドレスまでお願いいたします。',\n  \"links.to_not_translated_list\": '未翻訳の一覧を見る',\n  \"links.edit\": '編集',\n  \"links.question\": '質問',\n  \"links.answer\": '回答',\n  \"links.comment\": 'コメント',\n  \"links.translate\": '翻訳',\n  \"links.profile\": 'プロフィール',\n  \"links.profile_edit\": 'プロフィール編集',\n  \"links.sign_up\": '新規登録',\n  \"links.login\": 'ログイン',\n  \"links.logout\": 'ログアウト',\n  \"links.contact\": 'お問合せ',\n  \"links.password_reset\": 'パスワードを忘れた',\n  \"links.to_question_view\": '質問ページへ',\n  \"languages.japanese\": '日本語',\n  \"languages.english\": '英語',\n  \"countries.japan\": '日本',\n  \"countries.usa\": 'アメリカ合衆国',\n  \"countries.philippines\": 'フィリピン',\n  \"countries.england\": 'イギリス',\n  \"countries.newzealand\": 'ニュージーランド',\n  \"countries.korea\": '韓国',\n  \"countries.thailand\": 'タイ',\n  \"categories.all\": 'すべて',\n  \"categories.comic_anime\": '漫画・アニメ',\n  \"categories.culture\": '文化',\n  \"categories.tourism\": '観光',\n  \"categories.music\": '音楽',\n  \"errors.questions.content\": '質問文を入力してください',\n  \"errors.questions.country_id\": '回答対象国を指定してください',\n  \"errors.questions.translate_language_id\": '投稿言語を指定してください',\n  \"errors.questions.category_id\": 'カテゴリーを指定してください',\n  \"errors.answers.content\": '回答文を入力してください',\n  \"errors.answers.translate_language_id\": '投稿言語を指定してください',\n  \"errors.comments.content\": 'コメントを入力してください',\n  \"errors.comments.translate_language_id\": '投稿言語を指定してください',\n  \"errors.translations.content\": '翻訳を入力してください',\n  \"errors.translations.translate_language_id\": '投稿言語を指定してください',\n  \"errors.sign_ups.name\": 'ユーザー名を入力してください',\n  \"errors.sign_ups.mail\": 'メールアドレスを入力してください',\n  \"errors.sign_ups.country\": '出身地・所在地を選択してください',\n  \"errors.sign_ups.appropriate_mail\": '適切なメールアドレスを指定してください',\n  \"errors.sign_ups.password\": 'パスワードを入力してください',\n  \"errors.sign_ups.confirm_password\": 'パスワードが一致していません',\n  \"errors.login.mail\": 'メールアドレスを入力してください',\n  \"errors.login.appropriate_mail\": '適切なメールアドレスを指定してください',\n  \"errors.login.password\": 'パスワードを入力してください',\n  \"errors.profile_edit.country\": '出身地を選択してください',\n  \"placeholders.sign_ups.name\": '名前',\n  \"placeholders.sign_ups.mail\": 'メールアドレス',\n  \"placeholders.sign_ups.country\": '出身地・所在地',\n  \"placeholders.sign_ups.password\": 'パスワード',\n  \"placeholders.sign_ups.confirm_password\": 'パスワード確認',\n  \"placeholders.login.mail\": 'メールアドレス',\n  \"placeholders.login.password\": 'パスワード',\n  \"placeholders.questions.content\": '質問を入力してください',\n  \"placeholders.questions.country_id\": '回答対象国',\n  \"placeholders.questions.translate_language_id\": '投稿言語',\n  \"placeholders.questions.category_id\": 'カテゴリー',\n  \"placeholders.questions.submit_btn\": '投稿',\n  \"placeholders.answers.content\": '回答を入力してください',\n  \"placeholders.answers.translate_language_id\": '投稿言語',\n  \"placeholders.answers.submit_btn\": '投稿',\n  \"placeholders.comments.content\": 'コメントを入力してください',\n  \"placeholders.comments.translate_language_id\": '投稿言語',\n  \"placeholders.comments.submit_btn\": '投稿',\n  \"placeholders.translations.content\": '翻訳を入力してください',\n  \"placeholders.translations.translate_language_id\": '投稿言語',\n  \"placeholder.profile_edit.profile\": 'プロフィールを入力してください',\n  \"placeholder.profile_edit.country\": '出身地・所在地',\n  \"placeholder.profile_edit.nickname\": \"ユーザー名\",\n  \"buttons.title.reply\": '返信',\n  \"buttons.title.post\": '投稿',\n  \"buttons.title.sign_up\": '新規登録',\n  \"buttons.title.login\": 'ログイン',\n  \"buttons.title.send\": '送信',\n  \"buttons.profile_edit.select\": '選択',\n  \"buttons.profile_edit.save\": '保存',\n  \"translated.name\": '翻訳者',\n  \"translated.state\": '未翻訳',\n  \"sort.answerMany\":'回答の多い順',\n  \"sort.answerFew\":'回答の少ない順',\n  \"sort.Asc\":'投稿の新しい順',\n  \"sort.Des\":'投稿の古い順',\n};\nexport default ja_JP;\n","const en_US = {\n  \"titles.sign_up\": 'Sign Up',\n  \"titles.login\": 'Login',\n  \"titles.activate\": 'Activation',\n  \"titles.password_reset\": 'Password Reset',\n  \"titles.question_list\": 'Questions',\n  \"titles.answer_list\": 'Answers',\n  \"titles.post_list\": 'Posts',\n  \"titles.translation_list\": 'Translations',\n  \"titles.not_translated_list\": 'Not Translated List',\n  \"titles.profile_edit.user_name\": 'User Name',\n  \"titles.profile_edit.birthplace\": 'Birthplace・Location',\n  \"titles.profile_edit.profile\": 'Profile',\n  \"titles.profile_edit.user_image\": 'Profile Image',\n  \"titles.profile.edit\": 'Profile Edit',\n  \"titles.profile.votes\": 'Like list',\n  \"titles.question.edit\": 'Question Edit',\n  \"titles.question.delete\": 'Question Delete',\n  \"titles.question.return\": 'Top',\n  \"messages.empty_answers\": 'There is no answer yet. Be the first contributor!',\n  \"messages.birthplace\": 'BirthPlace',\n  \"messages.you_are_not_target\": 'This question is subject to answers in \"%s\".',\n  \"messages.enter_mail\": 'Enter your email address.',\n  \"messages.enter_new_password\": 'Enter new password.',\n  \"messages.activate_completed\": 'Activation is completed.',\n  \"messages.contact_info\": 'Please contact the following e-mail address.',\n  \"links.to_not_translated_list\": 'See not translated lists',\n  \"links.edit\": 'Edit',\n  \"links.question\": 'Question',\n  \"links.answer\": 'Answer',\n  \"links.comment\": 'Comment',\n  \"links.translate\": 'translate',\n  \"links.profile\": 'Profile',\n  \"links.profile_edit\": 'Profile Edit',\n  \"links.sign_up\": 'Sign Up',\n  \"links.login\": 'Login',\n  \"links.logout\": 'Logout',\n  \"links.contact\": 'Contact',\n  \"links.password_reset\": 'Forgot password',\n  \"links.to_question_view\": 'to question page',\n  \"languages.japanese\": 'Japanese',\n  \"languages.english\": 'English',\n  \"countries.japan\": 'Japan',\n  \"countries.usa\": 'USA',\n  \"countries.philippines\": 'Philippines',\n  \"countries.england\": 'England',\n  \"countries.newzealand\": 'Newzealand',\n  \"countries.korea\": 'Korea',\n  \"countries.thailand\": 'Thailand',\n  \"categories.all\": 'All',\n  \"categories.comic_anime\": 'Comic・Anime',\n  \"categories.culture\": 'Culture',\n  \"categories.tourism\": 'Tourism',\n  \"categories.music\": 'Music',\n  \"errors.questions.content\": 'Please write a question text.',\n  \"errors.questions.country_id\": 'Please select target country.',\n  \"errors.questions.translate_language_id\": 'Please select the language.',\n  \"errors.questions.category_id\": 'Please select the cateogry.',\n  \"errors.answers.content\": 'Please write an answer text.',\n  \"errors.answers.translate_language_id\": 'Please select the language.',\n  \"errors.comments.content\": 'Please write an comment text.',\n  \"errors.comments.translate_language_id\": 'Please select the language.',\n  \"errors.translations.content\": 'Please write a translated text.',\n  \"errors.translations.translate_language_id\": 'Please select the language.',\n  \"errors.sign_ups.name\": 'Please enter user name.',\n  \"errors.sign_ups.mail\": 'Please enter your e-mail address.',\n  \"errors.sign_ups.country\": 'Please enter your Birthplace・Location',\n  \"errors.sign_ups.appropriate_mail\": 'Please specify an appropriate email address.',\n  \"errors.sign_ups.password\": 'Please enter password.',\n  \"errors.sign_ups.confirm_password\": 'Password does not match.',\n  \"errors.login.mail\": 'Please enter your e-mail address.',\n  \"errors.login.appropriate_mail\": 'Please specify an appropriate email address.',\n  \"errors.login.password\": 'Please enter password.',\n  \"errors.profile_edit.country\": 'Please enter your Birthplace・Location',\n  \"placeholders.sign_ups.name\": 'Name',\n  \"placeholders.sign_ups.mail\": 'Mail',\n  \"placeholders.sign_ups.country\": 'Birthplace・Location',\n  \"placeholders.sign_ups.password\": 'Password',\n  \"placeholders.sign_ups.confirm_password\": 'Password Confirm',\n  \"placeholders.login.mail\": 'Mail',\n  \"placeholders.login.password\": 'Password',\n  \"placeholders.questions.content\": 'Write your question!!',\n  \"placeholders.questions.country_id\": 'Target User Country',\n  \"placeholders.questions.translate_language_id\": 'Language',\n  \"placeholders.questions.category_id\": 'Category',\n  \"placeholders.questions.submit_btn\": 'POST',\n  \"placeholders.answers.content\": 'Write your answer!!',\n  \"placeholders.answers.translate_language_id\": 'Language',\n  \"placeholders.answers.submit_btn\": 'POST',\n  \"placeholders.comments.content\": 'Write your comment!!',\n  \"placeholders.comments.translate_language_id\": 'Language',\n  \"placeholders.comments.submit_btn\": 'POST',\n  \"placeholders.translations.content\": 'Please write a translated text.',\n  \"placeholders.translations.translate_language_id\": 'Language',\n  \"placeholder.profile_edit.profile\": 'Please write your profile',\n  \"placeholder.profile_edit.country\": 'Birthplace・Location',\n  \"placeholder.profile_edit.nickname\": \"User name\",\n  \"buttons.title.reply\": 'Reply',\n  \"buttons.title.post\": 'Post',\n  \"buttons.title.sign_up\": 'Sign Up',\n  \"buttons.title.login\": 'Login',\n  \"buttons.title.send\": 'Send',\n  \"buttons.profile_edit.select\": 'Select',\n  \"buttons.profile_edit.save\": 'Save',\n  \"translated.name\": 'Translator',\n  \"translated.state\": 'Untranslated',\n  \"sort.answerMany\":'Order of many answers',\n  \"sort.answerFew\":'Order of few answers',\n  \"sort.Asc\":'New order of posts',\n  \"sort.Des\":'Oldest order of posts',\n};\nexport default en_US;\n","import { locales, categories, sorts } from './intl';\n\nconst savedLocale = localStorage.getItem('locale');\nconst currentLocale = savedLocale ? savedLocale : 'ja';\n\nexport const initialState = {\n  intl: locales[currentLocale],\n  ctgr: {\n    category: 'all',\n    categoryId: 0\n  },\n  sort: {\n    sort: 'Asc',\n    sortId: 3\n  },\n  signUp: {\n    mail: '',\n    password: '',\n    mnemonic: '',\n    hash: '',\n  },\n  profile: {\n    isFetching: false,\n    user: {},\n    questions: [],\n    answers: [],\n    comments: [],\n  },\n  auth: {\n    isPrepared: false,\n    isFetching: false,\n    isLoggedIn: false,\n    user: {},\n    jwt: ''\n  },\n  answers: {\n    isFetching: false,\n    answerArray: [],\n    currentAnswer: {}\n  },\n  answerTranslations: {\n    isFetching: false,\n    currentTranslationList: [],\n    currentTranslation: {},\n  },\n  questions: {\n    isFetching: false,\n    translateLanguageId: 1,\n    questionArray: [],\n    currentQuestion: {},\n  },\n  questionTranslations: {\n    isFetching: false,\n    currentTranslationList: [],\n    currentTranslation: {},\n  },\n  comments: {\n    isFetching: false,\n    currentCommentList: [],\n    currentComment: {}\n  },\n  commentTranslations: {\n    isFetching: false,\n    currentTranslationList: [],\n    currentTranslation: {},\n  },\n  not_translate: {\n    isFetching: false,\n    questions: [],\n    answers: [],\n    comments: [],\n  },\n  votes: {\n    isFetching: false,\n    status: [],\n  },\n  voteTranslations: {\n    isFetching: false,\n    status: [],\n  },\n};\n","import { combineReducers } from 'redux';\nimport { reducer as notificationsReducer } from 'reapop';\nimport * as questions from './reducers/Question';\nimport * as answers from './reducers/Answer';\nimport * as users from './reducers/User';\nimport * as comments from './reducers/Comment';\nimport * as questionTranslations from './reducers/QuestionTranslation';\nimport * as answerTranslations from './reducers/AnswerTranslation';\nimport * as commentTranslations from './reducers/CommentTranslation';\nimport * as notTranslated from './reducers/NotTranslated';\nimport * as votes from './reducers/Votes';\nimport * as voteTranslations from './reducers/VoteTranslation';\nimport { intl } from './reducers/Intl';\nimport { ctgr } from './reducers/Category';\nimport { sortRule } from './reducers/Sort';\nimport { addLocaleData } from 'react-intl';\n\nconst reducer = combineReducers({\n  intl: intl,\n  ctgr: ctgr,\n  sort: sortRule,\n  answers: answers.list,\n  questions: questions.list,\n  questionTranslations: questionTranslations.list,\n  answerTranslations: answerTranslations.list,\n  auth: users.auth,\n  signUp: users.signUp,\n  profile: users.profile,\n  comments: comments.list,\n  commentTranslations: commentTranslations.list,\n  not_translate: notTranslated.list,\n  votes: votes.list,\n  voteTranslations: voteTranslations.list,\n  notifications: notificationsReducer()\n});\n\nexport default reducer;\n","import {\n  UPDATE_CURRENT_LANGUAGE,\n} from '../actions/Intl';\nimport { initialState } from '../constants';\nimport { locales } from '../intl';\n\nexport const intl = (state = initialState.intl, action) => {\n  switch (action.type) {\n  case UPDATE_CURRENT_LANGUAGE:\n    const { locale, messages, translateLanguageId } = locales[action.payload];\n    localStorage.setItem('locale', locale);\n    return {\n      ...state,\n      locale,\n      messages,\n      translateLanguageId\n    };\n  default:\n    return state;\n  }\n};\n\n","import { UPDATE_CURRENT_CATEGORY } from '../actions/Category';\nimport { initialState } from '../constants';\nimport { categories } from '../intl';\n\nexport const ctgr = (state = initialState.ctgr, action) => {\n\n  switch (action.type) {\n  case UPDATE_CURRENT_CATEGORY:\n    const { category, categoryId } = categories[action.payload];\n    return {\n      ...state,\n      category,\n      categoryId\n    };\n  default:\n    return state;\n  }\n};\n","import { UPDATE_CURRENT_SORT } from '../actions/Sort';\nimport { initialState } from '../constants';\nimport { sorts } from '../intl';\n\nexport const sortRule = (state = initialState.ctgr, action) => {\n\n  switch (action.type) {\n  case UPDATE_CURRENT_SORT:\n    const { sort, sortId } = sorts[action.payload];\n    return {\n      ...state,\n      sort,\n      sortId\n    };\n  default:\n    return state;\n  }\n};\n","import {\n    CHANGE_ANSWER_FORM_CONTENT,\n    REQUEST_DATA,\n    RECEIVE_DATA_SUCCESS,\n    RECEIVE_SINGLE_DATA_SUCCESS,\n    RECEIVE_DATA_FAILED,\n    INITIALIZE_FORM,\n    POST_ANSWER_DATA\n} from '../actions/Answer';\nimport { initialState } from '../constants';\n\nexport const form = (state = initialState.answerForm, action) => {\n    switch (action.type) {\n    case CHANGE_ANSWER_FORM_CONTENT:\n        return {\n            ...state,\n            content: action.payload,\n        };\n    case POST_ANSWER_DATA:\n        return {\n            ...state\n        };\n    case REQUEST_DATA:\n        return {\n            ...state,\n            isFetching: true,\n        };\n    case RECEIVE_DATA_SUCCESS:\n        return {\n            ...state,\n            isFetching: false,\n        };\n    case RECEIVE_DATA_FAILED:\n        return {\n            ...state,\n            isFetching: false,\n        };\n    case INITIALIZE_FORM:\n        return {\n            ...state,\n            content: ''\n        };\n    default:\n        return state;\n    }\n};\n\nexport const list = (state = initialState.answers, action) => {\n    switch (action.type) {\n    case REQUEST_DATA:\n        return {\n            ...state,\n            isFetching: true,\n        };\n    case RECEIVE_DATA_SUCCESS:\n        return {\n            ...state,\n            isFetching: false,\n            answerArray: action.payload.data,         \n        };\n    case RECEIVE_SINGLE_DATA_SUCCESS:\n        return {\n            ...state,\n            isFetching: false,\n            currentAnswer: action.payload.data\n        };\n    case RECEIVE_DATA_FAILED:\n        return {\n            ...state,\n            isFetching: false,\n        };\n    case INITIALIZE_FORM:\n        return {\n            ...state,\n            content: ''\n        };\n    default:\n        return state;\n    }\n};\n","import {\n  POST_QUESTION_DATA,\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATE_CURRENT_TRANSLATE_LANGUAGE,\n  UPDATED_QUESTION_DATA\n} from '../actions/Question';\nimport { initialState } from '../constants';\n\nexport const form = (state = initialState.questionForm, action) => {\n  switch (action.type) {\n  case POST_QUESTION_DATA:\n    return {\n      ...state\n    };\n  default:\n    return state;\n  }\n};\n\nexport const list = (state = initialState.questions, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      questionArray: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentQuestion: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATE_CURRENT_TRANSLATE_LANGUAGE:\n    return {\n      ...state,\n      translateLanguageId: parseInt(action.payload)\n    };\n  case UPDATED_QUESTION_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      currentQuestion: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATED_SINGLE_QUESTION_TRANSLATION\n} from '../actions/QuestionTranslation';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.questionTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslationList: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslation: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_SINGLE_QUESTION_TRANSLATION:\n    return {\n      ...state,\n      currentTranslation: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  POST_ANSWER_TRANSLATION_DATA,\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATED_SINGLE_ANSWER_TRANSLATION\n} from '../actions/AnswerTranslation';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.answerTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslationList: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslation: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_SINGLE_ANSWER_TRANSLATION:\n    return {\n      ...state,\n      currentTranslation: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  CLICK_SUBMIT,\n  REQUEST_DATA,\n  RECEIVE_DATA_FAILED,\n  REMOVE_USER_DATA,\n  UPDATED_USER_DATA,\n  UPDATED_PROFILE_DATA,\n  UPDATED_PROFILE_QUESTION_DATA,\n  UPDATED_PROFILE_ANSWER_DATA,\n  UPDATED_PROFILE_COMMENT_DATA,\n  UPDATED_PROFILE_TRANSLATED_DATA,\n  LOGIN_SUCCESS,\n  LOGIN_FAILED,\n  PREPARED_AUTH\n} from '../actions/User';\nimport { initialState } from '../constants';\n\nexport const signUp = (state = initialState.signUp, action) => {\n  switch (action.type) {\n  case CLICK_SUBMIT:\n    return {\n      ...state,\n    };\n  default:\n    return state;\n  }\n};\n\nexport const auth = (state = initialState.auth, action) => {\n  switch (action.type) {\n  case LOGIN_SUCCESS:\n    return {\n      ...state,\n      isLoggedIn: true,\n      user: action.payload.data,\n      jwt: action.payload.data.jwt\n    };\n  case LOGIN_FAILED:\n    return {\n      ...state,\n      isLoggedIn: false,\n      user: {},\n      jwt: ''\n    };\n  case REMOVE_USER_DATA:\n    return {\n      ...state,\n      isLoggedIn: false,\n      user: {},\n      jwt: ''\n    };\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_USER_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      user: action.payload.data\n    };\n  case PREPARED_AUTH:\n    return {\n      ...state,\n      isPrepared: true\n    };\n  default:\n    return state;\n  }\n};\n\nexport const profile = (state = initialState.profile, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true\n    };\n  case UPDATED_PROFILE_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      user: action.payload.data\n    };\n  case UPDATED_PROFILE_QUESTION_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      questions: action.payload.data\n    };\n  case UPDATED_PROFILE_ANSWER_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      answers: action.payload.data\n    };\n  case UPDATED_PROFILE_COMMENT_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      comments: action.payload.data\n    };\n  case UPDATED_PROFILE_TRANSLATED_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      translates: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  REQUEST_DATA,\n  RECEIVE_COMMENT_DATA_SUCCESS,\n  POST_COMMENT,\n  UPDATED_COMMENT_DATA,\n  UPDATED_SINGLE_COMMENT_DATA,\n  UPDATED_COMMENT_ARRAY\n} from '../actions/Comment';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.comments, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true\n    };\n  case RECEIVE_COMMENT_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentCommentList: action.payload.data\n    };\n  case UPDATED_COMMENT_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      currentCommentList: action.payload.data\n    };\n  case UPDATED_SINGLE_COMMENT_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      currentComment: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATED_SINGLE_COMMENT_TRANSLATION,\n} from '../actions/CommentTranslation';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.commentTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslationList: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslation: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_SINGLE_COMMENT_TRANSLATION:\n    return {\n      ...state,\n      currentTranslation: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n    REQUEST_DATA,\n    RECEIVE_DATA_SUCCESS,\n} from '../actions/NotTranslated';\n  \nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.not_translate, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      //...stateは他の状態は維持してisFetchingだけを変更する。\n      ...state,\n      isFetching: true,\n    };\n  \n  case RECEIVE_DATA_SUCCESS:\n\n    const { questions, answers, comments } = action.payload;\n\n    return {\n      ...state,\n      //isFetchingは終了したのでfalseにしている。\n      isFetching: false,\n      //ここでquestionArrayに値を入れている。\n      questions,\n      answers,\n      comments,\n    };\n  \n  default:\n    return state;\n  }\n};","import {\n    POST_VOTE,\n    REQUEST_DATA,\n    RECEIVE_DATA_SUCCESS,\n    RECEIVE_DATA_FAILED,\n  } from '../actions/VoteTranslation.js';\n\n  import { initialState } from '../constants';\n    \n  export const list = (state = initialState.votes, action) => {\n    switch (action.type) {\n    case POST_VOTE:\n      return {\n        ...state\n      }; \n    case REQUEST_DATA:\n      return {\n        ...state,\n        isFetching: true,\n      };\n    case RECEIVE_DATA_SUCCESS:\n      return {\n        ...state,\n        isFetching: false,\n        questionArray: action.payload.data                  \n      };\n    case RECEIVE_DATA_FAILED:\n      return {\n        ...state,\n        isFetching: false\n      };\n    default:\n      return state;\n    }\n  };\n  ","import {\n  POST_VOTE,\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n} from '../actions/VoteTranslation';\n\nimport { initialState } from '../constants';\n\nexport const form = (state = initialState.voteTranslations, action) => {\n  switch (action.type) {\n  case POST_VOTE:\n    return {\n      ...state\n    };\n  default:\n    return state;\n  }\n};\n\nexport const list = (state = initialState.voteTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      status: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  default:\n    return state;\n  }\n};\n","import axios from 'axios';\n\nexport const createUserAccount = (postData) => {\n    return axios.post('/api/users', postData);\n};\n\nexport const loginUser = (postData) => {\n    const username = postData.mail;\n    const { password } = postData;\n\n    return axios.post('/api/users/login', {\n        username,\n        password\n    });\n};\n\nexport const loginUserJwt = (postData) => {\n    const { jwt } = postData;\n    const headers = {\n        \"Content-Type\": 'application/json',\n        \"Authorization\": `Bearer ${jwt}`\n    };\n    return axios.post('/api/users/login_jwt', {}, { headers });\n};\n\nexport const activateUser = (postData) => {\n  const { token } = postData;\n  return axios.post(`/api/users/activate/${token}`, postData);\n};\n\nexport const resetPassword = (postData) => {\n  return axios.post(`/api/users/password_reset`, postData);\n};\n\nexport const saveUserPassword = (postData) => {\n  const { token } = postData;\n  return axios.put(\n    `/api/users/update_password/${token}`,\n    postData\n  );\n};\n\nexport const saveUserProfile = (postData) => {\n    const { user_id, name, profile, country_id, image } = postData;\n    let data = new FormData();\n    console.log(\"name-----------\",name);\n    data.append('name', name);\n    data.append('profile', profile);\n    data.append('country_id', country_id);\n    data.append('image', image);\n    return axios.put(\n        `/api/users/${user_id}`,\n        data,\n        {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        }\n    );\n};\n\nexport const getUser = (user_id) => {\n    return axios.get(`/api/users/${user_id}`);\n};\n\nexport const getUserByToken = (token) => {\n  return axios.get(`/api/users/password_reset/${token}`);\n};\n","import axios from 'axios';\n\nexport const fetchQuestionList = (params) => {\n    return axios.get('/api/questions', {\n        params\n    });\n};\n\nexport const fetchQuestion = (id) => {\n    return axios.get(`/api/questions/${id}`);\n};\n\nexport const postQuestionData = (postData) => {\n    return axios.post('/api/questions', postData);\n};\n\nexport const saveQuestionData = (postData) => {\n  const { question_id } = postData;\n  return axios.put(`/api/questions/${question_id}`, postData);\n};\n\nexport const deleteQuestionData = (params) => {\n  const { question_id } = params;\n  return axios.delete(`/api/questions/${question_id}`, { params });\n};\n","import axios from 'axios';\n\nconst apiUrl = '/api/answers';\n\nexport const fetchAnswer = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const fetchAnswerList = (params) => {\n  return axios.get(apiUrl, {\n    params\n  });\n};\n\nexport const fetchAnswerListWithQuestion = (params) => {\n  return axios.get(`${apiUrl}_with_question`, {\n    params\n  });\n};\n\nexport const postAnswerData = (params) => {\n  return axios.post(apiUrl, params);\n};\n\nexport const saveAnswerData = (saveData) => {\n  const { answer_id } = saveData;\n  return axios.put(`${apiUrl}/${answer_id}`, saveData);\n};\n\nexport const deleteAnswerData = (params) => {\n  const { answer_id } = params;\n  return axios.delete(`${apiUrl}/${answer_id}`, { params });\n};\n","import axios from 'axios';\nconst apiUrl = '/api/comments';\n\nexport const fetchCommentWithUserList = (params) => {\n  return axios.get(`/api/comments_with_User`, {\n    params\n  });\n}\n\nexport const fetchCommentsList = (params) => {\n    return axios.get(apiUrl, {\n        params\n    });\n};\n\nexport const fetchComment = (id) => {\n    return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const fetchCommentListWithAnswer = (params) => {\n  return axios.get(`${apiUrl}_with_answer`, {\n    params\n  });\n};\n\nexport const postCommentData = (postData) => {\n    return axios.post(apiUrl, postData);\n};\n\nexport const saveCommentData = (saveData) => {\n  const { comment_id } = saveData;\n  return axios.put(`${apiUrl}/${comment_id}`, saveData);\n};\n\nexport const deleteCommentData = (params) => {\n  const { comment_id } = params;\n  return axios.delete(`${apiUrl}/${comment_id}`, { params });\n};\n","import axios from 'axios';\n\nexport const fetchContentTranslation = ( params ) => {\n    return axios.get(`/api/content_translations`,{\n      params\n    });\n};","import { addNotification as notify } from 'reapop';\n\nexport function notifySuccess(message) {\n  return notify({\n    message,\n    position: 'tc',\n    status: 'success',\n    dismissAfter: 2000\n  });\n}\n\nexport function notifyError(message) {\n  return notify({\n    message,\n    position: 'tc',\n    status: 'error',\n    dismissAfter: 2000\n  });\n}\n\nexport function notifyAlert(message) {\n  return notify({\n    message,\n    position: 'tc',\n    status: 'error',\n    dismissAfter: 2000\n  });\n}\n","import { takeEvery, call, put, select } from 'redux-saga/effects';\n// import { push } from 'react-router-redux';\nimport {\n  updateUserData, requestData, receiveDataSuccess, receiveDataFailed,\n  loginSuccess, loginFailed, removeUserData, updatedUserData,\n  updatedProfileData, preparedAuth, updatedProfileQuestionData,\n  updatedProfileAnswerData, updatedProfileCommentData, updatedProfileTranslatedData,\n} from '../actions/User';\nimport {\n  CREATE_USER_ACCOUNT,\n  SAVE_USER_DATA,\n  SAVE_USER_PASSWORD,\n  ACTIVATE_USER,\n  SEND_RESET_PASSWORD_MAIL,\n  GET_USER_PROFILE,\n  GET_USER_BY_TOKEN,\n  LOGIN_USER,\n  LOGIN_USER_JWT,\n  LOGOUT_USER\n} from '../actions/User';\nimport * as api from './apis/Users';\nimport { fetchQuestionList } from './apis/Questions';\nimport { fetchAnswerListWithQuestion } from './apis/Answers';\nimport { fetchCommentListWithAnswer } from './apis/Comments';\nimport { fetchContentTranslation } from './apis/ContentTranslations';\nimport { notifySuccess, notifyError } from './Util';\n\nexport function* createUserAccount(action) {\n  const { history } = action.payload;\n  try {\n    yield put(requestData());\n    const payload = yield call(api.createUserAccount, action.payload);\n    yield put(receiveDataSuccess(payload));\n    const message = '新規登録に成功しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/users/login');\n  } catch (e) {\n    yield put(receiveDataFailed());\n    const message = '新規登録に失敗しました';\n    yield put(notifyError(message));\n  }\n}\n\nexport function* loginUserAccount(action) {\n  const { history } = action.payload;\n  try {\n    const payload = yield call(api.loginUser, action.payload);\n    yield put(loginSuccess(payload));\n    const { jwt } = payload.data;\n    localStorage.setItem('jwt', jwt);\n    const message = 'ログインに成功しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n    // yield put(push('/'));\n  } catch (e) {\n    //yield put(loginFailed());\n    const message = 'アカウントが存在しないか、パスワードが間違っています';\n    yield put(notifyError(message));\n    yield call(history.push, '/users/login');\n  }\n}\n\nexport function* loginUserAccountJwt(action) {\n  try {\n    const jwt = localStorage.getItem('jwt');\n    if (!jwt) {\n      throw new Error('JWTがありません。');\n    }\n    const payload = yield call(api.loginUserJwt, { jwt });\n    yield put(loginSuccess(payload));\n    yield put(preparedAuth());\n  } catch (e) {\n    yield put(loginFailed());\n    yield put(preparedAuth());\n  }\n}\n\nexport function* logoutUserAccount(action) {\n  try {\n    const { history } = action.payload;\n    localStorage.removeItem('jwt');\n    yield put(removeUserData());\n    const message = 'ログアウトしました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n  } catch (e) {\n    //yield put(loginFailed());\n    //yield call(history.push, '/users/login');\n  }\n}\n\nexport function* saveUserData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveUserProfile, action.payload);\n    const message = 'プロフィールを更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedUserData(payload));\n  } catch (e) {\n    const message = 'プロフィールの更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveUserPassword(action) {\n  try {\n    const { history } = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.saveUserPassword, action.payload);\n    yield put(loginSuccess(payload));\n    const { jwt } = payload.data;\n    localStorage.setItem('jwt', jwt);\n    const message = 'パスワードを更新しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = 'パスワードの更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function *resetPassword(action) {\n  try {\n    const state = yield select();\n    const { locale } = state.intl;\n    action.payload.locale = locale;\n    yield put(requestData());\n    const payload = yield call(api.resetPassword, action.payload);\n    const message = 'メールを送信しました';\n    yield put(notifySuccess(message));\n  } catch (e) {\n    const message = 'メール送信に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* getUserProfile(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.getUser, action.payload);\n    const questionParams = {user_id : action.payload};\n    const questionPayload = yield call(fetchQuestionList, questionParams);\n\n    const answerParams = {user_id : action.payload};\n    const answerPayload = yield call(fetchAnswerListWithQuestion, answerParams);\n\n    const commentParams = {user_id : action.payload};\n    const commentPayload = yield call(fetchCommentListWithAnswer, commentParams);\n\n    const translateParams = {user_id : action.payload};\n    const translatedContent = yield call(fetchContentTranslation, translateParams);\n    \n    yield put(updatedProfileData(payload));\n    yield put(updatedProfileQuestionData(questionPayload));\n    yield put(updatedProfileAnswerData(answerPayload));\n    yield put(updatedProfileCommentData(commentPayload));\n    yield put(updatedProfileTranslatedData(translatedContent));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* getUserByToken(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.getUserByToken, action.payload);\n    yield put(updatedUserData(payload));\n  } catch (e) {\n    console.log('receiveDataFailed');\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* activateUser(action) {\n  try {\n    const { history } = action.payload;\n    console.log('history', history);\n    yield put(requestData());\n    const payload = yield call(api.activateUser, action.payload);\n    yield put(loginSuccess(payload));\n    const { jwt } = payload.data;\n    localStorage.setItem('jwt', jwt);\n    const message = '認証が完了しました。';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n  } catch (e) {\n    console.log('receiveDataFailed');\n    yield put(receiveDataFailed());\n  }\n}\n\nconst userSagas = [\n  takeEvery(CREATE_USER_ACCOUNT, createUserAccount),\n  takeEvery(LOGIN_USER, loginUserAccount),\n  takeEvery(LOGIN_USER_JWT, loginUserAccountJwt),\n  takeEvery(LOGOUT_USER, logoutUserAccount),\n  takeEvery(SAVE_USER_DATA, saveUserData),\n  takeEvery(SAVE_USER_PASSWORD, saveUserPassword),\n  takeEvery(GET_USER_PROFILE, getUserProfile),\n  takeEvery(GET_USER_BY_TOKEN, getUserByToken),\n  takeEvery(SEND_RESET_PASSWORD_MAIL, resetPassword),\n  takeEvery(ACTIVATE_USER, activateUser),\n];\n\nexport default userSagas;\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updateCurrentTranslateLanguage,\n  updatedQuestionData\n} from '../actions/Question';\nimport {\n  FETCH_QUESTION_LIST,\n  FETCH_QUESTION,\n  CHANGE_QUESTION_LIST_LANGUAGE,\n  POST_QUESTION_DATA,\n  SAVE_QUESTION_DATA,\n  DELETE_QUESTION,\n} from '../actions/Question';\n\nimport * as api from './apis/Questions';\nimport { notifySuccess, notifyError } from './Util';\n\nexport function* handleFetchData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestionList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* handleFetchQuestionById(action) {\n  try {\n    const  id   = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestion, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postQuestion(action) {\n  try {\n    yield put(requestData());\n    yield call(api.postQuestionData, action.payload);\n    const payload = yield call(api.fetchQuestionList);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* changeQuestionListLanguage(action) {\n  try {\n    const { translate_language_id } = action.payload;\n    yield put(requestData());\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveQuestionData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveQuestionData, action.payload);\n    const message = '質問を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedQuestionData(payload));\n  } catch (e) {\n    const message = '質問の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteQuestionData(action) {\n  try {\n    const { question_id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteQuestionData, action.payload);\n    const message = '質問を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchQuestionList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '質問の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst questionSagas = [\n  //FETCH_QUESTION_LISTというアクションが発火させた場合はhandleFetchDataを起動させる。\n  takeEvery(FETCH_QUESTION_LIST, handleFetchData),\n  takeEvery(FETCH_QUESTION, handleFetchQuestionById),\n  // takeEvery(CHANGE_QUESTION_LIST_LANGUAGE, changeQuestionListLanguage),\n  takeEvery(POST_QUESTION_DATA, postQuestion),\n  takeEvery(SAVE_QUESTION_DATA, saveQuestionData),\n  takeEvery(DELETE_QUESTION, deleteQuestionData),\n];\n\nexport default questionSagas;\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport { reset } from 'redux-form';\nimport {\n  requestData, receiveDataSuccess, receiveDataFailed, initializeForm,\n  receiveSingleDataSuccess,\n} from '../actions/Answer';\nimport {\n  FETCH_ANSWER,\n  FETCH_ANSWER_LIST,\n  POST_ANSWER_DATA,\n  SAVE_ANSWER_DATA,\n  DELETE_ANSWER,\n} from '../actions/Answer';\nimport * as api from './apis/Answers';\nimport * as act from '../actions/Comment';\nimport { notifySuccess, notifyError } from './Util';\nimport { fetchCommentWithUserList }from './apis/Comments';\nimport { array } from 'prop-types';\n\nexport function* handleFetchAnswerData(action) {\n  try {\n    yield put(requestData());\n    const answerList = yield call(api.fetchAnswerList, action.payload);\n    const answerId = answerList.data.map(v => v.id);\n    const commentList = yield call(fetchCommentWithUserList, answerId);\n    yield put(receiveDataSuccess(answerList));\n    yield put(act.receiveCommentDataSuccess(commentList));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* postAnswer(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.postAnswerData, action.payload);\n    const { question_id, translate_language_id } = action.payload;\n    const answerPayload = yield call(api.fetchAnswerList, { question_id, translate_language_id });\n    yield put(receiveDataSuccess(answerPayload));\n    yield put(reset('answerForm'));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* fetchSingleAnswerData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchAnswer, action.payload);\n    yield put(receiveSingleDataSuccess(payload));\n    yield put(reset('answerForm'));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveAnswerData(action) {\n  try {\n    const { question_id, history } = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.saveAnswerData, action.payload);\n    const message = '回答を更新しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = '回答の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteAnswerData(action) {\n  try {\n    const { answer_id, question_id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteAnswerData, action.payload);\n    const message = '回答を削除しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = '回答の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\n\nconst answerSagas = [\n  takeEvery(FETCH_ANSWER_LIST, handleFetchAnswerData),\n  takeEvery(POST_ANSWER_DATA, postAnswer),\n  takeEvery(FETCH_ANSWER, fetchSingleAnswerData),\n  takeEvery(SAVE_ANSWER_DATA, saveAnswerData),\n  takeEvery(DELETE_ANSWER, deleteAnswerData),\n];\n\nexport default answerSagas;\n","import axios from 'axios';\n\nconst apiUrl = '/api/question_translations';\n\nexport const fetchQuestionTranslationList = (question_id) => {\n  return axios.get(apiUrl, {\n    params: { question_id }\n  });\n};\n\nexport const fetchQuestionTranslation = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const postQuestionTranslationData = (postData) => {\n  const {\n    content,\n    user_id,\n    question_id,\n    translate_language_id\n  } = postData;\n  return axios.post(apiUrl, {\n    content,\n    user_id,\n    question_id,\n    translate_language_id\n  });\n};\n\nexport const saveQuestionTranslationData = (saveData) => {\n  const { id } = saveData;\n  return axios.put(`${apiUrl}/${id}`, saveData);\n};\n\nexport const deleteQuestionTranslation= (params) => {\n  const { id } = params;\n  return axios.delete(`${apiUrl}/${id}`, { params });\n};\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updatedSingleQuestionTranslation\n} from '../actions/QuestionTranslation';\nimport {\n  FETCH_QUESTION_TRANSLATION_LIST,\n  FETCH_QUESTION_TRANSLATION,\n  POST_QUESTION_TRANSLATION_DATA,\n  SAVE_QUESTION_TRANSLATION_DATA,\n  DELETE_QUESTION_TRANSLATION,\n} from '../actions/QuestionTranslation';\nimport * as api from './apis/QuestionTranslations';\nimport { notifySuccess, notifyError } from './Util';\nimport * as questionSagas from './Question';\n\nexport function* handleFetchQuestionTranslationList(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestionTranslationList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* handleFetchQuestionTranslationById(action) {\n  try {\n    const id = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestionTranslation, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* postQuestionTranslation(action) {\n  try {\n    const { question_id } = action.payload;\n    yield put(requestData());\n    yield call(api.postQuestionTranslationData, action.payload);\n    const payload = yield call(api.fetchQuestionTranslationList, question_id);\n    yield put(receiveDataSuccess(payload));\n    const data = {payload: {}};\n    yield call(questionSagas.handleFetchData, data);\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveQuestionTranslationData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveQuestionTranslationData, action.payload);\n    const message = '翻訳を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedSingleQuestionTranslation(payload));\n  } catch (e) {\n    const message = '翻訳の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteQuestionTranslation(action) {\n  try {\n    const { id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteQuestionTranslation, action.payload);\n    const message = '翻訳を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchQuestionTranslationList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '翻訳の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst questionTranslationSagas = [\n  takeEvery(POST_QUESTION_TRANSLATION_DATA, postQuestionTranslation),\n  takeEvery(FETCH_QUESTION_TRANSLATION_LIST, handleFetchQuestionTranslationList),\n  takeEvery(FETCH_QUESTION_TRANSLATION, handleFetchQuestionTranslationById),\n  takeEvery(SAVE_QUESTION_TRANSLATION_DATA, saveQuestionTranslationData),\n  takeEvery(DELETE_QUESTION_TRANSLATION, deleteQuestionTranslation),\n];\n\nexport default questionTranslationSagas;\n","import axios from 'axios';\n\nconst apiUrl = '/api/answer_translations';\n\nexport const fetchAnswerTranslationList = (answer_id) => {\n  return axios.get(apiUrl, {\n    params: { answer_id }\n  });\n};\n\nexport const fetchAnswerTranslation = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const postAnswerTranslationData = (postData) => {\n  const {\n    content,\n    user_id,\n    answer_id,\n    translate_language_id\n  } = postData;\n  return axios.post(apiUrl, {\n    content,\n    user_id,\n    answer_id,\n    translate_language_id\n  });\n};\n\nexport const saveAnswerTranslationData = (saveData) => {\n  const { id } = saveData;\n  return axios.put(`${apiUrl}/${id}`, saveData);\n};\n\nexport const deleteAnswerTranslation= (params) => {\n  const { id } = params;\n  return axios.delete(`${apiUrl}/${id}`, { params });\n};\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updatedSingleAnswerTranslation\n} from '../actions/AnswerTranslation';\nimport {\n  FETCH_ANSWER_TRANSLATION_LIST,\n  FETCH_ANSWER_TRANSLATION,\n  POST_ANSWER_TRANSLATION_DATA,\n  SAVE_ANSWER_TRANSLATION_DATA,\n  DELETE_ANSWER_TRANSLATION,\n} from '../actions/AnswerTranslation';\nimport * as api from './apis/AnswerTranslations';\nimport { notifySuccess, notifyError } from './Util';\nimport * as questionSagas from './Question';\n\nexport function* handleFetchAnswerTranslationList(action) {\n  try {\n    // axios.get()を呼ぶ前にisFetchingをtrueにしておく\n    yield put(requestData());\n    const payload = yield call(api.fetchAnswerTranslationList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* handleFetchAnswerTranslationById(action) {\n  try {\n    const id  = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchAnswerTranslation, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postAnswerTranslation(action) {\n  try {\n    const { answer_id } = action.payload;\n    yield put(requestData());\n    yield call(api.postAnswerTranslationData, action.payload);\n    const payload = yield call(api.fetchAnswerTranslationList, answer_id);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveAnswerTranslationData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveAnswerTranslationData, action.payload);\n    const message = '翻訳を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedSingleAnswerTranslation(payload));\n  } catch (e) {\n    const message = '翻訳の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteAnswerTranslation(action) {\n  try {\n    const { id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteAnswerTranslation, action.payload);\n    const message = '翻訳を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchAnswerTranslationList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '翻訳の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst answerTranslationSagas = [\n  takeEvery(POST_ANSWER_TRANSLATION_DATA, postAnswerTranslation),\n  takeEvery(FETCH_ANSWER_TRANSLATION_LIST, handleFetchAnswerTranslationList),\n  takeEvery(FETCH_ANSWER_TRANSLATION, handleFetchAnswerTranslationById),\n  takeEvery(SAVE_ANSWER_TRANSLATION_DATA, saveAnswerTranslationData),\n  takeEvery(DELETE_ANSWER_TRANSLATION, deleteAnswerTranslation),\n];\n\nexport default answerTranslationSagas;\n","import { takeEvery, call, put } from 'redux-saga/effects';\n// import { push } from 'react-router-redux';\nimport * as act from '../actions/Comment';\nimport * as api from './apis/Comments';\nimport {\n  FETCH_SINGLE_COMMENT,\n  POST_COMMENT,\n  SAVE_COMMENT_DATA,\n  DELETE_COMMENT,\n} from '../actions/Comment';\nimport * as answerSaga from './Answer'; \nimport { notifySuccess, notifyError } from './Util';\n\nimport { fetchCommentWithUserList }from './apis/Comments';\nimport * as act2 from '../actions/Comment';\n\nexport function* fetchSingleComment(action) {\n  try {\n    yield put(act.requestData());\n    const comment_id = action.payload;\n    const comment = yield call(api.fetchComment, comment_id);\n    yield put(act.updatedSingleCommentData(comment));\n  } catch (e) {\n    const message = 'コメントの投稿に失敗しました。';\n    yield put(notifyError(message));\n  }\n}\n\nexport function* postComment(action) {\n  try {\n    yield put(act.requestData());\n    const { answer_id, question_id, current_translate_language_id, answerIdList } = action.payload;\n    yield call(api.postCommentData, action.payload);\n    const commentPayload = yield call(api.fetchCommentsList, { answer_id });    \n    const answerId = answerIdList;\n    const commentList = yield call(fetchCommentWithUserList, answerId);\n    yield put(act2.receiveCommentDataSuccess(commentList));\n\n    const message = 'コメントを投稿しました。';\n    yield put(notifySuccess(message));\n    const data = { payload: {\n      question_id,\n      translate_language_id: current_translate_language_id\n    } };\n    yield call(answerSaga.handleFetchAnswerData, data);\n  } catch (e) {\n    const message = 'コメントの投稿に失敗しました。';\n    yield put(notifyError(message));\n    //yield put(updatedCommentData());\n  }\n}\n\nexport function* saveComment(action) {\n  try {\n    yield put(act.requestData());\n    const {\n      comment_id,\n      question_id,\n      history\n    } = action.payload;\n    const comment = yield call(api.saveCommentData, action.payload);\n    yield put(act.updatedSingleCommentData(comment));\n    const message = 'コメントを編集しました。';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = 'コメントの編集に失敗しました。';\n    yield put(notifyError(message));\n    //yield put(updatedCommentData());\n  }\n}\n\nexport function* deleteCommentData(action) {\n  try {\n    const { comment_id, question_id, user_id, history } = action.payload;\n    yield put(act.requestData());\n    yield call(api.deleteCommentData, action.payload);\n    const message = 'コメントを削除しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = 'コメントの削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(act.receiveDataFailed());\n  }\n}\n\nconst commentSagas = [\n  takeEvery(FETCH_SINGLE_COMMENT, fetchSingleComment),\n  takeEvery(POST_COMMENT, postComment),\n  takeEvery(SAVE_COMMENT_DATA, saveComment),\n  takeEvery(DELETE_COMMENT, deleteCommentData),\n];\n\nexport default commentSagas;\n","import axios from 'axios';\n\nconst apiUrl = '/api/comment_translations';\n\nexport const fetchCommentTranslationList = (comment_id) => {\n  return axios.get(apiUrl, {\n    params: {\n      comment_id\n    }\n  });\n};\n\nexport const fetchCommentTranslation = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const postCommentTranslationData = (params) => {\n  return axios.post(apiUrl, {\n    params\n  });\n};\n\nexport const saveCommentTranslationData = (saveData) => {\n  const { id } = saveData;\n  return axios.put(`${apiUrl}/${id}`, saveData);\n};\n\nexport const deleteCommentTranslation = (params) => {\n  const { id } = params;\n  return axios.delete(`${apiUrl}/${id}`, { params });\n};\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updatedSingleCommentTranslation\n} from '../actions/CommentTranslation';\nimport {\n  FETCH_COMMENT_TRANSLATION_LIST,\n  FETCH_COMMENT_TRANSLATION,\n  POST_COMMENT_TRANSLATION_DATA,\n  SAVE_COMMENT_TRANSLATION_DATA,\n  DELETE_COMMENT_TRANSLATION,\n} from '../actions/CommentTranslation';\nimport * as api from './apis/CommentTranslations';\nimport { notifySuccess, notifyError } from './Util';\n\nexport function* handleFetchCommentTranslationList(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchCommentTranslationList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* handleFetchCommentTranslationById(action) {\n  try {\n    const id  = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchCommentTranslation, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postCommentTranslation(action) {\n  try {\n    const { comment_id } = action.payload;\n    yield put(requestData());\n    yield call(api.postCommentTranslationData, action.payload);\n    const payload = yield call(api.fetchCommentTranslationList, comment_id);\n    yield put(receiveDataSuccess(payload));\n    const message = '翻訳を投稿しました。';\n    yield put(notifySuccess(message));\n  } catch (e) {\n    yield put(receiveDataFailed());\n    const message = '翻訳の投稿に失敗しました。';\n    yield put(notifyError(message));\n  }\n}\n\nexport function* saveCommentTranslationData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveCommentTranslationData, action.payload);\n    const message = '翻訳を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedSingleCommentTranslation(payload));\n  } catch (e) {\n    const message = '翻訳の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteCommentTranslation(action) {\n  try {\n    const { id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteCommentTranslation, action.payload);\n    const message = '翻訳を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchCommentTranslationList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '翻訳の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst commentTranslationSagas = [\n  takeEvery(POST_COMMENT_TRANSLATION_DATA, postCommentTranslation),\n  takeEvery(FETCH_COMMENT_TRANSLATION_LIST, handleFetchCommentTranslationList),\n  takeEvery(FETCH_COMMENT_TRANSLATION, handleFetchCommentTranslationById),\n  takeEvery(SAVE_COMMENT_TRANSLATION_DATA, saveCommentTranslationData),\n  takeEvery(DELETE_COMMENT_TRANSLATION, deleteCommentTranslation),\n];\n\nexport default commentTranslationSagas;\n","import axios from 'axios';\n\n// 未翻訳の質問一覧取得するAPI\nexport const fetchNotTranslatedQuestions = (params) => {\n    return axios.get('/api/not_translated_questions', {\n        params\n    });\n};\n\n// 未翻訳の回答一覧取得するAPI\nexport const fetchNotTranslatedAnswers = (params) => {\n    return axios.get('/api/not_translated_answers', {\n        params\n    });\n};\n\n// 未翻訳のコメント一覧取得するAPI\nexport const fetchNotTranslatedComments = (params) => {\n    return axios.get('/api/not_translated_comments', {\n        params\n    });\n};\n\n","import { takeEvery, call, put } from 'redux-saga/effects';\n\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveDataFailed,\n  FETCH_NOT_TRANSLATED,\n} from '../actions/NotTranslated';\n\nimport {\n  fetchNotTranslatedQuestions,\n  fetchNotTranslatedAnswers,\n  fetchNotTranslatedComments,\n} from './apis/NotTranslated';\nimport { changeQuestionListLanguage } from './Question';\n\nexport function* handleFetchData(action) {\n  try {\n\n    yield put(requestData());\n\n    //未翻訳一覧を取り出す\n    // const questions = yield call(fetchNotTranslated, action.payload);\n\n    //質問を取り出す\n    const questions = yield call(fetchNotTranslatedQuestions, action.payload);\n\n    //回答を取り出す\n    const answers = yield call(fetchNotTranslatedAnswers, action.payload);\n\n    //コメントを取り出す\n    const comments = yield call(fetchNotTranslatedComments, action.payload);\n\n    const NotTranslatedList={\n      questions : questions.data,\n      answers : answers.data,\n      comments: comments.data,\n    };\n\n    //reducers/NotTranslated.jsで関数を実行する。\n    yield put(receiveDataSuccess(NotTranslatedList));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nconst NotTranslatedSagas = [\n  //FETCH_QUESTION_LISTというアクションが発火させた場合はhandleFetchDataを起動させる。\n  takeEvery(FETCH_NOT_TRANSLATED, handleFetchData),\n];\n\nexport default NotTranslatedSagas;\n","import axios from 'axios';\n\nexport const postVotes = (postData) => {\n    return axios.post('/api/votes', postData);\n};\n\nexport const deleteVotes = (params) => {\n    const { vote_id } = params;\n    return axios.delete(`/api/votes/${vote_id}`, { params });\n};\n\nexport const fetchQuestionVotesList = (question_id) => {\n    return axios.get('/api/votes/questions', {\n      params: { question_id }\n    });\n  };\n\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n    POST_VOTE,\n    DELETE_VOTE,\n    HANDLE_VOTE,\n    requestData,\n    receiveDataSuccess,\n    receiveDataFailed,\n} from '../actions/Vote.js';\n\nimport * as answerSaga from './Answer';\nimport * as questionSagas from './Question';\nimport {\n  postVotes,\n  deleteVotes,\n  fetchQuestionVotesList,\n} from './apis/Votes';\n\nimport {\n  notifySuccess,\n  notifyError\n} from './Util';\n\nexport function* handleFetchQestionVotesList(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(fetchQuestionVotesList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* handleVote(action) {\n  const  voteParams  = action.payload;\n  const postActionType = voteParams.postActionType;\n\n  try {\n    yield put(requestData());\n    const thisPageKey = voteParams.thisPageKey;\n\n    if (postActionType===\"post\") {\n      yield call(postVotes, voteParams);\n    } else {\n      yield call(deleteVotes, voteParams);\n    }\n    \n    switch (thisPageKey) {\n      case \"comment\":\n      case \"answer\":\n          const commentAnswerData = { payload: {\n            question_id: voteParams.thisPageContentId,\n            translate_language_id: 1,\n          } };\n          yield call(answerSaga.handleFetchAnswerData, commentAnswerData);\n          break;\n      case \"questionList\":\n          const questionData = { payload: {\n            country_id: voteParams.country_id,\n          } };\n          yield call(questionSagas.handleFetchData, questionData);\n          break;\n      case \"questionView\":\n          const singleQuestionData = { payload: voteParams.thisPageContentId };\n          yield call(questionSagas.handleFetchQuestionById, singleQuestionData);\n          break;\n    }\n    const message = postActionType === \"post\" \n                  ? \"いいねしました\"\n                  : \"いいねを削除しました\";\n    yield put(notifySuccess(message));\n  } catch (e) {\n    const message = postActionType === \"post\" \n                  ? \"いいねできませんでした。\"\n                  : \"いいねの削除ができませんでした。\";\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst voteSagas = [\n  takeEvery(HANDLE_VOTE, handleVote),\n];\n\nexport default voteSagas;\n","import axios from 'axios';\n\nexport const postVotes = (params) => {\n    return axios.post('/api/vote_translations', params);\n};\n\nexport const deleteVotes = (params) => {\n    const { vote_id } = params;\n    return axios.delete(`/api/vote_translations/${vote_id}`, { params });\n};","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n    POST_VOTE,\n    DELETE_VOTE,\n    HANDLE_VOTE,\n    requestData,\n    receiveDataSuccess,\n    receiveDataFailed,\n} from '../actions/VoteTranslation';\n\nimport * as answerTranslationSagas from './AnswerTranslation';\nimport * as questionTranslationSagas from './QuestionTranslation';\nimport * as commentTranslationSagas from './CommentTranslation';\n\nimport { \n  notifySuccess, \n  notifyError \n} from './Util';\n\nimport { postVotes, deleteVotes } from './apis/VoteTranslations';\n\nexport function* handleVote(action) {\n  const  voteParams  = action.payload;\n  const postActionType = voteParams.postActionType;\n\n  try {\n\n    yield put(requestData());\n    const thisPageKey = voteParams.thisPageKey;\n\n    if (postActionType===\"post\") {\n      yield call(postVotes, voteParams);\n    } else {\n      yield call(deleteVotes, voteParams);\n    }\n\n    const data = { payload: voteParams.thisPageContentId } ;\n    switch (thisPageKey) {\n      case \"comment\":\n          yield call(commentTranslationSagas.handleFetchCommentTranslationList, data);\n          break;\n      case \"answer\":\n          yield call(answerTranslationSagas.handleFetchAnswerTranslationList, data);\n          break;\n      case \"question\":\n          yield call(questionTranslationSagas.handleFetchQuestionTranslationList, data);\n          break;\n    }\n\n    const message = postActionType === \"post\" \n                  ? \"いいねしました\"\n                  : \"いいねを削除しました\";\n    yield put(notifySuccess(message));\n\n  } catch (e) {\n    const message = postActionType === \"post\" \n                  ? \"いいねできませんでした。\"\n                  : \"いいねの削除ができませんでした。\";\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst voteTranslationSagas = [\n  takeEvery(HANDLE_VOTE, handleVote),\n];\n\nexport default voteTranslationSagas;","import { put, takeEvery } from 'redux-saga/effects';\nimport {\n    ACTION_ALERT_MESSAGE,\n} from '../actions/Notification';\nimport { notifyAlert } from './Util';\n\nexport function* alertMessage(action) {\n    yield put(notifyAlert(action.payload));\n}\n\n  const notificationSagas = [\n    takeEvery(ACTION_ALERT_MESSAGE, alertMessage),\n  ];\n  \nexport default notificationSagas;","import { all } from 'redux-saga/effects';\nimport userSagas from './sagas/User';\nimport questionSagas from './sagas/Question';\nimport answerSagas from './sagas/Answer';\nimport questionTranslationSagas from './sagas/QuestionTranslation';\nimport answerTranslationSagas from './sagas/AnswerTranslation';\nimport commentSagas from './sagas/Comment';\nimport commentTranslationSagas from './sagas/CommentTranslation';\nimport NotTranslatedSagas from './sagas/NotTranslated';     \nimport voteSagas from './sagas/Votes';\nimport voteTranslationSagas from './sagas/VoteTranslation';  \nimport notificationSagas from './sagas/Notification';            \n\nexport default function* rootSaga() {\n  yield all([\n    ...userSagas,\n    ...questionSagas,\n    ...answerSagas,\n    ...questionTranslationSagas,\n    ...answerTranslationSagas,\n    ...commentSagas,\n    ...commentTranslationSagas,\n    ...NotTranslatedSagas,\n    ...voteSagas,\n    ...voteTranslationSagas,\n    ...notificationSagas,\n  ]);\n}\n","import { createBrowserHistory as createHistory } from 'history';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { routerMiddleware } from 'react-router-redux';\nimport reducer from './reducer';\nimport { initialState } from './constants';\nimport rootSaga from './rootSaga';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from \"redux-logger\";\nimport ReactGA from 'react-ga';\n\n// Redux DevTools\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst history = createHistory();\nReactGA.initialize('UA-128421111-1');\nhistory.listen(({ pathname }) => {\n  console.log(\"GA---------\",pathname);\n//   ReactGA.set({ page: pathname });\n//   ReactGA.pageview(pathname);\n});\n\nconst routingMiddleware = routerMiddleware(history);\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n    reducer,\n    initialState,\n    composeEnhancers(\n        applyMiddleware(\n            thunkMiddleware,\n            routingMiddleware,\n            sagaMiddleware,\n            logger\n        )\n    )\n);\n\nsagaMiddleware.run(rootSaga, { history });\n\nexport { history }\nexport { store }\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { ConnectedRouter, routerReducer, routerMiddleware } from 'react-router-redux';\n\nimport Home from './containers/Home';\nimport QuestionView from './containers/QuestionView';\nimport QuestionEdit from './containers/QuestionEdit';\nimport NotTranslated from './containers/NotTranslated';\nimport AnswerEdit from './containers/AnswerEdit';\nimport CommentEdit from './containers/CommentEdit';\nimport QuestionTranslationView from './containers/QuestionTranslationView';\nimport QuestionTranslationEdit from './containers/QuestionTranslationEdit';\nimport AnswerTranslationView from './containers/AnswerTranslationView';\nimport AnswerTranslationEdit from './containers/AnswerTranslationEdit';\nimport CommentTranslationView from './containers/CommentTranslationView';\nimport CommentTranslationEdit from './containers/CommentTranslationEdit';\nimport App from './containers/App';\nimport ScrollToTop from './components/layouts/ScrollToTop';\nimport SignUp from './containers/users/SignUp';\nimport Login from './containers/users/Login';\nimport PasswordReset from './containers/users/PasswordReset';\nimport NewPassword from './containers/users/NewPassword';\nimport Activate from './containers/users/Activate';\nimport Profile from './containers/users/Profile';\nimport ProfileEdit from './containers/users/ProfileEdit';\nimport Contact from './containers/Contact';\nimport UserOnly from './containers/auth/UserOnly';\nimport GuestOnly from './containers/auth/GuestOnly';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport history from './store';\nimport UIkit from 'uikit';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { far } from '@fortawesome/free-regular-svg-icons';\n\n// Styles\nimport './css/normalize.css';\nimport './css/main.css';\nimport './css/uikit.min.css';\n\n// 言語設定\nimport { addLocaleData, IntlProvider } from 'react-intl';\nimport ja from 'react-intl/locale-data/ja';\nimport en from 'react-intl/locale-data/en';\nconst { intl } = store.getState();\nconst { locale, messages } = intl;\naddLocaleData([...ja, ...en]);\n\nlibrary.add(fas, far);\n\n// 取り急ぎの質問フォーム初期化処理\nlocalStorage.setItem('question-form', '');\n\nconst render = () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <IntlProvider locale={locale} messages={messages} >\n        <BrowserRouter>\n          <App>\n            <ScrollToTop>\n              <Switch>\n                <Route exact path='/' component={Home} />\n                <Route exact path='/questions/:id' component={QuestionView}  onEnter={() => window.scrollTo(0, 0)}/>\n                <Route exact path='/question_translations/:question_id' component={QuestionTranslationView} />\n                <Route exact path='/answer_translations/:answer_id' component={AnswerTranslationView} />\n                <Route exact path='/comment_translations/:comment_id' component={CommentTranslationView} />\n                <Route exact path='/users/profile/:id' component={Profile} />\n                <Route exact path='/users/login' component={Login} />\n                <Route exact path='/users/signup' component={SignUp} />\n                <Route exact path='/users/activate/:token' component={Activate} />\n                <Route exact path='/users/password_reset' component={PasswordReset} />\n                <Route exact path='/users/password_reset/:token' component={NewPassword} />\n                <Route exact path='/contact' component={Contact} />\n                <UserOnly>\n                  <Switch>\n                    <Route exact path='/questions/edit/:id' component={QuestionEdit} />\n                    <Route exact path='/answers/edit/:id' component={AnswerEdit} />\n                    <Route exact path='/comments/edit/:id' component={CommentEdit} />\n                    <Route exact path='/users/profile_edit' component={ProfileEdit} />\n                    <Route exact path='/question_translations/edit/:id' component={QuestionTranslationEdit} />\n                    <Route exact path='/answer_translations/edit/:id' component={AnswerTranslationEdit} />\n                    <Route exact path='/comment_translations/edit/:id' component={CommentTranslationEdit} />\n                    {/*未翻訳の質問を抽出するルートパス*/}\n                    <Route exact path='/not_translated' component={NotTranslated} />\n                  </Switch>\n                </UserOnly>\n                <GuestOnly>\n                  <Switch>\n                  </Switch>\n                </GuestOnly>\n              </Switch>\n            </ScrollToTop>\n          </App>\n        </BrowserRouter>\n      </IntlProvider>\n    </Provider>,\n    document.getElementById('root')\n  );\n};\n\nstore.subscribe(() => {\n  render();\n});\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nrender()\n"],"sourceRoot":""}