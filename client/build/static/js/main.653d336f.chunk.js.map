{"version":3,"sources":["actions/Question.js","utils/Translations.js","components/Translator.js","actions/Vote.js","components/PostUser.js","components/PostIcons.js","components/PostAnswerCount.js","components/QuestionListView.js","components/QuestionList.js","containers/QuestionList.js","components/LanguageFormSelect.js","components/CategoryFormSelect.js","components/CountryFormSelect.js","components/QuestionForm.js","components/Home.js","actions/Intl.js","actions/Category.js","actions/Sort.js","actions/Notification.js","containers/Home.js","components/AnswerForm.js","actions/Answer.js","actions/Comment.js","components/Comment.js","components/CommentList.js","components/CommentForm.js","components/AnswerList.js","containers/AnswerList.js","utils/index.js","components/QuestionView.js","containers/QuestionView.js","components/QuestionEdit.js","containers/QuestionEdit.js","actions/NotTranslated.js","components/NotTranslated.js","containers/NotTranslated.js","components/AnswerEdit.js","containers/AnswerEdit.js","components/CommentEdit.js","containers/CommentEdit.js","components/QuestionTranslationForm.js","actions/QuestionTranslation.js","actions/VoteTranslation.js","components/QuestionTranslationList.js","containers/QuestionTranslationList.js","containers/QuestionTranslationView.js","components/TranslationForm.js","components/TranslationEdit.js","components/QuestionTranslationEdit.js","containers/QuestionTranslationEdit.js","components/AnswerTranslationForm.js","actions/AnswerTranslation.js","components/AnswerTranslationList.js","containers/AnswerTranslationList.js","containers/AnswerTranslationView.js","components/AnswerTranslationEdit.js","containers/AnswerTranslationEdit.js","components/CommentTranslationForm.js","actions/CommentTranslation.js","components/CommentTranslationList.js","containers/CommentTranslationList.js","containers/CommentTranslationView.js","components/CommentTranslationEdit.js","containers/CommentTranslationEdit.js","components/layouts/MenuDrawer.js","components/layouts/Header.js","actions/User.js","containers/layouts/Header.js","components/App.js","containers/App.js","components/layouts/ScrollToTop.js","components/users/SignUpForm.js","components/users/SignUp.js","containers/users/SignUp.js","components/users/LoginForm.js","components/users/Login.js","containers/users/Login.js","components/users/PasswordResetForm.js","components/users/PasswordReset.js","containers/users/PasswordReset.js","components/users/PasswordForm.js","components/users/NewPassword.js","containers/users/NewPassword.js","components/users/Activate.js","containers/users/Activate.js","components/Stampcard.js","containers/users/Profile.js","components/users/ProfileForm.js","components/users/Profile.js","containers/users/ProfileEdit.js","components/auth/UserOnly.js","containers/auth/UserOnly.js","components/auth/GuestOnly.js","containers/auth/GuestOnly.js","intl/index.js","intl/locales/ja_JP.js","intl/locales/en_US.js","constants.js","reducer.js","reducers/Intl.js","reducers/Category.js","reducers/Sort.js","reducers/Answer.js","reducers/Question.js","reducers/QuestionTranslation.js","reducers/AnswerTranslation.js","reducers/User.js","reducers/Comment.js","reducers/CommentTranslation.js","reducers/NotTranslated.js","reducers/Votes.js","reducers/VoteTranslation.js","sagas/apis/Users.js","sagas/apis/Questions.js","sagas/apis/Answers.js","sagas/apis/Comments.js","sagas/apis/ContentTranslations.js","sagas/Util.js","sagas/User.js","sagas/Question.js","sagas/Answer.js","sagas/apis/QuestionTranslations.js","sagas/QuestionTranslation.js","sagas/apis/AnswerTranslations.js","sagas/AnswerTranslation.js","sagas/Comment.js","sagas/apis/CommentTranslations.js","sagas/CommentTranslation.js","sagas/apis/NotTranslated.js","sagas/NotTranslated.js","sagas/apis/Votes.js","sagas/Votes.js","sagas/apis/VoteTranslations.js","sagas/VoteTranslation.js","sagas/Notification.js","rootSaga.js","store.js","index.js"],"names":["FETCH_QUESTION_LIST","Symbol","FETCH_QUESTION","POST_QUESTION_DATA","REQUEST_DATA","RECEIVE_DATA_SUCCESS","RECEIVE_SINGLE_DATA_SUCCESS","RECEIVE_DATA_FAILED","UPDATE_CURRENT_TRANSLATE_LANGUAGE","SAVE_QUESTION_DATA","UPDATED_QUESTION_DATA","DELETE_QUESTION","fetchQuestionList","createAction","fetchQuestion","postQuestionData","requestData","receiveDataSuccess","receiveSingleDataSuccess","receiveDataFailed","saveQuestionData","updatedQuestionData","deleteQuestion","getFilteredContents","contentList","translateLanguageId","contentType","filter","v","translate_language_id","length","getTranslatedContents","map","dispText","content","translation","Translator","user","this","props","name","image_path","profile_link","msg","formatMessage","intl","id","react_default","a","createElement","className","style","padding","Link","to","src","width","height","alt","Component","injectIntl","POST_VOTE","DELETE_VOTE","postVote","deleteVote","PostUser","countryId","concat","border","nationalFlag","selectedNationalFlag","country_id","userName","profileLink","PostIcons","votebutton","_this$props","loginUser","votes","sendData","deleteData","editLink","translateLink","onClickSendVote","onClickDeleteVote","translate","editLinkButton","react_fontawesome_index_es","icon","color","size","user_id","onClick","bind","voteNumbers","translateButton","PostAnswerCount","reply","commentCount","reduce","accumulator","currentValue","comments","replyState","replyCount","commentState","QuestionListView","data","handlePostVote","handleDeleteVote","array","e","category_id","editArray","forEach","value","num","answers","push","sort","b","created_at","questionArray","categoryId","sortId","_this","filteredQuestions","translatedQuestions","categoryQuestions","categoryFilteredContents","sortFilteredContents","question","translator","key","sendVoteParams","question_id","answer_id","comment_id","status","deleteVoteParams","vote_id","question_translations","components_Translator","contentCount","components_PostAnswerCount","category","intl_key","dayjs","format","components_PostIcons","sendVote","components_PostUser","questionList","getQuestionList","getQuestionListView","connect","state","auth","ctgr","dispatch","QuestionList","params","questions","handleFetchData","_this$props$state$que","isFetching","react_spinners","components_QuestionListView","queryData","LanguageFormSelect","placeholder","formik_esm","component","CategoryFormSelect","CountryFormSelect","QuestionForm","values","errors","persistTab","initialValues","fromName","formik_persist_es6","enableReinitialize","validate","onSubmit","_ref","setSubmitting","resetForm","setErrors","render","_ref2","touched","handleSubmit","isSubmitting","setFieldValue","type","rows","components_CountryFormSelect","components_LanguageFormSelect","components_CategoryFormSelect","Home","formData","_this$props$state$aut","isLoggedIn","history","alertMessage","postData","console","log","message","locale","preventDefault","stopPropagation","localStorage","setItem","window","location","href","changeSort","changeCategory","_this$props$state$int","onChangeLanguage","components_QuestionForm","submitQuestionForm","formName","onChange","changeCateogryfunction","target","changeSortfunction","containers_QuestionList","React","UPDATE_CURRENT_LANGUAGE","updateCurrentLanguage","UPDATE_CURRENT_CATEGORY","updateCurrentCategory","UPDATE_CURRENT_SORT","updateCurrentSort","ACTION_ALERT_MESSAGE","actionAlertMessage","changeLanguage","AnswerForm","CHANGE_ANSWER_FORM_CONTENT","FETCH_ANSWER_LIST","FETCH_ANSWER","POST_ANSWER_DATA","INITIALIZE_FORM","SAVE_ANSWER_DATA","DELETE_ANSWER","fetchAnswerList","fetchAnswer","postAnswerData","saveAnswerData","deleteAnswer","RECEIVE_COMMENT_DATA_SUCCESS","FETCH_SINGLE_COMMENT","FETCH__COMMENT_WITH_USER_LIST","POST_COMMENT","UPDATE_COMMENT","UPDATED_COMMENT_DATA","UPDATED_SINGLE_COMMENT_DATA","SAVE_COMMENT_DATA","DELETE_COMMENT","UPDATED_COMMENT_ARRAY","receiveCommentDataSuccess","postComment","fetchSingleComment","updatedSingleCommentData","deleteComment","saveCommentData","updatedCommentArray","Comment","voteList","isOwner","commentUser","answerId","currentQuestionId","currentQuestion","commentArray","questionId","commentTranslated","comment_translations","whiteSpace","CommentList","commentList","list","filteredCommentList","translatedCommentList","i","voteState","components_Comment","CommentForm","buttonStr","postButton","class","ownProps","AnswerList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","qId","buttonState","answerIds","answerArray","current_translate_language_id","answerIdList","handlePostComment","paddingLeft","components_CommentForm","form","onClickCommentForm","setState","_this2","filteredAnswers","answer","commentForm","getComment","answer_translations","Linkify_default","properties","components_CommentList","onClickReply","_this$props$state$ans","answerList","getAnswerList","isEmptyObject","obj","keys","QuestionView","match","parseInt","getQuestionById","questionTranslation","country","temp","sprintf","components_AnswerForm","img","getTranslatedQuestion","answerForm","getAnswerForm","containers_AnswerList","fetchAnswers","QuestionEdit","owner","saveData","notOwnerWillTransfer","onClickDeleteBtn","conditions","CHANGE_QUESTION_LIST_LANGUAGE","FETCH_NOT_TRANSLATED","fetchNotTranslated","NotTranslated","currentTab","not_translate","contents","url","getNotTranslatedId","getNotTranslated","tabState","getNotTranslatedQuestions","getNotTranslatedAnswers","getNotTranslatedComments","newTabKey","_this3","tabData","active","onClickTab","tabContents","getCurrentTabContents","getNotTranslatedView","tabList","getTabList","AnswerEdit","getAnswerById","currentAnswer","CommentEdit","commentId","getCommentById","currentComment","QuestionTranslatinoForm","FETCH_QUESTION_TRANSLATION_LIST","FETCH_QUESTION_TRANSLATION","POST_QUESTION_TRANSLATION_DATA","UPDATED_SINGLE_QUESTION_TRANSLATION","SAVE_QUESTION_TRANSLATION_DATA","DELETE_QUESTION_TRANSLATION","fetchQuestionTranslationList","fetchQuestionTranslation","postQuestionTranslationData","updatedSingleQuestionTranslation","saveQuestionTranslationData","deleteQuestionTranslation","QuestionTranslationList","translationList","question_translation_id","answer_translation_id","commcomment_translation_id","vote_translations","questionTranslations","currentTranslationList","getTranslationList","QuestionTranslationView","Error","QuestionTranslationForm","containers_QuestionTranslationList","TranslationForm","TranslationEdit","currentTranslation","components_TranslationForm","QuestionTranslationEdit","qtId","getQuestionTranslationById","components_TranslationEdit","AnswerTranslatinoForm","FETCH_ANSWER_TRANSLATION_LIST","FETCH_ANSWER_TRANSLATION","POST_ANSWER_TRANSLATION_DATA","SAVE_ANSWER_TRANSLATION_DATA","DELETE_ANSWER_TRANSLATION","UPDATED_SINGLE_ANSWER_TRANSLATION","fetchAnswerTranslationList","fetchAnswerTranslation","postAnswerTranslationData","saveAnswerTranslationData","deleteAnswerTranslation","updatedSingleAnswerTranslation","AnswerTranslationList","aId","answerTranslations","AnswerTranslationView","AnswerTranslationForm","containers_AnswerTranslationList","AnswerTranslationEdit","atId","getAnswerTranslationById","CommentTranslatinoForm","FETCH_COMMENT_TRANSLATION_LIST","FETCH_COMMENT_TRANSLATION","POST_COMMENT_TRANSLATION_DATA","SAVE_COMMENT_TRANSLATION_DATA","DELETE_COMMENT_TRANSLATION","UPDATED_SINGLE_COMMENT_TRANSLATION","fetchCommentTranslationList","fetchCommentTranslation","postCommentTranslationData","saveCommentTranslationData","deleteCommentTranslation","updatedSingleCommentTranslation","CommentTranslationList","comment_translation_id","_this$props$state$com","commentTranslations","CommentTranslationView","toQuestionViewLink","CommentTranslationForm","containers_CommentTranslationList","CommentTranslationEdit","ctId","getCommentTranslationById","MenuDrawer","top","left","bottom","right","toggleDrawer","side","open","defineProperty","actionData","logout","classes","displayName","menuDataList","text","sideList","List_default","menuData","index","ListItem_default","button","ListItemText_default","primary","Button_default","Drawer_default","anchor","onClose","tabIndex","role","onKeyDown","withStyles","fullList","Header","anchorEl","handleClose","handleLogout","onClickLogout","profileElem","MenuItem_default","uk-icon","getProfileElem","loginElem","getLoginElem","aria-owns","undefined","aria-haspopup","event","currentTarget","textTransform","Menu_default","Boolean","imagePath","displayMenuElem","menu","getMenu","maxHeight","CREATE_USER_ACCOUNT","CLICK_SUBMIT","SAVE_USER_MNEMONIC","LOGIN_USER","LOGIN_USER_JWT","LOGOUT_USER","UPDATE_USER_DATA","SAVE_USER_DATA","SAVE_USER_PASSWORD","UPDATED_USER_DATA","REMOVE_USER_DATA","LOGIN_SUCCESS","LOGIN_FAILED","GET_USER_PROFILE","GET_USER_BY_TOKEN","UPDATED_PROFILE_DATA","PREPARED_AUTH","UPDATED_PROFILE_QUESTION_DATA","UPDATED_PROFILE_ANSWER_DATA","UPDATED_PROFILE_COMMENT_DATA","UPDATED_PROFILE_TRANSLATED_DATA","SEND_RESET_PASSWORD_MAIL","RESET_PASSWORD","ACTIVATE_USER","createUserAccount","loginUserJwt","logoutUser","saveUserData","saveUserPassword","updatedUserData","removeUserData","loginSuccess","loginFailed","getUserProfile","getUserByToken","updatedProfileData","preparedAuth","updatedProfileQuestionData","updatedProfileAnswerData","updatedProfileCommentData","updatedProfileTranslatedData","sendResetPasswordMail","activateUser","App","fetchLoginState","children","isPrepared","BrowserRouter","containers_layouts_Header","reapop_lib_default","theme","ScrollToTop","prevProps","scrollTo","withRouter","SignUpForm","mail","test","password","passwordConfirm","SignUp","clickSubmit","users_SignUpForm","onClickSubmit","LoginForm","Login","users_LoginForm","PasswordResetForm","PasswordReset","users_PasswordResetForm","PasswordForm","NewPassword","token","fetchUser","users_PasswordForm","Activate","Stampcard","voteArray","repeatNum","tableContents","slice","rappedContents","Profile","userId","fetchUserProfile","voteLists","Math","ceil","stampCardNum","addArrayNum","stampcard","components_Stampcard","unshift","comment","translates","link","translation_link","translatedContentArray","_loop","_Object$entries","_i3","slicedToArray","entries","getCommentList","translateArray","filterTranslatedContent","getTranslatedList","profile","userPostList","voteTables","getVoteList","ProfileForm","image_url","file","files","URL","webkitURL","createObjectURL","imagePreview","image","uk-form-custom","handleImageChange","disabled","clickedSaveButton","users_ProfileForm","UserOnly","guestWillTransfer","context","router","nextProps","Route","contextTypes","PropTypes","object","isRequired","GuestOnly","userWillTransfer","replace","locales","ja","messages","_ja_JP","titles.sign_up","titles.login","titles.activate","titles.password_reset","titles.question_list","titles.answer_list","titles.post_list","titles.translation_list","titles.not_translated_list","titles.profile_edit.user_name","titles.profile_edit.birthplace","titles.profile_edit.profile","titles.profile_edit.user_image","titles.profile.edit","titles.profile.votes","titles.question.edit","titles.question.delete","titles.question.return","messages.empty_answers","messages.birthplace","messages.you_are_not_target","messages.enter_mail","messages.enter_new_password","messages.activate_completed","links.to_not_translated_list","links.edit","links.question","links.answer","links.comment","links.translate","links.profile","links.profile_edit","links.sign_up","links.login","links.logout","links.password_reset","links.to_question_view","languages.japanese","languages.english","countries.japan","countries.usa","countries.philippines","countries.england","countries.newzealand","categories.all","categories.comic_anime","categories.culture","categories.tourism","categories.music","errors.questions.content","errors.questions.country_id","errors.questions.translate_language_id","errors.questions.category_id","errors.answers.content","errors.answers.translate_language_id","errors.comments.content","errors.comments.translate_language_id","errors.translations.content","errors.translations.translate_language_id","errors.sign_ups.name","errors.sign_ups.mail","errors.sign_ups.country","errors.sign_ups.appropriate_mail","errors.sign_ups.password","errors.sign_ups.confirm_password","errors.login.mail","errors.login.appropriate_mail","errors.login.password","errors.profile_edit.country","placeholders.sign_ups.name","placeholders.sign_ups.mail","placeholders.sign_ups.country","placeholders.sign_ups.password","placeholders.sign_ups.confirm_password","placeholders.login.mail","placeholders.login.password","placeholders.questions.content","placeholders.questions.country_id","placeholders.questions.translate_language_id","placeholders.questions.category_id","placeholders.questions.submit_btn","placeholders.answers.content","placeholders.answers.translate_language_id","placeholders.answers.submit_btn","placeholders.comments.content","placeholders.comments.translate_language_id","placeholders.comments.submit_btn","placeholders.translations.content","placeholders.translations.translate_language_id","placeholder.profile_edit.profile","placeholder.profile_edit.country","placeholder.profile_edit.nickname","buttons.title.reply","buttons.title.post","buttons.title.sign_up","buttons.title.login","buttons.title.send","buttons.profile_edit.select","buttons.profile_edit.save","translated.name","translated.state","en","_en_US","categories","all","comic_anime","culture","tourism","music","sorts","answerMany","answerFew","Asc","Des","savedLocale","getItem","initialState","signUp","mnemonic","hash","jwt","currentCommentList","voteTranslations","reducer","combineReducers","arguments","action","_locales$action$paylo","payload","objectSpread","_categories$action$pa","_sorts$action$payload","_action$payload","notifications","notificationsReducer","axios","post","username","headers","Content-Type","Authorization","resetPassword","put","saveUserProfile","FormData","append","getUser","get","deleteQuestionData","delete","apiUrl","fetchAnswerListWithQuestion","deleteAnswerData","fetchCommentWithUserList","fetchCommentsList","fetchComment","fetchCommentListWithAnswer","postCommentData","deleteCommentData","fetchContentTranslation","notifySuccess","notify","position","dismissAfter","notifyError","loginUserAccount","loginUserAccountJwt","logoutUserAccount","regenerator_default","wrap","_context","prev","next","api","sent","t0","stop","_marked","_context2","_marked2","_context3","_marked3","_context4","removeItem","_marked4","_context5","_marked5","_context6","_marked6","_context7","select","_marked7","questionParams","questionPayload","answerParams","answerPayload","commentParams","commentPayload","translateParams","translatedContent","_context8","_marked8","_context9","_marked9","_context10","_marked10","userSagas","takeEvery","handleFetchQuestionById","postQuestion","Question_marked","Question_marked2","Question_marked3","Question_marked5","Question_marked6","questionSagas","handleFetchAnswerData","postAnswer","fetchSingleAnswerData","act","Answer_marked","reset","Answer_marked2","Answer_marked3","_action$payload2","Answer_marked4","_action$payload3","Answer_marked5","answerSagas","handleFetchQuestionTranslationList","handleFetchQuestionTranslationById","postQuestionTranslation","QuestionTranslation_marked","QuestionTranslation_marked2","QuestionTranslation_marked3","QuestionTranslation_marked4","QuestionTranslation_marked5","questionTranslationSagas","handleFetchAnswerTranslationList","handleFetchAnswerTranslationById","postAnswerTranslation","AnswerTranslation_marked","AnswerTranslation_marked2","AnswerTranslation_marked3","AnswerTranslation_marked4","AnswerTranslation_marked5","answerTranslationSagas","saveComment","Comment_marked","act2","answerSaga","Comment_marked2","Comment_marked3","Comment_marked4","commentSagas","handleFetchCommentTranslationList","handleFetchCommentTranslationById","postCommentTranslation","CommentTranslation_marked","CommentTranslation_marked2","CommentTranslation_marked3","CommentTranslation_marked4","CommentTranslation_marked5","commentTranslationSagas","fetchNotTranslatedQuestions","fetchNotTranslatedAnswers","fetchNotTranslatedComments","NotTranslatedList","NotTranslated_marked","NotTranslatedSagas","postVotes","deleteVotes","abrupt","t1","Votes_marked2","_data","Votes_marked3","voteSagas","VoteTranslation_marked","VoteTranslation_marked2","voteTranslationSagas","Notification_marked","notificationSagas","rootSaga","toConsumableArray","rootSaga_marked","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createHistory","ReactGA","initialize","listen","pathname","routingMiddleware","routerMiddleware","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","thunkMiddleware","logger","run","getState","addLocaleData","library","add","fas","far","ReactDOM","es","index_es","containers_App","layouts_ScrollToTop","Switch","exact","path","onEnter","auth_UserOnly","ProfileEdit","auth_GuestOnly","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.653d336f.chunk.js","sourcesContent":["import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_QUESTION_LIST = Symbol('FETCH_QUESTION_LIST');\nexport const FETCH_QUESTION = Symbol('FETCH_QUESTION');\nexport const POST_QUESTION_DATA = Symbol('POST_QUESTION_DATA');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATE_CURRENT_TRANSLATE_LANGUAGE = Symbol('UPDATE_CURRENT_TRANSLATE_LANGUAGE');\nexport const SAVE_QUESTION_DATA = Symbol('SAVE_QUESTION_DATA');\nexport const UPDATED_QUESTION_DATA = Symbol('UPDATED_QUESTION_DATA');\nexport const DELETE_QUESTION = Symbol('DELETE_QUESTION');\n\n\n//createAction(FETCH_QUESTION_LIST)はFETCH_QUESTION_LISTという名前でアクションを発火させる。\nexport const fetchQuestionList = createAction(FETCH_QUESTION_LIST);\nexport const fetchQuestion = createAction(FETCH_QUESTION);\nexport const postQuestionData = createAction(POST_QUESTION_DATA);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updateCurrentTranslateLanguage = createAction(UPDATE_CURRENT_TRANSLATE_LANGUAGE);\nexport const saveQuestionData = createAction(SAVE_QUESTION_DATA);\nexport const updatedQuestionData = createAction(UPDATED_QUESTION_DATA);\nexport const deleteQuestion = createAction(DELETE_QUESTION);\n\n","'use strict';\n\nexport const getFilteredContents = (contentList, translateLanguageId, contentType) => {\n  const filteredContents = contentList.filter((v) => {\n    if (v.translate_language_id === translateLanguageId) {\n      return true ;\n    }\n\n    const targetTranslationsNum = v[contentType].filter((v) => {\n      return (v.translate_language_id === translateLanguageId);\n    }).length;\n    return (targetTranslationsNum !== 0);\n  });\n  return filteredContents;\n};\n\nexport const getTranslatedContents = (contentList, translateLanguageId, contentType) => {\n  const translatedContents = contentList.map((v) => {\n    if (v.translate_language_id === translateLanguageId) {\n        v.dispText = v.content;\n        return v;\n    }\n\n    const translation = v[contentType].filter(v => {\n      return (v.translate_language_id === translateLanguageId);\n    })[0];\n\n    v.dispText = translation.content;\n    return v;\n\n  });\n\n  return translatedContents;\n};","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\n\nclass Translator extends Component {\n\n  render() {\n    const { user } = this.props;\n    const { name, image_path, profile_link } = user;\n    const { formatMessage } = this.props.intl;\n    const msg = formatMessage({id: \"translated.name\"});\n\n    return (\n      <div className=\"uk-text-right\">\n        <div className=\"uk-comment-meta uk-display-inline-block\" style={{padding: '0 10px'}}>{ msg }</div>\n        <div className=\"uk-display-inline-block\">\n          <Link to={profile_link}>\n            <img className=\"uk-comment-avatar uk-border-circle uk-text-right\" src={image_path} width=\"35\" height=\"35\" alt={name} />\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(Translator);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const POST_VOTE = Symbol('POST_VOTE');\nexport const DELETE_VOTE = Symbol('DELETE_VOTE');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\n\n//createAction(FETCH_QUESTION_LIST)はFETCH_QUESTION_LISTという名前でアクションを発火させる。\nexport const postVote = createAction(POST_VOTE);\nexport const deleteVote = createAction(DELETE_VOTE);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass PostUser extends Component {\n  \n    selectedNationalFlag(countryId) {\n        let src;\n        switch(countryId) {\n            case 1:\n                src = \"japan\";\n                break;\n            case 2:\n                src = \"usa\";\n                break;\n            case 3:\n                src = \"philippines\";\n                break;\n            case 4:\n                src = \"england\";\n                break;\n            case 5:\n                src = \"newzealand\";\n                break;\n            default :\n                src = \"japan\";\n                break;\n        }\n        return <img className=\"\" src={`/image/common/flag/${src}.png`} style={{border: \"1px solid #dcdcdc\"}} width=\"20\" height=\"20\" alt=\"\"/>;\n    }\n\n    render() {\n        const { user } = this.props;\n        const nationalFlag = this.selectedNationalFlag(user.country_id);\n        const userName = user ? user.name : '不明なユーザー';\n        const profileLink = `/users/profile/${user.id}`;\n\n        return (\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n                <div className=\"uk-width-auto\">\n                    <Link to={profileLink}><img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"43\" height=\"43\" alt=\"\" /></Link>\n                </div>\n                <div>\n                <div className=\"uk-width-auto\" >\n                    { nationalFlag }\n                </div>\n                    <div>\n                        <h4 className=\"uk-comment-meta uk-margin-remove\"><Link className=\"\" to={profileLink}>{ userName }</Link></h4>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PostUser;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass PostIcons extends Component {\n    render() {\n        const { \n            user, \n            loginUser, \n            votes, \n            sendData, \n            deleteData,\n            editLink,\n            translateLink,\n            onClickSendVote,\n            onClickDeleteVote,\n            translate\n        } = this.props;\n        \n        const editLinkButton = user.id === loginUser.id\n                        ? <Link className=\"uk-margin-small-right\" to={editLink}><FontAwesomeIcon icon=\"edit\" color=\"steelblue\" size=\"lg\"/></Link>\n                        : '';\n\n        const myVotes = votes.filter(v => {return v.user_id === loginUser.id});\n        const voteState = myVotes.length !== 0;\n\n        let votebutton\n        if (voteState) {\n        votebutton = (\n            <a onClick={onClickDeleteVote.bind(this, deleteData, loginUser.id)}>\n            <FontAwesomeIcon icon=\"heart\" color=\"red\" size=\"lg\"/>\n            </a>\n        );\n        } else {\n        votebutton = (\n            <a onClick={onClickSendVote.bind(this, sendData, loginUser.id)}>\n            <FontAwesomeIcon icon={['far','heart']} color=\"gray\"  size=\"lg\"/>\n            </a>\n        );\n        }\n        const voteNumbers = <span className=\"uk-margin-small-right uk-text-default\">{ votes.length }</span>;\n\n        const translateButton = translate === true\n                            ?<Link to={translateLink}><FontAwesomeIcon icon=\"globe-americas\" color=\"steelblue\" size=\"lg\"/></Link>\n                            :\"\";\n\n        return (\n            <div>\n                { votebutton }\n                { voteNumbers }\n                { editLinkButton }\n                { translateButton }\n            </div>\n        );\n  }\n}\n\nexport default PostIcons;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass PostAnswerCount extends Component {\n    render() {\n        const { reply } = this.props;\n\n        const commentCount = reply.reduce(\n            function (accumulator, currentValue) {\n                return accumulator.comments.length + currentValue.comments.length;\n            }\n        );\n\n        const replyState = <FontAwesomeIcon icon={['fas','reply']} color=\"steelblue\" size=\"1x\"/> ;\n        const replyCount = reply.length;\n        const commentState = <FontAwesomeIcon className=\"uk-margin-left\" icon={['far','comment-dots']} color=\"steelblue\" size=\"1x\"/> ;\n\n        return (\n            <div className=\"uk-margin-left\">\n                    { replyState }\n                    { replyCount }\n                    { commentState }\n                    { commentCount }\n            </div>\n        );\n  }\n}\n\nexport default PostAnswerCount;\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { getFilteredContents, getTranslatedContents } from '../utils/Translations';\nimport { injectIntl } from 'react-intl';\nimport { sprintf } from 'sprintf-js';\nimport Translator from './Translator';\n//componentの中でdispatchするための設定\nimport { connect } from 'react-redux';\n//評価するための関数\nimport { postVote, deleteVote } from '../actions/Vote';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\nimport PostAnswerCount from './PostAnswerCount';\n\nclass QuestionListView extends Component {\n\n  sendVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handleDeleteVote(data);\n  }\n\n  categoryFilteredContents(array, id) {\n\n    const CREATED_ALL = 0;\n    const CREATED_COMIC_ANIME = 1;\n    const CREATED_CULTURE = 2;\n    const CREATED_TOURISM = 3;\n    const CREATED_MUSIC = 4;\n\n    switch(id) {\n      case CREATED_ALL :\n        return array;\n      case CREATED_COMIC_ANIME :\n      case CREATED_CULTURE :\n      case CREATED_TOURISM :\n      case CREATED_MUSIC :\n        return array.filter((e)=>{\n          return e.category_id === id;\n        });\n      default:\n        return [];\n        break;\n    }\n  }\n\n  sortFilteredContents(array, id) {\n    const CREATED_ANSWER_MANY = 1;\n    const CREATED_ANSWER_FEW = 2;\n    const CREATED_CREATED_ASC = 3;\n    const CREATED_CREATED_DES = 4;\n\n    let editArray = [];\n\n    array.forEach(function(value) {\n      let a \n      a = {\n        \"num\" : value.answers.length,\n        \"array\": value\n      };\n      editArray.push(a);\n    });\n\n    switch(id) {\n      case CREATED_ANSWER_MANY :\n        return editArray.sort(function(a,b) {\n            return (a.num < b.num ? 1 : -1);\n          }).map((e)=>{ return e.array});\n      case CREATED_ANSWER_FEW :\n        return editArray.sort(function(a,b) {\n          return (a.num > b.num ? 1 : -1);\n        }).map((e)=>{ return e.array})\n      case CREATED_CREATED_ASC :\n        return array.sort(function(a,b) {\n          return (a.created_at < b.created_at ? 1 : -1);\n        });\n      case CREATED_CREATED_DES :\n        return array.sort(function(a,b) {\n          return (a.created_at > b.created_at ? 1 : -1);\n        });\n      default:\n        return [];\n    }\n  }\n\n  getQuestionList(questionArray, translateLanguageId, categoryId, sortId) {\n\n    const contentType = 'question_translations';\n    const filteredQuestions = getFilteredContents(questionArray, translateLanguageId, contentType);\n    const translatedQuestions = getTranslatedContents(filteredQuestions, translateLanguageId, contentType);\n    const categoryQuestions = this.categoryFilteredContents(translatedQuestions, categoryId);\n    const sortQuestions = this.sortFilteredContents(categoryQuestions, sortId);\n\n    return sortQuestions.map(question => {\n      const { user } = question;\n      const { formatMessage } = this.props.intl\n      const { answers } = question;\n      const { votes } = question;\n\n      const key = \"questionList\";\n      const sendVoteParams = {\n          user_id: this.props.user.id,\n          question_id: question.id,\n          answer_id: null,\n          comment_id: null,\n          status: 1,\n      };\n      const deleteVoteParams = {\n          user_id: this.props.user.id,\n          key : \"question\",\n          vote_id: question.id,\n      };\n      const sendData = { sendVoteParams,  key };\n      const deleteData = { deleteVoteParams,  key };\n\n      const { question_translations } = question;\n      let translator;\n      translator = (\n        <h4 className=\"uk-comment-meta uk-text-right\">\n          { formatMessage({id: \"translated.state\" })}\n        </h4>\n      );\n      if (question_translations.length !== 0) {\n        const { user } = question_translations[0];\n        translator = <Translator user={user} />;\n      }\n\n      let contentCount =\"\";\n      if ( answers.length !==0 ) {\n        contentCount = <PostAnswerCount reply={ answers } />\n      };\n\n      return (\n        <li key={question.id} >\n          <p>\n            <span className=\"uk-text-muted\">{ formatMessage({id: question.category.intl_key })}</span>\n            <span className=\"uk-text-meta uk-margin-small-left\">{dayjs(question.created_at).format('YYYY/MM/DD HH:mm:ss')}</span>\n          </p>\n          <p className=\"uk-text-lead uk-text-truncate\" ><Link to={`/questions/${question.id}`}>{`${question.dispText}`}</Link></p>\n          <div className=\"button-area uk-margin-bottom\" >\n          <PostIcons \n              //コンテンツのユーザー\n              user = { user } \n              //ログインユーザー\n              loginUser = { this.props.user  } \n              votes = { votes }\n              sendData = { sendData }\n              deleteData = { deleteData }\n              editLink = {`/questions/edit/${question.id}`}\n              translateLink = {`/question_translations/${question.id}`}\n              onClickSendVote = {this.sendVote.bind(this)}\n              onClickDeleteVote = {this.deleteVote.bind(this)}\n              translate = { true }\n          />\n          </div>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div>\n              <PostUser user={user} />\n            </div>\n            <div>\n              { contentCount }\n            </div>\n            <div className=\"uk-width-expand\" >\n              { translator }\n            </div>\n          </div>\n        </li>\n      )\n    });\n  }\n\n  getQuestionListView(questionArray, translateLanguageId, categoryId, sortId) {\n    const questionList = this.getQuestionList(questionArray, translateLanguageId, categoryId, sortId);\n\n    return (\n      <div>\n        <ul className=\"uk-list uk-list-divider uk-list-large\">\n          {questionList}\n        </ul>\n      </div>\n    );\n  }\n\n  render() {\n    const { questionArray, translateLanguageId, categoryId, sortId } = this.props;\n    const content = this.getQuestionListView(questionArray, translateLanguageId, categoryId, sortId);\n\n    return (\n      <div>\n        {content}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  const { categoryId } = state.ctgr;\n  const { sortId } = state.sort;  \n  const { intl } = state;\n\n  return {\n    user,\n    categoryId,\n    sortId,\n    intl\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    //評価機能\n    handlePostVote: (data) => dispatch(postVote(data)),\n    handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(QuestionListView));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport QuestionListView from './QuestionListView';\n\nclass QuestionList extends Component {\n\n  componentDidMount() {\n    const { questionArray } = this.props.state.questions;\n    const categoryId = this.props.state.ctgr.categoryId;\n\n    if (questionArray.length !== 0) {\n      return;\n    }\n\n    let params \n    params = {};\n    if (categoryId !== 0){\n      params = { category_id: categoryId };\n    }\n    this.props.handleFetchData(params);\n  }\n\n  render() {\n    const { isFetching, questionArray } = this.props.state.questions;\n    const { translateLanguageId } = this.props.state.intl;\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    return (\n      <QuestionListView questionArray={questionArray} translateLanguageId={translateLanguageId} loginUser={this.props.state.auth.user.id}/>\n    );\n  }\n}\n\nexport default QuestionList;\n","import { connect } from 'react-redux';\nimport { fetchQuestionList } from '../actions/Question';\nimport QuestionList from '../components/QuestionList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (queryData) => dispatch(fetchQuestionList(queryData)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionList);\n","import React, { Component } from 'react';\nimport { Field } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass LanguageFormSelect extends Component {\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { name, placeholder } =  this.props;\n\n    return (\n      <Field name={name} component=\"select\" className={'form-control uk-select'}>\n        <option value=\"\">{placeholder}</option>\n        <option value=\"1\" >{ formatMessage({id: \"languages.japanese\" })}</option>\n        <option value=\"2\" >{ formatMessage({id: \"languages.english\" })}</option>\n      </Field>\n    );\n  }\n}\n\nexport default injectIntl(LanguageFormSelect);\n","import React, { Component } from 'react';\nimport { Field } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass CategoryFormSelect extends Component {\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { name, placeholder } =  this.props;\n    \n    return (\n      <Field name={name} component=\"select\" className={'form-control uk-select'}>\n        <option value=\"\">{placeholder}</option>\n        <option value=\"1\" >{ formatMessage({id: \"categories.comic_anime\" })}</option>\n        <option value=\"2\" >{ formatMessage({id: \"categories.culture\" })}</option>\n        <option value=\"3\" >{ formatMessage({id: \"categories.tourism\" })}</option>\n        <option value=\"4\" >{ formatMessage({id: \"categories.music\" })}</option>\n      </Field>\n    );\n  }\n}\n\nexport default injectIntl(CategoryFormSelect);\n","import React, { Component } from 'react';\nimport { Field } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass CountryFormSelect extends Component {\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { id, name, placeholder } =  this.props;\n\n    return (\n      <Field id={id} name={name} component=\"select\" className={'form-control uk-select'}>\n        <option value=\"\">{placeholder}</option>\n        <option value=\"1\" >{ formatMessage({id: \"countries.japan\" })}</option>\n        <option value=\"2\" >{ formatMessage({id: \"countries.usa\" })}</option>\n        <option value=\"3\" >{ formatMessage({id: \"countries.philippines\" })}</option>\n        <option value=\"4\" >{ formatMessage({id: \"countries.england\" })}</option>\n        <option value=\"5\" >{ formatMessage({id: \"countries.newzealand\" })}</option>\n      </Field>\n    );\n  }\n}\n\nexport default injectIntl(CountryFormSelect);","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport CategoryFormSelect from './CategoryFormSelect';\nimport { injectIntl } from 'react-intl';\nimport { Persist } from 'formik-persist';\nimport CountryFormSelect from './CountryFormSelect';\n\nclass QuestionForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = \"errors.questions.content\";\n    }\n    if (!values.country_id) {\n      errors.country_id  = \"errors.questions.country_id\";\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = \"errors.questions.translate_language_id\";\n    }\n    if (!values.category_id) {\n      errors.category_id = \"errors.questions.category_id\";\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues } = this.props;\n    const { formatMessage } = this.props.intl;\n\n    let persistTab\n    persistTab = \"\";\n    if(this.props.fromName === \"questionForm\"){\n      persistTab = <Persist name={this.props.fromName} />;\n    }\n\n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: 'placeholders.questions.content'})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n                {touched.content && errors.content && <div className=\"uk-text-warning\">{ formatMessage({id: errors.content}) }</div>}\n                {/* {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>} */}\n                { persistTab }\n              </div>\n              <div className=\"uk-margin uk-grid uk-grid-small uk-child-width-expand@s\" >\n                <div className=\"uk-grid-margin\" >\n\n                  <CountryFormSelect \n                  id={'counrty_id'}\n                  name=\"country_id\" \n                  placeholder={formatMessage({id: \"placeholders.questions.country_id\"})} />\n\n                  {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{ formatMessage({id: errors.country_id}) }</div>}\n                  {/* {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{errors.country_id}</div>} */}\n                </div>\n                <div className=\"uk-grid-margin\" >\n                  <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.questions.translate_language_id\"})} />\n                  {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{ formatMessage({id: errors.translate_language_id}) }</div>}\n                  {/* {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>} */}\n                </div>\n\n                <div className=\"uk-grid-margin\" >\n                  <CategoryFormSelect name=\"category_id\" placeholder={formatMessage({id: \"placeholders.questions.category_id\"})} />\n                  {touched.category_id && errors.category_id && <div className=\"uk-text-warning\">{ formatMessage({id: errors.category_id}) }</div>}\n                  {/* {touched.category_id && errors.category_id && <div className=\"uk-text-warning\">{errors.category_id}</div>} */}\n                </div>\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-default\" >{formatMessage({id: \"placeholders.questions.submit_btn\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(QuestionForm);","import React from 'react';\nimport QuestionList from '../containers/QuestionList';\nimport QuestionForm from './QuestionForm';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\n\nclass Home extends React.Component {\n\n  submitQuestionForm(formData) {\n    try {\n      const { user, isLoggedIn } = this.props.state.auth;\n      if (!isLoggedIn) {\n        const { history } = this.props;\n        this.props.alertMessage(\"ログインしてください。\");\n        return history.push(\"/users/login\");\n      }\n      const { content, translate_language_id, country_id, category_id } = formData;\n      const user_id = user.id;\n      const postData = { content, user_id, translate_language_id, country_id, category_id };\n      return this.props.handleSubmit(postData);\n    } catch (e) {\n      console.log('e.message', e.message);\n      return;\n    }\n  }\n\n  selectedCategory(value) {\n    switch(value) {\n      case \"all\" :\n        return 0;\n      case \"comic_anime\":\n        return 1;\n      case \"culture\":\n        return 2;\n      case \"tourism\":\n        return 3;\n      case \"music\":\n        return 4;\n      default:\n        return 0;\n    }\n  }\n\n  selectedSort(value) {\n    switch(value) {\n      case \"answerMany\":\n        return 1;\n      case \"answerFew\":\n        return 2;\n      case \"Asc\":\n        return 3;\n      case \"Des\":\n        return 4;\n      default:\n        return 4;\n    }\n  }\n\n  onChangeLanguage(locale, e) {\n    e.preventDefault();\n    e.stopPropagation();\n    localStorage.setItem('locale', locale);\n    // かなり不適切な書き方だが一旦ここでリダイレクトさせるようにしておく\n    window.location.href = '/';\n    return;\n  }\n\n  changeSortfunction(value){\n    this.props.changeSort(value);\n    let params;\n    params = {};\n    this.props.handleFetchData(params);\n  }\n\n  changeCateogryfunction(value) {\n     this.props.changeCategory(value);\n     let params;\n     params = {};\n     this.props.handleFetchData(params);\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { locale, translateLanguageId } = this.props.state.intl;\n    const { category } = this.props.state.ctgr;\n    const { sort } = this.props.state.sort;\n    const { auth } = this.props.state;\n    const questionFormInitVals = {\n      content: '',\n      country_id: '',\n      translate_language_id: '',\n      category_id: ''\n    };\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-width-auto uk-margin-bottom uk-text-right\" >\n          <span>\n            <a href=\"/\" onClick={this.onChangeLanguage.bind(this, 'ja')} >\n              日本語\n            </a>\n          </span>\n          <span className=\"uk-margin-small-left\">\n            <a href=\"/\" onClick={this.onChangeLanguage.bind(this, 'en')} >\n              English\n            </a>\n          </span>\n        </div>\n        <QuestionForm initialValues={questionFormInitVals} loginUser={auth} onSubmit={this.submitQuestionForm.bind(this)} formName=\"questionForm\"/>\n        {/* 言語切り替え */}\n        <h3 className=\"uk-heading-line\"><span>{ formatMessage({id: \"titles.question_list\" })}</span></h3>\n        <div className=\"uk-margin uk-grid uk-grid-small uk-child-width-expand@s\" >\n          {/* カテゴリー切り替え */}\n          <div className=\"uk-grid-margin\" >\n            <select className=\"uk-select\" value={category} onChange={e => this.changeCateogryfunction( e.target.value )} >\n              <option value=\"all\" >{ formatMessage({id: \"categories.all\" })}</option>\n              <option value=\"comic_anime\" >{ formatMessage({id: \"categories.comic_anime\" })}</option>\n              <option value=\"culture\" >{ formatMessage({id: \"categories.culture\" })}</option>\n              <option value=\"tourism\" >{ formatMessage({id: \"categories.tourism\" })}</option>\n              <option value=\"music\" >{ formatMessage({id: \"categories.music\" })}</option>\n            </select>\n          </div>\n          {/* ソート */}\n          <div className=\"uk-grid-margin\" >\n            <select className=\"uk-select\" value={sort} onChange={e => this.changeSortfunction( e.target.value )} >\n              <option value=\"answerMany\" >{ formatMessage({id: \"sort.answerMany\" })}</option>\n              <option value=\"answerFew\" >{ formatMessage({id: \"sort.answerFew\" })}</option>\n              <option value=\"Asc\" >{ formatMessage({id: \"sort.Asc\" })}</option>\n              <option value=\"Des\" >{ formatMessage({id: \"sort.Des\" })}</option>\n            </select>\n          </div>\n        </div>\n        <QuestionList translate_language_id={translateLanguageId}/>\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(Home);","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const UPDATE_CURRENT_LANGUAGE = Symbol('UPDATE_CURRENT_LANGUAGE');\n\n\nexport const updateCurrentLanguage = createAction(UPDATE_CURRENT_LANGUAGE);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const UPDATE_CURRENT_CATEGORY = Symbol('UPDATE_CURRENT_CATEGORY');\nexport const updateCurrentCategory = createAction(UPDATE_CURRENT_CATEGORY);","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const UPDATE_CURRENT_SORT = Symbol('UPDATE_CURRENT_SORT');\nexport const updateCurrentSort = createAction(UPDATE_CURRENT_SORT);","import { createAction } from 'redux-actions';\n\nexport const ACTION_ALERT_MESSAGE = Symbol('ACTION_ALERT_MESSAGE');\n\nexport const actionAlertMessage = createAction(ACTION_ALERT_MESSAGE);\n\n","import { connect } from 'react-redux';\nimport Home from '../components/Home';\nimport {\n  postQuestionData,\n  fetchQuestionList\n} from '../actions/Question';\nimport {\n  updateCurrentLanguage,\n} from '../actions/Intl';\nimport {\n  updateCurrentCategory,\n} from '../actions/Category';\nimport {\n  updateCurrentSort,\n} from '../actions/Sort';\nimport {\n  actionAlertMessage,\n} from '../actions/Notification';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleSubmit: (postData) => dispatch(postQuestionData(postData)),\n    changeLanguage: (locale) => dispatch(updateCurrentLanguage(locale)),\n    changeCategory: (category) => dispatch(updateCurrentCategory(category)),\n    changeSort: (sort) => dispatch(updateCurrentSort(sort)),\n    handleFetchData: (queryData) => dispatch(fetchQuestionList(queryData)),\n    alertMessage: (message) => dispatch(actionAlertMessage(message)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\n//<AnswerForm qId={this.qId} initialValues={answerFormInitVals} onSubmit={this.handleSubmit.bind(this)} />\n//この中のqId={this.qId} initialValues={answerFormInitVals} onSubmit={this.handleSubmit.bind(this)は\n//props（プロパティーの中に)入る。props.qIdという形式で値を取り出すことができる。\n\nclass AnswerForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.answers.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.answers.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues } = this.props;\n    const { formatMessage } = this.props.intl;\n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: 'placeholders.answers.content'})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n                {touched.content && errors.content && <div className=\"uk-text-warning\" >{errors.content}</div>}\n              </div>\n              <div className=\"uk-grid-margin\" >\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: 'placeholders.answers.translate_language_id'})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\" >{errors.translate_language_id}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"placeholders.answers.submit_btn\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(AnswerForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const CHANGE_ANSWER_FORM_CONTENT = Symbol('CHANGE_ANSWER_FORM_CONTENT');\nexport const FETCH_ANSWER_LIST = Symbol('FETCH_ANSWER_LIST');\nexport const FETCH_ANSWER = Symbol('FETCH_ANSWER');\nexport const POST_ANSWER_DATA = Symbol('POST_ANSWER_DATA');\nexport const INITIALIZE_FORM = Symbol('INITIALIZE_FORM');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const SAVE_ANSWER_DATA = Symbol('SAVE_ANSWER_DATA');\nexport const DELETE_ANSWER = Symbol('DELETE_ANSWER');\n\nexport const changeAnswerFormContent = createAction(CHANGE_ANSWER_FORM_CONTENT);\nexport const fetchAnswerList = createAction(FETCH_ANSWER_LIST);\nexport const fetchAnswer = createAction(FETCH_ANSWER);\nexport const postAnswerData = createAction(POST_ANSWER_DATA);\nexport const initializeForm = createAction(INITIALIZE_FORM);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const saveAnswerData = createAction(SAVE_ANSWER_DATA);\nexport const deleteAnswer = createAction(DELETE_ANSWER);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_COMMENT_DATA_SUCCESS = Symbol('RECEIVE_COMMENT_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const FETCH_SINGLE_COMMENT = Symbol('FETCH_SINGLE_COMMENT');\nexport const FETCH__COMMENT_WITH_USER_LIST = Symbol('FETCH__COMMENT_WITH_USER_LIST');\nexport const POST_COMMENT = Symbol('POST_COMMENT');\nexport const UPDATE_COMMENT = Symbol('UPDATE_COMMENT');\nexport const UPDATED_COMMENT_DATA = Symbol('UPDATED_COMMENT_DATA');\nexport const UPDATED_SINGLE_COMMENT_DATA = Symbol('UPDATED_SINGLE_COMMENT_DATA');\nexport const SAVE_COMMENT_DATA = Symbol('SAVE_COMMENT_DATA');\nexport const DELETE_COMMENT = Symbol('DELETE_COMMENT');\nexport const UPDATED_COMMENT_ARRAY = Symbol('UPDATED_COMMENT_ARRAY');\n\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveCommentDataSuccess = createAction(RECEIVE_COMMENT_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const postComment = createAction(POST_COMMENT);\nexport const fetchSingleComment = createAction(FETCH_SINGLE_COMMENT);\nexport const fetchCommentWithUserList = createAction(FETCH__COMMENT_WITH_USER_LIST);\nexport const updateComment = createAction(UPDATE_COMMENT);\nexport const updatedCommentData = createAction(UPDATED_COMMENT_DATA);\nexport const updatedSingleCommentData = createAction(UPDATED_SINGLE_COMMENT_DATA);\nexport const deleteComment = createAction(DELETE_COMMENT);\nexport const saveCommentData = createAction(SAVE_COMMENT_DATA);\nexport const updatedCommentArray = createAction(UPDATED_COMMENT_ARRAY);\n\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\n//componentの中でdispatchするための設定\nimport { connect } from 'react-redux';\n//評価するための関数\nimport { postVote, deleteVote } from '../actions/Vote';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { sprintf } from 'sprintf-js';\nimport { injectIntl } from 'react-intl';\nimport Translator from './Translator';\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass Comment extends Component {\n\n  sendVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(data, user_id) {\n      if (user_id == null) {\n          return;\n      }\n      return this.props.handleDeleteVote(data);\n  }\n\n  render() {\n    const { id, user, content, isOwner, voteList, questions, commentUser, comments, answerId, intl} = this.props;\n    const currentQuestionId = questions.currentQuestion.id;\n\n    const { formatMessage } = intl;\n    const { commentArray } = comments;\n\n    const key = \"comment\";\n    const sendVoteParams = {\n      user_id: this.props.user.id,\n      question_id: null,\n      answer_id: null,\n      comment_id: id,\n      status: 1,\n      //再レンダリングするためのquestion_id\n      questionId: currentQuestionId,\n    };\n    const deleteVoteParams = {\n      user_id: this.props.user.id,\n      key : \"comment\",\n      //他のコンテンツと共通化するためvote_idというkeyにする\n      vote_id: id,\n      //再レンダリングするためのquestion_id\n      questionId: currentQuestionId,\n    };\n    const sendData = { sendVoteParams,  key };\n    const deleteData = { deleteVoteParams,  key };\n\n    let translator;\n    translator = <h4 className=\"uk-comment-meta uk-text-right\">{formatMessage({id: 'translated.state'})}</h4>;\n    if(typeof commentArray !== 'undefined'){\n      const thisAnswerCommentList = commentArray[answerId] ;\n      const thisCommentData = thisAnswerCommentList.filter(v => v.id === id);\n      const commentTranslated = thisCommentData[0].comment_translations;\n      if (commentTranslated.length !== 0) {\n        const { user } = commentTranslated[0];\n        translator = <Translator user={user} />;\n      }\n    }\n\n    return (\n      <article className=\"uk-comment uk-comment-primary\">\n        <div className=\"uk-comment-header uk-comment-body\">\n          <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n            {content}\n            <br/>\n            <br/>\n            <PostIcons \n                //コンテンツのユーザー\n                user = { user } \n                //ログインユーザー\n                loginUser = { this.props.user } \n                votes = { voteList }\n                sendData = { sendData }\n                deleteData = { deleteData }\n                editLink = {`/comments/edit/${id}`}\n                translateLink = {`/comment_translations/${id}`}\n                onClickSendVote = {this.sendVote.bind(this)}\n                onClickDeleteVote = {this.deleteVote.bind(this)}\n                translate = { true }\n            />\n\n          </p>\n        </div>\n        <div className=\"uk-grid uk-grid-small uk-flex-middle\">\n          <div>\n            <PostUser user={ commentUser } />\n          </div>\n          <div className=\"uk-width-expand\" >\n            { translator }\n          </div>\n        </div>\n      </article>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { questions, comments } = state;\n  const { user } = state.auth;\n  const { intl } = state;\n  return {\n    user,\n    questions,\n    comments,\n    intl,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    //評価機能\n    handlePostVote: (data, questionId) => dispatch(postVote(data, questionId)),\n    handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(Comment))\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Comment from './Comment';\nimport { getFilteredContents, getTranslatedContents } from '../utils/Translations';\n\n\nclass CommentList extends Component {\n\n  render() {\n    const { loginUser, translateLanguageId } = this.props;\n    const commentList = this.props.list ? this.props.list : [];\n    const contentType = 'comment_translations';\n    const filteredCommentList = getFilteredContents(commentList, translateLanguageId, contentType);\n    const translatedCommentList = getTranslatedContents(filteredCommentList, translateLanguageId, contentType);\n\n    return (\n      <ul className=\"uk-comment-list\" >\n        { translatedCommentList.map((v, i) => {\n            const isOwner = loginUser.id === v.user.id;\n            const voteState = v.votes;\n\n            return (\n              <li className=\"uk-margin-small-top\" key={i} >\n                <Comment id={v.id} answerId={v.answer_id} commentUser={v.user} content={v.dispText} isOwner={isOwner} voteList={ voteState } />\n              </li>\n            );\n        })}\n      </ul>\n    );\n  }\n}\n\nexport default CommentList;\n","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { Persist } from 'formik-persist';\nimport { injectIntl } from 'react-intl';\n\nclass CommentForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.comments.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.comments.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues, state } = this.props;\n    const { formatMessage } = this.props.intl;\n    const buttonStr = formatMessage({id: 'placeholders.comments.submit_btn'});\n    const postButton = state.auth.isLoggedIn\n                     ? <div className=\"uk-margin\"><button className=\"uk-button uk-button-default\" >{buttonStr}</button></div>\n                     : <a class=\"uk-button uk-button-default\" href='/users/login'>{buttonStr}</a>;\n\n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: 'placeholders.comments.content'})}\n                     rows=\"3\"\n                     className={'form-control uk-textarea'}\n                />\n                <Persist name={`\"comment-form\"${values.answer_id}`}/>\n                {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: 'placeholders.comments.translate_language_id'})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n              </div>\n              {postButton}\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    state\n  };\n};\n\nexport default connect(mapStateToProps)(injectIntl(CommentForm));\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport Linkify from 'react-linkify';\nimport CommentList from './CommentList';\nimport CommentForm from './CommentForm';\nimport dayjs from 'dayjs';\nimport { getFilteredContents, getTranslatedContents } from '../utils/Translations';\nimport { injectIntl } from 'react-intl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { sprintf } from 'sprintf-js';\nimport Translator from './Translator';\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass AnswerList extends Component {\n  constructor(props) {\n    super(props);\n    this.qId = this.props.qId;\n    //ここからはコメント機能を実装するところ\n    this.state = {\n      buttonState: {},//空のオブジェクト\n      voteState: {},//評価のための\n    };\n  }\n\n  componentWillMount() {\n    const question_id = this.props.qId;\n    /* const translate_language_id = this.props.translateLanguageId;*/\n    this.props.handleFetchData({ question_id });\n  }\n\n  onClickCommentForm(formData) {\n    const { user } = this.props.state.auth;\n    const { answer_id, translate_language_id, content } = formData;\n    const answerIds = this.props.state.answers.answerArray.map((v) =>{ return v.id })\n    const postData = {\n      user_id: user.id,\n      answer_id,\n      translate_language_id,\n      content,\n      question_id: this.qId,\n      current_translate_language_id: this.translateLanguageId,\n      //翻訳済みコメントのリストを取得するためのAnswer_idリスト\n      answerIdList: answerIds,\n    };\n    return this.props.handlePostComment(postData);\n  }\n\n  getComment(answerId) {\n\n    const { buttonState } = this.state;\n\n    if (buttonState[answerId] !== \"open\") {\n      return \"\";\n    }\n\n    const initialValues = {\n      answer_id: answerId,\n      content: \"\",\n      translate_language_id: \"\",\n    };\n    return (\n      <div className=\"uk-margin-bottom\" style={{\"paddingLeft\": \"30px\"}} >\n        {/*commentFormはコメントを投稿する場所*/}\n        <CommentForm form={`commentForm_${answerId}`} onSubmit={this.onClickCommentForm.bind(this)} initialValues={initialValues} />\n      </div>\n    );\n  }\n\n  onClickReply(answerId) {\n    //値がtrueかfalseか値を取得\n    let { buttonState } = this.state;\n\n    if (buttonState[answerId] && buttonState[answerId] === \"open\") {\n      buttonState[answerId] = \"close\";\n      this.setState({buttonState});\n      return\n    } else {\n      buttonState[answerId] = \"open\";\n      this.setState({buttonState});\n      return\n    }\n  }\n\n  sendVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(data, user_id) {\n      if (user_id == null) {\n          return;\n      }\n      return this.props.handleDeleteVote(data);\n  }\n\n  getAnswerList(answerArray, translateLanguageId) {\n    const { formatMessage } = this.props.intl;\n    const loginUser = this.props.state.auth.user;\n\n    const contentType = 'answer_translations';\n    const filteredAnswers = getFilteredContents(answerArray, translateLanguageId, contentType);\n    const translatedAnswers = getTranslatedContents(filteredAnswers, translateLanguageId, contentType);\n\n\n    return translatedAnswers.map(answer => {\n\n      const { user } = answer;\n      const { votes } = answer;\n\n      const key = \"answer\";\n      const sendVoteParams = {\n        user_id: this.props.state.auth.user.id,\n        question_id: null,\n        answer_id: answer.id,\n        comment_id: null,\n        status: 1,\n        //再レンダリングするためのquestion_id\n        questionId: this.props.qId,\n      };\n      const deleteVoteParams = {\n        user_id: this.props.state.auth.user.id,\n        key : \"answer\",\n        //他のコンテンツと共通化するためvote_idというkeyにする\n        vote_id: answer.id,\n        //再レンダリングするためのquestion_id\n        questionId: this.props.qId,\n      };\n      const sendData = { sendVoteParams,  key };\n      const deleteData = { deleteVoteParams,  key };\n\n      const commentForm = this.getComment(answer.id);\n\n      const { answer_translations } = answer;\n\n      let translator;\n      translator = <h4 className=\"uk-comment-meta uk-text-right\">{formatMessage({id: 'translated.state'})}</h4>;\n      if (answer_translations.length !== 0) {\n        const { user } = answer_translations[0];\n        translator = <Translator user={user} />;\n      }\n\n      return (\n        <li key={answer.id} >\n          <article className=\"uk-comment\">\n            <div className=\"uk-comment-header uk-comment-body\">\n              <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n                <Linkify properties={{ target: '_blank'}} >{answer.dispText}</Linkify>\n                <br/>\n                <br/>\n                <PostIcons \n                    //コンテンツのユーザー\n                    user = { user } \n                    //ログインユーザー\n                    loginUser = { this.props.state.auth.user } \n                    votes = { votes }\n                    sendData = { sendData }\n                    deleteData = { deleteData }\n                    editLink = {`/answers/edit/${answer.id}`}\n                    translateLink = {`/answer_translations/${answer.id}`}\n                    onClickSendVote = {this.sendVote.bind(this)}\n                    onClickDeleteVote = {this.deleteVote.bind(this)}\n                    translate = { true }\n                />\n\n              </p>\n              <p className=\"uk-text-meta\">{dayjs(answer.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n\n            </div>\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n              <div>\n                <PostUser user={ answer.user } />\n              </div>\n              <div className=\"uk-width-expand\" >\n                { translator }\n              </div>\n            </div>\n          </article>\n          <hr className=\"uk-divider-small\" />\n          <div className=\"uk-margin-bottom\" >\n            {/*CommentListはすでに投稿されたコメントの一覧を表示する*/}\n            <CommentList list={answer.comments} loginUser={loginUser} translateLanguageId={translateLanguageId} />\n            <div className=\"uk-text-right uk-margin-top\">\n              <p onClick={this.onClickReply.bind(this,answer.id)}><FontAwesomeIcon icon={['far','comment-dots']} color=\"black\" size=\"2x\"/></p>\n            </div>\n          </div>\n\n          {commentForm}\n\n        </li>\n      );\n    });\n  }\n\n  render() {\n    const { isFetching, answerArray } = this.props.state.answers;\n    const { formatMessage } = this.props.intl;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const { translateLanguageId } = this.props;\n    const answerList = this.getAnswerList(answerArray, translateLanguageId);\n\n    if (answerList.length === 0) {\n      return (\n        <div>\n          <h4 className=\"uk-text-success\">{formatMessage({id: \"messages.empty_answers\"})}</h4>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <ul className=\"uk-list uk-list-divider uk-list-large\" >\n          { answerList }\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(AnswerList);\n","import { connect } from 'react-redux';\nimport { fetchAnswerList } from '../actions/Answer';\nimport { postComment } from '../actions/Comment';\nimport AnswerList from '../components/AnswerList';\n//評価するための関数\nimport { postVote, deleteVote } from '../actions/Vote';\n\n\n\n//this.propsを取得する\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (data) => dispatch(fetchAnswerList(data)),\n        handlePostComment: (data) => dispatch(postComment(data)),\n        //評価機能\n        handlePostVote: (data) => dispatch(postVote(data)),\n        //評価の削除機能\n        handleDeleteVote: (data) => dispatch(deleteVote(data)),\n    };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerList);\n","'use strict';\n\nexport function isEmptyObject(obj) {\n  return !Object.keys(obj).length;\n}\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport Linkify from 'react-linkify';\nimport AnswerForm from './AnswerForm';\nimport AnswerList from '../containers/AnswerList';\nimport dayjs from 'dayjs';\nimport { sprintf } from 'sprintf-js';\nimport { injectIntl } from 'react-intl';\nimport { isEmptyObject } from '../utils';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Translator from './Translator';\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass QuestionView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.qId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getQuestionById(this.qId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      //authの中にあるuserキーに対応するvalueを取り出す。という意味\n      const { user } = this.props.state.auth;\n      //formDataの中のcontent,translate_langugase_idを取り出す\n      const { content, translate_language_id } = formData;\n      const question_id = this.qId;\n      const user_id = user.id;\n      /* const { translate_language_id } = currentQuestion;*/\n      return this.props.handleSubmit({content, question_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  getTranslatedQuestion(question, translateLanguageId) {\n    if (question.translate_language_id === translateLanguageId) {\n      question.dispText = question.content;\n      return question;\n    }\n    const questionTranslation = question.question_translations.filter(question => {\n      //「DBに保存されている言語id」と「画面に表示されている言語」が一致している要素だけを取得する。[0]とすることで最初にフィルタリングされたものを取り出す。\n      return (question.translate_language_id === translateLanguageId);\n    })[0];\n\n    question.dispText = questionTranslation.content;\n    return question;\n  }\n\n  sendVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(data, user_id) {\n      if (user_id == null) {\n          return;\n      }\n      return this.props.handleDeleteVote(data);\n  }\n\n  getAnswerForm(currentQuestion, loginUser) {\n    const { formatMessage } = this.props.intl;\n    const { intl_key } = currentQuestion.country;\n    if (currentQuestion.country_id !== loginUser.country_id) {\n      const temp = formatMessage({id: \"messages.you_are_not_target\"});\n      const message = sprintf(temp, formatMessage({id: intl_key}));\n      return (\n        <div>\n          <p className=\"uk-text-meta\">{message}</p>\n        </div>\n      );\n    }\n\n    const answerFormInitVals = { content: '', translate_language_id: '' };\n    return (\n      <AnswerForm qId={this.qId} initialValues={answerFormInitVals} onSubmit={this.handleSubmit.bind(this)}/>\n    );\n  }\n\n  getTranslateUser(img) {\n    const { formatMessage } = this.props.intl;\n    const msg = formatMessage({id: \"translated.name\"});\n\n    return (\n      <div className=\"uk-text-right\">\n        <div className=\"uk-comment-meta uk-display-inline-block\" style={{padding: '0 10px'}}>{ msg }</div>\n        <div className=\"uk-display-inline-block\">\n          <img className=\"uk-comment-avatar uk-border-circle uk-text-right\" src={img} width=\"35\" height=\"35\" alt=\"\" />\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { currentQuestion } = this.props.state.questions;\n    const { translateLanguageId } = this.props.state.intl;\n    const { formatMessage } = this.props.intl;\n\n    if (isEmptyObject(currentQuestion)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const loginUser = this.props.state.auth.user;\n    const question = this.getTranslatedQuestion(currentQuestion, translateLanguageId);\n    const { user, votes } = currentQuestion;\n    const answerForm = this.getAnswerForm(currentQuestion, loginUser);\n\n    const key = \"questionView\";\n    const sendVoteParams = {\n        user_id: this.props.state.auth.user.id,\n        question_id: currentQuestion.id,\n        answer_id: null,\n        comment_id: null,\n        status: 1,\n    };\n    const deleteVoteParams = {\n        user_id: this.props.state.auth.user.id,\n        key : \"question\",\n        vote_id: currentQuestion.id,\n    };\n    const sendData = { sendVoteParams,  key };\n    const deleteData = { deleteVoteParams,  key };\n\n    const { question_translations } = question;\n    let translator;\n    translator = <h4 className=\"uk-comment-meta uk-text-right\">{formatMessage({id: 'translated.state'})}</h4>;\n    if (question_translations.length !== 0) {\n      const { user } = question_translations[0];\n      translator = <Translator user={user} />;\n    }\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n          <p className=\"uk-text-muted\">{ question.category.category }</p>\n          <p>\n            <Linkify properties={{ target: '_blank'}} >{question.dispText}</Linkify>\n            <br/>\n            <br/>\n            <PostIcons\n              user = { user }\n              loginUser = { loginUser }\n              votes = { votes }\n              sendData = { sendData }\n              deleteData = { deleteData }\n              editLink = {`/questions/edit/${this.qId}`}\n              translateLink = {`/question_translations/${this.qId}`}\n              onClickSendVote = {this.sendVote.bind(this)}\n              onClickDeleteVote = {this.deleteVote.bind(this)}\n              translate = { true }\n            />\n          </p>\n          <p className=\"uk-text-meta\">{dayjs(question.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div>\n              <PostUser user={user} />\n            </div>\n            <div className=\"uk-width-expand\" >\n                { translator }\n            </div>\n          </div>\n        </div>\n\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.answer_list\"})}</span></h3>\n\n        <div className=\"uk-margin-bottom\">\n          { answerForm }\n        </div>\n          <AnswerList qId={this.qId} translateLanguageId={translateLanguageId} />\n        <hr className=\"uk-divider-icon\" />\n\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default injectIntl(QuestionView);\n","import { connect } from 'react-redux';\nimport QuestionView from '../components/QuestionView';\nimport {\n    fetchQuestion\n} from '../actions/Question';\nimport {\n    postAnswerData,\n    fetchAnswerList\n} from '../actions/Answer';\n//評価するための関数\nimport {\n    postVote,\n    deleteVote\n} from '../actions/Vote';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getQuestionById: (id) => dispatch(fetchQuestion(id)),\n        handleSubmit: (postData) => dispatch(postAnswerData(postData)),\n        fetchAnswers: (question_id) => dispatch(fetchAnswerList(question_id)),\n        handlePostVote: (data) => dispatch(postVote(data)),\n        handleDeleteVote: (data) => dispatch(deleteVote(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionView);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport QuestionForm from './QuestionForm';\nimport { isEmptyObject } from '../utils';\nimport { injectIntl } from 'react-intl';\n\nclass QuestionEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.qId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    console.log(\"発火\")\n    this.props.getQuestionById(this.qId);\n  }\n\n  notOwnerWillTransfer(currentQuestion) {\n    const owner = currentQuestion.user;\n    const loginUser = this.props.state.auth.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const question_id = this.qId;\n      /* const { translate_language_id } = currentQuestion;*/\n      const saveData = { content, question_id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        question_id: this.qId,\n        history\n      };\n      return this.props.deleteQuestion(params);\n    } catch (e) {\n      return;\n    }\n  }s\n\n  render() {\n    const { currentQuestion } = this.props.state.questions;\n    const { formatMessage } = this.props.intl;\n\n    if(currentQuestion.length===0){\n      return;\n    };\n\n    if (isEmptyObject(currentQuestion)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentQuestion);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>{ formatMessage({id: \"titles.question.edit\" })}</h2>\n        <QuestionForm initialValues={currentQuestion} onSubmit={this.handleSubmit.bind(this)}/>\n        <p><button className=\"uk-button uk-button-danger\" onClick={this.onClickDeleteBtn.bind(this)}>{ formatMessage({id: \"titles.question.delete\" })}</button></p>\n        <Link to=\"/\">{ formatMessage({id: \"titles.question.return\" })}</Link>\n      </main>\n    );\n  }\n}\n\nexport default injectIntl(QuestionEdit);","import { connect } from 'react-redux';\nimport QuestionEdit from '../components/QuestionEdit';\nimport {\n  fetchQuestion,\n  saveQuestionData,\n  deleteQuestion,\n} from '../actions/Question';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestionById: (id) => dispatch(fetchQuestion(id)),\n    handleSubmit: (postData) => dispatch(saveQuestionData(postData)),\n    deleteQuestion: (conditions) => dispatch(deleteQuestion(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionEdit);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const CHANGE_QUESTION_LIST_LANGUAGE = Symbol('CHANGE_QUESTION_LIST_LANGUAGE');\n// export const FETCH_QUESTION_LIST = Symbol('FETCH_QUESTION_LIST');\n\nexport const FETCH_NOT_TRANSLATED = Symbol('FETCH_NOT_TRANSLATED');\n\nexport const FETCH_QUESTION = Symbol('FETCH_QUESTION');\nexport const POST_QUESTION_DATA = Symbol('POST_QUESTION_DATA');\nexport const INITIALIZE_FORM = Symbol('INITIALIZE_FORM');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\n\nexport const changeQuestionListLanguage = createAction(CHANGE_QUESTION_LIST_LANGUAGE);\n// export const fetchQuestionList = createAction(FETCH_QUESTION_LIST);\n\nexport const fetchNotTranslated = createAction(FETCH_NOT_TRANSLATED);\n\nexport const fetchQuestion = createAction(FETCH_QUESTION);\nexport const postQuestionData = createAction(POST_QUESTION_DATA);\nexport const initializeForm = createAction(INITIALIZE_FORM);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nclass NotTranslated extends Component {\n\n  constructor(props) {\n    super(props);\n    //タブの切り替えのための要素\n    this.state = {currentTab: 'questions'};\n  }\n\n  componentDidMount() {\n    const { questions } = this.props.state.not_translate;\n    if (questions.length !== 0) {\n      return;\n    }\n    let params = {};\n    this.props.handleFetchData(params);\n  }\n\n  //各カテゴリの翻訳一覧を表示する関数\n  getNotTranslated(contents, url, key) {\n\n    // getNotTranslatedの関数\n    return contents.map((v) => {\n      const { user } = v;\n      const userName = user ? user.name : '不明なユーザー';\n      const profileLink = `/users/profile/${user.id}`;\n      //コンテンツに対応したidを返す関数\n      const id = this.getNotTranslatedId(v, key);\n\n      // ここreturnはmap関数のreturn\n      return (\n        //ここでcontentの種類+そのコンテンツのidの組み合わせをkeyとすることでこのHTML要素が一意になるようにする\n        <li key={`${key}_${v.id}`} >\n        {/* <li> */}\n          {/* 未翻訳の質問を表示する */}\n          <p className=\"uk-text-lead uk-text-truncate\" >\n            <Link to={`/questions/${id}`}>{`${v.content}`}</Link>\n            <Link to={`${url}${v.id}`}><FontAwesomeIcon icon=\"globe-americas\" color=\"steelblue\" size=\"lg\"/></Link>\n          </p>\n          {/* 作成時間を表示する */}\n          <p className=\"uk-text-meta\">{dayjs(v.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          {/* プロフィールを表示する */}\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div className=\"uk-width-auto\">\n              <Link to={profileLink}><img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" /></Link>\n            </div>\n            <div className=\"uk-width-expand\">\n              <h4 className=\"uk-comment-meta uk-margin-remove\"><Link className=\"\" to={profileLink}>{ userName }</Link></h4>\n            </div>\n          </div>\n        </li>\n      );\n    })\n  }\n\n  //コンテンツに対応したidを返す関数\n  getNotTranslatedId(v, key) {\n    switch(key) {\n      case \"questions\":\n        return v.id;\n      case \"answers\":\n        return v.question_id;\n      case \"comments\":\n        return v.answer.question_id;\n    }\n  }\n\n  //コンテンツに対応したurlを付加する関数\n  getNotTranslatedQuestions(contents) {\n    const url = \"/question_translations/\";\n    const key = \"questions\";\n    return this.getNotTranslated(contents, url, key);\n  }\n  getNotTranslatedAnswers(contents) {\n    const url = \"/answer_translations/\";\n    const key = \"answers\";\n    return this.getNotTranslated(contents, url, key);\n  }\n  getNotTranslatedComments(contents) {\n    const url = \"/comment_translations/\";\n    const key = \"comments\";\n    console.log('contents', contents);\n    return this.getNotTranslated(contents, url, key);\n  }\n\n  //現在のユーザーリスト\n  getCurrentTabContents(tabState, currentTab) {\n    //tabState = state.not_translate の中に3つの連想配列が入っている\n    const { questions, answers, comments } = tabState;\n    if (currentTab === 'questions') {\n      return this.getNotTranslatedQuestions(questions);\n    } else if (currentTab === 'answers') {\n      return  this.getNotTranslatedAnswers(answers);\n    } else if (currentTab === 'comments') {\n      return this.getNotTranslatedComments(comments);\n    }\n  }\n\n  onClickTab(newTabKey, e) {\n    e.preventDefault();\n    e.stopPropagation();\n    //stateの状態変更\n    this.setState({\n      currentTab: newTabKey\n    });\n  }\n\n  getTabList() {\n    const { formatMessage } = this.props.intl;\n    const tabData = [\n      {\n        name: formatMessage({id: \"links.question\"}),\n        key: 'questions'\n      },\n      {\n        name: formatMessage({id: \"links.answer\"}),\n        key: 'answers'\n      },\n      {\n        name: formatMessage({id: \"links.comment\"}),\n        key: 'comments'\n      }\n    ];\n\n    return (\n      <ul className=\"uk-tab\" >\n        {tabData.map(v => {\n           //currentTabとkeyが一致したとき、それをactiveにする\n           const active = this.state['currentTab'] === v.key\n                        ? 'uk-active'\n                        : '';\n           return (\n             <li key={v.key} className={active} onClick={this.onClickTab.bind(this, v.key)} >\n               <a href=\"\">{v.name}</a>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  getNotTranslatedView(state) {\n\n    const { isFetching } = state.not_translate;\n\n    //読み込み中であることを示すロゴを表示する\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const tabContents = this.getCurrentTabContents(state.not_translate, this.state.currentTab);\n\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\" >\n        {tabContents}\n      </ul>\n    );\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const content = this.getNotTranslatedView(this.props.state);\n    const tabList = this.getTabList();\n    \n    return (\n      <div>\n        <div className=\"uk-container uk-container-small\">\n          <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.not_translated_list\"})}</span></h3>\n          <br></br>\n        </div>\n        <div className=\"uk-container uk-container-small\">\n          {tabList}\n          {content}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(NotTranslated);\n","import { connect } from 'react-redux';\nimport { fetchNotTranslated } from '../actions/NotTranslated';\nimport NotTranslated from '../components/NotTranslated';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (queryData) => dispatch(fetchNotTranslated(queryData)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NotTranslated);","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport AnswerForm from './AnswerForm';\nimport { isEmptyObject } from '../utils';\n\nclass AnswerEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.answerId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getAnswerById(this.answerId);\n  }\n\n  notOwnerWillTransfer(currentAnswer) {\n    const owner = currentAnswer.user;\n    const loginUser = this.props.state.auth.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { currentAnswer } = this.props.state.answers;\n      const { content, translate_language_id, country_id } = formData;\n      const { history } = this.props;\n      const answer_id = this.answerId;\n      const { question_id } = currentAnswer;\n      /* const { translate_language_id } = currentQuestion;*/\n      const saveData = { content, answer_id, translate_language_id, country_id, history, question_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { currentAnswer } = this.props.state.answers;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        answer_id: this.answerId,\n        question_id: currentAnswer.question_id,\n        history\n      };\n      return this.props.deleteAnswer(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentAnswer } = this.props.state.answers;\n\n    if (isEmptyObject(currentAnswer)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentAnswer);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>回答の編集</h2>\n        <AnswerForm initialValues={currentAnswer} onSubmit={this.handleSubmit.bind(this)} />\n        <p><button className=\"uk-button uk-button-danger\" onClick={this.onClickDeleteBtn.bind(this)}>この回答を削除</button></p>\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default AnswerEdit;\n","import { connect } from 'react-redux';\nimport AnswerEdit from '../components/AnswerEdit';\nimport {\n  fetchAnswer,\n  saveAnswerData,\n  deleteAnswer,\n} from '../actions/Answer';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAnswerById: (id) => dispatch(fetchAnswer(id)),\n    handleSubmit: (postData) => dispatch(saveAnswerData(postData)),\n    deleteAnswer: (params) => dispatch(deleteAnswer(params)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerEdit);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport CommentForm from './CommentForm';\nimport { isEmptyObject } from '../utils';\n\nclass CommentEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.commentId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getCommentById(this.commentId);\n  }\n\n  notOwnerWillTransfer(currentComment) {\n    const owner = currentComment.user;\n    const loginUser = this.props.state.auth.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { currentComment } = this.props.state.comments;\n      const { content, translate_language_id } = formData;\n      const { history } = this.props;\n      const comment_id = this.commentId;\n      const { answer_id } = currentComment;\n      const { question_id } = currentComment.answer;\n      const saveData = { content, comment_id, translate_language_id, history, answer_id, question_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { currentComment } = this.props.state.comments;\n      const { question_id } = currentComment.answer;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        comment_id: this.commentId,\n        question_id,\n        history\n      };\n      return this.props.deleteComment(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentComment } = this.props.state.comments;\n\n    if (isEmptyObject(currentComment)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentComment);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>コメントの編集</h2>\n        <CommentForm initialValues={currentComment} onSubmit={this.handleSubmit.bind(this)} />\n        <p><button className=\"uk-button uk-button-danger\" onClick={this.onClickDeleteBtn.bind(this)}>このコメントを削除</button></p>\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default CommentEdit;\n","import { connect } from 'react-redux';\nimport CommentEdit from '../components/CommentEdit';\nimport {\n  fetchSingleComment,\n  saveCommentData,\n  deleteComment,\n} from '../actions/Comment';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCommentById: (id) => dispatch(fetchSingleComment(id)),\n    handleSubmit: (postData) => dispatch(saveCommentData(postData)),\n    deleteComment: (params) => dispatch(deleteComment(params)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentEdit);\n","import React, { Component } from 'react';\nimport { Formik, Field } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\nclass QuestionTranslatinoForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.translations.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.translations.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          content: '',\n          translate_language_id: ''\n        }}\n        validate={this.validate.bind(this)}\n        enableReinitialize={true}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: 'placeholders.translations.content'})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n              </div>\n              {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.translations.translate_language_id\"})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"buttons.title.post\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(QuestionTranslatinoForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_QUESTION_TRANSLATION_LIST = Symbol('FETCH_QUESTION_TRANSLATION_LIST');\nexport const FETCH_QUESTION_TRANSLATION = Symbol('FETCH_QUESTION_TRANSLATION');\nexport const POST_QUESTION_TRANSLATION_DATA = Symbol('POST_QUESTION_TRANSLATION_DATA');\nexport const INITIALIZE_FORM = Symbol('INITIALIZE_FORM');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATED_SINGLE_QUESTION_TRANSLATION = Symbol('UPDATED_SINGLE_QUESTION_TRANSLATION');\nexport const SAVE_QUESTION_TRANSLATION_DATA = Symbol('SAVE_QUESTION_TRANSLATION_DATA');\nexport const DELETE_QUESTION_TRANSLATION = Symbol('DELETE_QUESTION_TRANSLATION');\n\n\nexport const fetchQuestionTranslationList = createAction(FETCH_QUESTION_TRANSLATION_LIST);\nexport const fetchQuestionTranslation = createAction(FETCH_QUESTION_TRANSLATION);\nexport const postQuestionTranslationData = createAction(POST_QUESTION_TRANSLATION_DATA);\nexport const initializeForm = createAction(INITIALIZE_FORM);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updatedSingleQuestionTranslation = createAction(UPDATED_SINGLE_QUESTION_TRANSLATION);\nexport const saveQuestionTranslationData = createAction(SAVE_QUESTION_TRANSLATION_DATA);\nexport const deleteQuestionTranslation = createAction(DELETE_QUESTION_TRANSLATION);\n\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const POST_VOTE = Symbol('POST_VOTE');\nexport const DELETE_VOTE = Symbol('DELETE_VOTE');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\n\n//createAction(FETCH_QUESTION_LIST)はFETCH_QUESTION_LISTという名前でアクションを発火させる。\nexport const postVote = createAction(POST_VOTE);\nexport const deleteVote = createAction(DELETE_VOTE);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\n\n//componentの中でdispatchするための設定\nimport { connect } from 'react-redux';\n//評価するための関数\nimport { postVote, deleteVote } from '../actions/VoteTranslation';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass QuestionTranslationList extends Component {\n  constructor(props) {\n    super(props);\n    this.qId = this.props.qId;\n  }\n\n  componentWillMount() {\n    this.props.handleFetchData(this.qId);\n  }\n\n  sendVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(data, user_id) {\n      if (user_id == null) {\n          return;\n      }\n      return this.props.handleDeleteVote(data);\n  }\n\n  getTranslationList(translationList, loginUser) {\n    const { formatMessage } = this.props.intl;\n\n    return translationList.map(translation => {\n\n      const key = \"question\";\n      const sendVoteParams = {\n          user_id: this.props.user.id,\n          question_translation_id: translation.id,\n          answer_translation_id: null,\n          commcomment_translation_id: null,\n          status: 1,\n          //再レンダリング用のId\n          questionId: translation.question_id,\n      };\n      const deleteVoteParams = {\n          user_id: this.props.user.id,\n          key : \"question\",\n          //他のコンテンツと共通化するためvote_idというkeyにする\n          vote_id: translation.id,\n          //再レンダリング用のId\n          questionId: translation.question_id,\n      };\n      const sendData = { sendVoteParams,  key };\n      const deleteData = { deleteVoteParams,  key };\n\n      return (\n        <li key={translation.id} >\n          <article className=\"uk-comment\">\n            <div className=\"uk-comment-header uk-comment-body\">\n              <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n                <Linkify properties={{ target: '_blank'}} >{translation.content}</Linkify>\n                <br/>\n                <br/>\n                <PostIcons \n                    //コンテンツのユーザー\n                    user = { translation.user } \n                    //ログインユーザー\n                    loginUser = { loginUser  } \n                    votes = { translation.vote_translations }\n                    sendData = { sendData }\n                    deleteData = { deleteData }\n                    editLink = {`/question_translations/edit/${translation.id}`}\n                    // translateLink = {}\n                    onClickSendVote = {this.sendVote.bind(this)}\n                    onClickDeleteVote = {this.deleteVote.bind(this)}\n                    translate = { false }\n                />\n              </p>\n              <p className=\"uk-text-meta\">{dayjs(translation.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n\n            </div>\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n              <div>\n                <PostUser user={ translation.user } />\n              </div>\n            </div>\n          </article>\n        </li>\n      );})\n\n  }\n\n  render() {\n    const { isFetching, currentTranslationList } = this.props.state.questionTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const translationList = this.getTranslationList(currentTranslationList, loginUser);\n\n    return (\n      <div>\n        <ul className=\"uk-list uk-list-divider uk-list-large\" >\n          {translationList}\n        </ul>\n      </div>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  return {\n    user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      //評価機能\n      handlePostVote: (data) => dispatch(postVote(data)),\n      handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(QuestionTranslationList));\n","import { connect } from 'react-redux';\nimport { fetchQuestionTranslationList } from '../actions/QuestionTranslation';\nimport QuestionTranslationList from '../components/QuestionTranslationList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (question_id) => dispatch(fetchQuestionTranslationList(question_id)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionTranslationList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport QuestionTranslationForm from '../components/QuestionTranslationForm';\nimport QuestionTranslationList from '../containers/QuestionTranslationList';\nimport {\n  fetchQuestion\n} from '../actions/Question';\nimport {\n  fetchAnswerList\n} from '../actions/Answer';\nimport {\n    postQuestionTranslationData\n} from '../actions/QuestionTranslation';\nimport { isEmptyObject } from '../utils';\nimport { injectIntl } from 'react-intl';\nimport PostUser from '../components/PostUser';\n\nclass QuestionTranslationView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.qId = parseInt(params.question_id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getQuestionById(this.qId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id } = formData;\n      if (content === '') {\n        throw new Error('空文字で投稿はできません。');\n      }\n      const { user } = this.props.state.auth;\n      const question_id = this.qId;\n      const user_id = user.id;\n      return this.props.handleSubmit({content, question_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { currentQuestion } = this.props.state.questions;\n    if (isEmptyObject(currentQuestion)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const { user } = currentQuestion;\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n          <p><Linkify properties={{ target: '_blank'}} >{currentQuestion.content}</Linkify></p>\n          <p className=\"uk-text-meta\">{dayjs(currentQuestion.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div>\n              <PostUser user={user} />\n            </div>\n          </div>\n        </div>\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.translation_list\"})}</span></h3>\n        <QuestionTranslationForm qId={this.qId} onSubmit={this.handleSubmit.bind(this)} />\n        <QuestionTranslationList qId={this.qId} />\n        <hr className=\"uk-divider-icon\" />\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestionById: (id) => dispatch(fetchQuestion(id)),\n    fetchAnswers: (question_id) => dispatch(fetchAnswerList(question_id)),\n    handleSubmit: (postData) => dispatch(postQuestionTranslationData(postData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(QuestionTranslationView));\n","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\n\nclass TranslationForm extends Component {\n\n  validate(values) {\n    let errors = {};\n    if (!values.content) {\n      errors.content = '翻訳文を入力してください';\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = '投稿言語を指定してください';\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues } = this.props;\n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        validate={this.validate}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder=\"翻訳文を入力してください\"\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n                {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              </div>\n              <div className=\"uk-margin uk-grid uk-grid-small uk-child-width-expand@s\" >\n                <div className=\"uk-grid-margin\" >\n                  <LanguageFormSelect name=\"translate_language_id\" placeholder=\"投稿言語\" />\n                  {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n                </div>\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >投稿</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default TranslationForm;\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationForm from './TranslationForm';\nimport { isEmptyObject } from '../utils';\n\nclass TranslationEdit extends Component {\n\n  notOwnerWillTransfer(currentTranslation, loginUser) {\n    const owner = currentTranslation.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  render() {\n    const { currentTranslation, handleSubmit, onClickDeleteBtn, loginUser } = this.props;\n\n    if (isEmptyObject(currentTranslation)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentTranslation, loginUser);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>翻訳の編集</h2>\n        <TranslationForm initialValues={currentTranslation} onSubmit={handleSubmit} />\n        <p><button className=\"uk-button uk-button-danger\" onClick={onClickDeleteBtn}>この翻訳を削除</button></p>\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default TranslationEdit;\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationEdit from './TranslationEdit';\n\nclass QuestionTranslationEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.qtId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getQuestionTranslationById(this.qtId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const id = this.qtId;\n      /* const { translate_language_id } = currentTranslation;*/\n      const saveData = { content, id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        id: this.qtId,\n        history\n      };\n      return this.props.deleteQuestionTranslation(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentTranslation } = this.props.state.questionTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    return (\n      <TranslationEdit\n        currentTranslation={currentTranslation}\n        handleSubmit={this.handleSubmit.bind(this)}\n        onClickDeleteBtn={this.onClickDeleteBtn.bind(this)}\n        loginUser={loginUser}\n      />\n    );\n  }\n}\n\nexport default QuestionTranslationEdit;\n","import { connect } from 'react-redux';\nimport QuestionTranslationEdit from '../components/QuestionTranslationEdit';\nimport {\n  fetchQuestionTranslation,\n  saveQuestionTranslationData,\n  deleteQuestionTranslation,\n} from '../actions/QuestionTranslation';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestionTranslationById: (id) => dispatch(fetchQuestionTranslation(id)),\n    handleSubmit: (postData) => dispatch(saveQuestionTranslationData(postData)),\n    deleteQuestionTranslation: (conditions) => dispatch(deleteQuestionTranslation(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionTranslationEdit);\n","import React, { Component } from 'react';\nimport { Formik, Field } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\nclass AnswerTranslatinoForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.translations.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.translations.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          content: '',\n          translate_language_id: ''\n        }}\n        validate={this.validate.bind(this)}\n        enableReinitialize={true}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.translations.content\"})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n              </div>\n              {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.translations.translate_language_id\"})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"buttons.title.post\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(AnswerTranslatinoForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_ANSWER_TRANSLATION_LIST = Symbol('FETCH_ANSWER_TRANSLATION_LIST');\nexport const FETCH_ANSWER_TRANSLATION = Symbol('FETCH_ANSWER_TRANSLATION');\nexport const POST_ANSWER_TRANSLATION_DATA = Symbol('POST_ANSWER_TRANSLATION_DATA');\nexport const SAVE_ANSWER_TRANSLATION_DATA = Symbol('SAVE_ANSWER_TRANSLATION_DATA');\nexport const DELETE_ANSWER_TRANSLATION = Symbol('DELETE_ANSWER_TRANSLATION');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATED_SINGLE_ANSWER_TRANSLATION = Symbol('UPDATED_SINGLE_ANSWER_TRANSLATION');\n\nexport const fetchAnswerTranslationList = createAction(FETCH_ANSWER_TRANSLATION_LIST);\nexport const fetchAnswerTranslation = createAction(FETCH_ANSWER_TRANSLATION);\nexport const postAnswerTranslationData = createAction(POST_ANSWER_TRANSLATION_DATA);\nexport const saveAnswerTranslationData = createAction(SAVE_ANSWER_TRANSLATION_DATA);\nexport const deleteAnswerTranslation = createAction(DELETE_ANSWER_TRANSLATION);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updatedSingleAnswerTranslation = createAction(UPDATED_SINGLE_ANSWER_TRANSLATION);\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\n\nimport { connect } from 'react-redux';\nimport { postVote, deleteVote } from '../actions/VoteTranslation';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass AnswerTranslationList extends Component {\n  constructor(props) {\n    super(props);\n    this.aId = this.props.aId;\n  }\n\n  componentWillMount() {\n    this.props.handleFetchData(this.aId);\n  }\n\n  sendVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(data, user_id) {\n      if (user_id == null) {\n          return;\n      }\n      return this.props.handleDeleteVote(data);\n  }\n\n  getTranslationList(translationList, loginUser) {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\" >\n        {translationList.map(translation => {\n\n          const key = \"answer\";\n          const sendVoteParams = {\n              user_id: this.props.user.id,\n              question_translation_id: null,\n              answer_translation_id: translation.id,\n              commcomment_translation_id: null,\n              status: 1,\n              //再レンダリング用のId\n              answerId: translation.answer_id\n          };\n          const deleteVoteParams = {\n              user_id: this.props.user.id,\n              key : \"answer\",\n              //他のコンテンツと共通化するためvote_idというkeyにする\n              vote_id: translation.id,\n              //再レンダリング用のId\n              answerId: translation.answer_id,\n          };\n          const sendData = { sendVoteParams,  key };\n          const deleteData = { deleteVoteParams,  key };\n                  \n           return (\n             <li key={translation.id} >\n               <article className=\"uk-comment\">\n                 <div className=\"uk-comment-header uk-comment-body\">\n                   <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n                     <Linkify properties={{ target: '_blank'}} >{translation.content}</Linkify>\n                     <br/>\n                     <br/>\n                     <PostIcons \n                        //コンテンツのユーザー\n                        user = { translation.user } \n                        //ログインユーザー\n                        loginUser = { loginUser  } \n                        votes = { translation.vote_translations }\n                        sendData = { sendData }\n                        deleteData = { deleteData }\n                        editLink = {`/answer_translations/edit/${translation.id}`}\n                        // translateLink = {}\n                        onClickSendVote = {this.sendVote.bind(this)}\n                        onClickDeleteVote = {this.deleteVote.bind(this)}\n                        translate = { false }\n                     />\n\n                   </p>\n                   <p className=\"uk-text-meta\">{dayjs(translation.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n                 </div>\n                 <div>\n                   <PostUser user={ translation.user } />\n                 </div>\n               </article>\n             </li>\n           );\n        })}\n      </ul>\n    );\n\n  }\n\n  render() {\n    const { isFetching, currentTranslationList } = this.props.state.answerTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n    const content = this.getTranslationList(currentTranslationList, loginUser);\n    return (\n      <div>\n        {content}\n      </div>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  return {\n    user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      //評価機能\n      handlePostVote: (data) => dispatch(postVote(data)),\n      handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(AnswerTranslationList));\n","import { connect } from 'react-redux';\nimport { fetchAnswerTranslationList } from '../actions/AnswerTranslation';\nimport AnswerTranslationList from '../components/AnswerTranslationList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (answer_id) => dispatch(fetchAnswerTranslationList(answer_id)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerTranslationList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport AnswerTranslationForm from '../components/AnswerTranslationForm';\nimport AnswerTranslationList from '../containers/AnswerTranslationList';\nimport {\n  fetchAnswer,\n  fetchAnswerList\n} from '../actions/Answer';\nimport {\n  postAnswerTranslationData\n} from '../actions/AnswerTranslation';\nimport { isEmptyObject } from '../utils';\nimport { injectIntl } from 'react-intl';\nimport PostUser from '../components/PostUser';\n\nclass AnswerTranslationView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.aId = parseInt(params.answer_id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getAnswerById(this.aId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id } = formData;\n      if (content === '') {\n        const msg = '空文字で投稿はできません。';\n        throw new Error(msg);\n      }\n      const { user } = this.props.state.auth;\n      const answer_id = this.aId;\n      const user_id = user.id;\n      return this.props.handleSubmit({content, answer_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { currentAnswer } = this.props.state.answers;\n    if (isEmptyObject(currentAnswer)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const user = (currentAnswer.user) ? currentAnswer.user : null;\n    const userName = (user) ? user.name : '';\n    const { question_id } = currentAnswer;\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n          <p><Linkify properties={{ target: '_blank'}} >{currentAnswer.content}</Linkify></p>\n          <p className=\"uk-text-meta\">{dayjs(currentAnswer.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div>\n              <PostUser user={user} />\n            </div>\n          </div>\n\n        </div>\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.translation_list\"})}</span></h3>\n        <AnswerTranslationForm aId={this.aId} onSubmit={this.handleSubmit.bind(this)} />\n        <AnswerTranslationList aId={this.aId} />\n        <hr className=\"uk-divider-icon\" />\n        <p><Link to={`/questions/${question_id}`}>{formatMessage({id: \"links.to_question_view\"})}</Link></p>\n        <p><Link to=\"/\">Top</Link></p>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAnswerById: (id) => dispatch(fetchAnswer(id)),\n    fetchAnswers: (question_id) => dispatch(fetchAnswerList(question_id)),\n    handleSubmit: (postData) => dispatch(postAnswerTranslationData(postData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(AnswerTranslationView));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationEdit from './TranslationEdit';\n\nclass AnswerTranslationEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.atId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getAnswerTranslationById(this.atId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const id = this.atId;\n      /* const { translate_language_id } = currentTranslation;*/\n      const saveData = { content, id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        id: this.atId,\n        history\n      };\n      return this.props.deleteAnswerTranslation(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentTranslation } = this.props.state.answerTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    return (\n      <TranslationEdit\n        currentTranslation={currentTranslation}\n        handleSubmit={this.handleSubmit.bind(this)}\n        onClickDeleteBtn={this.onClickDeleteBtn.bind(this)}\n        loginUser={loginUser}\n      />\n    );\n  }\n}\n\nexport default AnswerTranslationEdit;\n","import { connect } from 'react-redux';\nimport AnswerTranslationEdit from '../components/AnswerTranslationEdit';\nimport {\n  fetchAnswerTranslation,\n  saveAnswerTranslationData,\n  deleteAnswerTranslation,\n} from '../actions/AnswerTranslation';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAnswerTranslationById: (id) => dispatch(fetchAnswerTranslation(id)),\n    handleSubmit: (postData) => dispatch(saveAnswerTranslationData(postData)),\n    deleteAnswerTranslation: (conditions) => dispatch(deleteAnswerTranslation(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerTranslationEdit);\n","import React, { Component } from 'react';\nimport { Formik, Field } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\nclass CommentTranslatinoForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.translations.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.translations.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          content: '',\n          translate_language_id: ''\n        }}\n        validate={this.validate.bind(this)}\n        enableReinitialize={true}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.translations.content\"})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n              </div>\n              {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.translations.translate_language_id\"})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"buttons.title.post\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(CommentTranslatinoForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_COMMENT_TRANSLATION_LIST = Symbol('FETCH_COMMENT_TRANSLATION_LIST');\nexport const FETCH_COMMENT_TRANSLATION = Symbol('FETCH_COMMENT_TRANSLATION');\nexport const POST_COMMENT_TRANSLATION_DATA = Symbol('POST_COMMENT_TRANSLATION_DATA');\nexport const SAVE_COMMENT_TRANSLATION_DATA = Symbol('SAVE_COMMENT_TRANSLATION_DATA');\nexport const DELETE_COMMENT_TRANSLATION = Symbol('DELETE_COMMENT_TRANSLATION');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATED_SINGLE_COMMENT_TRANSLATION = Symbol('UPDATED_SINGLE_COMMENT_TRANSLATION');\n\n\nexport const fetchCommentTranslationList = createAction(FETCH_COMMENT_TRANSLATION_LIST);\nexport const fetchCommentTranslation = createAction(FETCH_COMMENT_TRANSLATION);\nexport const postCommentTranslationData = createAction(POST_COMMENT_TRANSLATION_DATA);\nexport const saveCommentTranslationData = createAction(SAVE_COMMENT_TRANSLATION_DATA);\nexport const deleteCommentTranslation = createAction(DELETE_COMMENT_TRANSLATION);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updatedSingleCommentTranslation = createAction(UPDATED_SINGLE_COMMENT_TRANSLATION);\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\n\nimport { connect } from 'react-redux';\nimport { postVote, deleteVote } from '../actions/VoteTranslation';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass CommentTranslationList extends Component {\n  constructor(props) {\n    super(props);\n    this.commentId = this.props.commentId;\n  }\n\n  componentWillMount() {\n    this.props.handleFetchData(this.commentId);\n  }\n\n  sendVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(data, user_id) {\n      if (user_id == null) {\n          return;\n      }\n      return this.props.handleDeleteVote(data);\n  }\n\n  getTranslationList(translationList, loginUser) {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\" >\n        {translationList.map(translation => {\n            const key = \"comment\";\n            const sendVoteParams = {\n                user_id: this.props.user.id,\n                question_translation_id: null,\n                answer_translation_id: null,\n                comment_translation_id: translation.id,\n                status: 1,\n                //再レンダリング用のId\n                commentId: translation.comment_id\n            };\n            const deleteVoteParams = {\n                user_id: this.props.user.id,\n                key : \"comment\",\n                //他のコンテンツと共通化するためvote_idというkeyにする\n                vote_id: translation.id,\n                //再レンダリング用のId\n                commentId: translation.comment_id,\n            };\n            const sendData = { sendVoteParams,  key };\n            const deleteData = { deleteVoteParams,  key };\n\n           return (\n             <li key={translation.id} >\n               <article className=\"uk-comment\">\n                 <div className=\"uk-comment-header uk-comment-body\">\n                   <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n                     <Linkify properties={{ target: '_blank'}} >{translation.content}</Linkify>z\n                     <br/>\n                     <br/>\n                     <PostIcons \n                        //コンテンツのユーザー\n                        user = { translation.user } \n                        //ログインユーザー\n                        loginUser = { loginUser  } \n                        votes = { translation.vote_translations }\n                        sendData = { sendData }\n                        deleteData = { deleteData }\n                        editLink = {`/comment_translations/edit/${translation.id}`}\n                        // translateLink = {}\n                        onClickSendVote = {this.sendVote.bind(this)}\n                        onClickDeleteVote = {this.deleteVote.bind(this)}\n                        translate = { false }\n                     />\n                   </p>\n                   <p className=\"uk-text-meta\">{dayjs(translation.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n                 </div>\n                 <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n                   <div>\n                     <PostUser user={ translation.user } />\n                   </div>\n                 </div>\n               </article>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  render() {\n    const { isFetching, currentTranslationList } = this.props.state.commentTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const content = this.getTranslationList(currentTranslationList, loginUser);\n\n    return (\n      <div>\n        {content}\n      </div>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  return {\n    user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      //評価機能\n      handlePostVote: (data) => dispatch(postVote(data)),\n      handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(CommentTranslationList));\n","import { connect } from 'react-redux';\nimport { fetchCommentTranslationList } from '../actions/CommentTranslation';\nimport CommentTranslationList from '../components/CommentTranslationList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (answer_id) => dispatch(fetchCommentTranslationList(answer_id)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentTranslationList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport CommentTranslationForm from '../components/CommentTranslationForm';\nimport CommentTranslationList from '../containers/CommentTranslationList';\nimport {\n  fetchSingleComment,\n} from '../actions/Comment';\nimport {\n  postCommentTranslationData\n} from '../actions/CommentTranslation';\nimport { isEmptyObject } from '../utils';\nimport { injectIntl } from 'react-intl';\nimport PostUser from '../components/PostUser';\n\nclass CommentTranslationView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.commentId = parseInt(params.comment_id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getCommentById(this.commentId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id } = formData;\n      if (content === '') {\n        const msg = '空文字で投稿はできません。';\n        throw new Error(msg);\n      }\n      const { user } = this.props.state.auth;\n      const comment_id = this.commentId;\n      const user_id = user.id;\n      return this.props.handleSubmit({content, comment_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { currentComment } = this.props.state.comments;\n    const { currentQuestion } = this.props.state.questions;\n\n    if (isEmptyObject(currentComment)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const user = (currentComment.user) ? currentComment.user : null;\n    const userName = (user) ? user.name : '';\n    const toQuestionViewLink = !isEmptyObject(currentQuestion)\n                             ? (<p><Link to={`/questions/${currentQuestion.id}`}>{formatMessage({id: \"links.to_question_view\"})}</Link></p>)\n                             : '';                         \n\n    return (\n    <main className=\"uk-container uk-container-small\">\n      <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n        <p><Linkify properties={{ target: '_blank'}} >{currentComment.content}</Linkify></p>\n        <p className=\"uk-text-meta\">{dayjs(currentComment.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n        <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n          <div>\n            <PostUser user={user} />\n          </div>\n        </div>\n      </div>\n      <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.translation_list\"})}</span></h3>\n      <CommentTranslationForm commentId={this.commentId} onSubmit={this.handleSubmit.bind(this)} />\n      <CommentTranslationList commentId={this.commentId} />\n      <hr className=\"uk-divider-icon\" />\n      { toQuestionViewLink }\n      <p><Link to=\"/\">Top</Link></p>\n    </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCommentById: (id) => dispatch(fetchSingleComment(id)),\n    handleSubmit: (postData) => dispatch(postCommentTranslationData(postData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(CommentTranslationView));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationEdit from './TranslationEdit';\n\n\nclass CommentTranslationEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.ctId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    console.log('getCommentTranslationById');\n    this.props.getCommentTranslationById(this.ctId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const id = this.ctId;\n      /* const { translate_language_id } = currentTranslation;*/\n      const saveData = { content, id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        id: this.ctId,\n        history\n      };\n      return this.props.deleteCommentTranslation(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentTranslation } = this.props.state.commentTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    return (\n      <TranslationEdit\n        currentTranslation={currentTranslation}\n        handleSubmit={this.handleSubmit.bind(this)}\n        onClickDeleteBtn={this.onClickDeleteBtn.bind(this)}\n        loginUser={loginUser}\n      />\n    );\n  }\n}\n\nexport default CommentTranslationEdit;\n","import { connect } from 'react-redux';\nimport CommentTranslationEdit from '../components/CommentTranslationEdit';\nimport {\n  fetchCommentTranslation,\n  saveCommentTranslationData,\n  deleteCommentTranslation,\n} from '../actions/CommentTranslation';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCommentTranslationById: (id) => dispatch(fetchCommentTranslation(id)),\n    handleSubmit: (postData) => dispatch(saveCommentTranslationData(postData)),\n    deleteCommentTranslation: (conditions) => dispatch(deleteCommentTranslation(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentTranslationEdit);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Drawer from '@material-ui/core/Drawer';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = {\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: 'auto',\n  },\n};\n\nclass MenuDrawer extends React.Component {\n  state = {\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  };\n\n  toggleDrawer = (side, open) => () => {\n    this.setState({\n      [side]: open,\n    });\n  };\n\n  getLogoutLink(user) {\n    if (!user.id) {\n      return '';\n    }\n    const { history } = this.props;\n    const actionData = { history };\n    return (\n      <Link to=\"/\" onClick={this.props.logout.bind(this, actionData)}>Logout</Link>\n    );\n  }\n\n  render() {\n    const { classes, displayName } = this.props;\n\n    const menuDataList = [\n      {\n        text: 'プロフィール',\n        component: Link,\n        to: '/users/profile_edit',\n      },\n      {\n        text: 'ログアウト',\n        component: Link,\n        to: '/users/logout',\n      },\n    ];\n\n    const sideList = (\n      <div className={classes.list}>\n        <List>\n          {menuDataList.map((menuData, index) => (\n            <ListItem button component={menuData.component} to={menuData.to}  key={index} >\n              {/* <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon> */}\n              <ListItemText primary={menuData.text} />\n            </ListItem>\n          ))}\n        </List>\n      </div>\n    );\n\n    return (\n      <div className=\"uk-display-inline-block\" >\n        <Button onClick={this.toggleDrawer('right', true)}>{ displayName }</Button>\n        <Drawer anchor=\"right\" open={this.state.right} onClose={this.toggleDrawer('right', false)}>\n          <div\n            tabIndex={0}\n            role=\"button\"\n            onClick={this.toggleDrawer('right', false)}\n            onKeyDown={this.toggleDrawer('right', false)}\n          >\n            {sideList}\n          </div>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\nMenuDrawer.propTypes = {\n  classes: PropTypes.object.isRequired,\n  displayName: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(MenuDrawer);\n","import React from 'react';\n/* import MenuDrawer from '../../containers/layouts/MenuDrawer';*/\nimport MenuDrawer from './MenuDrawer';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      anchorEl: null\n    };\n  }\n\n  onClickLogout() {\n    const { user } = this.props.state.auth;\n    if (!user.id) {\n      return '';\n    }\n    const { history } = this.props;\n    const actionData = { history };\n    return this.props.logout(actionData);\n  }\n\n  getMenu(displayName) {\n    const { anchorEl } = this.state;\n    const { formatMessage } = this.props.intl;\n\n    const handleClick = event => {\n      this.setState({ anchorEl: event.currentTarget });\n    };\n\n    const handleClose = () => {\n      this.setState({ anchorEl: null });\n    };\n\n    const handleLogout = () => {\n      handleClose();\n      return this.onClickLogout();\n    };\n\n    const getProfileElem = (auth) => {\n      if (!auth.isLoggedIn) {\n        return '';\n      }\n      const { user } = auth;\n      const menuList = [\n        {\n          text: formatMessage({id: \"links.profile\"}),\n          to: `/users/profile/${user.id}`,\n          icon: \"user\"\n        },\n        {\n          text: formatMessage({id: \"links.profile_edit\"}),\n          to: '/users/profile_edit',\n          icon: \"pencil\",\n        },\n        {\n          text: formatMessage({id: \"links.to_not_translated_list\"}),\n          to: `/not_translated`,\n          icon: \"album\"\n        },\n      ];\n      return menuList.map((v, i) => (\n        <MenuItem key={i} onClick={handleClose}>\n          <Link to={v.to} >\n            <span uk-icon={v.icon} ></span>\n            <span>{v.text}</span>\n          </Link>\n        </MenuItem>\n      ));\n    };\n\n    const getLoginElem = (auth) => {\n      return (auth.isLoggedIn)\n           ? (\n             <MenuItem onClick={handleLogout.bind(this)}>\n               <Link to=\"\" >\n                 <span uk-icon=\"sign-out\" ></span>\n                 <span>{formatMessage({id: \"links.logout\"})}</span>\n               </Link>\n             </MenuItem>\n           )\n           : (\n             <MenuItem onClick={handleClose}>\n               <Link to=\"/users/login\" >\n                 <span uk-icon=\"sign-in\" ></span>\n                 <span>{formatMessage({id: \"links.login\"})}</span>\n               </Link>\n             </MenuItem>\n           );\n    };\n\n    const { auth } = this.props.state;\n    const profileElem = getProfileElem(auth);\n    const loginElem = getLoginElem(auth);\n\n    return (\n      <div className=\"uk-display-inline-block uk-height-1-1\" >\n        <Button\n          aria-owns={anchorEl ? 'simple-menu' : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleClick}\n          className=\"uk-height-1-1\"\n          style={{\"textTransform\": \"none\"}}\n        >\n          {displayName}\n        </Button>\n        <Menu\n          id=\"simple-menu\"\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={handleClose}\n        >\n          {profileElem}\n          {loginElem}\n          <MenuItem onClick={handleClose}>\n            <Link to=\"/users/signup\" >\n              <span uk-icon=\"check\" ></span>\n              <span>{formatMessage({id: \"links.sign_up\"})}</span>\n            </Link>\n          </MenuItem>\n        </Menu>\n      </div>\n    );\n  }\n\n  render() {\n    const { user } = this.props.state.auth;\n    const imagePath = user.image_path ? user.image_path : '/image/profile/blank-profile.png';\n    const displayMenuElem = <img src={imagePath} className=\"uk-border-circle\" width=\"50\" height=\"50\" alt=\"\" />;\n    const menu = this.getMenu(displayMenuElem);\n\n    return (\n      <header className=\"uk-margin-bottom uk-heading-divider uk-grid uk-grid-small\" >\n        <div className=\"uk-width-expand uk-margin-small-left\" >\n          <a href=\"/\" className=\"uk-display-inline-block\" >\n            <img src={`/logo.png`} alt=\"Logo\" style={{ \"maxHeight\": \"60px\" }} />\n          </a>\n          <span className=\"uk-text-meta uk-margin-small-left uk-display-inline-block\">\n            α ver.\n          </span>\n        </div>\n        <div className=\"uk-margin-small-right\">\n          { menu }\n        </div>\n      </header>\n    );\n  }\n};\n\nexport default injectIntl(Header);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const CREATE_USER_ACCOUNT = Symbol('CREATE_USER_ACCOUNT');\nexport const CLICK_SUBMIT = Symbol('CLICK_SUBMIT');\nexport const SAVE_USER_MNEMONIC = Symbol('SAVE_USER_MNEMONIC');\nexport const LOGIN_USER = Symbol('LOGIN_USER');\nexport const LOGIN_USER_JWT = Symbol('LOGIN_USER_JWT');\nexport const LOGOUT_USER = Symbol('LOGOUT_USER');\nexport const UPDATE_USER_DATA = Symbol('UPDATE_USER_DATA');\nexport const SAVE_USER_DATA = Symbol('SAVE_USER_DATA');\nexport const SAVE_USER_PASSWORD = Symbol('SAVE_USER_PASSWORD');\nexport const UPDATED_USER_DATA = Symbol('UPDATED_USER_DATA');\nexport const REMOVE_USER_DATA = Symbol('REMOVE_USER_DATA');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const LOGIN_SUCCESS = Symbol('LOGIN_SUCCESS');\nexport const LOGIN_FAILED = Symbol('LOGIN_FAILED');\nexport const GET_USER_PROFILE = Symbol('GET_USER_PROFILE');\nexport const GET_USER_BY_TOKEN = Symbol('GET_USER_BY_TOKEN');\nexport const UPDATED_PROFILE_DATA = Symbol('UPDATED_PROFILE_DATA');\nexport const PREPARED_AUTH = Symbol('PREPARED_AUTH');\nexport const UPDATED_PROFILE_QUESTION_DATA = Symbol('UPDATED_PROFILE_QUESTION_DATA');\nexport const UPDATED_PROFILE_ANSWER_DATA = Symbol('UPDATED_PROFILE_ANSWER_DATA');\nexport const UPDATED_PROFILE_COMMENT_DATA = Symbol('UPDATED_PROFILE_COMMENT_DATA');\nexport const UPDATED_PROFILE_TRANSLATED_DATA = Symbol('UPDATED_PROFILE_TRANSLATED_DATA');\nexport const SEND_RESET_PASSWORD_MAIL = Symbol('SEND_RESET_PASSWORD_MAIL');\nexport const RESET_PASSWORD = Symbol('RESET_PASSWORD');\nexport const ACTIVATE_USER = Symbol('ACTIVATE_USER');\n\n\nexport const createUserAccount = createAction(CREATE_USER_ACCOUNT);\nexport const clickSubmit = createAction(CLICK_SUBMIT);\nexport const saveUserMnemonic = createAction(SAVE_USER_MNEMONIC);\nexport const loginUser = createAction(LOGIN_USER);\nexport const loginUserJwt = createAction(LOGIN_USER_JWT);\nexport const logoutUser = createAction(LOGOUT_USER);\nexport const saveUserData = createAction(SAVE_USER_DATA);\nexport const saveUserPassword = createAction(SAVE_USER_PASSWORD);\nexport const updateUserData = createAction(UPDATE_USER_DATA);\nexport const updatedUserData = createAction(UPDATED_USER_DATA);\nexport const removeUserData = createAction(REMOVE_USER_DATA);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const loginSuccess = createAction(LOGIN_SUCCESS);\nexport const loginFailed = createAction(LOGIN_FAILED);\nexport const getUserProfile = createAction(GET_USER_PROFILE);\nexport const getUserByToken = createAction(GET_USER_BY_TOKEN);\nexport const updatedProfileData = createAction(UPDATED_PROFILE_DATA);\nexport const preparedAuth = createAction(PREPARED_AUTH);\nexport const updatedProfileQuestionData = createAction(UPDATED_PROFILE_QUESTION_DATA);\nexport const updatedProfileAnswerData = createAction(UPDATED_PROFILE_ANSWER_DATA);\nexport const updatedProfileCommentData = createAction(UPDATED_PROFILE_COMMENT_DATA);\nexport const updatedProfileTranslatedData = createAction(UPDATED_PROFILE_TRANSLATED_DATA);\nexport const sendResetPasswordMail = createAction(SEND_RESET_PASSWORD_MAIL);\nexport const resetPassword = createAction(RESET_PASSWORD);\nexport const activateUser = createAction(ACTIVATE_USER);\n","import { connect } from 'react-redux';\nimport Header from '../../components/layouts/Header';\nimport { logoutUser } from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        logout: (data) => dispatch(logoutUser(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React, { Component, PropTypes } from 'react';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\nimport NotificationsSystem from 'reapop';\nimport theme from 'reapop-theme-wybo';\nimport Header from '../containers/layouts/Header';\nimport { ClipLoader } from 'react-spinners';\nimport ReactGA from 'react-ga';\n\nclass App extends Component {\n  componentWillMount() {\n    this.props.fetchLoginState();\n  }\n\n  componentDidMount() {\n    // const { pathname } = this.props.location;\n    /* console.log(\"appjs-------------\",this.props);*/\n    // ReactGA.set({ page: pathname });\n    // ReactGA.pageview(pathname);\n  }\n\n  handleLogout() {\n    //this.props.dispatch(clickLogout());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { auth } = this.props.state;\n\n    return auth.isPrepared ? (\n      <BrowserRouter >\n        <div className=\"uk-margin-bottom\" >\n          <Header />\n          {children}\n          <NotificationsSystem theme={theme} />\n        </div>\n      </BrowserRouter>\n    ) : (\n      <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n        <ClipLoader />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from '../components/App';\nimport { loginUserJwt } from '../actions/User.js';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchLoginState: () => dispatch(loginUserJwt())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nclass ScrollToTop extends Component {\n  componentDidUpdate(prevProps) {\n    if (this.props.location !== prevProps.location) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n\nexport default withRouter(ScrollToTop);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\nimport CountryFormSelect from '../CountryFormSelect';\n\nclass SignUpForm extends React.Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.name) {\n      errors.name = formatMessage({id: \"errors.sign_ups.name\"});\n    }\n\n    if (!values.mail) {\n      errors.mail = formatMessage({id: \"errors.sign_ups.mail\"});\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.mail)) {\n      errors.mail = formatMessage({id: \"errors.sign_ups.appropriate_mail\"});\n    }\n\n    if (!values.country_id) {\n      errors.country_id = formatMessage({id: \"errors.sign_ups.country\"});\n    }\n\n    if (!values.password) {\n      errors.password = formatMessage({id: \"errors.sign_ups.password\"});\n    }\n\n    if (values.passwordConfirm !== values.password) {\n      errors.passwordConfirm = formatMessage({id: \"errors.sign_ups.confirm_password\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          mail: '',\n          country_id: '',\n          password: '',\n          passwordConfirm: ''\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'name'}\n                     name=\"name\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.name\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.name && errors.name && <div className=\"uk-text-warning\">{errors.name}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'mail'}\n                     name=\"mail\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.mail\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.mail && errors.mail && <div className=\"uk-text-warning\">{errors.mail}</div>}\n              </div>\n\n              <div className=\"uk-margin\" >\n                <CountryFormSelect \n                  id={'counrty_id'}\n                  name=\"country_id\" \n                  placeholder={formatMessage({id: \"placeholders.sign_ups.country\"})} />\n                {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{ formatMessage({id: \"errors.sign_ups.country\"}) }</div>}\n              </div>\n\n              <div className=\"uk-margin\">\n                <Field\n                  id={'password'}\n                     name=\"password\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.password && errors.password && <div className=\"uk-text-warning\">{errors.password}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'passwordConfirm'}\n                     name=\"passwordConfirm\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.confirm_password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.passwordConfirm && errors.passwordConfirm && <div className=\"uk-text-warning\">{errors.passwordConfirm}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.sign_up\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(SignUpForm));\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport SignUpForm from './SignUpForm';\nimport { injectIntl } from 'react-intl';\n\nclass SignUp extends React.Component {\n\n  onClickSubmit(formData) {\n    const { name, mail, country_id, password } = formData;\n    const { history } = this.props;\n    this.props.clickSubmit({ name, mail, country_id, password, history });\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{ formatMessage({id: \"titles.sign_up\"}) }</h2>\n\n        <SignUpForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(SignUp);\n","import { connect } from 'react-redux';\nimport SignUp from '../../components/users/SignUp';\nimport {\n    createUserAccount,\n    saveUserMnemonic\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        clickSubmit: (data) => dispatch(createUserAccount(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass LoginForm extends React.Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.mail) {\n      errors.mail = formatMessage({id: \"errors.login.mail\"});\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.mail)) {\n      errors.mail = formatMessage({id: \"errors.login.appropriate_mail\"});\n    }\n\n    if (!values.password) {\n      errors.password = formatMessage({id: \"errors.login.password\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          mail: '',\n          password: ''\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'mail'}\n                     name=\"mail\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.login.mail\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.mail && errors.mail && <div className=\"uk-text-warning\">{errors.mail}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'password'}\n                     name=\"password\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.login.password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.password && errors.password && <div className=\"uk-text-warning\">{errors.password}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.login\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(LoginForm));\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n/* import { ClipLoader } from 'react-spinners';*/\nimport LoginForm from './LoginForm';\nimport { injectIntl } from 'react-intl';\n\n\nclass Login extends React.Component {\n\n  onClickSubmit(formData) {\n    const { mail, password } = formData;\n    const { history } = this.props;\n    return this.props.handleSubmit({ mail, password, history });\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.login\"})}</h2>\n\n        <LoginForm onSubmit={this.onClickSubmit.bind(this)} />\n        <p><Link to=\"/users/password_reset\" >{formatMessage({id: \"links.password_reset\"})}</Link></p>\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(Login);\n","import { connect } from 'react-redux';\nimport Login from '../../components/users/Login';\nimport {\n    loginUser\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleSubmit: (data) => dispatch(loginUser(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass PasswordResetForm extends Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.mail) {\n      errors.mail = formatMessage({id: \"errors.login.mail\"});\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.mail)) {\n      errors.mail = formatMessage({id: \"errors.login.appropriate_mail\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          mail: '',\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'mail'}\n                     name=\"mail\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.login.mail\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.mail && errors.mail && <div className=\"uk-text-warning\">{errors.mail}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.send\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(PasswordResetForm));\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n/* import { ClipLoader } from 'react-spinners';*/\nimport PasswordResetForm from './PasswordResetForm';\nimport { injectIntl } from 'react-intl';\n\nclass PasswordReset extends Component {\n\n  onClickSubmit(formData) {\n    const { mail } = formData;\n    return this.props.handleSubmit({ mail });\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.password_reset\"})}</h2>\n        <p>{formatMessage({id: \"messages.enter_mail\"})}</p>\n        <PasswordResetForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(PasswordReset);\n","import { connect } from 'react-redux';\nimport PasswordReset from '../../components/users/PasswordReset';\nimport {\n  sendResetPasswordMail\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleSubmit: (data) => dispatch(sendResetPasswordMail(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordReset);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass PasswordForm extends Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.password) {\n      errors.password = formatMessage({id: \"errors.sign_ups.password\"});\n    }\n\n    if (values.passwordConfirm !== values.password) {\n      errors.passwordConfirm = formatMessage({id: \"errors.sign_ups.confirm_password\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          password: '',\n          passwordConfirm: ''\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'password'}\n                     name=\"password\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.password && errors.password && <div className=\"uk-text-warning\">{errors.password}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'passwordConfirm'}\n                     name=\"passwordConfirm\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.confirm_password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.passwordConfirm && errors.passwordConfirm && <div className=\"uk-text-warning\">{errors.passwordConfirm}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.send\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(PasswordForm));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\n/* import { ClipLoader } from 'react-spinners';*/\nimport PasswordForm from './PasswordForm';\nimport { injectIntl } from 'react-intl';\nimport { isEmptyObject } from '../../utils';\n\nclass NewPassword extends Component {\n\n  componentDidMount() {\n    const { params } = this.props.match;\n    const { token } = params;\n    this.token = token;\n    return this.props.fetchUser(token);\n  }\n\n  onClickSubmit(formData) {\n    const { password } = formData;\n    const { id } = this.props.state.auth.user;\n    const { history } = this.props;\n    const token = this.token;\n    return this.props.handleSubmit({ id, password, token, history });\n  }\n\n  render() {\n    const { user, isFetching } = this.props.state.auth;\n\n    if (isFetching) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    if (isEmptyObject(user)) {\n      return (\n        <main className=\"uk-container uk-container-small\">\n          <p>不正なアクセスです</p>\n        </main>\n      );\n    }\n\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.password_reset\"})}</h2>\n        <p>{formatMessage({id: \"messages.enter_new_password\"})}</p>\n        <PasswordForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(NewPassword);\n","import { connect } from 'react-redux';\nimport NewPassword from '../../components/users/NewPassword';\nimport {\n  saveUserPassword,\n  getUserByToken,\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchUser: (token) => dispatch(getUserByToken(token)),\n    handleSubmit: (data) => dispatch(saveUserPassword(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewPassword);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\nimport { isEmptyObject } from '../../utils';\n\nclass Activate extends Component {\n\n  componentDidMount() {\n    const { params } = this.props.match;\n    const { history } = this.props;\n    const { token } = params;\n    this.token = token;\n    return this.props.activateUser({ token, history });\n  }\n\n  render() {\n    const { user, isFetching } = this.props.state.auth;\n\n    if (isFetching) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    if (isEmptyObject(user)) {\n      return (\n        <main className=\"uk-container uk-container-small\">\n          <p>不正なアクセスです</p>\n        </main>\n      );\n    }\n\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.activate\"})}</h2>\n        <p>{formatMessage({id: \"messages.activate_completed\"})}</p>\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(Activate);\n","import { connect } from 'react-redux';\nimport Activate from '../../components/users/Activate';\nimport {\n  activateUser,\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    activateUser: (token) => dispatch(activateUser(token)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Activate);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Stampcard extends Component {\n  render() {\n    const { voteArray, repeatNum } = this.props\n\n    console.log(\"voteArray\",voteArray);\n\n    const tableContents =[];\n    for (let i =0;i<repeatNum;i++){\n        let voteList = voteArray.slice(i*5,i*5+5)\n        let contents = voteList.map((e) => {\n            if (!e) {\n                return (\n                    <td key={e.id}className=\"uk-text-center\"></td>\n                );  \n            }\n            return (\n                <td key={\"vote_translate\"+e.id}className=\"uk-text-center\">\n                    <Link to={e.user.profile_link}>\n                    <img className=\"uk-comment-avatar uk-border-circle uk-margin-rigth-small\" src={e.user.image_path} width=\"35\" height=\"35\" alt=\"\"/>\n                    </Link>\n                </td>\n            );\n        });\n        let rappedContents = <tr>{ contents }</tr>\n        tableContents.push(rappedContents);\n    }\n\n    return (\n        <table className=\"uk-table stamp-card uk-card uk-card-default uk-card-small uk-card-body uk-margin-top\">\n            <tbody>\n                {tableContents}\n            </tbody>\n        </table>\n    );\n\n   };\n};\n      \nexport default Stampcard;","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { connect } from 'react-redux';\nimport { getUserProfile } from '../../actions/User';\nimport QuestionListView from '../../components/QuestionListView';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { isEmptyObject } from '../../utils';\nimport { injectIntl } from 'react-intl';\nimport Stampcard from '../../components/Stampcard';\n\nclass Profile extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.state = {currentTab: 'questions'};\n    this.userId = parseInt(params.id, 10);\n    this.props.fetchUserProfile(this.userId);\n  }\n\n  onClickTab(newTabKey, e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.setState({\n      currentTab: newTabKey\n    });\n  }\n\n  getVoteList(voteLists){\n\n    const repeatNum = Math.ceil(voteLists.length/5);\n    const stampCardNum =  Math.ceil(voteLists.length/10);\n    const addArrayNum = stampCardNum*10 - voteLists.length;\n\n    for(let i=0 ; i < addArrayNum ; i++){\n      voteLists.push(\"\");\n    }\n    const tableContents =[];\n    for(let i =0; i < stampCardNum ;i++) {\n      const stampcard = <Stampcard \n        voteArray = { voteLists.slice((i*5)*2, (i*5)*2+10)}\n        repeatNum = { repeatNum }\n      />\n      tableContents.unshift(stampcard);\n    }\n\n    // いいね数が０の場合\n    if(voteLists.length===0){\n      let contents=[]\n      for (let i=0;i<5;i++){\n          contents.push(\n          <td></td>);\n      }\n      tableContents.push(<table className=\"uk-table stamp-card uk-card uk-card-default uk-card-small uk-card-body uk-margin-top\">\n                        <tbody>\n                          <tr>\n                            {contents}\n                          </tr>\n                          <tr>\n                            {contents}\n                          </tr>\n                        </tbody>\n                      </table>)\n    }\n\n    return tableContents;\n  };\n\n  getTabList() {\n    const { formatMessage } = this.props.intl;\n    const tabData = [\n      {\n        name: formatMessage({id: \"links.question\"}),\n        key: 'questions'\n      },\n      {\n        name: formatMessage({id: \"links.answer\"}),\n        key: 'answers'\n      },\n      {\n        name: formatMessage({id: \"links.comment\"}),\n        key: 'comments'\n      },\n      {\n        name: formatMessage({id: \"links.translate\"}),\n        key: 'translates'\n      }\n    ];\n\n    return (\n      <ul className=\"uk-tab\" >\n        {tabData.map(v => {\n           const active = this.state['currentTab'] === v.key\n                        ? 'uk-active'\n                        : '';\n           return (\n             <li className={active} onClick={this.onClickTab.bind(this, v.key)} key={v.key} >\n               <a href=\"\">{v.name}</a>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  getAnswerList(answers) {\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\">\n      {answers.map(answer => {\n        const { user } = answer;\n        const userName = user ? user.name : '不明なユーザー';\n        return (\n          <li key={answer.id} >\n            <p className=\"uk-text-lead uk-text-truncate\" ><Link to={`/questions/${answer.question_id}`}>{`${answer.content}`}</Link></p>\n            <p className=\"uk-text-meta\">{dayjs(answer.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n              <div className=\"uk-width-auto\">\n                <img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" />\n              </div>\n              <div className=\"uk-width-expand\">\n                <h4 className=\"uk-comment-meta uk-margin-remove\">{ userName }</h4>\n              </div>\n            </div>\n          </li>\n        );\n      })}\n      </ul>\n    );\n  }\n\n  getCommentList(comments) {\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\">\n        {comments.map(comment => {\n           const { user, answer } = comment;\n           const userName = user ? user.name : '不明なユーザー';\n           return (\n             <li key={comment.id} >\n               <p className=\"uk-text-lead uk-text-truncate\" ><Link to={`/questions/${answer.question_id}`}>{`${comment.content}`}</Link></p>\n               <p className=\"uk-text-meta\">{dayjs(comment.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n               <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n                 <div className=\"uk-width-auto\">\n                   <img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" />\n                 </div>\n                 <div className=\"uk-width-expand\">\n                   <h4 className=\"uk-comment-meta uk-margin-remove\">{ userName }</h4>\n                 </div>\n               </div>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  getTranslatedList(translates) {\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\">\n        {translates.map(translate => {\n           const link = translate.translation_link;\n           return (\n             <li key={`translate_${translate.key}`} >\n               <p className=\"uk-text-lead uk-text-truncate\" ><Link to={link}>{`${translate.content}`}</Link></p>\n               <p className=\"uk-text-meta\">{dayjs(translate.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  filterTranslatedContent(translate) {\n    const translatedContentArray = [];\n    for (const [key, value] of Object.entries(translate)){\n      value.forEach((e)=>{\n        e[\"key\"]=key+e.id;\n        translatedContentArray.push(e);\n      });\n  　};\n    return translatedContentArray;\n  }\n\n  getCurrentTabContents(tabState, currentTab) {\n    const { questions, answers, comments, translates } = tabState;\n    const { id } = this.props.state.auth.user\n    if (currentTab === 'questions') {\n      return (<QuestionListView questionArray={questions} translateLanguageId={id} />);\n    } else if (currentTab === 'answers') {\n      return this.getAnswerList(answers);\n    } else if (currentTab === 'comments') {\n      return this.getCommentList(comments);\n    } else if (currentTab === 'translates') {\n      const translateArray = this.filterTranslatedContent(translates);\n      return this.getTranslatedList(translateArray);\n    }\n  }\n\n  render() {\n    // とりあえずログインユーザーのプロフィールページを。\n    // propsで渡されたuserIdのプロフィールページを表示するようにする。\n    const { profile } = this.props.state;\n    const { user } = profile;\n    const { formatMessage } = this.props.intl;\n    const { vote_translations } = user;\n\n    if (isEmptyObject(user)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const tabList = this.getTabList();\n    const userPostList = this.getCurrentTabContents(profile, this.state.currentTab);\n    const voteTables = this.getVoteList(vote_translations);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        {/* <div className=\"uk-grid uk-grid-small uk-flex-middle uk-margin-bottom\"> */}\n        <div class=\"uk-grid uk-grid-small\">\n          <div className=\"uk-width-expand\">\n            <div className=\"uk-width-auto uk-flex-first\">\n              <img src={user.image_path} className=\"uk-border-circle\" alt=\"\" width=\"120\" height=\"\" />\n            </div>\n            <div className=\"uk-width-auto\" >\n              <p className=\"uk-text-lead\">{user.name}</p>\n              <p>{formatMessage({id: \"messages.birthplace\"})}: {user.country.name}</p>\n            </div>\n          </div>\n          <div className=\"uk-width-2-5@s\">\n            <p>{formatMessage({id: \"titles.profile.votes\"})}</p>\n            {voteTables}\n          </div> \n        </div>\n        <div>\n          <p style={{\"whiteSpace\": \"pre-wrap\"}}>{user.profile}</p>\n        </div>\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.post_list\"})}</span></h3>\n        {tabList}\n        {userPostList}\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchUserProfile: (userId) => dispatch(getUserProfile(userId)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(Profile));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from '../LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\nimport CountryFormSelect from '../CountryFormSelect';\n\nclass ProfileForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      image_url: ''\n    };\n  }\n\n  handleImageChange(setFieldValue, e) {\n    const file = e.currentTarget.files[0];\n    setFieldValue(\"image\", file);\n    const createObjectURL = (window.URL || window.webkitURL).createObjectURL || window.createObjectURL;\n    const image_url = createObjectURL(file);\n    this.setState({ image_url });\n  }\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.country_id) {\n      errors.country_id = formatMessage({id: \"errors.profile_edit.country\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { user } = this.props.state.auth;\n    const { formatMessage } = this.props.intl;\n    const { id, name, profile, country_id } = user;\n    const imagePreview = this.state.image_url !== ''\n                       ? (<p><img src={this.state.image_url} alt=\"\" width=\"200\" /></p>)\n                       : '';\n\n    return (\n      <Formik\n      initialValues={{ id, name, profile, country_id, image: ''}}\n        enableReinitialize={true}\n        validate={this.validate}\n        onSubmit={(values, { setSubmitting, setErrors }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} className=\"uk-form-stacked\" >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <label className=\"uk-form-label\">{formatMessage({id: \"titles.profile_edit.user_name\"})}</label>\n                <Field\n                  id={'name'}\n                     name=\"name\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholder.profile_edit.nickname\"})}\n                     className={'uk-form-control uk-input'}\n                />\n                {touched.name && errors.name && <div>{errors.name}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <label className=\"uk-form-label\">{formatMessage({id: \"titles.profile_edit.birthplace\"})}</label>\n\n                <CountryFormSelect \n                  id={'counrty_id'}\n                  name=\"country_id\" \n                  placeholder={formatMessage({id: \"placeholders.sign_ups.country\"})} />\n                {/* <LanguageFormSelect name=\"country_id\" placeholder=\"出身地\" /> */}\n\n                {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{errors.country_id}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <label className=\"uk-form-label\">{formatMessage({id: \"titles.profile_edit.profile\"})}</label>\n                <Field\n                  id={'profile'}\n                     name=\"profile\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholder.profile_edit.profile\"})}\n                     className={'uk-form-control uk-textarea'}\n                     rows=\"5\"\n                />\n                {touched.profile && errors.profile && <div className=\"uk-text-warning\">{errors.profile}</div>}\n              </div>\n              <div className=\"uk-margin js-upload\" uk-form-custom=\"true\" >\n                <label className=\"uk-form-label\">{formatMessage({id: \"titles.profile_edit.user_image\"})}</label>\n                <input id=\"file\" name=\"image\" type=\"file\" onChange={this.handleImageChange.bind(this, setFieldValue)} />\n\n                {touched.image && errors.image && <div>{errors.image}</div>}\n                <button className=\"uk-button uk-button-default\" type=\"button\" tabIndex=\"-1\">{formatMessage({id: \"buttons.profile_edit.select\"})}</button>\n                {imagePreview}\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-primary\" disabled={isSubmitting}>\n                {formatMessage({id: \"buttons.profile_edit.save\"})}\n                </button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    )\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(ProfileForm));\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ClipLoader } from 'react-spinners';\nimport ProfileForm from './ProfileForm';\nimport { injectIntl } from 'react-intl';\n\nclass Profile extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const { id, name, country_id, profile } = this.props.state.auth.user;\n    console.log('user', this.props.state.auth.user);\n\n    this.setState({\n      user_id: id,\n      name,\n      profile,\n      country_id\n    });\n  }\n\n  onClickSubmit(formData) {\n    const { id, name, profile, country_id, image } = formData;\n\n    const postData = {\n      user_id: id,\n      name,\n      profile,\n      country_id,\n      image\n    };\n    this.props.clickedSaveButton(postData);\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.profile.edit\"})}</h2>\n        \n        <ProfileForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(Profile);","import { connect } from 'react-redux';\nimport Profile from '../../components/users/Profile';\nimport {\n    loginUser,\n    saveUserData\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        clickedSaveButton: (postData) => dispatch(saveUserData(postData)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\n","import React, { Component } from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport default class UserOnly extends Component {\n  static contextTypes = {\n    router: PropTypes.object.isRequired\n  }\n\n  componentWillMount() {\n    this.guestWillTransfer(this.props, this.context.router);\n  }\n\n  componentWillUpdate(nextProps) {\n    this.guestWillTransfer(nextProps, this.context.router);\n  }\n\n  guestWillTransfer(props, router) {\n    const { auth } = props.state;\n    const { history } = router;\n    if (!auth.isLoggedIn) {\n      return history.push('/users/login');\n    }\n    return true;\n  }\n\n  render() {\n    return (\n      <Route children={this.props.children} />\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport UserOnly from '../../components/auth/UserOnly';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserOnly);\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport default class GuestOnly extends Component {\n  static contextTypes = {\n    router: PropTypes.object.isRequired\n  }\n\n  componentWillMount() {\n    console.log('hoge');\n    this.userWillTransfer(this.props, this.context.router);\n  }\n\n  componentWillUpdate(nextProps) {\n    this.userWillTransfer(nextProps, this.context.router);\n  }\n\n  userWillTransfer(props, router) {\n    const { auth } = props.state;\n    const { history } = router;\n    if (auth.isLoggedIn) {\n      /* return <Redirect to={{ pathname: '/login', state: { from: this.props.location } }} />;*/\n      return history.replace('/');\n    }\n  }\n\n  render() {\n    return (\n      <Route children={this.props.children} />\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport GuestOnly from '../../components/auth/GuestOnly';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GuestOnly);\n","import ja_JP from './locales/ja_JP';\nimport en_US from './locales/en_US';\n\nexport const locales = {\n  ja: {\n    locale: 'ja',\n    messages: ja_JP,\n    translateLanguageId: 1,\n  },\n  en: {\n    locale: 'en',\n    messages: en_US,\n    translateLanguageId: 2,\n  }\n};\n\nexport const categories = {\n  all: {\n      category: 'all',\n      categoryId: 0,\n  },\n  comic_anime: {\n      category: 'comic_anime',\n      categoryId: 1,\n  },\n  culture: {\n      category: 'culture',\n      categoryId: 2,\n  },\n  tourism: {\n      category: 'tourism',\n      categoryId: 3,\n  },\n  music: {\n      category: 'music',\n      categoryId: 4,\n  },\n};\n\nexport const sorts = {\n  answerMany: {\n      sort: 'answerMany',\n      sortId: 1,\n  },\n  answerFew: {\n      sort: 'answerFew',\n      sortId: 2,\n  },\n  Asc: {\n      sort: 'Asc',\n      sortId: 3,\n  },\n  Des: {\n      sort: 'Des',\n      sortId: 4,\n  },\n};\n","const ja_JP = {\n  \"titles.sign_up\": '新規登録',\n  \"titles.login\": 'ログイン',\n  \"titles.activate\": '認証',\n  \"titles.password_reset\": 'パスワード再設定',\n  \"titles.question_list\": '質問一覧',\n  \"titles.answer_list\": '回答一覧',\n  \"titles.post_list\": '投稿一覧',\n  \"titles.translation_list\": '翻訳一覧',\n  \"titles.not_translated_list\": '未翻訳一覧',\n  \"titles.profile_edit.user_name\": 'ユーザー名',\n  \"titles.profile_edit.birthplace\": '出身地',\n  \"titles.profile_edit.profile\": 'プロフィール',\n  \"titles.profile_edit.user_image\": 'プロフィール画像',\n  \"titles.profile.edit\": 'プロフィール編集',\n  \"titles.profile.votes\": 'いいねした人一覧',\n  \"titles.question.edit\": '質問の編集',\n  \"titles.question.delete\": '質問の削除',\n  \"titles.question.return\": 'トップ', \n  \"messages.empty_answers\": 'まだ回答がありません。最初の投稿者になりましょう！',\n  \"messages.birthplace\": '出身地',\n  \"messages.you_are_not_target\": 'この質問は 「%s」 の方が回答対象者です。',\n  \"messages.enter_mail\": 'メールアドレスを入力してください',\n  \"messages.enter_new_password\": '新しいパスワードを入力してください',\n  \"messages.activate_completed\": '認証処理が完了しました。',\n  \"links.to_not_translated_list\": '未翻訳の一覧を見る',\n  \"links.edit\": '編集',\n  \"links.question\": '質問',\n  \"links.answer\": '回答',\n  \"links.comment\": 'コメント',\n  \"links.translate\": '翻訳',\n  \"links.profile\": 'プロフィール',\n  \"links.profile_edit\": 'プロフィール編集',\n  \"links.sign_up\": '新規登録',\n  \"links.login\": 'ログイン',\n  \"links.logout\": 'ログアウト',\n  \"links.password_reset\": 'パスワードを忘れた',\n  \"links.to_question_view\": '質問ページへ',\n  \"languages.japanese\": '日本語',\n  \"languages.english\": '英語',\n  \"countries.japan\": '日本',\n  \"countries.usa\": 'アメリカ合衆国',\n  \"countries.philippines\": 'フィリピン',\n  \"countries.england\": 'イギリス',\n  \"countries.newzealand\": 'ニュージーランド',\n  \"categories.all\": 'すべて',\n  \"categories.comic_anime\": '漫画・アニメ',\n  \"categories.culture\": '文化',\n  \"categories.tourism\": '観光',\n  \"categories.music\": '音楽',\n  \"errors.questions.content\": '質問文を入力してください',\n  \"errors.questions.country_id\": '回答対象国を指定してください',\n  \"errors.questions.translate_language_id\": '投稿言語を指定してください',\n  \"errors.questions.category_id\": 'カテゴリーを指定してください',\n  \"errors.answers.content\": '回答文を入力してください',\n  \"errors.answers.translate_language_id\": '投稿言語を指定してください',\n  \"errors.comments.content\": 'コメントを入力してください',\n  \"errors.comments.translate_language_id\": '投稿言語を指定してください',\n  \"errors.translations.content\": '翻訳を入力してください',\n  \"errors.translations.translate_language_id\": '投稿言語を指定してください',\n  \"errors.sign_ups.name\": 'ユーザー名を入力してください',\n  \"errors.sign_ups.mail\": 'メールアドレスを入力してください',\n  \"errors.sign_ups.country\": '出身地・所在地を選択してください',\n  \"errors.sign_ups.appropriate_mail\": '適切なメールアドレスを指定してください',\n  \"errors.sign_ups.password\": 'パスワードを入力してください',\n  \"errors.sign_ups.confirm_password\": 'パスワードが一致していません',\n  \"errors.login.mail\": 'メールアドレスを入力してください',\n  \"errors.login.appropriate_mail\": '適切なメールアドレスを指定してください',\n  \"errors.login.password\": 'パスワードを入力してください',\n  \"errors.profile_edit.country\": '出身地を選択してください',\n  \"placeholders.sign_ups.name\": '名前',\n  \"placeholders.sign_ups.mail\": 'メールアドレス',\n  \"placeholders.sign_ups.country\": '出身地・所在地',\n  \"placeholders.sign_ups.password\": 'パスワード',\n  \"placeholders.sign_ups.confirm_password\": 'パスワード確認',\n  \"placeholders.login.mail\": 'メールアドレス',\n  \"placeholders.login.password\": 'パスワード',\n  \"placeholders.questions.content\": '質問を入力してください',\n  \"placeholders.questions.country_id\": '回答対象国',\n  \"placeholders.questions.translate_language_id\": '投稿言語',\n  \"placeholders.questions.category_id\": 'カテゴリー',\n  \"placeholders.questions.submit_btn\": '投稿',\n  \"placeholders.answers.content\": '回答を入力してください',\n  \"placeholders.answers.translate_language_id\": '投稿言語',\n  \"placeholders.answers.submit_btn\": '投稿',\n  \"placeholders.comments.content\": 'コメントを入力してください',\n  \"placeholders.comments.translate_language_id\": '投稿言語',\n  \"placeholders.comments.submit_btn\": '投稿',\n  \"placeholders.translations.content\": '翻訳を入力してください',\n  \"placeholders.translations.translate_language_id\": '投稿言語',\n  \"placeholder.profile_edit.profile\": 'プロフィールを入力してください',\n  \"placeholder.profile_edit.country\": '出身地・所在地',\n  \"placeholder.profile_edit.nickname\": \"ユーザー名\",\n  \"buttons.title.reply\": '返信',\n  \"buttons.title.post\": '投稿',\n  \"buttons.title.sign_up\": '新規登録',\n  \"buttons.title.login\": 'ログイン',\n  \"buttons.title.send\": '送信',\n  \"buttons.profile_edit.select\": '選択',\n  \"buttons.profile_edit.save\": '保存',\n  \"translated.name\": '翻訳者',\n  \"translated.state\": '未翻訳',\n  \"categories.comic_anime\": '漫画・アニメ',\n  \"categories.culture\": '文化',\n  \"categories.tourism\": '観光',\n  \"categories.music\": '音楽',\n  \"sort.answerMany\":'回答の多い順',\n  \"sort.answerFew\":'回答の少ない順',\n  \"sort.Asc\":'投稿の新しい順',\n  \"sort.Des\":'投稿の古い順',\n};\nexport default ja_JP;\n","const en_US = {\n  \"titles.sign_up\": 'Sign Up',\n  \"titles.login\": 'Login',\n  \"titles.activate\": 'Activation',\n  \"titles.password_reset\": 'Password Reset',\n  \"titles.question_list\": 'Questions',\n  \"titles.answer_list\": 'Answers',\n  \"titles.post_list\": 'Posts',\n  \"titles.translation_list\": 'Translations',\n  \"titles.not_translated_list\": 'Not Translated List',\n  \"titles.profile_edit.user_name\": 'User Name',\n  \"titles.profile_edit.birthplace\": 'Birthplace・Location',\n  \"titles.profile_edit.profile\": 'Profile',\n  \"titles.profile_edit.user_image\": 'Profile Image',\n  \"titles.profile.edit\": 'Profile Edit',\n  \"titles.profile.votes\": 'Like list',\n  \"titles.question.edit\": 'Question Edit',\n  \"titles.question.delete\": 'Question Delete',\n  \"titles.question.return\": 'Top', \n  \"messages.empty_answers\": 'There is no answer yet. Be the first contributor!',\n  \"messages.birthplace\": 'BirthPlace',\n  \"messages.you_are_not_target\": 'This question is subject to answers in \"%s\".',\n  \"messages.enter_mail\": 'Enter your email address.',\n  \"messages.enter_new_password\": 'Enter new password.',\n  \"messages.activate_completed\": 'Activation is completed.',\n  \"links.to_not_translated_list\": 'See not translated lists',\n  \"links.edit\": 'Edit',\n  \"links.question\": 'Question',\n  \"links.answer\": 'Answer',\n  \"links.comment\": 'Comment',\n  \"links.translate\": 'translate',\n  \"links.profile\": 'Profile',\n  \"links.profile_edit\": 'Profile Edit',\n  \"links.sign_up\": 'Sign Up',\n  \"links.login\": 'Login',\n  \"links.password_reset\": 'Forgot password',\n  \"links.logout\": 'Logout',\n  \"links.to_question_view\": 'to question page',\n  \"languages.japanese\": 'Japanese',\n  \"languages.english\": 'English',\n  \"countries.japan\": 'Japan',\n  \"countries.usa\": 'USA',\n  \"countries.philippines\": 'Philippines',\n  \"countries.england\": 'England', \n  \"countries.newzealand\": 'Newzealand', \n  \"categories.all\": 'All',\n  \"categories.comic_anime\": 'Comic・Anime',\n  \"categories.culture\": 'Culture',\n  \"categories.tourism\": 'Tourism',\n  \"categories.music\": 'Music',\n  \"errors.questions.content\": 'Please write a question text.',\n  \"errors.questions.country_id\": 'Please select target country.',\n  \"errors.questions.translate_language_id\": 'Please select the language.',\n  \"errors.questions.category_id\": 'Please select the cateogry.',\n  \"errors.answers.content\": 'Please write an answer text.',\n  \"errors.answers.translate_language_id\": 'Please select the language.',\n  \"errors.comments.content\": 'Please write an comment text.',\n  \"errors.comments.translate_language_id\": 'Please select the language.',\n  \"errors.translations.content\": 'Please write a translated text.',\n  \"errors.translations.translate_language_id\": 'Please select the language.',\n  \"errors.sign_ups.name\": 'Please enter user name.',\n  \"errors.sign_ups.mail\": 'Please enter your e-mail address.',\n  \"errors.sign_ups.country\": 'Please enter your Birthplace・Location',\n  \"errors.sign_ups.appropriate_mail\": 'Please specify an appropriate email address.',\n  \"errors.sign_ups.password\": 'Please enter password.',\n  \"errors.sign_ups.confirm_password\": 'Password does not match.',\n  \"errors.login.mail\": 'Please enter your e-mail address.',\n  \"errors.login.appropriate_mail\": 'Please specify an appropriate email address.',\n  \"errors.login.password\": 'Please enter password.',\n  \"errors.profile_edit.country\": 'Please enter your Birthplace・Location',\n  \"placeholders.sign_ups.name\": 'Name',\n  \"placeholders.sign_ups.mail\": 'Mail',\n  \"placeholders.sign_ups.country\": 'Birthplace・Location',\n  \"placeholders.sign_ups.password\": 'Password',\n  \"placeholders.sign_ups.confirm_password\": 'Password Confirm',\n  \"placeholders.login.mail\": 'Mail',\n  \"placeholders.login.password\": 'Password',\n  \"placeholders.questions.content\": 'Write your question!!',\n  \"placeholders.questions.country_id\": 'Target User Country',\n  \"placeholders.questions.translate_language_id\": 'Language',\n  \"placeholders.questions.category_id\": 'Category',\n  \"placeholders.questions.submit_btn\": 'POST',\n  \"placeholders.answers.content\": 'Write your answer!!',\n  \"placeholders.answers.translate_language_id\": 'Language',\n  \"placeholders.answers.submit_btn\": 'POST',\n  \"placeholders.comments.content\": 'Write your comment!!',\n  \"placeholders.comments.translate_language_id\": 'Language',\n  \"placeholders.comments.submit_btn\": 'POST',\n  \"placeholders.translations.content\": 'Please write a translated text.',\n  \"placeholders.translations.translate_language_id\": 'Language',\n  \"placeholder.profile_edit.profile\": 'Please write your profile',\n  \"placeholder.profile_edit.country\": 'Birthplace・Location',\n  \"placeholder.profile_edit.nickname\": \"User name\",\n  \"buttons.title.reply\": 'Reply',\n  \"buttons.title.post\": 'Post',\n  \"buttons.title.sign_up\": 'Sign Up',\n  \"buttons.title.login\": 'Login',\n  \"buttons.title.send\": 'Send',\n  \"buttons.profile_edit.select\": 'Select',\n  \"buttons.profile_edit.save\": 'Save',\n  \"translated.name\": 'Translator',\n  \"translated.state\": 'Untranslated',\n  \"categories.comic_anime\": 'Comic・Anime',\n  \"categories.culture\": 'culture',\n  \"categories.tourism\": 'tourism',\n  \"categories.music\": 'music',\n  \"sort.answerMany\":'Order of many answers',\n  \"sort.answerFew\":'Order of few answers',\n  \"sort.Asc\":'New order of posts',\n  \"sort.Des\":'Oldest order of posts',\n};\nexport default en_US;\n","import { locales, categories, sorts } from './intl';\n\nconst savedLocale = localStorage.getItem('locale');\nconst currentLocale = savedLocale ? savedLocale : 'ja';\n\nexport const initialState = {\n  intl: locales[currentLocale],\n  ctgr: {\n    category: 'all',\n    categoryId: 0\n  },\n  sort: {\n    sort: 'Asc',\n    sortId: 3\n  },\n  signUp: {\n    mail: '',\n    password: '',\n    mnemonic: '',\n    hash: '',\n  },\n  profile: {\n    isFetching: false,\n    user: {},\n    questions: [],\n    answers: [],\n    comments: [],\n  },\n  auth: {\n    isPrepared: false,\n    isFetching: false,\n    isLoggedIn: false,\n    user: {},\n    jwt: ''\n  },\n  answers: {\n    isFetching: false,\n    answerArray: [],\n    currentAnswer: {}\n  },\n  answerTranslations: {\n    isFetching: false,\n    currentTranslationList: [],\n    currentTranslation: {},\n  },\n  questions: {\n    isFetching: false,\n    translateLanguageId: 1,\n    questionArray: [],\n    currentQuestion: {},\n  },\n  questionTranslations: {\n    isFetching: false,\n    currentTranslationList: [],\n    currentTranslation: {},\n  },\n  comments: {\n    isFetching: false,\n    currentCommentList: [],\n    currentComment: {}\n  },\n  commentTranslations: {\n    isFetching: false,\n    currentTranslationList: [],\n    currentTranslation: {},\n  },\n  //未翻訳コメントリスト一覧表示\n  not_translate: {\n    //api接続中である場合（非同期処理をしている途中）はtrueになる\n    isFetching: false,\n    questions: [],\n    answers: [],\n    comments: [],\n  },\n  //評価機能\n  votes: {\n    //api接続中である場合（非同期処理をしている途中）はtrueになる\n    isFetching: false,\n    status: [],\n  },\n  //評価機能\n  voteTranslations: {\n    //api接続中である場合（非同期処理をしている途中）はtrueになる\n    isFetching: false,\n    status: [],\n  },\n};\n","import { combineReducers } from 'redux';\nimport { reducer as notificationsReducer } from 'reapop';\nimport * as questions from './reducers/Question';\nimport * as answers from './reducers/Answer';\nimport * as users from './reducers/User';\nimport * as comments from './reducers/Comment';\nimport * as questionTranslations from './reducers/QuestionTranslation';\nimport * as answerTranslations from './reducers/AnswerTranslation';\nimport * as commentTranslations from './reducers/CommentTranslation';\nimport * as notTranslated from './reducers/NotTranslated';\nimport * as votes from './reducers/Votes';\nimport * as voteTranslations from './reducers/VoteTranslation';\nimport { intl } from './reducers/Intl';\nimport { ctgr } from './reducers/Category';\nimport { sortRule } from './reducers/Sort';\nimport { addLocaleData } from 'react-intl';\n\nconst reducer = combineReducers({\n  intl: intl,\n  ctgr: ctgr,\n  sort: sortRule,\n  answers: answers.list,\n  questions: questions.list,\n  questionTranslations: questionTranslations.list,\n  answerTranslations: answerTranslations.list,\n  auth: users.auth,\n  signUp: users.signUp,\n  profile: users.profile,\n  comments: comments.list,\n  commentTranslations: commentTranslations.list,\n  not_translate: notTranslated.list,\n  votes: votes.list,\n  voteTranslations: voteTranslations.list,\n  notifications: notificationsReducer()\n});\n\nexport default reducer;\n","import {\n  UPDATE_CURRENT_LANGUAGE,\n} from '../actions/Intl';\nimport { initialState } from '../constants';\nimport { locales } from '../intl';\n\nexport const intl = (state = initialState.intl, action) => {\n  switch (action.type) {\n  case UPDATE_CURRENT_LANGUAGE:\n    const { locale, messages, translateLanguageId } = locales[action.payload];\n    localStorage.setItem('locale', locale);\n    return {\n      ...state,\n      locale,\n      messages,\n      translateLanguageId\n    };\n  default:\n    return state;\n  }\n};\n\n","import { UPDATE_CURRENT_CATEGORY } from '../actions/Category';\nimport { initialState } from '../constants';\nimport { categories } from '../intl';\n\nexport const ctgr = (state = initialState.ctgr, action) => {\n\n  switch (action.type) {\n  case UPDATE_CURRENT_CATEGORY:\n    const { category, categoryId } = categories[action.payload];\n    return {\n      ...state,\n      category,\n      categoryId\n    };\n  default:\n    return state;\n  }\n};\n","import { UPDATE_CURRENT_SORT } from '../actions/Sort';\nimport { initialState } from '../constants';\nimport { sorts } from '../intl';\n\nexport const sortRule = (state = initialState.ctgr, action) => {\n\n  switch (action.type) {\n  case UPDATE_CURRENT_SORT:\n    const { sort, sortId } = sorts[action.payload];\n    return {\n      ...state,\n      sort,\n      sortId\n    };\n  default:\n    return state;\n  }\n};\n","import {\n    CHANGE_ANSWER_FORM_CONTENT,\n    REQUEST_DATA,\n    RECEIVE_DATA_SUCCESS,\n    RECEIVE_SINGLE_DATA_SUCCESS,\n    RECEIVE_DATA_FAILED,\n    INITIALIZE_FORM,\n    POST_ANSWER_DATA\n} from '../actions/Answer';\nimport { initialState } from '../constants';\n\nexport const form = (state = initialState.answerForm, action) => {\n    switch (action.type) {\n    case CHANGE_ANSWER_FORM_CONTENT:\n        return {\n            ...state,\n            content: action.payload,\n        };\n    case POST_ANSWER_DATA:\n        return {\n            ...state\n        };\n    case REQUEST_DATA:\n        return {\n            ...state,\n            isFetching: true,\n        };\n    case RECEIVE_DATA_SUCCESS:\n        return {\n            ...state,\n            isFetching: false,\n        };\n    case RECEIVE_DATA_FAILED:\n        return {\n            ...state,\n            isFetching: false,\n        };\n    case INITIALIZE_FORM:\n        return {\n            ...state,\n            content: ''\n        };\n    default:\n        return state;\n    }\n};\n\nexport const list = (state = initialState.answers, action) => {\n    switch (action.type) {\n    case REQUEST_DATA:\n        return {\n            ...state,\n            isFetching: true,\n        };\n    case RECEIVE_DATA_SUCCESS:\n        return {\n            ...state,\n            isFetching: false,\n            answerArray: action.payload.data,         \n        };\n    case RECEIVE_SINGLE_DATA_SUCCESS:\n        return {\n            ...state,\n            isFetching: false,\n            currentAnswer: action.payload.data\n        };\n    case RECEIVE_DATA_FAILED:\n        return {\n            ...state,\n            isFetching: false,\n        };\n    case INITIALIZE_FORM:\n        return {\n            ...state,\n            content: ''\n        };\n    default:\n        return state;\n    }\n};\n","import {\n  POST_QUESTION_DATA,\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATE_CURRENT_TRANSLATE_LANGUAGE,\n  UPDATED_QUESTION_DATA\n} from '../actions/Question';\nimport { initialState } from '../constants';\n\nexport const form = (state = initialState.questionForm, action) => {\n  switch (action.type) {\n  case POST_QUESTION_DATA:\n    return {\n      ...state\n    };\n  default:\n    return state;\n  }\n};\n\nexport const list = (state = initialState.questions, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      questionArray: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentQuestion: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATE_CURRENT_TRANSLATE_LANGUAGE:\n    return {\n      ...state,\n      translateLanguageId: parseInt(action.payload)\n    };\n  case UPDATED_QUESTION_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      currentQuestion: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATED_SINGLE_QUESTION_TRANSLATION\n} from '../actions/QuestionTranslation';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.questionTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslationList: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslation: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_SINGLE_QUESTION_TRANSLATION:\n    return {\n      ...state,\n      currentTranslation: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  POST_ANSWER_TRANSLATION_DATA,\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATED_SINGLE_ANSWER_TRANSLATION\n} from '../actions/AnswerTranslation';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.answerTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslationList: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslation: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_SINGLE_ANSWER_TRANSLATION:\n    return {\n      ...state,\n      currentTranslation: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  CLICK_SUBMIT,\n  REQUEST_DATA,\n  RECEIVE_DATA_FAILED,\n  REMOVE_USER_DATA,\n  UPDATED_USER_DATA,\n  UPDATED_PROFILE_DATA,\n  UPDATED_PROFILE_QUESTION_DATA,\n  UPDATED_PROFILE_ANSWER_DATA,\n  UPDATED_PROFILE_COMMENT_DATA,\n  UPDATED_PROFILE_TRANSLATED_DATA,\n  LOGIN_SUCCESS,\n  LOGIN_FAILED,\n  PREPARED_AUTH\n} from '../actions/User';\nimport { initialState } from '../constants';\n\nexport const signUp = (state = initialState.signUp, action) => {\n  switch (action.type) {\n  case CLICK_SUBMIT:\n    return {\n      ...state,\n    };\n  default:\n    return state;\n  }\n};\n\nexport const auth = (state = initialState.auth, action) => {\n  switch (action.type) {\n  case LOGIN_SUCCESS:\n    return {\n      ...state,\n      isLoggedIn: true,\n      user: action.payload.data,\n      jwt: action.payload.data.jwt\n    };\n  case LOGIN_FAILED:\n    return {\n      ...state,\n      isLoggedIn: false,\n      user: {},\n      jwt: ''\n    };\n  case REMOVE_USER_DATA:\n    return {\n      ...state,\n      isLoggedIn: false,\n      user: {},\n      jwt: ''\n    };\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_USER_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      user: action.payload.data\n    };\n  case PREPARED_AUTH:\n    return {\n      ...state,\n      isPrepared: true\n    };\n  default:\n    return state;\n  }\n};\n\nexport const profile = (state = initialState.profile, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true\n    };\n  case UPDATED_PROFILE_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      user: action.payload.data\n    };\n  case UPDATED_PROFILE_QUESTION_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      questions: action.payload.data\n    };\n  case UPDATED_PROFILE_ANSWER_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      answers: action.payload.data\n    };\n  case UPDATED_PROFILE_COMMENT_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      comments: action.payload.data\n    };\n  case UPDATED_PROFILE_TRANSLATED_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      translates: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  REQUEST_DATA,\n  RECEIVE_COMMENT_DATA_SUCCESS,\n  POST_COMMENT,\n  UPDATED_COMMENT_DATA,\n  UPDATED_SINGLE_COMMENT_DATA,\n  UPDATED_COMMENT_ARRAY\n} from '../actions/Comment';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.comments, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true\n    };\n  case RECEIVE_COMMENT_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      commentArray: action.payload.data\n    };\n  case UPDATED_COMMENT_ARRAY:\n    return {\n      ...state,\n      isFetching: false,\n      commentArray: action.payload.data,\n    };\n  case UPDATED_COMMENT_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      currentCommentList: action.payload.data\n    };\n  case UPDATED_SINGLE_COMMENT_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      currentComment: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATED_SINGLE_COMMENT_TRANSLATION,\n} from '../actions/CommentTranslation';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.commentTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslationList: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslation: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_SINGLE_COMMENT_TRANSLATION:\n    return {\n      ...state,\n      currentTranslation: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n    REQUEST_DATA,\n    RECEIVE_DATA_SUCCESS,\n} from '../actions/NotTranslated';\n  \nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.not_translate, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      //...stateは他の状態は維持してisFetchingだけを変更する。\n      ...state,\n      isFetching: true,\n    };\n  \n  case RECEIVE_DATA_SUCCESS:\n\n    const { questions, answers, comments } = action.payload;\n\n    return {\n      ...state,\n      //isFetchingは終了したのでfalseにしている。\n      isFetching: false,\n      //ここでquestionArrayに値を入れている。\n      questions,\n      answers,\n      comments,\n    };\n  \n  default:\n    return state;\n  }\n};","import {\n    POST_VOTE,\n    REQUEST_DATA,\n    RECEIVE_DATA_SUCCESS,\n    RECEIVE_DATA_FAILED,\n  } from '../actions/VoteTranslation.js';\n\n  import { initialState } from '../constants';\n    \n  export const list = (state = initialState.votes, action) => {\n    switch (action.type) {\n    case POST_VOTE:\n      return {\n        ...state\n      }; \n    case REQUEST_DATA:\n      return {\n        ...state,\n        isFetching: true,\n      };\n    case RECEIVE_DATA_SUCCESS:\n      return {\n        ...state,\n        isFetching: false,\n        questionArray: action.payload.data                  \n      };\n    case RECEIVE_DATA_FAILED:\n      return {\n        ...state,\n        isFetching: false\n      };\n    default:\n      return state;\n    }\n  };\n  ","import {\n  POST_VOTE,\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n} from '../actions/VoteTranslation';\n\nimport { initialState } from '../constants';\n\nexport const form = (state = initialState.voteTranslations, action) => {\n  switch (action.type) {\n  case POST_VOTE:\n    return {\n      ...state\n    };\n  default:\n    return state;\n  }\n};\n\nexport const list = (state = initialState.voteTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      status: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  default:\n    return state;\n  }\n};\n","import axios from 'axios';\n\nexport const createUserAccount = (postData) => {\n    return axios.post('/api/users', postData);\n};\n\nexport const loginUser = (postData) => {\n    const username = postData.mail;\n    const { password } = postData;\n\n    return axios.post('/api/users/login', {\n        username,\n        password\n    });\n};\n\nexport const loginUserJwt = (postData) => {\n    const { jwt } = postData;\n    const headers = {\n        \"Content-Type\": 'application/json',\n        \"Authorization\": `Bearer ${jwt}`\n    };\n    return axios.post('/api/users/login_jwt', {}, { headers });\n};\n\nexport const activateUser = (postData) => {\n  const { token } = postData;\n  return axios.post(`/api/users/activate/${token}`, postData);\n};\n\nexport const resetPassword = (postData) => {\n  return axios.post(`/api/users/password_reset`, postData);\n};\n\nexport const saveUserPassword = (postData) => {\n  const { token } = postData;\n  return axios.put(\n    `/api/users/update_password/${token}`,\n    postData\n  );\n};\n\nexport const saveUserProfile = (postData) => {\n    const { user_id, name, profile, country_id, image } = postData;\n    let data = new FormData();\n    console.log(\"name-----------\",name);\n    data.append('name', name);\n    data.append('profile', profile);\n    data.append('country_id', country_id);\n    data.append('image', image);\n    return axios.put(\n        `/api/users/${user_id}`,\n        data,\n        {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        }\n    );\n};\n\nexport const getUser = (user_id) => {\n    return axios.get(`/api/users/${user_id}`);\n};\n\nexport const getUserByToken = (token) => {\n  return axios.get(`/api/users/password_reset/${token}`);\n};\n","import axios from 'axios';\n\nexport const fetchQuestionList = (params) => {\n    return axios.get('/api/questions', {\n        params\n    });\n};\n\nexport const fetchQuestion = (id) => {\n    return axios.get(`/api/questions/${id}`);\n};\n\nexport const postQuestionData = (postData) => {\n    return axios.post('/api/questions', postData);\n};\n\nexport const saveQuestionData = (postData) => {\n  const { question_id } = postData;\n  return axios.put(`/api/questions/${question_id}`, postData);\n};\n\nexport const deleteQuestionData = (params) => {\n  const { question_id } = params;\n  return axios.delete(`/api/questions/${question_id}`, { params });\n};\n","import axios from 'axios';\n\nconst apiUrl = '/api/answers';\n\nexport const fetchAnswer = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const fetchAnswerList = (params) => {\n  return axios.get(apiUrl, {\n    params\n  });\n};\n\nexport const fetchAnswerListWithQuestion = (params) => {\n  return axios.get(`${apiUrl}_with_question`, {\n    params\n  });\n};\n\nexport const postAnswerData = (params) => {\n  return axios.post(apiUrl, params);\n};\n\nexport const saveAnswerData = (saveData) => {\n  const { answer_id } = saveData;\n  return axios.put(`${apiUrl}/${answer_id}`, saveData);\n};\n\nexport const deleteAnswerData = (params) => {\n  const { answer_id } = params;\n  return axios.delete(`${apiUrl}/${answer_id}`, { params });\n};\n","import axios from 'axios';\nconst apiUrl = '/api/comments';\n\nexport const fetchCommentWithUserList = (params) => {\n  return axios.get(`/api/comments_with_User`, {\n    params\n  });\n}\n\nexport const fetchCommentsList = (params) => {\n    return axios.get(apiUrl, {\n        params\n    });\n};\n\nexport const fetchComment = (id) => {\n    return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const fetchCommentListWithAnswer = (params) => {\n  return axios.get(`${apiUrl}_with_answer`, {\n    params\n  });\n};\n\nexport const postCommentData = (postData) => {\n    return axios.post(apiUrl, postData);\n};\n\nexport const saveCommentData = (saveData) => {\n  const { comment_id } = saveData;\n  return axios.put(`${apiUrl}/${comment_id}`, saveData);\n};\n\nexport const deleteCommentData = (params) => {\n  const { comment_id } = params;\n  return axios.delete(`${apiUrl}/${comment_id}`, { params });\n};\n","import axios from 'axios';\n\nexport const fetchContentTranslation = ( params ) => {\n    return axios.get(`/api/content_translations`,{\n      params\n    });\n};","import { addNotification as notify } from 'reapop';\n\nexport function notifySuccess(message) {\n  return notify({\n    message,\n    position: 'tc',\n    status: 'success',\n    dismissAfter: 2000\n  });\n}\n\nexport function notifyError(message) {\n  return notify({\n    message,\n    position: 'tc',\n    status: 'error',\n    dismissAfter: 2000\n  });\n}\n\nexport function notifyAlert(message) {\n  return notify({\n    message,\n    position: 'tc',\n    status: 'error',\n    dismissAfter: 2000\n  });\n}\n","import { takeEvery, call, put, select } from 'redux-saga/effects';\n// import { push } from 'react-router-redux';\nimport {\n  updateUserData, requestData, receiveDataSuccess, receiveDataFailed,\n  loginSuccess, loginFailed, removeUserData, updatedUserData,\n  updatedProfileData, preparedAuth, updatedProfileQuestionData,\n  updatedProfileAnswerData, updatedProfileCommentData, updatedProfileTranslatedData,\n} from '../actions/User';\nimport {\n  CREATE_USER_ACCOUNT,\n  SAVE_USER_DATA,\n  SAVE_USER_PASSWORD,\n  ACTIVATE_USER,\n  SEND_RESET_PASSWORD_MAIL,\n  GET_USER_PROFILE,\n  GET_USER_BY_TOKEN,\n  LOGIN_USER,\n  LOGIN_USER_JWT,\n  LOGOUT_USER\n} from '../actions/User';\nimport * as api from './apis/Users';\nimport { fetchQuestionList } from './apis/Questions';\nimport { fetchAnswerListWithQuestion } from './apis/Answers';\nimport { fetchCommentListWithAnswer } from './apis/Comments';\nimport { fetchContentTranslation } from './apis/ContentTranslations';\nimport { notifySuccess, notifyError } from './Util';\n\nexport function* createUserAccount(action) {\n  const { history } = action.payload;\n  try {\n    yield put(requestData());\n    const payload = yield call(api.createUserAccount, action.payload);\n    yield put(receiveDataSuccess(payload));\n    const message = '新規登録に成功しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/users/login');\n  } catch (e) {\n    yield put(receiveDataFailed());\n    const message = '新規登録に失敗しました';\n    yield put(notifyError(message));\n  }\n}\n\nexport function* loginUserAccount(action) {\n  const { history } = action.payload;\n  try {\n    const payload = yield call(api.loginUser, action.payload);\n    yield put(loginSuccess(payload));\n    const { jwt } = payload.data;\n    localStorage.setItem('jwt', jwt);\n    const message = 'ログインに成功しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n    // yield put(push('/'));\n  } catch (e) {\n    //yield put(loginFailed());\n    const message = 'アカウントが存在しないか、パスワードが間違っています';\n    yield put(notifyError(message));\n    yield call(history.push, '/users/login');\n  }\n}\n\nexport function* loginUserAccountJwt(action) {\n  try {\n    const jwt = localStorage.getItem('jwt');\n    if (!jwt) {\n      throw new Error('JWTがありません。');\n    }\n    const payload = yield call(api.loginUserJwt, { jwt });\n    yield put(loginSuccess(payload));\n    yield put(preparedAuth());\n  } catch (e) {\n    yield put(loginFailed());\n    yield put(preparedAuth());\n  }\n}\n\nexport function* logoutUserAccount(action) {\n  try {\n    const { history } = action.payload;\n    localStorage.removeItem('jwt');\n    yield put(removeUserData());\n    const message = 'ログアウトしました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n  } catch (e) {\n    //yield put(loginFailed());\n    //yield call(history.push, '/users/login');\n  }\n}\n\nexport function* saveUserData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveUserProfile, action.payload);\n    const message = 'プロフィールを更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedUserData(payload));\n  } catch (e) {\n    const message = 'プロフィールの更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveUserPassword(action) {\n  try {\n    const { history } = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.saveUserPassword, action.payload);\n    yield put(loginSuccess(payload));\n    const { jwt } = payload.data;\n    localStorage.setItem('jwt', jwt);\n    const message = 'パスワードを更新しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = 'パスワードの更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function *resetPassword(action) {\n  try {\n    const state = yield select();\n    const { locale } = state.intl;\n    action.payload.locale = locale;\n    yield put(requestData());\n    const payload = yield call(api.resetPassword, action.payload);\n    const message = 'メールを送信しました';\n    yield put(notifySuccess(message));\n  } catch (e) {\n    const message = 'メール送信に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* getUserProfile(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.getUser, action.payload);\n    const questionParams = {user_id : action.payload};\n    const questionPayload = yield call(fetchQuestionList, questionParams);\n\n    const answerParams = {user_id : action.payload};\n    const answerPayload = yield call(fetchAnswerListWithQuestion, answerParams);\n\n    const commentParams = {user_id : action.payload};\n    const commentPayload = yield call(fetchCommentListWithAnswer, commentParams);\n\n    const translateParams = {user_id : action.payload};\n    const translatedContent = yield call(fetchContentTranslation, translateParams);\n    \n    yield put(updatedProfileData(payload));\n    yield put(updatedProfileQuestionData(questionPayload));\n    yield put(updatedProfileAnswerData(answerPayload));\n    yield put(updatedProfileCommentData(commentPayload));\n    yield put(updatedProfileTranslatedData(translatedContent));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* getUserByToken(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.getUserByToken, action.payload);\n    yield put(updatedUserData(payload));\n  } catch (e) {\n    console.log('receiveDataFailed');\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* activateUser(action) {\n  try {\n    const { history } = action.payload;\n    console.log('history', history);\n    yield put(requestData());\n    const payload = yield call(api.activateUser, action.payload);\n    yield put(loginSuccess(payload));\n    const { jwt } = payload.data;\n    localStorage.setItem('jwt', jwt);\n    const message = '認証が完了しました。';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n  } catch (e) {\n    console.log('receiveDataFailed');\n    yield put(receiveDataFailed());\n  }\n}\n\nconst userSagas = [\n  takeEvery(CREATE_USER_ACCOUNT, createUserAccount),\n  takeEvery(LOGIN_USER, loginUserAccount),\n  takeEvery(LOGIN_USER_JWT, loginUserAccountJwt),\n  takeEvery(LOGOUT_USER, logoutUserAccount),\n  takeEvery(SAVE_USER_DATA, saveUserData),\n  takeEvery(SAVE_USER_PASSWORD, saveUserPassword),\n  takeEvery(GET_USER_PROFILE, getUserProfile),\n  takeEvery(GET_USER_BY_TOKEN, getUserByToken),\n  takeEvery(SEND_RESET_PASSWORD_MAIL, resetPassword),\n  takeEvery(ACTIVATE_USER, activateUser),\n];\n\nexport default userSagas;\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updateCurrentTranslateLanguage,\n  updatedQuestionData\n} from '../actions/Question';\nimport {\n  FETCH_QUESTION_LIST,\n  FETCH_QUESTION,\n  CHANGE_QUESTION_LIST_LANGUAGE,\n  POST_QUESTION_DATA,\n  SAVE_QUESTION_DATA,\n  DELETE_QUESTION,\n} from '../actions/Question';\n\nimport * as api from './apis/Questions';\nimport { notifySuccess, notifyError } from './Util';\n\nexport function* handleFetchData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestionList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* handleFetchQuestionById(action) {\n  try {\n    const  id   = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestion, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postQuestion(action) {\n  try {\n    yield put(requestData());\n    yield call(api.postQuestionData, action.payload);\n    const payload = yield call(api.fetchQuestionList);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* changeQuestionListLanguage(action) {\n  try {\n    const { translate_language_id } = action.payload;\n    yield put(requestData());\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveQuestionData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveQuestionData, action.payload);\n    const message = '質問を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedQuestionData(payload));\n  } catch (e) {\n    const message = '質問の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteQuestionData(action) {\n  try {\n    const { question_id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteQuestionData, action.payload);\n    const message = '質問を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchQuestionList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '質問の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst questionSagas = [\n  //FETCH_QUESTION_LISTというアクションが発火させた場合はhandleFetchDataを起動させる。\n  takeEvery(FETCH_QUESTION_LIST, handleFetchData),\n  takeEvery(FETCH_QUESTION, handleFetchQuestionById),\n  // takeEvery(CHANGE_QUESTION_LIST_LANGUAGE, changeQuestionListLanguage),\n  takeEvery(POST_QUESTION_DATA, postQuestion),\n  takeEvery(SAVE_QUESTION_DATA, saveQuestionData),\n  takeEvery(DELETE_QUESTION, deleteQuestionData),\n];\n\nexport default questionSagas;\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport { reset } from 'redux-form';\nimport {\n  requestData, receiveDataSuccess, receiveDataFailed, initializeForm,\n  receiveSingleDataSuccess,\n} from '../actions/Answer';\nimport {\n  FETCH_ANSWER,\n  FETCH_ANSWER_LIST,\n  POST_ANSWER_DATA,\n  SAVE_ANSWER_DATA,\n  DELETE_ANSWER,\n} from '../actions/Answer';\nimport * as api from './apis/Answers';\nimport * as act from '../actions/Comment';\nimport { notifySuccess, notifyError } from './Util';\nimport { fetchCommentWithUserList }from './apis/Comments';\n\nexport function* handleFetchAnswerData(action) {\n  try {\n    yield put(requestData());\n    const answerList = yield call(api.fetchAnswerList, action.payload);\n    const answerId = answerList.data.map(v =>{ return v.id });\n    const commentList = yield call(fetchCommentWithUserList, answerId);\n    yield put(receiveDataSuccess(answerList));\n    yield put(act.receiveCommentDataSuccess(commentList));\n    yield put(act.updatedCommentArray(action.payload));   \n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* postAnswer(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.postAnswerData, action.payload);\n    const { question_id, translate_language_id } = action.payload;\n    const answerPayload = yield call(api.fetchAnswerList, { question_id, translate_language_id });\n    yield put(receiveDataSuccess(answerPayload));\n    yield put(reset('answerForm'));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* fetchSingleAnswerData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchAnswer, action.payload);\n    yield put(receiveSingleDataSuccess(payload));\n    yield put(reset('answerForm'));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveAnswerData(action) {\n  try {\n    const { question_id, history } = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.saveAnswerData, action.payload);\n    const message = '回答を更新しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = '回答の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteAnswerData(action) {\n  try {\n    const { answer_id, question_id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteAnswerData, action.payload);\n    const message = '回答を削除しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = '回答の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\n\nconst answerSagas = [\n  takeEvery(FETCH_ANSWER_LIST, handleFetchAnswerData),\n  takeEvery(POST_ANSWER_DATA, postAnswer),\n  takeEvery(FETCH_ANSWER, fetchSingleAnswerData),\n  takeEvery(SAVE_ANSWER_DATA, saveAnswerData),\n  takeEvery(DELETE_ANSWER, deleteAnswerData),\n];\n\nexport default answerSagas;\n","import axios from 'axios';\n\nconst apiUrl = '/api/question_translations';\n\nexport const fetchQuestionTranslationList = (question_id) => {\n  return axios.get(apiUrl, {\n    params: { question_id }\n  });\n};\n\nexport const fetchQuestionTranslation = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const postQuestionTranslationData = (postData) => {\n  const {\n    content,\n    user_id,\n    question_id,\n    translate_language_id\n  } = postData;\n  return axios.post(apiUrl, {\n    content,\n    user_id,\n    question_id,\n    translate_language_id\n  });\n};\n\nexport const saveQuestionTranslationData = (saveData) => {\n  const { id } = saveData;\n  return axios.put(`${apiUrl}/${id}`, saveData);\n};\n\nexport const deleteQuestionTranslation= (params) => {\n  const { id } = params;\n  return axios.delete(`${apiUrl}/${id}`, { params });\n};\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updatedSingleQuestionTranslation\n} from '../actions/QuestionTranslation';\nimport {\n  FETCH_QUESTION_TRANSLATION_LIST,\n  FETCH_QUESTION_TRANSLATION,\n  POST_QUESTION_TRANSLATION_DATA,\n  SAVE_QUESTION_TRANSLATION_DATA,\n  DELETE_QUESTION_TRANSLATION,\n} from '../actions/QuestionTranslation';\nimport * as api from './apis/QuestionTranslations';\nimport { notifySuccess, notifyError } from './Util';\nimport * as questionSagas from './Question';\n\nexport function* handleFetchQuestionTranslationList(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestionTranslationList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* handleFetchQuestionTranslationById(action) {\n  try {\n    const id = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestionTranslation, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* postQuestionTranslation(action) {\n  try {\n    const { question_id } = action.payload;\n    yield put(requestData());\n    yield call(api.postQuestionTranslationData, action.payload);\n    const payload = yield call(api.fetchQuestionTranslationList, question_id);\n    yield put(receiveDataSuccess(payload));\n    const data = {payload: {}};\n    yield call(questionSagas.handleFetchData, data);\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveQuestionTranslationData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveQuestionTranslationData, action.payload);\n    const message = '翻訳を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedSingleQuestionTranslation(payload));\n  } catch (e) {\n    const message = '翻訳の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteQuestionTranslation(action) {\n  try {\n    const { id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteQuestionTranslation, action.payload);\n    const message = '翻訳を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchQuestionTranslationList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '翻訳の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst questionTranslationSagas = [\n  takeEvery(POST_QUESTION_TRANSLATION_DATA, postQuestionTranslation),\n  takeEvery(FETCH_QUESTION_TRANSLATION_LIST, handleFetchQuestionTranslationList),\n  takeEvery(FETCH_QUESTION_TRANSLATION, handleFetchQuestionTranslationById),\n  takeEvery(SAVE_QUESTION_TRANSLATION_DATA, saveQuestionTranslationData),\n  takeEvery(DELETE_QUESTION_TRANSLATION, deleteQuestionTranslation),\n];\n\nexport default questionTranslationSagas;\n","import axios from 'axios';\n\nconst apiUrl = '/api/answer_translations';\n\nexport const fetchAnswerTranslationList = (answer_id) => {\n  return axios.get(apiUrl, {\n    params: { answer_id }\n  });\n};\n\nexport const fetchAnswerTranslation = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const postAnswerTranslationData = (postData) => {\n  const {\n    content,\n    user_id,\n    answer_id,\n    translate_language_id\n  } = postData;\n  return axios.post(apiUrl, {\n    content,\n    user_id,\n    answer_id,\n    translate_language_id\n  });\n};\n\nexport const saveAnswerTranslationData = (saveData) => {\n  const { id } = saveData;\n  return axios.put(`${apiUrl}/${id}`, saveData);\n};\n\nexport const deleteAnswerTranslation= (params) => {\n  const { id } = params;\n  return axios.delete(`${apiUrl}/${id}`, { params });\n};\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updatedSingleAnswerTranslation\n} from '../actions/AnswerTranslation';\nimport {\n  FETCH_ANSWER_TRANSLATION_LIST,\n  FETCH_ANSWER_TRANSLATION,\n  POST_ANSWER_TRANSLATION_DATA,\n  SAVE_ANSWER_TRANSLATION_DATA,\n  DELETE_ANSWER_TRANSLATION,\n} from '../actions/AnswerTranslation';\nimport * as api from './apis/AnswerTranslations';\nimport { notifySuccess, notifyError } from './Util';\nimport * as questionSagas from './Question';\n\nexport function* handleFetchAnswerTranslationList(action) {\n  try {\n    // axios.get()を呼ぶ前にisFetchingをtrueにしておく\n    yield put(requestData());\n    const payload = yield call(api.fetchAnswerTranslationList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* handleFetchAnswerTranslationById(action) {\n  try {\n    const id  = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchAnswerTranslation, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postAnswerTranslation(action) {\n  try {\n    const { answer_id } = action.payload;\n    yield put(requestData());\n    yield call(api.postAnswerTranslationData, action.payload);\n    const payload = yield call(api.fetchAnswerTranslationList, answer_id);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveAnswerTranslationData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveAnswerTranslationData, action.payload);\n    const message = '翻訳を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedSingleAnswerTranslation(payload));\n  } catch (e) {\n    const message = '翻訳の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteAnswerTranslation(action) {\n  try {\n    const { id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteAnswerTranslation, action.payload);\n    const message = '翻訳を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchAnswerTranslationList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '翻訳の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst answerTranslationSagas = [\n  takeEvery(POST_ANSWER_TRANSLATION_DATA, postAnswerTranslation),\n  takeEvery(FETCH_ANSWER_TRANSLATION_LIST, handleFetchAnswerTranslationList),\n  takeEvery(FETCH_ANSWER_TRANSLATION, handleFetchAnswerTranslationById),\n  takeEvery(SAVE_ANSWER_TRANSLATION_DATA, saveAnswerTranslationData),\n  takeEvery(DELETE_ANSWER_TRANSLATION, deleteAnswerTranslation),\n];\n\nexport default answerTranslationSagas;\n","import { takeEvery, call, put } from 'redux-saga/effects';\n// import { push } from 'react-router-redux';\nimport * as act from '../actions/Comment';\nimport * as api from './apis/Comments';\nimport {\n  FETCH_SINGLE_COMMENT,\n  POST_COMMENT,\n  SAVE_COMMENT_DATA,\n  DELETE_COMMENT,\n} from '../actions/Comment';\nimport * as answerSaga from './Answer'; \nimport { notifySuccess, notifyError } from './Util';\n\nimport { fetchCommentWithUserList }from './apis/Comments';\nimport * as act2 from '../actions/Comment';\n\nexport function* fetchSingleComment(action) {\n  try {\n    yield put(act.requestData());\n    const comment_id = action.payload;\n    const comment = yield call(api.fetchComment, comment_id);\n    yield put(act.updatedSingleCommentData(comment));\n  } catch (e) {\n    const message = 'コメントの投稿に失敗しました。';\n    yield put(notifyError(message));\n    //yield put(updatedCommentData());\n  }\n}\n\nexport function* postComment(action) {\n  try {\n    yield put(act.requestData());\n    const { answer_id, question_id, current_translate_language_id, answerIdList } = action.payload;\n    yield call(api.postCommentData, action.payload);\n    const commentPayload = yield call(api.fetchCommentsList, { answer_id });    \n    const answerId = answerIdList;\n    const commentList = yield call(fetchCommentWithUserList, answerId);\n    yield put(act2.receiveCommentDataSuccess(commentList));\n\n    const message = 'コメントを投稿しました。';\n    yield put(notifySuccess(message));\n    const data = { payload: {\n      question_id,\n      translate_language_id: current_translate_language_id\n    } };\n    yield call(answerSaga.handleFetchAnswerData, data);\n  } catch (e) {\n    const message = 'コメントの投稿に失敗しました。';\n    yield put(notifyError(message));\n    //yield put(updatedCommentData());\n  }\n}\n\nexport function* saveComment(action) {\n  try {\n    yield put(act.requestData());\n    const {\n      comment_id,\n      question_id,\n      history\n    } = action.payload;\n    const comment = yield call(api.saveCommentData, action.payload);\n    yield put(act.updatedSingleCommentData(comment));\n    const message = 'コメントを編集しました。';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = 'コメントの編集に失敗しました。';\n    yield put(notifyError(message));\n    //yield put(updatedCommentData());\n  }\n}\n\nexport function* deleteCommentData(action) {\n  try {\n    const { comment_id, question_id, user_id, history } = action.payload;\n    yield put(act.requestData());\n    yield call(api.deleteCommentData, action.payload);\n    const message = 'コメントを削除しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = 'コメントの削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(act.receiveDataFailed());\n  }\n}\n\nconst commentSagas = [\n  takeEvery(FETCH_SINGLE_COMMENT, fetchSingleComment),\n  takeEvery(POST_COMMENT, postComment),\n  takeEvery(SAVE_COMMENT_DATA, saveComment),\n  takeEvery(DELETE_COMMENT, deleteCommentData),\n];\n\nexport default commentSagas;\n","import axios from 'axios';\n\nconst apiUrl = '/api/comment_translations';\n\nexport const fetchCommentTranslationList = (comment_id) => {\n  return axios.get(apiUrl, {\n    params: {\n      comment_id\n    }\n  });\n};\n\nexport const fetchCommentTranslation = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const postCommentTranslationData = (params) => {\n  return axios.post(apiUrl, {\n    params\n  });\n};\n\nexport const saveCommentTranslationData = (saveData) => {\n  const { id } = saveData;\n  return axios.put(`${apiUrl}/${id}`, saveData);\n};\n\nexport const deleteCommentTranslation = (params) => {\n  const { id } = params;\n  return axios.delete(`${apiUrl}/${id}`, { params });\n};\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updatedSingleCommentTranslation\n} from '../actions/CommentTranslation';\nimport {\n  FETCH_COMMENT_TRANSLATION_LIST,\n  FETCH_COMMENT_TRANSLATION,\n  POST_COMMENT_TRANSLATION_DATA,\n  SAVE_COMMENT_TRANSLATION_DATA,\n  DELETE_COMMENT_TRANSLATION,\n} from '../actions/CommentTranslation';\nimport * as api from './apis/CommentTranslations';\nimport { notifySuccess, notifyError } from './Util';\n\nexport function* handleFetchCommentTranslationList(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchCommentTranslationList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* handleFetchCommentTranslationById(action) {\n  try {\n    const id  = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchCommentTranslation, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postCommentTranslation(action) {\n  try {\n    const { comment_id } = action.payload;\n    yield put(requestData());\n    yield call(api.postCommentTranslationData, action.payload);\n    const payload = yield call(api.fetchCommentTranslationList, comment_id);\n    yield put(receiveDataSuccess(payload));\n    const message = '翻訳を投稿しました。';\n    yield put(notifySuccess(message));\n  } catch (e) {\n    yield put(receiveDataFailed());\n    const message = '翻訳の投稿に失敗しました。';\n    yield put(notifyError(message));\n  }\n}\n\nexport function* saveCommentTranslationData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveCommentTranslationData, action.payload);\n    const message = '翻訳を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedSingleCommentTranslation(payload));\n  } catch (e) {\n    const message = '翻訳の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteCommentTranslation(action) {\n  try {\n    const { id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteCommentTranslation, action.payload);\n    const message = '翻訳を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchCommentTranslationList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '翻訳の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst commentTranslationSagas = [\n  takeEvery(POST_COMMENT_TRANSLATION_DATA, postCommentTranslation),\n  takeEvery(FETCH_COMMENT_TRANSLATION_LIST, handleFetchCommentTranslationList),\n  takeEvery(FETCH_COMMENT_TRANSLATION, handleFetchCommentTranslationById),\n  takeEvery(SAVE_COMMENT_TRANSLATION_DATA, saveCommentTranslationData),\n  takeEvery(DELETE_COMMENT_TRANSLATION, deleteCommentTranslation),\n];\n\nexport default commentTranslationSagas;\n","import axios from 'axios';\n\n// 未翻訳の質問一覧取得するAPI\nexport const fetchNotTranslatedQuestions = (params) => {\n    return axios.get('/api/not_translated_questions', {\n        params\n    });\n};\n\n// 未翻訳の回答一覧取得するAPI\nexport const fetchNotTranslatedAnswers = (params) => {\n    return axios.get('/api/not_translated_answers', {\n        params\n    });\n};\n\n// 未翻訳のコメント一覧取得するAPI\nexport const fetchNotTranslatedComments = (params) => {\n    return axios.get('/api/not_translated_comments', {\n        params\n    });\n};\n\n","import { takeEvery, call, put } from 'redux-saga/effects';\n\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveDataFailed,\n  FETCH_NOT_TRANSLATED,\n} from '../actions/NotTranslated';\n\nimport {\n  fetchNotTranslatedQuestions,\n  fetchNotTranslatedAnswers,\n  fetchNotTranslatedComments,\n} from './apis/NotTranslated';\nimport { changeQuestionListLanguage } from './Question';\n\nexport function* handleFetchData(action) {\n  try {\n\n    yield put(requestData());\n\n    //未翻訳一覧を取り出す\n    // const questions = yield call(fetchNotTranslated, action.payload);\n\n    //質問を取り出す\n    const questions = yield call(fetchNotTranslatedQuestions, action.payload);\n\n    //回答を取り出す\n    const answers = yield call(fetchNotTranslatedAnswers, action.payload);\n\n    //コメントを取り出す\n    const comments = yield call(fetchNotTranslatedComments, action.payload);\n\n    const NotTranslatedList={\n      questions : questions.data,\n      answers : answers.data,\n      comments: comments.data,\n    };\n\n    //reducers/NotTranslated.jsで関数を実行する。\n    yield put(receiveDataSuccess(NotTranslatedList));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nconst NotTranslatedSagas = [\n  //FETCH_QUESTION_LISTというアクションが発火させた場合はhandleFetchDataを起動させる。\n  takeEvery(FETCH_NOT_TRANSLATED, handleFetchData),\n];\n\nexport default NotTranslatedSagas;\n","import axios from 'axios';\n\nexport const postVotes = (postData) => {\n    return axios.post('/api/votes', postData);\n};\n\nexport const deleteVotes = (params) => {\n    const { vote_id } = params;\n    return axios.delete(`/api/votes/${vote_id}`, { params });\n};\n\nexport const fetchQuestionVotesList = (question_id) => {\n    return axios.get('/api/votes/questions', {\n      params: { question_id }\n    });\n  };\n\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n    POST_VOTE,\n    DELETE_VOTE,\n    requestData,\n    receiveDataSuccess,\n    receiveDataFailed,\n} from '../actions/Vote.js';\n\nimport * as answerSaga from './Answer';\nimport * as questionSagas from './Question';\nimport {\n  postVotes,\n  deleteVotes,\n  fetchQuestionVotesList,\n} from './apis/Votes';\n\nimport {\n  notifySuccess,\n  notifyError\n} from './Util';\n\n\nexport function* handleFetchQestionVotesList(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(fetchQuestionVotesList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postVote(action) {\n  try {\n    const { sendVoteParams, key } = action.payload;\n    yield put(requestData());\n    yield call(postVotes, sendVoteParams);\n\n    let data;\n    switch (key) {\n      case \"comment\":\n      case \"answer\":\n          data = { payload: {\n            question_id: sendVoteParams.questionId,\n            translate_language_id: 1,\n          } };\n          yield call(answerSaga.handleFetchAnswerData, data);\n          break;\n      case \"questionList\":\n          data = { payload: {\n            country_id: sendVoteParams.country_id,\n          } };\n          yield call(questionSagas.handleFetchData, data);\n          break;\n      case \"questionView\":\n          data = { payload: sendVoteParams.question_id };\n          yield call(questionSagas.handleFetchQuestionById, data);\n          break;\n    }\n\n    const message = 'いいねしました';\n    yield put(notifySuccess(message));\n\n  } catch (e) {\n    const message = 'いいねに失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteVote(action) {\n  try {\n    const { deleteVoteParams, key } = action.payload;\n    yield put(requestData());\n    yield call(deleteVotes, deleteVoteParams);\n\n    let data;\n    switch (key) {\n      case \"comment\":\n      case \"answer\":\n          data = { payload: {\n            question_id: deleteVoteParams.questionId,\n            translate_language_id: 1,\n          } };\n          yield call(answerSaga.handleFetchAnswerData, data);\n          break;\n      case \"questionList\":\n          data = { payload: {\n            country_id: deleteVoteParams.country_id,\n          } };\n          yield call(questionSagas.handleFetchData, data);\n          break;\n      case \"questionView\":\n          data = { payload: deleteVoteParams.vote_id };\n          yield call(questionSagas.handleFetchQuestionById, data);\n          break;\n    }\n    const message = 'いいねを削除しました';\n    yield put(notifySuccess(message));\n  } catch (e) {\n    const message = 'いいねの削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst voteSagas = [\n  takeEvery(POST_VOTE, postVote),\n  takeEvery(DELETE_VOTE, deleteVote),\n];\n\nexport default voteSagas;\n","import axios from 'axios';\n\nexport const postVotes = (params) => {\n    return axios.post('/api/vote_translations', params);\n};\n\nexport const deleteVotes = (params) => {\n    const { vote_id } = params;\n    return axios.delete(`/api/vote_translations/${vote_id}`, { params });\n};","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n    POST_VOTE,\n    DELETE_VOTE,\n    requestData,\n    receiveDataSuccess,\n    receiveDataFailed,\n} from '../actions/VoteTranslation';\n\nimport * as answerTranslationSagas from './AnswerTranslation';\nimport * as questionTranslationSagas from './QuestionTranslation';\nimport * as commentTranslationSagas from './CommentTranslation';\n\nimport { \n  notifySuccess, \n  notifyError \n} from './Util';\n\nimport { postVotes, deleteVotes } from './apis/VoteTranslations';\n\nexport function* postVote(action) {\n  try {\n    const { sendVoteParams, key } = action.payload;\n    yield put(requestData());\n    yield call(postVotes, sendVoteParams);\n    let data;\n    switch (key) {\n      case \"comment\":\n          data = { payload: sendVoteParams.commentId } ;\n          yield call(commentTranslationSagas.handleFetchCommentTranslationList, data);\n          break;\n      case \"answer\":\n          data = { payload: sendVoteParams.answerId } ;\n          yield call(answerTranslationSagas.handleFetchAnswerTranslationList, data);\n          break;\n      case \"question\":\n          data = { payload: sendVoteParams.questionId } ;\n          yield call(questionTranslationSagas.handleFetchQuestionTranslationList, data);\n          break;\n    }\n\n    const message = 'いいねしました';\n    yield put(notifySuccess(message));\n\n  } catch (e) {\n    const message = 'いいねに失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteVote(action) {\n  try {\n    const { deleteVoteParams, key } = action.payload;\n    yield put(requestData());\n    yield call(deleteVotes, deleteVoteParams);\n\n    let data;\n    switch (key) {\n      case \"comment\":\n          data = { payload: deleteVoteParams.commentId } ;\n          yield call(commentTranslationSagas.handleFetchCommentTranslationList, data);\n          break;\n      case \"answer\":\n          data = { payload: deleteVoteParams.answerId };\n          yield call(answerTranslationSagas.handleFetchAnswerTranslationList, data);\n          break;\n      case \"question\":\n          data = { payload:  deleteVoteParams.questionId };\n          yield call(questionTranslationSagas.handleFetchQuestionTranslationList, data);\n          break;\n    }\n    const message = 'いいねを削除しました';\n    yield put(notifySuccess(message));\n  } catch (e) {\n    const message = 'いいねの削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst voteTranslationSagas = [\n  takeEvery(POST_VOTE, postVote),\n  takeEvery(DELETE_VOTE, deleteVote),\n];\n\nexport default voteTranslationSagas;","import { put, takeEvery } from 'redux-saga/effects';\nimport {\n    ACTION_ALERT_MESSAGE,\n} from '../actions/Notification';\nimport { notifyAlert } from './Util';\n\nexport function* alertMessage(action) {\n    yield put(notifyAlert(action.payload));\n}\n\n  const notificationSagas = [\n    takeEvery(ACTION_ALERT_MESSAGE, alertMessage),\n  ];\n  \nexport default notificationSagas;","import { all } from 'redux-saga/effects';\nimport userSagas from './sagas/User';\nimport questionSagas from './sagas/Question';\nimport answerSagas from './sagas/Answer';\nimport questionTranslationSagas from './sagas/QuestionTranslation';\nimport answerTranslationSagas from './sagas/AnswerTranslation';\nimport commentSagas from './sagas/Comment';\nimport commentTranslationSagas from './sagas/CommentTranslation';\nimport NotTranslatedSagas from './sagas/NotTranslated';     \nimport voteSagas from './sagas/Votes';\nimport voteTranslationSagas from './sagas/VoteTranslation';  \nimport notificationSagas from './sagas/Notification';            \n\nexport default function* rootSaga() {\n  yield all([\n    ...userSagas,\n    ...questionSagas,\n    ...answerSagas,\n    ...questionTranslationSagas,\n    ...answerTranslationSagas,\n    ...commentSagas,\n    ...commentTranslationSagas,\n    ...NotTranslatedSagas,\n    ...voteSagas,\n    ...voteTranslationSagas,\n    ...notificationSagas,\n  ]);\n}\n","import { createBrowserHistory as createHistory } from 'history';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { routerMiddleware } from 'react-router-redux';\nimport reducer from './reducer';\nimport { initialState } from './constants';\nimport rootSaga from './rootSaga';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from \"redux-logger\";\nimport ReactGA from 'react-ga';\n\n// Redux DevTools\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst history = createHistory();\nReactGA.initialize('UA-128421111-1');\nhistory.listen(({ pathname }) => {\n  console.log(\"GA---------\",pathname);\n//   ReactGA.set({ page: pathname });\n//   ReactGA.pageview(pathname);\n});\n\nconst routingMiddleware = routerMiddleware(history);\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n    reducer,\n    initialState,\n    composeEnhancers(\n        applyMiddleware(\n            thunkMiddleware,\n            routingMiddleware,\n            sagaMiddleware,\n            logger\n        )\n    )\n);\n\nsagaMiddleware.run(rootSaga, { history });\n\nexport { history }\nexport { store }\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { ConnectedRouter, routerReducer, routerMiddleware } from 'react-router-redux';\n\nimport Home from './containers/Home';\nimport QuestionView from './containers/QuestionView';\nimport QuestionEdit from './containers/QuestionEdit';\nimport NotTranslated from './containers/NotTranslated';\nimport AnswerEdit from './containers/AnswerEdit';\nimport CommentEdit from './containers/CommentEdit';\nimport QuestionTranslationView from './containers/QuestionTranslationView';\nimport QuestionTranslationEdit from './containers/QuestionTranslationEdit';\nimport AnswerTranslationView from './containers/AnswerTranslationView';\nimport AnswerTranslationEdit from './containers/AnswerTranslationEdit';\nimport CommentTranslationView from './containers/CommentTranslationView';\nimport CommentTranslationEdit from './containers/CommentTranslationEdit';\nimport App from './containers/App';\nimport ScrollToTop from './components/layouts/ScrollToTop';\nimport SignUp from './containers/users/SignUp';\nimport Login from './containers/users/Login';\nimport PasswordReset from './containers/users/PasswordReset';\nimport NewPassword from './containers/users/NewPassword';\nimport Activate from './containers/users/Activate';\nimport Profile from './containers/users/Profile';\nimport ProfileEdit from './containers/users/ProfileEdit';\nimport UserOnly from './containers/auth/UserOnly';\nimport GuestOnly from './containers/auth/GuestOnly';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport history from './store';\nimport UIkit from 'uikit';\n// import Icons from 'uikit/dist/js/uikit-icons';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { far } from '@fortawesome/free-regular-svg-icons';\n\n// Styles\nimport './css/normalize.css';\nimport './css/main.css';\nimport './css/uikit.min.css';\n\n// 言語設定\nimport { addLocaleData, IntlProvider } from 'react-intl';\nimport ja from 'react-intl/locale-data/ja';\nimport en from 'react-intl/locale-data/en';\nconst { intl } = store.getState();\nconst { locale, messages } = intl;\naddLocaleData([...ja, ...en]);\n\nlibrary.add(fas, far);\n\n// 取り急ぎの質問フォーム初期化処理\nlocalStorage.setItem('question-form', '');\n\nconst render = () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <IntlProvider locale={locale} messages={messages} >\n        <BrowserRouter> \n          <App>\n            <ScrollToTop>\n              <Switch>\n                <Route exact path='/' component={Home} />\n                <Route exact path='/questions/:id' component={QuestionView}  onEnter={() => window.scrollTo(0, 0)}/>\n                <Route exact path='/question_translations/:question_id' component={QuestionTranslationView} />\n                <Route exact path='/answer_translations/:answer_id' component={AnswerTranslationView} />\n                <Route exact path='/comment_translations/:comment_id' component={CommentTranslationView} />\n                <Route exact path='/users/profile/:id' component={Profile} />\n                <Route exact path='/users/login' component={Login} />\n                <Route exact path='/users/signup' component={SignUp} />\n                <Route exact path='/users/activate/:token' component={Activate} />\n                <Route exact path='/users/password_reset' component={PasswordReset} />\n                <Route exact path='/users/password_reset/:token' component={NewPassword} />\n                <UserOnly>\n                  <Switch>\n                    <Route exact path='/questions/edit/:id' component={QuestionEdit} />\n                    <Route exact path='/answers/edit/:id' component={AnswerEdit} />\n                    <Route exact path='/comments/edit/:id' component={CommentEdit} />\n                    <Route exact path='/users/profile_edit' component={ProfileEdit} />\n                    <Route exact path='/question_translations/edit/:id' component={QuestionTranslationEdit} />\n                    <Route exact path='/answer_translations/edit/:id' component={AnswerTranslationEdit} />\n                    <Route exact path='/comment_translations/edit/:id' component={CommentTranslationEdit} />\n                    {/*未翻訳の質問を抽出するルートパス*/}\n                    <Route exact path='/not_translated' component={NotTranslated} />\n                  </Switch>\n                </UserOnly>\n                <GuestOnly>\n                  <Switch>\n                  </Switch>\n                </GuestOnly>\n              </Switch>\n            </ScrollToTop>\n          </App>\n        </BrowserRouter>\n      </IntlProvider>\n    </Provider>,\n    document.getElementById('root')\n  );\n};\n\nstore.subscribe(() => {\n  render();\n});\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nrender()\n"],"sourceRoot":""}