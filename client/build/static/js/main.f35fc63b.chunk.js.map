{"version":3,"sources":["actions/Question.js","utils/Translations.js","components/Translator.js","actions/Vote.js","components/PostUser.js","components/PostIcons.js","components/QuestionListView.js","components/QuestionList.js","containers/QuestionList.js","components/LanguageFormSelect.js","components/CategoryFormSelect.js","components/CountryFormSelect.js","components/QuestionForm.js","components/Home.js","actions/Intl.js","actions/Category.js","actions/Notification.js","containers/Home.js","components/AnswerForm.js","actions/Answer.js","actions/Comment.js","components/Comment.js","components/CommentList.js","components/CommentForm.js","components/AnswerList.js","containers/AnswerList.js","utils/index.js","components/QuestionView.js","containers/QuestionView.js","components/QuestionEdit.js","containers/QuestionEdit.js","actions/NotTranslated.js","components/NotTranslated.js","containers/NotTranslated.js","components/AnswerEdit.js","containers/AnswerEdit.js","components/CommentEdit.js","containers/CommentEdit.js","components/QuestionTranslationForm.js","actions/QuestionTranslation.js","actions/VoteTranslation.js","components/QuestionTranslationList.js","containers/QuestionTranslationList.js","containers/QuestionTranslationView.js","components/TranslationForm.js","components/TranslationEdit.js","components/QuestionTranslationEdit.js","containers/QuestionTranslationEdit.js","components/AnswerTranslationForm.js","actions/AnswerTranslation.js","components/AnswerTranslationList.js","containers/AnswerTranslationList.js","containers/AnswerTranslationView.js","components/AnswerTranslationEdit.js","containers/AnswerTranslationEdit.js","components/CommentTranslationForm.js","actions/CommentTranslation.js","components/CommentTranslationList.js","containers/CommentTranslationList.js","containers/CommentTranslationView.js","components/CommentTranslationEdit.js","containers/CommentTranslationEdit.js","components/layouts/MenuDrawer.js","components/layouts/Header.js","actions/User.js","containers/layouts/Header.js","components/App.js","containers/App.js","components/layouts/ScrollToTop.js","components/users/SignUpForm.js","components/users/SignUp.js","containers/users/SignUp.js","components/users/LoginForm.js","components/users/Login.js","containers/users/Login.js","components/users/PasswordResetForm.js","components/users/PasswordReset.js","containers/users/PasswordReset.js","components/users/PasswordForm.js","components/users/NewPassword.js","containers/users/NewPassword.js","components/users/Activate.js","containers/users/Activate.js","containers/users/Profile.js","components/users/ProfileForm.js","components/users/Profile.js","containers/users/ProfileEdit.js","components/auth/UserOnly.js","containers/auth/UserOnly.js","components/auth/GuestOnly.js","containers/auth/GuestOnly.js","intl/index.js","intl/locales/ja_JP.js","intl/locales/en_US.js","constants.js","reducer.js","reducers/Intl.js","reducers/Category.js","reducers/Answer.js","reducers/Question.js","reducers/QuestionTranslation.js","reducers/AnswerTranslation.js","reducers/User.js","reducers/Comment.js","reducers/CommentTranslation.js","reducers/NotTranslated.js","reducers/Votes.js","reducers/VoteTranslation.js","sagas/apis/Users.js","sagas/apis/Questions.js","sagas/apis/Answers.js","sagas/apis/Comments.js","sagas/apis/ContentTranslations.js","sagas/Util.js","sagas/User.js","sagas/Question.js","sagas/Answer.js","sagas/apis/QuestionTranslations.js","sagas/QuestionTranslation.js","sagas/apis/AnswerTranslations.js","sagas/AnswerTranslation.js","sagas/Comment.js","sagas/apis/CommentTranslations.js","sagas/CommentTranslation.js","sagas/apis/NotTranslated.js","sagas/NotTranslated.js","sagas/apis/Votes.js","sagas/Votes.js","sagas/apis/VoteTranslations.js","sagas/VoteTranslation.js","sagas/Notification.js","rootSaga.js","store.js","index.js"],"names":["FETCH_QUESTION_LIST","Symbol","FETCH_QUESTION","POST_QUESTION_DATA","REQUEST_DATA","RECEIVE_DATA_SUCCESS","RECEIVE_SINGLE_DATA_SUCCESS","RECEIVE_DATA_FAILED","UPDATE_CURRENT_TRANSLATE_LANGUAGE","SAVE_QUESTION_DATA","UPDATED_QUESTION_DATA","DELETE_QUESTION","fetchQuestionList","createAction","fetchQuestion","postQuestionData","requestData","receiveDataSuccess","receiveSingleDataSuccess","receiveDataFailed","saveQuestionData","updatedQuestionData","deleteQuestion","getFilteredContents","contentList","translateLanguageId","contentType","categoryId","filter","v","translate_language_id","length","getTranslatedContents","map","dispText","content","translation","Translator","user","this","props","name","image_path","profile_link","msg","formatMessage","intl","id","react_default","a","createElement","className","style","padding","Link","to","src","width","height","alt","Component","injectIntl","POST_VOTE","DELETE_VOTE","postVote","deleteVote","PostUser","countryId","concat","border","nationalFlag","selectedNationalFlag","country_id","userName","profileLink","PostIcons","votebutton","_this$props","loginUser","votes","sendData","deleteData","editLink","translateLink","onClickSendVote","onClickDeleteVote","translate","editLinkButton","react_fontawesome_index_es","icon","color","size","user_id","onClick","bind","voteNumbers","translateButton","QuestionListView","data","handlePostVote","handleDeleteVote","questionArray","_this","filteredQuestions","question","translator","key","sendVoteParams","question_id","answer_id","comment_id","status","deleteVoteParams","vote_id","question_translations","components_Translator","category","intl_key","dayjs","created_at","format","components_PostIcons","sendVote","components_PostUser","questionList","getQuestionList","getQuestionListView","connect","state","auth","ctgr","dispatch","QuestionList","params","questions","category_id","handleFetchData","_this$props$state$que","isFetching","react_spinners","components_QuestionListView","queryData","LanguageFormSelect","placeholder","formik_esm","component","value","CategoryFormSelect","CountryFormSelect","QuestionForm","values","errors","initialValues","enableReinitialize","validate","onSubmit","_ref","setSubmitting","resetForm","setErrors","render","_ref2","touched","handleSubmit","isSubmitting","setFieldValue","type","rows","formik_persist_es6","components_CountryFormSelect","components_LanguageFormSelect","components_CategoryFormSelect","Home","formData","_this$props$state$aut","isLoggedIn","console","log","history","alertMessage","push","postData","e","message","locale","preventDefault","stopPropagation","localStorage","setItem","window","location","href","changeCategory","selectedCategory","_this$props$state$int","onChangeLanguage","components_QuestionForm","submitQuestionForm","onChange","changeCateogryfunction","target","containers_QuestionList","React","UPDATE_CURRENT_LANGUAGE","updateCurrentLanguage","UPDATE_CURRENT_CATEGORY","updateCurrentCategory","ACTION_ALERT_MESSAGE","actionAlertMessage","changeLanguage","AnswerForm","CHANGE_ANSWER_FORM_CONTENT","FETCH_ANSWER_LIST","FETCH_ANSWER","POST_ANSWER_DATA","INITIALIZE_FORM","SAVE_ANSWER_DATA","DELETE_ANSWER","fetchAnswerList","fetchAnswer","postAnswerData","saveAnswerData","deleteAnswer","RECEIVE_COMMENT_DATA_SUCCESS","FETCH_SINGLE_COMMENT","FETCH__COMMENT_WITH_USER_LIST","POST_COMMENT","UPDATE_COMMENT","UPDATED_COMMENT_DATA","UPDATED_SINGLE_COMMENT_DATA","SAVE_COMMENT_DATA","DELETE_COMMENT","UPDATED_COMMENT_ARRAY","receiveCommentDataSuccess","postComment","fetchSingleComment","updatedSingleCommentData","deleteComment","saveCommentData","updatedCommentArray","Comment","voteList","isOwner","commentUser","comments","answerId","currentQuestionId","currentQuestion","commentArray","questionId","commentTranslated","comment_translations","whiteSpace","CommentList","commentList","list","filteredCommentList","translatedCommentList","i","voteState","components_Comment","CommentForm","buttonStr","postButton","class","ownProps","AnswerList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","qId","buttonState","answerIds","answers","answerArray","current_translate_language_id","answerIdList","handlePostComment","paddingLeft","components_CommentForm","form","onClickCommentForm","setState","_this2","filteredAnswers","answer","commentForm","getComment","answer_translations","Linkify_default","properties","components_CommentList","onClickReply","_this$props$state$ans","answerList","getAnswerList","isEmptyObject","obj","keys","QuestionView","match","parseInt","getQuestionById","questionTranslation","country","temp","sprintf","components_AnswerForm","img","getTranslatedQuestion","answerForm","getAnswerForm","containers_AnswerList","fetchAnswers","QuestionEdit","owner","saveData","notOwnerWillTransfer","onClickDeleteBtn","conditions","CHANGE_QUESTION_LIST_LANGUAGE","FETCH_NOT_TRANSLATED","fetchNotTranslated","NotTranslated","currentTab","not_translate","contents","url","getNotTranslatedId","getNotTranslated","tabState","getNotTranslatedQuestions","getNotTranslatedAnswers","getNotTranslatedComments","newTabKey","_this3","tabData","active","onClickTab","tabContents","getCurrentTabContents","getNotTranslatedView","tabList","getTabList","AnswerEdit","getAnswerById","currentAnswer","CommentEdit","commentId","getCommentById","currentComment","QuestionTranslatinoForm","FETCH_QUESTION_TRANSLATION_LIST","FETCH_QUESTION_TRANSLATION","POST_QUESTION_TRANSLATION_DATA","UPDATED_SINGLE_QUESTION_TRANSLATION","SAVE_QUESTION_TRANSLATION_DATA","DELETE_QUESTION_TRANSLATION","fetchQuestionTranslationList","fetchQuestionTranslation","postQuestionTranslationData","updatedSingleQuestionTranslation","saveQuestionTranslationData","deleteQuestionTranslation","QuestionTranslationList","translationList","question_translation_id","answer_translation_id","commcomment_translation_id","vote_translations","questionTranslations","currentTranslationList","getTranslationList","QuestionTranslationView","Error","QuestionTranslationForm","containers_QuestionTranslationList","TranslationForm","TranslationEdit","currentTranslation","components_TranslationForm","QuestionTranslationEdit","qtId","getQuestionTranslationById","components_TranslationEdit","AnswerTranslatinoForm","FETCH_ANSWER_TRANSLATION_LIST","FETCH_ANSWER_TRANSLATION","POST_ANSWER_TRANSLATION_DATA","SAVE_ANSWER_TRANSLATION_DATA","DELETE_ANSWER_TRANSLATION","UPDATED_SINGLE_ANSWER_TRANSLATION","fetchAnswerTranslationList","fetchAnswerTranslation","postAnswerTranslationData","saveAnswerTranslationData","deleteAnswerTranslation","updatedSingleAnswerTranslation","AnswerTranslationList","aId","answerTranslations","AnswerTranslationView","AnswerTranslationForm","containers_AnswerTranslationList","AnswerTranslationEdit","atId","getAnswerTranslationById","CommentTranslatinoForm","FETCH_COMMENT_TRANSLATION_LIST","FETCH_COMMENT_TRANSLATION","POST_COMMENT_TRANSLATION_DATA","SAVE_COMMENT_TRANSLATION_DATA","DELETE_COMMENT_TRANSLATION","UPDATED_SINGLE_COMMENT_TRANSLATION","fetchCommentTranslationList","fetchCommentTranslation","postCommentTranslationData","saveCommentTranslationData","deleteCommentTranslation","updatedSingleCommentTranslation","CommentTranslationList","comment_translation_id","_this$props$state$com","commentTranslations","CommentTranslationView","toQuestionViewLink","CommentTranslationForm","containers_CommentTranslationList","CommentTranslationEdit","ctId","getCommentTranslationById","MenuDrawer","top","left","bottom","right","toggleDrawer","side","open","defineProperty","actionData","logout","classes","displayName","menuDataList","text","sideList","List_default","menuData","index","ListItem_default","button","ListItemText_default","primary","Button_default","Drawer_default","anchor","onClose","tabIndex","role","onKeyDown","withStyles","fullList","Header","anchorEl","handleClose","handleLogout","onClickLogout","profileElem","MenuItem_default","uk-icon","getProfileElem","loginElem","getLoginElem","aria-owns","undefined","aria-haspopup","event","currentTarget","textTransform","Menu_default","Boolean","imagePath","displayMenuElem","menu","getMenu","maxHeight","CREATE_USER_ACCOUNT","CLICK_SUBMIT","SAVE_USER_MNEMONIC","LOGIN_USER","LOGIN_USER_JWT","LOGOUT_USER","UPDATE_USER_DATA","SAVE_USER_DATA","SAVE_USER_PASSWORD","UPDATED_USER_DATA","REMOVE_USER_DATA","LOGIN_SUCCESS","LOGIN_FAILED","GET_USER_PROFILE","GET_USER_BY_TOKEN","UPDATED_PROFILE_DATA","PREPARED_AUTH","UPDATED_PROFILE_QUESTION_DATA","UPDATED_PROFILE_ANSWER_DATA","UPDATED_PROFILE_COMMENT_DATA","UPDATED_PROFILE_TRANSLATED_DATA","SEND_RESET_PASSWORD_MAIL","RESET_PASSWORD","ACTIVATE_USER","createUserAccount","loginUserJwt","logoutUser","saveUserData","saveUserPassword","updatedUserData","removeUserData","loginSuccess","loginFailed","getUserProfile","getUserByToken","updatedProfileData","preparedAuth","updatedProfileQuestionData","updatedProfileAnswerData","updatedProfileCommentData","updatedProfileTranslatedData","sendResetPasswordMail","activateUser","App","fetchLoginState","children","isPrepared","BrowserRouter","containers_layouts_Header","reapop_lib_default","theme","ScrollToTop","prevProps","scrollTo","withRouter","SignUpForm","mail","test","password","passwordConfirm","SignUp","clickSubmit","users_SignUpForm","onClickSubmit","LoginForm","Login","users_LoginForm","PasswordResetForm","PasswordReset","users_PasswordResetForm","PasswordForm","NewPassword","token","fetchUser","users_PasswordForm","Activate","Profile","userId","fetchUserProfile","comment","translates","link","translation_link","translatedContentArray","_loop","_Object$entries","_i","slicedToArray","forEach","entries","getCommentList","translateArray","filterTranslatedContent","getTranslatedList","profile","userPostList","ProfileForm","image_url","file","files","URL","webkitURL","createObjectURL","imagePreview","image","uk-form-custom","handleImageChange","disabled","clickedSaveButton","users_ProfileForm","UserOnly","guestWillTransfer","context","router","nextProps","Route","contextTypes","PropTypes","object","isRequired","GuestOnly","userWillTransfer","replace","locales","ja","messages","_ja_JP","titles.sign_up","titles.login","titles.activate","titles.password_reset","titles.question_list","titles.answer_list","titles.post_list","titles.translation_list","titles.not_translated_list","titles.profile_edit.user_name","titles.profile_edit.birthplace","titles.profile_edit.profile","titles.profile_edit.user_image","titles.profile.edit","messages.empty_answers","messages.birthplace","messages.you_are_not_target","messages.enter_mail","messages.enter_new_password","messages.activate_completed","links.to_not_translated_list","links.edit","links.question","links.answer","links.comment","links.translate","links.profile","links.profile_edit","links.sign_up","links.login","links.logout","links.password_reset","links.to_question_view","languages.japanese","languages.english","countries.japan","countries.usa","countries.southeastasia","categories.all","categories.subculture","categories.culture","categories.tourism","categories.music","errors.questions.content","errors.questions.country_id","errors.questions.translate_language_id","errors.questions.category_id","errors.answers.content","errors.answers.translate_language_id","errors.comments.content","errors.comments.translate_language_id","errors.translations.content","errors.translations.translate_language_id","errors.sign_ups.name","errors.sign_ups.mail","errors.sign_ups.country","errors.sign_ups.appropriate_mail","errors.sign_ups.password","errors.sign_ups.confirm_password","errors.login.mail","errors.login.appropriate_mail","errors.login.password","errors.profile_edit.country","placeholders.sign_ups.name","placeholders.sign_ups.mail","placeholders.sign_ups.country","placeholders.sign_ups.password","placeholders.sign_ups.confirm_password","placeholders.login.mail","placeholders.login.password","placeholders.questions.content","placeholders.questions.country_id","placeholders.questions.translate_language_id","placeholders.questions.category_id","placeholders.questions.submit_btn","placeholders.answers.content","placeholders.answers.translate_language_id","placeholders.answers.submit_btn","placeholders.comments.content","placeholders.comments.translate_language_id","placeholders.comments.submit_btn","placeholders.translations.content","placeholders.translations.translate_language_id","placeholder.profile_edit.profile","placeholder.profile_edit.country","buttons.title.reply","buttons.title.post","buttons.title.sign_up","buttons.title.login","buttons.title.send","buttons.profile_edit.select","buttons.profile_edit.save","translated.name","translated.state","categories.comic_anime","en","_en_US","categories","all","subculture","culture","tourism","music","savedLocale","getItem","currentLocale","savedCategory","initialState","signUp","mnemonic","hash","jwt","currentCommentList","voteTranslations","reducer","combineReducers","arguments","action","_locales$action$paylo","payload","objectSpread","_categories$action$pa","_action$payload","notifications","notificationsReducer","axios","post","username","headers","Content-Type","Authorization","resetPassword","put","saveUserProfile","FormData","append","getUser","get","deleteQuestionData","delete","apiUrl","fetchAnswerListWithQuestion","deleteAnswerData","fetchCommentWithUserList","fetchCommentsList","fetchComment","fetchCommentListWithAnswer","postCommentData","deleteCommentData","fetchContentTranslation","notifySuccess","notify","position","dismissAfter","notifyError","loginUserAccount","loginUserAccountJwt","logoutUserAccount","regenerator_default","wrap","_context","prev","next","api","sent","t0","stop","_marked","_context2","_marked2","_context3","_marked3","_context4","removeItem","_marked4","_context5","_marked5","_context6","_marked6","_context7","select","_marked7","questionParams","questionPayload","answerParams","answerPayload","commentParams","commentPayload","translateParams","translatedContent","_context8","_marked8","_context9","_marked9","_context10","_marked10","userSagas","takeEvery","handleFetchQuestionById","postQuestion","Question_marked","Question_marked2","Question_marked3","Question_marked5","Question_marked6","questionSagas","handleFetchAnswerData","postAnswer","fetchSingleAnswerData","act","Answer_marked","reset","Answer_marked2","Answer_marked3","_action$payload2","Answer_marked4","_action$payload3","Answer_marked5","answerSagas","handleFetchQuestionTranslationList","handleFetchQuestionTranslationById","postQuestionTranslation","QuestionTranslation_marked","QuestionTranslation_marked2","QuestionTranslation_marked3","QuestionTranslation_marked4","QuestionTranslation_marked5","questionTranslationSagas","handleFetchAnswerTranslationList","handleFetchAnswerTranslationById","postAnswerTranslation","AnswerTranslation_marked","AnswerTranslation_marked2","AnswerTranslation_marked3","AnswerTranslation_marked4","AnswerTranslation_marked5","answerTranslationSagas","saveComment","Comment_marked","act2","answerSaga","Comment_marked2","Comment_marked3","Comment_marked4","commentSagas","handleFetchCommentTranslationList","handleFetchCommentTranslationById","postCommentTranslation","CommentTranslation_marked","CommentTranslation_marked2","CommentTranslation_marked3","CommentTranslation_marked4","CommentTranslation_marked5","commentTranslationSagas","fetchNotTranslatedQuestions","fetchNotTranslatedAnswers","fetchNotTranslatedComments","NotTranslatedList","NotTranslated_marked","NotTranslatedSagas","postVotes","deleteVotes","abrupt","t1","Votes_marked2","_data","Votes_marked3","voteSagas","VoteTranslation_marked","VoteTranslation_marked2","voteTranslationSagas","Notification_marked","notificationSagas","rootSaga","toConsumableArray","rootSaga_marked","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createHistory","ReactGA","initialize","listen","pathname","routingMiddleware","routerMiddleware","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","thunkMiddleware","logger","run","getState","addLocaleData","library","add","fas","far","ReactDOM","es","index_es","containers_App","layouts_ScrollToTop","Switch","exact","path","onEnter","auth_UserOnly","ProfileEdit","auth_GuestOnly","document","getElementById","subscribe"],"mappings":"yYAGaA,EAAsBC,OAAO,uBAC7BC,EAAiBD,OAAO,kBACxBE,EAAqBF,OAAO,sBAC5BG,EAAeH,OAAO,gBACtBI,EAAuBJ,OAAO,wBAC9BK,EAA8BL,OAAO,+BACrCM,EAAsBN,OAAO,uBAC7BO,EAAoCP,OAAO,qCAC3CQ,EAAqBR,OAAO,sBAC5BS,EAAwBT,OAAO,yBAC/BU,EAAkBV,OAAO,mBAIzBW,EAAoBC,YAAab,GACjCc,EAAgBD,YAAaX,GAC7Ba,EAAmBF,YAAaV,GAChCa,EAAcH,YAAaT,GAC3Ba,EAAqBJ,YAAaR,GAClCa,EAA2BL,YAAaP,GACxCa,EAAoBN,YAAaN,GAEjCa,GADiCP,YAAaL,GAC3BK,YAAaJ,IAChCY,EAAsBR,YAAaH,GACnCY,EAAiBT,YAAaF,qCCzB9BY,EAAsB,SAACC,EAAaC,EAAqBC,EAAaC,GAWjF,OAVyBH,EAAYI,OAAO,SAACC,GAC3C,OAAIA,EAAEC,wBAA0BL,GAOE,IAHJI,EAAEH,GAAaE,OAAO,SAACC,GACnD,OAAQA,EAAEC,wBAA0BL,IACnCM,UAMMC,EAAwB,SAACR,EAAaC,EAAqBC,EAAaC,GAgBnF,OAf2BH,EAAYS,IAAI,SAACJ,GAC1C,GAAIA,EAAEC,wBAA0BL,EAE5B,OADAI,EAAEK,SAAWL,EAAEM,QACRN,EAGX,IAAMO,EAAcP,EAAEH,GAAaE,OAAO,SAAAC,GACxC,OAAQA,EAAEC,wBAA0BL,IACnC,GAGH,OADAI,EAAEK,SAAWE,EAAYD,QAClBN,qBCxBLQ,mLAEK,IACCC,EAASC,KAAKC,MAAdF,KACAG,EAAmCH,EAAnCG,KAAMC,EAA6BJ,EAA7BI,WAAYC,EAAiBL,EAAjBK,aAEpBC,GAAMC,EADcN,KAAKC,MAAMM,KAA7BD,eACkB,CAACE,GAAI,oBAE/B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CAA0CC,MAAO,CAACC,QAAS,WAAaT,GACvFI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAIZ,GACRK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mDAAmDK,IAAKd,EAAYe,MAAM,KAAKC,OAAO,KAAKC,IAAKlB,cAblGmB,aAqBVC,cAAWxB,GCtBbyB,EAAY7D,OAAO,aACnB8D,EAAc9D,OAAO,eACrBG,EAAeH,OAAO,gBACtBI,EAAuBJ,OAAO,wBAC9BM,GAAsBN,OAAO,uBAG7B+D,GAAWnD,YAAaiD,GACxBG,GAAapD,YAAakD,GAC1B/C,GAAcH,YAAaT,GAE3Be,IADqBN,YAAaR,GACdQ,YAAaN,cC+B/B2D,gMAxCUC,GACjB,IAAIX,EACJ,OAAOW,GACH,KAAK,EACLX,EAAM,QACN,MACA,KAAK,EACLA,EAAM,MACN,MACA,QACAA,EAAM,QAGV,OAAOR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,GAAGK,IAAG,sBAAAY,OAAwBZ,EAAxB,QAAmCJ,MAAO,CAACiB,OAAQ,qBAAsBZ,MAAM,KAAKC,OAAO,KAAKC,IAAI,sCAG3H,IACGrB,EAASC,KAAKC,MAAdF,KACFgC,EAAe/B,KAAKgC,qBAAqBjC,EAAKkC,YAC9CC,EAAWnC,EAAOA,EAAKG,KAAO,6CAC9BiC,EAAW,kBAAAN,OAAqB9B,EAAKS,IAE3C,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAImB,GAAa1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCAAqCK,IAAKlB,EAAKI,WAAYe,MAAM,KAAKC,OAAO,KAAKC,IAAI,OAEhIX,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACTmB,GAEFtB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oCAAmCH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMH,UAAU,GAAGI,GAAImB,GAAeD,cAlCxFb,aCsDRe,oLApDF,IAqBDC,EArBCC,EAYDtC,KAAKC,MAVLF,EAFCuC,EAEDvC,KACAwC,EAHCD,EAGDC,UACAC,EAJCF,EAIDE,MACAC,EALCH,EAKDG,SACAC,EANCJ,EAMDI,WACAC,EAPCL,EAODK,SACAC,EARCN,EAQDM,cACAC,EATCP,EASDO,gBACAC,EAVCR,EAUDQ,kBACAC,EAXCT,EAWDS,UAGEC,EAAiBjD,EAAKS,KAAO+B,EAAU/B,GAC3BC,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMH,UAAU,wBAAwBI,GAAI2B,GAAUlC,EAAAC,EAAAC,cAACsC,GAAA,EAAD,CAAiBC,KAAK,OAAOC,MAAM,YAAYC,KAAK,QAC1G,GAOlBf,EAJqC,IADrBG,EAAMnD,OAAO,SAAAC,GAAM,OAAOA,EAAE+D,UAAYd,EAAU/B,KACxChB,OAKtBiB,EAAAC,EAAAC,cAAA,KAAG2C,QAASR,EAAkBS,KAAKvD,KAAM0C,EAAYH,EAAU/B,KAC/DC,EAAAC,EAAAC,cAACsC,GAAA,EAAD,CAAiBC,KAAK,QAAQC,MAAM,MAAMC,KAAK,QAK/C3C,EAAAC,EAAAC,cAAA,KAAG2C,QAAST,EAAgBU,KAAKvD,KAAMyC,EAAUF,EAAU/B,KAC3DC,EAAAC,EAAAC,cAACsC,GAAA,EAAD,CAAiBC,KAAM,CAAC,MAAM,SAAUC,MAAM,OAAQC,KAAK,QAI/D,IAAMI,EAAc/C,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yCAA0C4B,EAAMhD,QAE9EiE,GAAgC,IAAdV,EACHtC,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAI4B,GAAenC,EAAAC,EAAAC,cAACsC,GAAA,EAAD,CAAiBC,KAAK,iBAAiBC,MAAM,YAAYC,KAAK,QACvF,GAErB,OACI3C,EAAAC,EAAAC,cAAA,WACM0B,EACAmB,EACAR,EACAS,UA/CMpC,aCYlBqC,oLAEKC,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM2D,eAAeD,sCAGxBA,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM4D,iBAAiBF,2CAGvBG,EAAe5E,EAAqBE,GAAY,IAAA2E,EAAA/D,KAExDgE,EAAoBhF,EAAoB8E,EAAe5E,EADzC,yBAIpB,OAF4BO,EAAsBuE,EAAmB9E,EAFjD,yBAIOQ,IAAI,SAAAuE,GAAY,IAuBrCC,EAtBInE,EAASkE,EAATlE,KACAO,EAAkByD,EAAK9D,MAAMM,KAA7BD,cAEAkC,EAAUyB,EAAVzB,MAEF2B,EAAM,eAaN1B,EAAW,CAAE2B,eAZI,CACnBf,QAASU,EAAK9D,MAAMF,KAAKS,GACzB6D,YAAaJ,EAASzD,GACtB8D,UAAW,KACXC,WAAY,KACZC,OAAQ,GAOwBL,OAC9BzB,EAAa,CAAE+B,iBANI,CACrBpB,QAASU,EAAK9D,MAAMF,KAAKS,GACzB2D,IAAM,WACNO,QAAST,EAASzD,IAGkB2D,OAEhCQ,EAA0BV,EAA1BU,sBAOR,GALAT,EACEzD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iCACVN,EAAc,CAACE,GAAI,sBAGY,IAAjCmE,EAAsBnF,OAAc,KAC9BO,EAAS4E,EAAsB,GAA/B5E,KACRmE,EAAazD,EAAAC,EAAAC,cAACiE,EAAD,CAAY7E,KAAMA,IAGjC,OACEU,EAAAC,EAAAC,cAAA,MAAIwD,IAAKF,EAASzD,IAChBC,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBAAkBN,EAAc,CAACE,GAAIyD,EAASY,SAASC,YACvErE,EAAAC,EAAAC,cAAA,QAAMC,UAAU,qCAAqCmE,IAAMd,EAASe,YAAYC,OAAO,yBAEzFxE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iCAAiCH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAE,cAAAa,OAAgBoC,EAASzD,KAAjC,GAAAqB,OAA2CoC,EAAStE,YAClGc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCACfH,EAAAC,EAAAC,cAACuE,GAAD,CAEInF,KAASA,EAETwC,UAAcwB,EAAK9D,MAAMF,KACzByC,MAAUA,EACVC,SAAaA,EACbC,WAAeA,EACfC,SAAQ,mBAAAd,OAAuBoC,EAASzD,IACxCoC,cAAa,0BAAAf,OAA8BoC,EAASzD,IACpDqC,gBAAmBkB,EAAKoB,SAAS5B,KAAKQ,GACtCjB,kBAAqBiB,EAAKrC,WAAW6B,KAAKQ,GAC1ChB,WAAc,KAGlBtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyE,GAAD,CAAUrF,KAAMA,KAElBU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXsD,mDAQMJ,EAAe5E,EAAqBE,GACtD,IAAMiG,EAAerF,KAAKsF,gBAAgBxB,EAAe5E,EAAqBE,GAE9E,OACEqB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCACXyE,qCAMA,IAAA/C,EACoDtC,KAAKC,MAAxD6D,EADDxB,EACCwB,cAAe5E,EADhBoD,EACgBpD,oBAAqBE,EADrCkD,EACqClD,WACtCQ,EAAUI,KAAKuF,oBAAoBzB,EAAe5E,EAAqBE,GAE7E,OACEqB,EAAAC,EAAAC,cAAA,WACGf,UA7GsByB,aAwIhBmE,qBArBS,SAAAC,GAKtB,MAAO,CACL1F,KALe0F,EAAMC,KAAf3F,KAMNX,WALqBqG,EAAME,KAArBvG,WAMNmB,KALekF,EAATlF,OASiB,SAAAqF,GACzB,MAAO,CAELhC,eAAgB,SAACD,GAAD,OAAUiC,EAASnE,GAASkC,KAC5CE,iBAAkB,SAACF,GAAD,OAAUiC,EAASlE,GAAWiC,OAKrC6B,CAA6ClE,YAAWoC,KCnHxDmC,+LA7BO,IAQdC,EAPIhC,EAAkB9D,KAAKC,MAAMwF,MAAMM,UAAnCjC,cACF1E,EAAaY,KAAKC,MAAMwF,MAAME,KAAKvG,WAEZ,IAAzB0E,EAActE,SAKlBsG,EAAS,GACU,IAAf1G,IACF0G,EAAS,CAAEE,YAAa5G,IAE1BY,KAAKC,MAAMgG,gBAAgBH,qCAGpB,IAAAI,EAC+BlG,KAAKC,MAAMwF,MAAMM,UAA/CI,EADDD,EACCC,WAAYrC,EADboC,EACapC,cACZ5E,EAAwBc,KAAKC,MAAMwF,MAAMlF,KAAzCrB,oBACR,OAAIiH,EACM1F,EAAAC,EAAAC,cAACyF,EAAA,WAAD,MAIR3F,EAAAC,EAAAC,cAAC0F,GAAD,CAAkBvC,cAAeA,EAAe5E,oBAAqBA,EAAqBqD,UAAWvC,KAAKC,MAAMwF,MAAMC,KAAK3F,KAAKS,YA1B3Ga,aCQZmE,qBAVS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACHK,gBAAiB,SAACK,GAAD,OAAeV,EAASvH,EAAkBiI,OAIpDd,CAA6CK,aCVtDU,oLACK,IACCjG,EAAkBN,KAAKC,MAAMM,KAA7BD,cADDgC,EAEwBtC,KAAKC,MAA5BC,EAFDoC,EAECpC,KAAMsG,EAFPlE,EAEOkE,YAEd,OACE/F,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CAAOvG,KAAMA,EAAMwG,UAAU,SAAS9F,UAAW,0BAC/CH,EAAAC,EAAAC,cAAA,UAAQgG,MAAM,IAAIH,GAClB/F,EAAAC,EAAAC,cAAA,UAAQgG,MAAM,KAAOrG,EAAc,CAACE,GAAI,wBACxCC,EAAAC,EAAAC,cAAA,UAAQgG,MAAM,KAAOrG,EAAc,CAACE,GAAI,+BATfa,aAelBC,eAAWiF,ICfpBK,oLACK,IACCtG,EAAkBN,KAAKC,MAAMM,KAA7BD,cADDgC,EAEwBtC,KAAKC,MAA5BC,EAFDoC,EAECpC,KAAMsG,EAFPlE,EAEOkE,YAEd,OACE/F,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CAAOvG,KAAMA,EAAMwG,UAAU,SAAS9F,UAAW,0BAC/CH,EAAAC,EAAAC,cAAA,UAAQgG,MAAM,IAAIH,GAClB/F,EAAAC,EAAAC,cAAA,UAAQgG,MAAM,KAAOrG,EAAc,CAACE,GAAI,2BACxCC,EAAAC,EAAAC,cAAA,UAAQgG,MAAM,KAAOrG,EAAc,CAACE,GAAI,wBACxCC,EAAAC,EAAAC,cAAA,UAAQgG,MAAM,KAAOrG,EAAc,CAACE,GAAI,wBACxCC,EAAAC,EAAAC,cAAA,UAAQgG,MAAM,KAAOrG,EAAc,CAACE,GAAI,8BAXfa,aAiBlBC,eAAWsF,aCjBpBC,oLACK,IACCvG,EAAkBN,KAAKC,MAAMM,KAA7BD,cADDgC,EAE4BtC,KAAKC,MAAhCO,EAFD8B,EAEC9B,GAAIN,EAFLoC,EAEKpC,KAAMsG,EAFXlE,EAEWkE,YAElB,OACE/F,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CAAOjG,GAAIA,EAAIN,KAAMA,EAAMwG,UAAU,SAAS9F,UAAW,0BACvDH,EAAAC,EAAAC,cAAA,UAAQgG,MAAM,IAAIH,GAClB/F,EAAAC,EAAAC,cAAA,UAAQgG,MAAM,KAAOrG,EAAc,CAACE,GAAI,qBACxCC,EAAAC,EAAAC,cAAA,UAAQgG,MAAM,KAAOrG,EAAc,CAACE,GAAI,mBACxCC,EAAAC,EAAAC,cAAA,UAAQgG,MAAM,KAAOrG,EAAc,CAACE,GAAI,qCAVhBa,aAgBjBC,eAAWuF,ICZpBC,oLAEKC,GACmB/G,KAAKC,MAAMM,KAA7BD,cADO,IAEX0G,EAAS,GAiBb,OAhBKD,EAAOnH,UAEVoH,EAAOpH,QAAU,4BAEdmH,EAAO9E,aAEV+E,EAAO/E,WAAc,+BAElB8E,EAAOxH,wBAEVyH,EAAOzH,sBAAwB,0CAE5BwH,EAAOf,cAEVgB,EAAOhB,YAAc,gCAEhBgB,mCAGA,IAAAjD,EAAA/D,KACCiH,EAAkBjH,KAAKC,MAAvBgH,cACA3G,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,OACEG,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEQ,cAAeA,EACfC,oBAAoB,EACpBC,SAAUnH,KAAKmH,SAAS5D,KAAKvD,MAC7BoH,SAAU,SAACL,EAADM,GAAqD,IAA1CC,EAA0CD,EAA1CC,cAA0BC,GAAgBF,EAA3BG,UAA2BH,EAAhBE,WAC3CxD,EAAK9D,MAAMmH,SAASL,GACpBO,GAAc,GACdC,KAGJE,OAAQ,SAAAC,KAAGX,OAAH,IAAWC,EAAXU,EAAWV,OAAQW,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAA5BF,EAA0CG,aAA1CH,EAAwDI,cAAxD,OACNrH,EAAAC,EAAAC,cAAA,QAAMyG,SAAUQ,GACdnH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEjG,GAAI,UACDN,KAAK,UACLwG,UAAU,WACVqB,KAAK,OACLvB,YAAalG,EAAc,CAACE,GAAI,mCAChCwH,KAAK,IACLpH,UAAW,6BAEf+G,EAAQ/H,SAAWoH,EAAOpH,SAAWa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAoBN,EAAc,CAACE,GAAIwG,EAAOpH,WAEnGa,EAAAC,EAAAC,cAACsH,GAAA,EAAD,CAAS/H,KAAK,mBAEhBO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2DACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAEbH,EAAAC,EAAAC,cAACuH,GAAD,CACA1H,GAAI,aACJN,KAAK,aACLsG,YAAalG,EAAc,CAACE,GAAI,wCAE/BmH,EAAQ1F,YAAc+E,EAAO/E,YAAcxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAoBN,EAAc,CAACE,GAAIwG,EAAO/E,eAG3GxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACwH,GAAD,CAAoBjI,KAAK,wBAAwBsG,YAAalG,EAAc,CAACE,GAAI,mDAChFmH,EAAQpI,uBAAyByH,EAAOzH,uBAAyBkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAoBN,EAAc,CAACE,GAAIwG,EAAOzH,0BAIjIkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACyH,GAAD,CAAoBlI,KAAK,cAAcsG,YAAalG,EAAc,CAACE,GAAI,yCACtEmH,EAAQ3B,aAAegB,EAAOhB,aAAevF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAoBN,EAAc,CAACE,GAAIwG,EAAOhB,iBAI/GvF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQoH,KAAK,SAASnH,UAAU,+BAAgCN,EAAc,CAACE,GAAI,oDAhFxEa,aA0FZC,eAAWwF,IC5FpBuB,8LAEeC,GACjB,IAAI,IAAAC,EAC2BvI,KAAKC,MAAMwF,MAAMC,KAAtC3F,EADNwI,EACMxI,KAAMyI,EADZD,EACYC,WAEd,GADAC,QAAQC,IAAI,aAAa1I,KAAKC,QACzBuI,EAAY,KACPG,EAAY3I,KAAKC,MAAjB0I,QAER,OADA3I,KAAKC,MAAM2I,aAAa,sEACjBD,EAAQE,KAAK,gBANpB,IAQMjJ,EAA4D0I,EAA5D1I,QAASL,EAAmD+I,EAAnD/I,sBAAuB0C,EAA4BqG,EAA5BrG,WAAY+D,EAAgBsC,EAAhBtC,YAE9C8C,EAAW,CAAElJ,UAASyD,QADZtD,EAAKS,GACgBjB,wBAAuB0C,aAAY+D,eACxE,OAAOhG,KAAKC,MAAM2H,aAAakB,GAC/B,MAAOC,GAEP,YADAN,QAAQC,IAAI,YAAaK,EAAEC,mDAKdrC,GACf,OAAOA,GACL,IAAK,MACH,OAAO,EACT,IAAK,aACH,OAAO,EACT,IAAK,UACH,OAAO,EACT,IAAK,UACH,OAAO,EACT,IAAK,QACH,OAAO,EACT,QACE,OAAO,4CAIIsC,EAAQF,GACvBA,EAAEG,iBACFH,EAAEI,kBACFC,aAAaC,QAAQ,SAAUJ,GAE/BK,OAAOC,SAASC,KAAO,mDAIF7C,GACpB3G,KAAKC,MAAMwJ,eAAe9C,GAC1B,IACIb,EADE1G,EAAaY,KAAK0J,iBAAiB/C,GAEzCb,EAAS,GACU,IAAf1G,IACF0G,EAAS,CAAEE,YAAa5G,IAE1BY,KAAKC,MAAMgG,gBAAgBH,oCAGrB,IAAA/B,EAAA/D,KACCM,EAAkBN,KAAKC,MAAMM,KAA7BD,cADDqJ,EAEiC3J,KAAKC,MAAMwF,MAAMlF,KAAzCrB,GAFTyK,EAECV,OAFDU,EAESzK,qBACR2F,EAAa7E,KAAKC,MAAMwF,MAAME,KAA9Bd,SACAa,EAAS1F,KAAKC,MAAMwF,MAApBC,KAQR,OACEjF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gDAKbH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,KAAG6I,KAAK,IAAIlG,QAAStD,KAAK4J,iBAAiBrG,KAAKvD,KAAM,OAClDM,EAAc,CAACE,GAAI,yBAGzBC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBACdH,EAAAC,EAAAC,cAAA,KAAG6I,KAAK,IAAIlG,QAAStD,KAAK4J,iBAAiBrG,KAAKvD,KAAM,OAClDM,EAAc,CAACE,GAAI,yBAI3BC,EAAAC,EAAAC,cAACkJ,GAAD,CAAc5C,cAzBW,CAC3BrH,QAAS,GACTqC,WAAY,GACZ1C,sBAAuB,GACvByG,YAAa,IAqBwCzD,UAAWmD,EAAM0B,SAAUpH,KAAK8J,mBAAmBvG,KAAKvD,QAE3GS,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAkBH,EAAAC,EAAAC,cAAA,YAAQL,EAAc,CAACE,GAAI,2BAE3DC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAY+F,MAAO9B,EAAUkF,SAAU,SAAAhB,GAAC,OAAIhF,EAAKiG,uBAAwBjB,EAAEkB,OAAOtD,SAClGlG,EAAAC,EAAAC,cAAA,UAAQgG,MAAM,OAASrG,EAAc,CAACE,GAAI,oBAC1CC,EAAAC,EAAAC,cAAA,UAAQgG,MAAM,cAAgBrG,EAAc,CAACE,GAAI,2BACjDC,EAAAC,EAAAC,cAAA,UAAQgG,MAAM,WAAarG,EAAc,CAACE,GAAI,wBAC9CC,EAAAC,EAAAC,cAAA,UAAQgG,MAAM,WAAarG,EAAc,CAACE,GAAI,wBAC9CC,EAAAC,EAAAC,cAAA,UAAQgG,MAAM,SAAWrG,EAAc,CAACE,GAAI,wBAGhDC,EAAAC,EAAAC,cAACuJ,GAAD,CAAc3K,sBAAuBL,YArG1BiL,IAAM9I,WA2GVC,eAAW+G,IC9Gb+B,GAA0B1M,OAAO,2BAGjC2M,GAAwB/L,YAAa8L,ICHrCE,GAA0B5M,OAAO,2BACjC6M,GAAwBjM,YAAagM,ICFrCE,GAAuB9M,OAAO,wBAE9B+M,GAAqBnM,YAAakM,IC0BhChF,qBAdS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACLgC,aAAc,SAACkB,GAAD,OAAclD,EAASpH,EAAiBsK,KACtD4B,eAAgB,SAACzB,GAAD,OAAYrD,EAASyE,GAAsBpB,KAC3DQ,eAAgB,SAAC5E,GAAD,OAAce,EAAS2E,GAAsB1F,KAC7DoB,gBAAiB,SAACK,GAAD,OAAeV,EAASvH,EAAkBiI,KAC3DsC,aAAc,SAACI,GAAD,OAAapD,EAAS6E,GAAmBzB,OAI5CxD,CAA6C6C,wBCrBtDsC,oLAEK5D,GAAQ,IACPzG,EAAkBN,KAAKC,MAAMM,KAA7BD,cACJ0G,EAAS,GAOb,OANKD,EAAOnH,UACVoH,EAAOpH,QAAUU,EAAc,CAACE,GAAI,4BAEjCuG,EAAOxH,wBACVyH,EAAOzH,sBAAwBe,EAAc,CAACE,GAAI,0CAE7CwG,mCAGA,IAAAjD,EAAA/D,KACCiH,EAAkBjH,KAAKC,MAAvBgH,cACA3G,EAAkBN,KAAKC,MAAMM,KAA7BD,cACR,OACEG,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEQ,cAAeA,EACfC,oBAAoB,EACpBC,SAAUnH,KAAKmH,SAAS5D,KAAKvD,MAC7BoH,SAAU,SAACL,EAADM,GAAqD,IAA1CC,EAA0CD,EAA1CC,cAA0BC,GAAgBF,EAA3BG,UAA2BH,EAAhBE,WAC3CxD,EAAK9D,MAAMmH,SAASL,GACpBO,GAAc,GACdC,KAGJE,OAAQ,SAAAC,KAAGX,OAAH,IAAWC,EAAXU,EAAWV,OAAQW,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAA5BF,EAA0CG,aAA1CH,EAAwDI,cAAxD,OACNrH,EAAAC,EAAAC,cAAA,QAAMyG,SAAUQ,GACdnH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEjG,GAAI,UACDN,KAAK,UACLwG,UAAU,WACVqB,KAAK,OACLvB,YAAalG,EAAc,CAACE,GAAI,iCAChCwH,KAAK,IACLpH,UAAW,6BAEf+G,EAAQ/H,SAAWoH,EAAOpH,SAAWa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAoBoG,EAAOpH,UAElFa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACwH,GAAD,CAAoBjI,KAAK,wBAAwBsG,YAAalG,EAAc,CAACE,GAAI,iDAChFmH,EAAQpI,uBAAyByH,EAAOzH,uBAAyBkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAoBoG,EAAOzH,wBAE9GkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BAAgCN,EAAc,CAACE,GAAI,kDAhD5Da,aA0DVC,eAAWqJ,IChEbC,GAA6BlN,OAAO,8BACpCmN,GAAoBnN,OAAO,qBAC3BoN,GAAepN,OAAO,gBACtBqN,GAAmBrN,OAAO,oBAC1BsN,GAAkBtN,OAAO,mBACzBG,GAAeH,OAAO,gBACtBI,GAAuBJ,OAAO,wBAC9BK,GAA8BL,OAAO,+BACrCM,GAAsBN,OAAO,uBAC7BuN,GAAmBvN,OAAO,oBAC1BwN,GAAgBxN,OAAO,iBAGvByN,IAD0B7M,YAAasM,IACrBtM,YAAauM,KAC/BO,GAAc9M,YAAawM,IAC3BO,GAAiB/M,YAAayM,IAE9BtM,IADiBH,YAAa0M,IAChB1M,YAAaT,KAC3Ba,GAAqBJ,YAAaR,IAClCa,GAA2BL,YAAaP,IACxCa,GAAoBN,YAAaN,IACjCsN,GAAiBhN,YAAa2M,IAC9BM,GAAejN,YAAa4M,ICtB5BrN,GAAeH,OAAO,gBACtB8N,GAA+B9N,OAAO,gCACtCM,GAAsBN,OAAO,uBAC7B+N,GAAuB/N,OAAO,wBAC9BgO,GAAgChO,OAAO,iCACvCiO,GAAejO,OAAO,gBACtBkO,GAAiBlO,OAAO,kBACxBmO,GAAuBnO,OAAO,wBAC9BoO,GAA8BpO,OAAO,+BACrCqO,GAAoBrO,OAAO,qBAC3BsO,GAAiBtO,OAAO,kBACxBuO,GAAwBvO,OAAO,yBAE/Be,GAAcH,YAAaT,IAC3BqO,GAA4B5N,YAAakN,IACzC5M,GAAoBN,YAAaN,IACjCmO,GAAc7N,YAAaqN,IAC3BS,GAAqB9N,YAAamN,IAIlCY,IAH2B/N,YAAaoN,IACxBpN,YAAasN,IACRtN,YAAauN,IACPvN,YAAawN,KACxCQ,GAAgBhO,YAAa0N,IAC7BO,GAAkBjO,YAAayN,IAC/BS,GAAsBlO,YAAa2N,ICb1CQ,oLAEK9I,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM2D,eAAeD,sCAGxBA,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM4D,iBAAiBF,oCAG9B,IA4BHO,EA5BG5B,EAC2FtC,KAAKC,MAA/FO,EADD8B,EACC9B,GAAIT,EADLuC,EACKvC,KAAMH,EADX0C,EACW1C,QAAkB8M,GAD7BpK,EACoBqK,QADpBrK,EAC6BoK,UAAU3G,EADvCzD,EACuCyD,UAAW6G,EADlDtK,EACkDsK,YAAaC,EAD/DvK,EAC+DuK,SAAUC,EADzExK,EACyEwK,SAAUvM,EADnF+B,EACmF/B,KACpFwM,EAAoBhH,EAAUiH,gBAAgBxM,GAE5CF,EAAkBC,EAAlBD,cACA2M,EAAiBJ,EAAjBI,aAoBFxK,EAAW,CAAE2B,eAjBI,CACrBf,QAASrD,KAAKC,MAAMF,KAAKS,GACzB6D,YAAa,KACbC,UAAW,KACXC,WAAY/D,EACZgE,OAAQ,EAER0I,WAAYH,GAUsB5I,IAlBxB,WAmBNzB,EAAa,CAAE+B,iBATI,CACvBpB,QAASrD,KAAKC,MAAMF,KAAKS,GACzB2D,IAAM,UAENO,QAASlE,EAET0M,WAAYH,GAG0B5I,IAnB5B,WAuBZ,GADAD,EAAazD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iCAAiCN,EAAc,CAACE,GAAI,sBACpD,qBAAjByM,EAA6B,CACrC,IAEME,EAFwBF,EAAaH,GACGzN,OAAO,SAAAC,GAAC,OAAIA,EAAEkB,KAAOA,IACzB,GAAG4M,qBAC7C,GAAiC,IAA7BD,EAAkB3N,OAAc,KAC1BO,EAASoN,EAAkB,GAA3BpN,KACRmE,EAAazD,EAAAC,EAAAC,cAACiE,EAAD,CAAY7E,KAAMA,KAInC,OACEU,EAAAC,EAAAC,cAAA,WAASC,UAAU,iCACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACbH,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAACwM,WAAc,aACtBzN,EACDa,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACuE,GAAD,CAEInF,KAASA,EAETwC,UAAcvC,KAAKC,MAAMF,KACzByC,MAAUkK,EACVjK,SAAaA,EACbC,WAAeA,EACfC,SAAQ,kBAAAd,OAAsBrB,GAC9BoC,cAAa,yBAAAf,OAA6BrB,GAC1CqC,gBAAmB7C,KAAKmF,SAAS5B,KAAKvD,MACtC8C,kBAAqB9C,KAAK0B,WAAW6B,KAAKvD,MAC1C+C,WAAc,MAKtBtC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyE,GAAD,CAAUrF,KAAO6M,KAEnBnM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXsD,YArFQ7C,aAmHPmE,qBArBS,SAAAC,GAAS,IACvBM,EAAwBN,EAAxBM,UAAW8G,EAAapH,EAAboH,SAGnB,MAAO,CACL9M,KAHe0F,EAAMC,KAAf3F,KAINgG,YACA8G,WACAtM,KALekF,EAATlF,OASiB,SAAAqF,GACzB,MAAO,CAELhC,eAAgB,SAACD,EAAMuJ,GAAP,OAAsBtH,EAASnE,GAASkC,EAAMuJ,KAC9DrJ,iBAAkB,SAACF,GAAD,OAAUiC,EAASlE,GAAWiC,OAKrC6B,CAA6ClE,YAAWmL,KCjGxDa,oLAxBJ,IAAAhL,EACoCtC,KAAKC,MAAxCsC,EADDD,EACCC,UAAWrD,EADZoD,EACYpD,oBACbqO,EAAcvN,KAAKC,MAAMuN,KAAOxN,KAAKC,MAAMuN,KAAO,GAElDC,EAAsBzO,EAAoBuO,EAAarO,EADzC,wBAEdwO,EAAwBjO,EAAsBgO,EAAqBvO,EAFrD,wBAIpB,OACEuB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBACV8M,EAAsBhO,IAAI,SAACJ,EAAGqO,GAC5B,IAAMhB,EAAUpK,EAAU/B,KAAOlB,EAAES,KAAKS,GAClCoN,EAAYtO,EAAEkD,MAEpB,OACE/B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,sBAAsBuD,IAAKwJ,GACvClN,EAAAC,EAAAC,cAACkN,GAAD,CAASrN,GAAIlB,EAAEkB,GAAIsM,SAAUxN,EAAEgF,UAAWsI,YAAatN,EAAES,KAAMH,QAASN,EAAEK,SAAUgN,QAASA,EAASD,SAAWkB,eAjBvGvM,aCCpByM,oLAEK/G,GAAQ,IACPzG,EAAkBN,KAAKC,MAAMM,KAA7BD,cACJ0G,EAAS,GAOb,OANKD,EAAOnH,UACVoH,EAAOpH,QAAUU,EAAc,CAACE,GAAI,6BAEjCuG,EAAOxH,wBACVyH,EAAOzH,sBAAwBe,EAAc,CAACE,GAAI,2CAE7CwG,mCAGA,IAAAjD,EAAA/D,KAAAsC,EAC0BtC,KAAKC,MAA9BgH,EADD3E,EACC2E,cAAexB,EADhBnD,EACgBmD,MACfnF,EAAkBN,KAAKC,MAAMM,KAA7BD,cACFyN,EAAYzN,EAAc,CAACE,GAAI,qCAC/BwN,EAAavI,EAAMC,KAAK8C,WACX/H,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAYH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BAAgCmN,IAC7EtN,EAAAC,EAAAC,cAAA,KAAGsN,MAAM,8BAA8BzE,KAAK,gBAAgBuE,GAE/E,OACEtN,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEQ,cAAeA,EACfC,oBAAoB,EACpBC,SAAUnH,KAAKmH,SAAS5D,KAAKvD,MAC7BoH,SAAU,SAACL,EAADM,GAAqD,IAA1CC,EAA0CD,EAA1CC,cAA0BC,GAAgBF,EAA3BG,UAA2BH,EAAhBE,WAC3CxD,EAAK9D,MAAMmH,SAASL,GACpBO,GAAc,GACdC,KAGJE,OAAQ,SAAAC,GAAA,IAAGX,EAAHW,EAAGX,OAAQC,EAAXU,EAAWV,OAAQW,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAA5BF,EAA0CG,aAA1CH,EAAwDI,cAAxD,OACNrH,EAAAC,EAAAC,cAAA,QAAMyG,SAAUQ,GACdnH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEjG,GAAI,UACDN,KAAK,UACLwG,UAAU,WACVqB,KAAK,OACLvB,YAAalG,EAAc,CAACE,GAAI,kCAChCwH,KAAK,IACLpH,UAAW,6BAEhBH,EAAAC,EAAAC,cAACsH,GAAA,EAAD,CAAS/H,KAAI,iBAAA2B,OAAmBkF,EAAOzC,aACtCqD,EAAQ/H,SAAWoH,EAAOpH,SAAWa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBoG,EAAOpH,UAEjFa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACwH,GAAD,CAAoBjI,KAAK,wBAAwBsG,YAAalG,EAAc,CAACE,GAAI,kDAChFmH,EAAQpI,uBAAyByH,EAAOzH,uBAAyBkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBoG,EAAOzH,wBAE5GyO,cArDW3M,aAoEXmE,qBANS,SAACC,EAAOyI,GAC9B,MAAO,CACLzI,UAIWD,CAAyBlE,YAAWwM,KC5D7CK,eACJ,SAAAA,EAAYlO,GAAO,IAAA8D,EAAA,OAAAqK,OAAAC,EAAA,EAAAD,CAAApO,KAAAmO,IACjBpK,EAAAqK,OAAAE,EAAA,EAAAF,CAAApO,KAAAoO,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAAxO,KAAMC,KACDwO,IAAM1K,EAAK9D,MAAMwO,IAEtB1K,EAAK0B,MAAQ,CACXiJ,YAAa,GACbd,UAAW,IANI7J,oFAWjB,IAAMM,EAAcrE,KAAKC,MAAMwO,IAE/BzO,KAAKC,MAAMgG,gBAAgB,CAAE5B,2DAGZiE,GAAU,IACnBvI,EAASC,KAAKC,MAAMwF,MAAMC,KAA1B3F,KACAuE,EAA8CgE,EAA9ChE,UAAW/E,EAAmC+I,EAAnC/I,sBAAuBK,EAAY0I,EAAZ1I,QACpC+O,EAAY3O,KAAKC,MAAMwF,MAAMmJ,QAAQC,YAAYnP,IAAI,SAACJ,GAAO,OAAOA,EAAEkB,KACtEsI,EAAW,CACfzF,QAAStD,EAAKS,GACd8D,YACA/E,wBACAK,UACAyE,YAAarE,KAAKyO,IAClBK,8BAA+B9O,KAAKd,oBAEpC6P,aAAcJ,GAEhB,OAAO3O,KAAKC,MAAM+O,kBAAkBlG,sCAG3BgE,GAIT,GAA8B,SAFN9M,KAAKyF,MAArBiJ,YAEQ5B,GACd,MAAO,GAGT,IAAM7F,EAAgB,CACpB3C,UAAWwI,EACXlN,QAAS,GACTL,sBAAuB,IAEzB,OACEkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBC,MAAO,CAACoO,YAAe,SAEvDxO,EAAAC,EAAAC,cAACuO,GAAD,CAAaC,KAAI,eAAAtN,OAAiBiL,GAAY1F,SAAUpH,KAAKoP,mBAAmB7L,KAAKvD,MAAOiH,cAAeA,0CAKpG6F,GAAU,IAEf4B,EAAgB1O,KAAKyF,MAArBiJ,YAEN,OAAIA,EAAY5B,IAAuC,SAA1B4B,EAAY5B,IACvC4B,EAAY5B,GAAY,aACxB9M,KAAKqP,SAAS,CAACX,kBAGfA,EAAY5B,GAAY,YACxB9M,KAAKqP,SAAS,CAACX,kDAKV/K,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM2D,eAAeD,sCAGxBA,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM4D,iBAAiBF,yCAGzBkL,EAAa3P,GAAqB,IAAAoQ,EAAAtP,KACtCM,EAAkBN,KAAKC,MAAMM,KAA7BD,cACFiC,EAAYvC,KAAKC,MAAMwF,MAAMC,KAAK3F,KAGlCwP,EAAkBvQ,EAAoB6P,EAAa3P,EADrC,uBAKpB,OAH0BO,EAAsB8P,EAAiBrQ,EAF7C,uBAKKQ,IAAI,SAAA8P,GAAU,IA8BjCtL,EA5BInE,EAASyP,EAATzP,KACAyC,EAAUgN,EAAVhN,MAoBFC,EAAW,CAAE2B,eAjBI,CACrBf,QAASiM,EAAKrP,MAAMwF,MAAMC,KAAK3F,KAAKS,GACpC6D,YAAa,KACbC,UAAWkL,EAAOhP,GAClB+D,WAAY,KACZC,OAAQ,EAER0I,WAAYoC,EAAKrP,MAAMwO,KAUWtK,IAlBxB,UAmBNzB,EAAa,CAAE+B,iBATI,CACvBpB,QAASiM,EAAKrP,MAAMwF,MAAMC,KAAK3F,KAAKS,GACpC2D,IAAM,SAENO,QAAS8K,EAAOhP,GAEhB0M,WAAYoC,EAAKrP,MAAMwO,KAGetK,IAnB5B,UAqBNsL,EAAcH,EAAKI,WAAWF,EAAOhP,IAEnCmP,EAAwBH,EAAxBG,oBAIR,GADAzL,EAAazD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iCAAiCN,EAAc,CAACE,GAAI,sBAC5C,IAA/BmP,EAAoBnQ,OAAc,KAC5BO,EAAS4P,EAAoB,GAA7B5P,KACRmE,EAAazD,EAAAC,EAAAC,cAACiE,EAAD,CAAY7E,KAAMA,IAGjC,OACEU,EAAAC,EAAAC,cAAA,MAAIwD,IAAKqL,EAAOhP,IACdC,EAAAC,EAAAC,cAAA,WAASC,UAAU,cACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACbH,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAACwM,WAAc,aACvB5M,EAAAC,EAAAC,cAACiP,GAAAlP,EAAD,CAASmP,WAAY,CAAE5F,OAAQ,WAAauF,EAAO7P,UACnDc,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACuE,GAAD,CAEInF,KAASA,EAETwC,UAAc+M,EAAKrP,MAAMwF,MAAMC,KAAK3F,KACpCyC,MAAUA,EACVC,SAAaA,EACbC,WAAeA,EACfC,SAAQ,iBAAAd,OAAqB2N,EAAOhP,IACpCoC,cAAa,wBAAAf,OAA4B2N,EAAOhP,IAChDqC,gBAAmByM,EAAKnK,SAAS5B,KAAK+L,GACtCxM,kBAAqBwM,EAAK5N,WAAW6B,KAAK+L,GAC1CvM,WAAc,KAIpBtC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBmE,IAAMyK,EAAOxK,YAAYC,OAAO,yBAG/DxE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyE,GAAD,CAAUrF,KAAOyP,EAAOzP,QAE1BU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXsD,KAIRzD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBAEbH,EAAAC,EAAAC,cAACmP,GAAD,CAAatC,KAAMgC,EAAO3C,SAAUtK,UAAWA,EAAWrD,oBAAqBA,IAC/EuB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACbH,EAAAC,EAAAC,cAAA,KAAG2C,QAASgM,EAAKS,aAAaxM,KAAK+L,EAAKE,EAAOhP,KAAKC,EAAAC,EAAAC,cAACsC,GAAA,EAAD,CAAiBC,KAAM,CAAC,MAAM,gBAAiBC,MAAM,QAAQC,KAAK,UAIzHqM,sCAOA,IAAAO,EAC6BhQ,KAAKC,MAAMwF,MAAMmJ,QAA7CzI,EADD6J,EACC7J,WAAY0I,EADbmB,EACanB,YACZvO,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,GAAI6F,EACF,OAAQ1F,EAAAC,EAAAC,cAACyF,EAAA,WAAD,MALH,IAQClH,EAAwBc,KAAKC,MAA7Bf,oBACF+Q,EAAajQ,KAAKkQ,cAAcrB,EAAa3P,GAEnD,OAA0B,IAAtB+Q,EAAWzQ,OAEXiB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAmBN,EAAc,CAACE,GAAI,6BAMxDC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCACVqP,WA5Ma5O,aAmNVC,eAAW6M,ICxMX3I,qBAhBS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACHK,gBAAiB,SAACtC,GAAD,OAAUiC,EAASuF,GAAgBxH,KACpDqL,kBAAmB,SAACrL,GAAD,OAAUiC,EAASuG,GAAYxI,KAElDC,eAAgB,SAACD,GAAD,OAAUiC,EAASnE,GAASkC,KAE5CE,iBAAkB,SAACF,GAAD,OAAUiC,EAASlE,GAAWiC,OAKzC6B,CAA6C2I,ICxBrD,SAASgC,GAAcC,GAC5B,OAAQhC,OAAOiC,KAAKD,GAAK5Q,WCYrB8Q,eACJ,SAAAA,EAAYrQ,GAAO,IAAA8D,EAAAqK,OAAAC,EAAA,EAAAD,CAAApO,KAAAsQ,GACjBvM,EAAAqK,OAAAE,EAAA,EAAAF,CAAApO,KAAAoO,OAAAG,EAAA,EAAAH,CAAAkC,GAAA9B,KAAAxO,KAAMC,IADW,IAEV6F,EAAU7F,EAAMsQ,MAAhBzK,OAFU,OAGjB/B,EAAK0K,IAAM+B,SAAS1K,EAAOtF,GAAI,IAHduD,oFAOjB/D,KAAKC,MAAMwQ,gBAAgBzQ,KAAKyO,0CAGrBnG,GACX,IAAI,IAEMvI,EAASC,KAAKC,MAAMwF,MAAMC,KAA1B3F,KAEAH,EAAmC0I,EAAnC1I,QAASL,EAA0B+I,EAA1B/I,sBACX8E,EAAcrE,KAAKyO,IACnBpL,EAAUtD,EAAKS,GAErB,OAAOR,KAAKC,MAAM2H,aAAa,CAAChI,UAASyE,cAAahB,UAAS9D,0BAC/D,MAAOwJ,GAEP,YADAN,QAAQC,IAAI,IAAKK,EAAEC,wDAKD/E,EAAU/E,GAC9B,GAAI+E,EAAS1E,wBAA0BL,EAErC,OADA+E,EAAStE,SAAWsE,EAASrE,QACtBqE,EAET,IAAMyM,EAAsBzM,EAASU,sBAAsBtF,OAAO,SAAA4E,GAEhE,OAAQA,EAAS1E,wBAA0BL,IAC1C,GAGH,OADA+E,EAAStE,SAAW+Q,EAAoB9Q,QACjCqE,mCAGAN,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM2D,eAAeD,sCAGxBA,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM4D,iBAAiBF,yCAGzBqJ,EAAiBzK,GAAW,IAChCjC,EAAkBN,KAAKC,MAAMM,KAA7BD,cACAwE,EAAakI,EAAgB2D,QAA7B7L,SACR,GAAIkI,EAAgB/K,aAAeM,EAAUN,WAAY,CACvD,IAAM2O,EAAOtQ,EAAc,CAACE,GAAI,gCAC1BwI,EAAU6H,kBAAQD,EAAMtQ,EAAc,CAACE,GAAIsE,KACjD,OACErE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBoI,IAMnC,OACEvI,EAAAC,EAAAC,cAACmQ,GAAD,CAAYrC,IAAKzO,KAAKyO,IAAKxH,cAFF,CAAErH,QAAS,GAAIL,sBAAuB,IAED6H,SAAUpH,KAAK4H,aAAarE,KAAKvD,iDAIlF+Q,GAAK,IAEd1Q,GAAMC,EADcN,KAAKC,MAAMM,KAA7BD,eACkB,CAACE,GAAI,oBAE/B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0CAA0CC,MAAO,CAACC,QAAS,WAAaT,GACvFI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mDAAmDK,IAAK8P,EAAK7P,MAAM,KAAKC,OAAO,KAAKC,IAAI,wCAMtG,IACC4L,EAAoBhN,KAAKC,MAAMwF,MAAMM,UAArCiH,gBACA9N,EAAwBc,KAAKC,MAAMwF,MAAMlF,KAAzCrB,oBACAoB,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,GAAI6P,GAAcnD,GAChB,OACEvM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyF,EAAA,WAAD,OAKN,IAsBIlC,EAtBE3B,EAAYvC,KAAKC,MAAMwF,MAAMC,KAAK3F,KAClCkE,EAAWjE,KAAKgR,sBAAsBhE,EAAiB9N,GACrDa,EAAgBiN,EAAhBjN,KAAMyC,EAAUwK,EAAVxK,MACRyO,EAAajR,KAAKkR,cAAclE,EAAiBzK,GAEjD4B,EAAM,eAaN1B,EAAW,CAAE2B,eAZI,CACnBf,QAASrD,KAAKC,MAAMwF,MAAMC,KAAK3F,KAAKS,GACpC6D,YAAa2I,EAAgBxM,GAC7B8D,UAAW,KACXC,WAAY,KACZC,OAAQ,GAOwBL,OAC9BzB,EAAa,CAAE+B,iBANI,CACrBpB,QAASrD,KAAKC,MAAMwF,MAAMC,KAAK3F,KAAKS,GACpC2D,IAAM,WACNO,QAASsI,EAAgBxM,IAGW2D,OAEhCQ,EAA0BV,EAA1BU,sBAGR,GADAT,EAAazD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iCAAiCN,EAAc,CAACE,GAAI,sBAC1C,IAAjCmE,EAAsBnF,OAAc,KAC9BO,EAAS4E,EAAsB,GAA/B5E,KACRmE,EAAazD,EAAAC,EAAAC,cAACiE,EAAD,CAAY7E,KAAMA,IAGjC,OACEU,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4DACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAkBqD,EAASY,SAASA,UACjDpE,EAAAC,EAAAC,cAAA,SACEF,EAAAC,EAAAC,cAACiP,GAAAlP,EAAD,CAASmP,WAAY,CAAE5F,OAAQ,WAAahG,EAAStE,UACrDc,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACuE,GAAD,CACEnF,KAASA,EACTwC,UAAcA,EACdC,MAAUA,EACVC,SAAaA,EACbC,WAAeA,EACfC,SAAQ,mBAAAd,OAAuB7B,KAAKyO,KACpC7L,cAAa,0BAAAf,OAA8B7B,KAAKyO,KAChD5L,gBAAmB7C,KAAKmF,SAAS5B,KAAKvD,MACtC8C,kBAAqB9C,KAAK0B,WAAW6B,KAAKvD,MAC1C+C,WAAc,KAGlBtC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBmE,IAAMd,EAASe,YAAYC,OAAO,wBAC/DxE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyE,GAAD,CAAUrF,KAAMA,KAElBU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACTsD,KAKVzD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAkBH,EAAAC,EAAAC,cAAA,YAAOL,EAAc,CAACE,GAAI,yBAE1DC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXqQ,GAEFxQ,EAAAC,EAAAC,cAACwQ,GAAD,CAAY1C,IAAKzO,KAAKyO,IAAKvP,oBAAqBA,IAClDuB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAEdH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,eA1KmBK,aAgLZC,eAAWgP,IClKX9K,qBAdS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACH6K,gBAAiB,SAACjQ,GAAD,OAAQoF,EAASrH,EAAciC,KAChDoH,aAAc,SAACkB,GAAD,OAAclD,EAASyF,GAAevC,KACpDsI,aAAc,SAAC/M,GAAD,OAAiBuB,EAASuF,GAAgB9G,KACxDT,eAAgB,SAACD,GAAD,OAAUiC,EAASnE,GAASkC,KAC5CE,iBAAkB,SAACF,GAAD,OAAUiC,EAASlE,GAAWiC,OAIzC6B,CAA6C8K,ICvBtDe,eACJ,SAAAA,EAAYpR,GAAO,IAAA8D,EAAAqK,OAAAC,EAAA,EAAAD,CAAApO,KAAAqR,GACjBtN,EAAAqK,OAAAE,EAAA,EAAAF,CAAApO,KAAAoO,OAAAG,EAAA,EAAAH,CAAAiD,GAAA7C,KAAAxO,KAAMC,IADW,IAET6F,EAAW7F,EAAMsQ,MAAjBzK,OAFS,OAGjB/B,EAAK0K,IAAM+B,SAAS1K,EAAOtF,GAAI,IAHduD,oFAOjB/D,KAAKC,MAAMwQ,gBAAgBzQ,KAAKyO,kDAGbzB,GACnB,IAAMsE,EAAQtE,EAAgBjN,KACxBwC,EAAYvC,KAAKC,MAAMwF,MAAMC,KAAK3F,KAChC4I,EAAY3I,KAAKC,MAAjB0I,QACR,OAAI2I,EAAM9Q,KAAO+B,EAAU/B,IAClBmI,EAAQE,KAAK,0CAKXP,GACX,IAAI,IACM1I,EAA+C0I,EAA/C1I,QAASL,EAAsC+I,EAAtC/I,sBAAuB0C,EAAeqG,EAAfrG,WAGlCsP,EAAW,CAAE3R,UAASyE,YAFRrE,KAAKyO,IAEgBlP,wBAAuB0C,cAChE,OAAOjC,KAAKC,MAAM2H,aAAa2J,GAC/B,MAAOxI,GAEP,YADAN,QAAQC,IAAI,IAAKK,EAAEC,mDAKND,GACf,IAAI,IACMhJ,EAASC,KAAKC,MAAMwF,MAAMC,KAA1B3F,KACA4I,EAAY3I,KAAKC,MAAjB0I,QACF7C,EAAS,CACbzC,QAAStD,EAAKS,GACd6D,YAAarE,KAAKyO,IAClB9F,WAEF,OAAO3I,KAAKC,MAAMlB,eAAe+G,GACjC,MAAOiD,GACP,yCAIK,IACCiE,EAAoBhN,KAAKC,MAAMwF,MAAMM,UAArCiH,gBACR,OAAImD,GAAcnD,GAEdvM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyF,EAAA,WAAD,QAKNpG,KAAKwR,qBAAqBxE,GAGxBvM,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,4CACAF,EAAAC,EAAAC,cAACkJ,GAAD,CAAc5C,cAAe+F,EAAiB5F,SAAUpH,KAAK4H,aAAarE,KAAKvD,QAC/ES,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,6BAA6B0C,QAAStD,KAAKyR,iBAAiBlO,KAAKvD,OAAnF,+CACHS,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,gBAlEmBK,aAwEZgQ,MC1DA7L,qBAZS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACL6K,gBAAiB,SAACjQ,GAAD,OAAQoF,EAASrH,EAAciC,KAChDoH,aAAc,SAACkB,GAAD,OAAclD,EAAS/G,EAAiBiK,KACtD/J,eAAgB,SAAC2S,GAAD,OAAgB9L,EAAS7G,EAAe2S,OAI7ClM,CAA6C6L,ICjB/CM,GAAgCjU,OAAO,iCAGvCkU,GAAuBlU,OAAO,wBAE9BC,GAAiBD,OAAO,kBACxBE,GAAqBF,OAAO,sBAC5BsN,GAAkBtN,OAAO,mBACzBG,GAAeH,OAAO,gBACtBI,GAAuBJ,OAAO,wBAC9BK,GAA8BL,OAAO,+BACrCM,GAAsBN,OAAO,uBAK7BmU,IAH6BvT,YAAaqT,IAGrBrT,YAAasT,KAKlCnT,IAHgBH,YAAaX,IACVW,YAAaV,IACfU,YAAa0M,IAChB1M,YAAaT,KAC3Ba,GAAqBJ,YAAaR,IAElCc,IAD2BN,YAAaP,IACpBO,YAAaN,KCpBxC8T,eAEJ,SAAAA,EAAY7R,GAAO,IAAA8D,EAAA,OAAAqK,OAAAC,EAAA,EAAAD,CAAApO,KAAA8R,IACjB/N,EAAAqK,OAAAE,EAAA,EAAAF,CAAApO,KAAAoO,OAAAG,EAAA,EAAAH,CAAA0D,GAAAtD,KAAAxO,KAAMC,KAEDwF,MAAQ,CAACsM,WAAY,aAHThO,mFAQjB,GAAyB,IADH/D,KAAKC,MAAMwF,MAAMuM,cAA/BjM,UACMvG,OAAd,CAIAQ,KAAKC,MAAMgG,gBADE,8CAKEgM,EAAUC,EAAK/N,GAAK,IAAAmL,EAAAtP,KAGnC,OAAOiS,EAASvS,IAAI,SAACJ,GAAM,IACjBS,EAAST,EAATS,KACFmC,EAAWnC,EAAOA,EAAKG,KAAO,6CAC9BiC,EAAW,kBAAAN,OAAqB9B,EAAKS,IAErCA,EAAK8O,EAAK6C,mBAAmB7S,EAAG6E,GAGtC,OAEE1D,EAAAC,EAAAC,cAAA,MAAIwD,IAAG,GAAAtC,OAAKsC,EAAL,KAAAtC,OAAYvC,EAAEkB,KAGnBC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iCACXH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAE,cAAAa,OAAgBrB,IAAxB,GAAAqB,OAAkCvC,EAAEM,UACpCa,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAE,GAAAa,OAAKqQ,GAALrQ,OAAWvC,EAAEkB,KAAMC,EAAAC,EAAAC,cAACsC,GAAA,EAAD,CAAiBC,KAAK,iBAAiBC,MAAM,YAAYC,KAAK,SAG3F3C,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBmE,IAAMzF,EAAE0F,YAAYC,OAAO,wBAExDxE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAImB,GAAa1B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCAAqCK,IAAKlB,EAAKI,WAAYe,MAAM,KAAKC,OAAO,KAAKC,IAAI,OAE9HX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oCAAmCH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMH,UAAU,GAAGI,GAAImB,GAAeD,oDAShF5C,EAAG6E,GACpB,OAAOA,GACL,IAAK,YACH,OAAO7E,EAAEkB,GACX,IAAK,UACH,OAAOlB,EAAE+E,YACX,IAAK,WACH,OAAO/E,EAAEkQ,OAAOnL,+DAKI4N,GAGxB,OAAOjS,KAAKoS,iBAAiBH,EAFjB,0BACA,6DAGUA,GAGtB,OAAOjS,KAAKoS,iBAAiBH,EAFjB,wBACA,4DAGWA,GAIvB,OADAxJ,QAAQC,IAAI,WAAYuJ,GACjBjS,KAAKoS,iBAAiBH,EAHjB,yBACA,0DAMQI,EAAUN,GAAY,IAElChM,EAAiCsM,EAAjCtM,UAAW6I,EAAsByD,EAAtBzD,QAAS/B,EAAawF,EAAbxF,SAC5B,MAAmB,cAAfkF,EACK/R,KAAKsS,0BAA0BvM,GACd,YAAfgM,EACD/R,KAAKuS,wBAAwB3D,GACb,aAAfmD,EACF/R,KAAKwS,yBAAyB3F,QADhC,qCAKE4F,EAAW1J,GACpBA,EAAEG,iBACFH,EAAEI,kBAEFnJ,KAAKqP,SAAS,CACZ0C,WAAYU,yCAIH,IAAAC,EAAA1S,KACHM,EAAkBN,KAAKC,MAAMM,KAA7BD,cACFqS,EAAU,CACd,CACEzS,KAAMI,EAAc,CAACE,GAAI,mBACzB2D,IAAK,aAEP,CACEjE,KAAMI,EAAc,CAACE,GAAI,iBACzB2D,IAAK,WAEP,CACEjE,KAAMI,EAAc,CAACE,GAAI,kBACzB2D,IAAK,aAIT,OACE1D,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACX+R,EAAQjT,IAAI,SAAAJ,GAEV,IAAMsT,EAASF,EAAKjN,MAAL,aAA6BnG,EAAE6E,IAC/B,YACA,GACf,OACE1D,EAAAC,EAAAC,cAAA,MAAIwD,IAAK7E,EAAE6E,IAAKvD,UAAWgS,EAAQtP,QAASoP,EAAKG,WAAWtP,KAAKmP,EAAMpT,EAAE6E,MACvE1D,EAAAC,EAAAC,cAAA,KAAG6I,KAAK,IAAIlK,EAAEY,uDAQNuF,GAKnB,GAHuBA,EAAMuM,cAArB7L,WAIN,OAAQ1F,EAAAC,EAAAC,cAACyF,EAAA,WAAD,MAGV,IAAM0M,EAAc9S,KAAK+S,sBAAsBtN,EAAMuM,cAAehS,KAAKyF,MAAMsM,YAE/E,OACEtR,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCACXkS,oCAKE,IACCxS,EAAkBN,KAAKC,MAAMM,KAA7BD,cACFV,EAAUI,KAAKgT,qBAAqBhT,KAAKC,MAAMwF,OAC/CwN,EAAUjT,KAAKkT,aAErB,OACEzS,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAkBH,EAAAC,EAAAC,cAAA,YAAOL,EAAc,CAACE,GAAI,iCAC1DC,EAAAC,EAAAC,cAAA,YAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mCACZqS,EACArT,WA3KiByB,aAkLbC,eAAWwQ,IC3KXtM,qBAVS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACHK,gBAAiB,SAACK,GAAD,OAAeV,EAASiM,GAAmBvL,OAIrDd,CAA6CsM,ICRtDqB,eACJ,SAAAA,EAAYlT,GAAO,IAAA8D,EAAAqK,OAAAC,EAAA,EAAAD,CAAApO,KAAAmT,GACjBpP,EAAAqK,OAAAE,EAAA,EAAAF,CAAApO,KAAAoO,OAAAG,EAAA,EAAAH,CAAA+E,GAAA3E,KAAAxO,KAAMC,IADW,IAET6F,EAAW7F,EAAMsQ,MAAjBzK,OAFS,OAGjB/B,EAAK+I,SAAW0D,SAAS1K,EAAOtF,GAAI,IAHnBuD,oFAOjB/D,KAAKC,MAAMmT,cAAcpT,KAAK8M,uDAGXuG,GACnB,IAAM/B,EAAQ+B,EAActT,KACtBwC,EAAYvC,KAAKC,MAAMwF,MAAMC,KAAK3F,KAChC4I,EAAY3I,KAAKC,MAAjB0I,QACR,OAAI2I,EAAM9Q,KAAO+B,EAAU/B,IAClBmI,EAAQE,KAAK,0CAKXP,GACX,IAAI,IACM+K,EAAkBrT,KAAKC,MAAMwF,MAAMmJ,QAAnCyE,cACAzT,EAA+C0I,EAA/C1I,QAASL,EAAsC+I,EAAtC/I,sBAAuB0C,EAAeqG,EAAfrG,WAChC0G,EAAY3I,KAAKC,MAAjB0I,QAIF4I,EAAW,CAAE3R,UAAS0E,UAHVtE,KAAK8M,SAGgBvN,wBAAuB0C,aAAY0G,UAAStE,YAF3DgP,EAAhBhP,aAGR,OAAOrE,KAAKC,MAAM2H,aAAa2J,GAC/B,MAAOxI,GAEP,YADAN,QAAQC,IAAI,IAAKK,EAAEC,mDAKND,GACf,IAAI,IACMhJ,EAASC,KAAKC,MAAMwF,MAAMC,KAA1B3F,KACAsT,EAAkBrT,KAAKC,MAAMwF,MAAMmJ,QAAnCyE,cACA1K,EAAY3I,KAAKC,MAAjB0I,QACF7C,EAAS,CACbzC,QAAStD,EAAKS,GACd8D,UAAWtE,KAAK8M,SAChBzI,YAAagP,EAAchP,YAC3BsE,WAEF,OAAO3I,KAAKC,MAAMsL,aAAazF,GAC/B,MAAOiD,GACP,yCAIK,IACCsK,EAAkBrT,KAAKC,MAAMwF,MAAMmJ,QAAnCyE,cAER,OAAIlD,GAAckD,GAEd5S,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyF,EAAA,WAAD,QAKNpG,KAAKwR,qBAAqB6B,GAGxB5S,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,4CACAF,EAAAC,EAAAC,cAACmQ,GAAD,CAAY7J,cAAeoM,EAAejM,SAAUpH,KAAK4H,aAAarE,KAAKvD,QAC3ES,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,6BAA6B0C,QAAStD,KAAKyR,iBAAiBlO,KAAKvD,OAAnF,+CACHS,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,gBAxEiBK,aA8EV8R,MChEA3N,qBAZS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACLwN,cAAe,SAAC5S,GAAD,OAAQoF,EAASwF,GAAY5K,KAC5CoH,aAAc,SAACkB,GAAD,OAAclD,EAAS0F,GAAexC,KACpDyC,aAAc,SAACzF,GAAD,OAAYF,EAAS2F,GAAazF,OAIrCN,CAA6C2N,ICdtDG,eACJ,SAAAA,EAAYrT,GAAO,IAAA8D,EAAAqK,OAAAC,EAAA,EAAAD,CAAApO,KAAAsT,GACjBvP,EAAAqK,OAAAE,EAAA,EAAAF,CAAApO,KAAAoO,OAAAG,EAAA,EAAAH,CAAAkF,GAAA9E,KAAAxO,KAAMC,IADW,IAET6F,EAAW7F,EAAMsQ,MAAjBzK,OAFS,OAGjB/B,EAAKwP,UAAY/C,SAAS1K,EAAOtF,GAAI,IAHpBuD,oFAOjB/D,KAAKC,MAAMuT,eAAexT,KAAKuT,wDAGZE,GACnB,IAAMnC,EAAQmC,EAAe1T,KACvBwC,EAAYvC,KAAKC,MAAMwF,MAAMC,KAAK3F,KAChC4I,EAAY3I,KAAKC,MAAjB0I,QACR,OAAI2I,EAAM9Q,KAAO+B,EAAU/B,IAClBmI,EAAQE,KAAK,0CAKXP,GACX,IAAI,IACMmL,EAAmBzT,KAAKC,MAAMwF,MAAMoH,SAApC4G,eACA7T,EAAmC0I,EAAnC1I,QAASL,EAA0B+I,EAA1B/I,sBACToJ,EAAY3I,KAAKC,MAAjB0I,QAIF4I,EAAW,CAAE3R,UAAS2E,WAHTvE,KAAKuT,UAGgBhU,wBAAuBoJ,UAASrE,UAFlDmP,EAAdnP,UAE2ED,YAD3DoP,EAAejE,OAA/BnL,aAER,OAAOrE,KAAKC,MAAM2H,aAAa2J,GAC/B,MAAOxI,GAEP,YADAN,QAAQC,IAAI,IAAKK,EAAEC,mDAKND,GACf,IAAI,IACMhJ,EAASC,KAAKC,MAAMwF,MAAMC,KAA1B3F,KAEAsE,EADmBrE,KAAKC,MAAMwF,MAAMoH,SAApC4G,eAC+BjE,OAA/BnL,YACAsE,EAAY3I,KAAKC,MAAjB0I,QACF7C,EAAS,CACbzC,QAAStD,EAAKS,GACd+D,WAAYvE,KAAKuT,UACjBlP,cACAsE,WAEF,OAAO3I,KAAKC,MAAMqM,cAAcxG,GAChC,MAAOiD,GACP,yCAIK,IACC0K,EAAmBzT,KAAKC,MAAMwF,MAAMoH,SAApC4G,eAER,OAAItD,GAAcsD,GAEdhT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyF,EAAA,WAAD,QAKNpG,KAAKwR,qBAAqBiC,GAGxBhT,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,wDACAF,EAAAC,EAAAC,cAACuO,GAAD,CAAajI,cAAewM,EAAgBrM,SAAUpH,KAAK4H,aAAarE,KAAKvD,QAC7ES,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,6BAA6B0C,QAAStD,KAAKyR,iBAAiBlO,KAAKvD,OAAnF,2DACHS,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,gBAzEkBK,aA+EXiS,MCjEA9N,qBAZS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACL4N,eAAgB,SAAChT,GAAD,OAAQoF,EAASwG,GAAmB5L,KACpDoH,aAAc,SAACkB,GAAD,OAAclD,EAAS2G,GAAgBzD,KACrDwD,cAAe,SAACxG,GAAD,OAAYF,EAAS0G,GAAcxG,OAIvCN,CAA6C8N,ICftDI,oLAEK3M,GAAQ,IACPzG,EAAkBN,KAAKC,MAAMM,KAA7BD,cACJ0G,EAAS,GAOb,OANKD,EAAOnH,UACVoH,EAAOpH,QAAUU,EAAc,CAACE,GAAI,iCAEjCuG,EAAOxH,wBACVyH,EAAOzH,sBAAwBe,EAAc,CAACE,GAAI,+CAE7CwG,mCAGA,IAAAjD,EAAA/D,KACCM,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,OACEG,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEQ,cAAe,CACbrH,QAAS,GACTL,sBAAuB,IAEzB4H,SAAUnH,KAAKmH,SAAS5D,KAAKvD,MAC7BkH,oBAAoB,EACpBE,SAAU,SAACL,EAADM,GAAqD,IAA1CC,EAA0CD,EAA1CC,cAA0BC,GAAgBF,EAA3BG,UAA2BH,EAAhBE,WAC3CxD,EAAK9D,MAAMmH,SAASL,GACpBO,GAAc,GACdC,KAGJE,OAAQ,SAAAC,KAAGX,OAAH,IAAWC,EAAXU,EAAWV,OAAQW,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAA5BF,EAA0CG,aAA1CH,EAAwDI,cAAxD,OACNrH,EAAAC,EAAAC,cAAA,QAAMyG,SAAUQ,GACdnH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEjG,GAAI,UACDN,KAAK,UACLwG,UAAU,WACVqB,KAAK,OACLvB,YAAalG,EAAc,CAACE,GAAI,sCAChCwH,KAAK,IACLpH,UAAW,8BAGjB+G,EAAQ/H,SAAWoH,EAAOpH,SAAWa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBoG,EAAOpH,SAC/Ea,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACwH,GAAD,CAAoBjI,KAAK,wBAAwBsG,YAAalG,EAAc,CAACE,GAAI,sDAChFmH,EAAQpI,uBAAyByH,EAAOzH,uBAAyBkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBoG,EAAOzH,wBAG7GkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BAAgCN,EAAc,CAACE,GAAI,qCApD/Ca,aA8DvBC,eAAWoS,IChEbC,GAAkCjW,OAAO,mCACzCkW,GAA6BlW,OAAO,8BACpCmW,GAAiCnW,OAAO,kCACxCsN,GAAkBtN,OAAO,mBACzBG,GAAeH,OAAO,gBACtBI,GAAuBJ,OAAO,wBAC9BK,GAA8BL,OAAO,+BACrCM,GAAsBN,OAAO,uBAC7BoW,GAAsCpW,OAAO,uCAC7CqW,GAAiCrW,OAAO,kCACxCsW,GAA8BtW,OAAO,+BAGrCuW,GAA+B3V,YAAaqV,IAC5CO,GAA2B5V,YAAasV,IACxCO,GAA8B7V,YAAauV,IAE3CpV,IADiBH,YAAa0M,IAChB1M,YAAaT,KAC3Ba,GAAqBJ,YAAaR,IAClCa,GAA2BL,YAAaP,IACxCa,GAAoBN,YAAaN,IACjCoW,GAAmC9V,YAAawV,IAChDO,GAA8B/V,YAAayV,IAC3CO,GAA4BhW,YAAa0V,ICvBzCzS,GAAY7D,OAAO,aACnB8D,GAAc9D,OAAO,eACrBG,GAAeH,OAAO,gBACtBI,GAAuBJ,OAAO,wBAC9BM,GAAsBN,OAAO,uBAG7B+D,GAAWnD,YAAaiD,IACxBG,GAAapD,YAAakD,IAC1B/C,GAAcH,YAAaT,IAE3Be,IADqBN,YAAaR,IACdQ,YAAaN,KCCxCuW,eACJ,SAAAA,EAAYtU,GAAO,IAAA8D,EAAA,OAAAqK,OAAAC,EAAA,EAAAD,CAAApO,KAAAuU,IACjBxQ,EAAAqK,OAAAE,EAAA,EAAAF,CAAApO,KAAAoO,OAAAG,EAAA,EAAAH,CAAAmG,GAAA/F,KAAAxO,KAAMC,KACDwO,IAAM1K,EAAK9D,MAAMwO,IAFL1K,oFAMjB/D,KAAKC,MAAMgG,gBAAgBjG,KAAKyO,sCAGzB9K,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM2D,eAAeD,sCAGxBA,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM4D,iBAAiBF,8CAGpB6Q,EAAiBjS,GAAW,IAAA+M,EAAAtP,KACnBA,KAAKC,MAAMM,KAA7BD,cAER,OAAOkU,EAAgB9U,IAAI,SAAAG,GAEzB,IAkBM4C,EAAW,CAAE2B,eAjBI,CACnBf,QAASiM,EAAKrP,MAAMF,KAAKS,GACzBiU,wBAAyB5U,EAAYW,GACrCkU,sBAAuB,KACvBC,2BAA4B,KAC5BnQ,OAAQ,EAER0I,WAAYrN,EAAYwE,aAUQF,IAlBxB,YAmBNzB,EAAa,CAAE+B,iBATI,CACrBpB,QAASiM,EAAKrP,MAAMF,KAAKS,GACzB2D,IAAM,WAENO,QAAS7E,EAAYW,GAErB0M,WAAYrN,EAAYwE,aAGYF,IAnB5B,YAqBZ,OACE1D,EAAAC,EAAAC,cAAA,MAAIwD,IAAKtE,EAAYW,IACnBC,EAAAC,EAAAC,cAAA,WAASC,UAAU,cACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACbH,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAACwM,WAAc,aACvB5M,EAAAC,EAAAC,cAACiP,GAAAlP,EAAD,CAASmP,WAAY,CAAE5F,OAAQ,WAAapK,EAAYD,SACxDa,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACuE,GAAD,CAEInF,KAASF,EAAYE,KAErBwC,UAAcA,EACdC,MAAU3C,EAAY+U,kBACtBnS,SAAaA,EACbC,WAAeA,EACfC,SAAQ,+BAAAd,OAAmChC,EAAYW,IAEvDqC,gBAAmByM,EAAKnK,SAAS5B,KAAK+L,GACtCxM,kBAAqBwM,EAAK5N,WAAW6B,KAAK+L,GAC1CvM,WAAc,KAGpBtC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBmE,IAAMlF,EAAYmF,YAAYC,OAAO,yBAGpExE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyE,GAAD,CAAUrF,KAAOF,EAAYE,8CASlC,IAAAmG,EACwClG,KAAKC,MAAMwF,MAAMoP,qBAAxD1O,EADDD,EACCC,WAAY2O,EADb5O,EACa4O,uBACdvS,EAAYvC,KAAKC,MAAMwF,MAAMC,KAAK3F,KAExC,GAAIoG,EACF,OAAQ1F,EAAAC,EAAAC,cAACyF,EAAA,WAAD,MAGV,IAAMoO,EAAkBxU,KAAK+U,mBAAmBD,EAAwBvS,GAExE,OACE9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCACX4T,WApG2BnT,aA4HvBmE,qBAhBS,SAAAC,GAEtB,MAAO,CACL1F,KAFe0F,EAAMC,KAAf3F,OAMiB,SAAA6F,GACzB,MAAO,CAEHhC,eAAgB,SAACD,GAAD,OAAUiC,EAASnE,GAASkC,KAC5CE,iBAAkB,SAACF,GAAD,OAAUiC,EAASlE,GAAWiC,OAKvC6B,CAA6ClE,YAAWiT,KC7HxD/O,qBAVS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACHK,gBAAiB,SAAC5B,GAAD,OAAiBuB,EAASqO,GAA6B5P,OAIjEmB,CAA6C+O,ICOtDS,eACJ,SAAAA,EAAY/U,GAAO,IAAA8D,EAAAqK,OAAAC,EAAA,EAAAD,CAAApO,KAAAgV,GACjBjR,EAAAqK,OAAAE,EAAA,EAAAF,CAAApO,KAAAoO,OAAAG,EAAA,EAAAH,CAAA4G,GAAAxG,KAAAxO,KAAMC,IADW,IAEV6F,EAAU7F,EAAMsQ,MAAhBzK,OAFU,OAGjB/B,EAAK0K,IAAM+B,SAAS1K,EAAOzB,YAAa,IAHvBN,oFAOjB/D,KAAKC,MAAMwQ,gBAAgBzQ,KAAKyO,0CAGrBnG,GACX,IAAI,IACM1I,EAAmC0I,EAAnC1I,QAASL,EAA0B+I,EAA1B/I,sBACjB,GAAgB,KAAZK,EACF,MAAM,IAAIqV,MAAM,kFAHhB,IAKMlV,EAASC,KAAKC,MAAMwF,MAAMC,KAA1B3F,KACFsE,EAAcrE,KAAKyO,IACnBpL,EAAUtD,EAAKS,GACrB,OAAOR,KAAKC,MAAM2H,aAAa,CAAChI,UAASyE,cAAahB,UAAS9D,0BAC/D,MAAOwJ,GAEP,YADAN,QAAQC,IAAI,IAAKK,EAAEC,2CAKd,IACC1I,EAAkBN,KAAKC,MAAMM,KAA7BD,cACA0M,EAAoBhN,KAAKC,MAAMwF,MAAMM,UAArCiH,gBACR,GAAImD,GAAcnD,GAChB,OACEvM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyF,EAAA,WAAD,OANC,IAWCrG,EAASiN,EAATjN,KAER,OACEU,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4DACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACiP,GAAAlP,EAAD,CAASmP,WAAY,CAAE5F,OAAQ,WAAa+C,EAAgBpN,UAC/Da,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBmE,IAAMiI,EAAgBhI,YAAYC,OAAO,wBACtExE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyE,GAAD,CAAUrF,KAAMA,OAItBU,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAkBH,EAAAC,EAAAC,cAAA,YAAOL,EAAc,CAACE,GAAI,8BAC1DC,EAAAC,EAAAC,cAACuU,GAAD,CAAyBzG,IAAKzO,KAAKyO,IAAKrH,SAAUpH,KAAK4H,aAAarE,KAAKvD,QACzES,EAAAC,EAAAC,cAACwU,GAAD,CAAyB1G,IAAKzO,KAAKyO,MACnChO,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBACdH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,eAvD8BK,aAyEvBmE,qBAZS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACL6K,gBAAiB,SAACjQ,GAAD,OAAQoF,EAASrH,EAAciC,KAChD4Q,aAAc,SAAC/M,GAAD,OAAiBuB,EAASuF,GAAgB9G,KACxDuD,aAAc,SAACkB,GAAD,OAAclD,EAASuO,GAA4BrL,OAItDtD,CAA6ClE,YAAW0T,KC1FjEI,oLAEKrO,GACP,IAAIC,EAAS,GAOb,OANKD,EAAOnH,UACVoH,EAAOpH,QAAU,4EAEdmH,EAAOxH,wBACVyH,EAAOzH,sBAAwB,kFAE1ByH,mCAGA,IAAAjD,EAAA/D,KACCiH,EAAkBjH,KAAKC,MAAvBgH,cACR,OACExG,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEQ,cAAeA,EACfC,oBAAoB,EACpBC,SAAUnH,KAAKmH,SACfC,SAAU,SAACL,EAADM,GAAqD,IAA1CC,EAA0CD,EAA1CC,cAA0BC,GAAgBF,EAA3BG,UAA2BH,EAAhBE,WAC3CxD,EAAK9D,MAAMmH,SAASL,GACpBO,GAAc,GACdC,KAGJE,OAAQ,SAAAC,KAAGX,OAAH,IAAWC,EAAXU,EAAWV,OAAQW,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAA5BF,EAA0CG,aAA1CH,EAAwDI,cAAxD,OACNrH,EAAAC,EAAAC,cAAA,QAAMyG,SAAUQ,GACdnH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEjG,GAAI,UACDN,KAAK,UACLwG,UAAU,WACVqB,KAAK,OACLvB,YAAY,2EACZwB,KAAK,IACLpH,UAAW,6BAEf+G,EAAQ/H,SAAWoH,EAAOpH,SAAWa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBoG,EAAOpH,UAEjFa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2DACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACwH,GAAD,CAAoBjI,KAAK,wBAAwBsG,YAAY,6BAC5DmB,EAAQpI,uBAAyByH,EAAOzH,uBAAyBkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBoG,EAAOzH,yBAG/GkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BAAlB,6BAhDcS,aA0Df+T,MCxDTC,gMAEiBC,EAAoB/S,GACvC,IAAM+O,EAAQgE,EAAmBvV,KACzB4I,EAAY3I,KAAKC,MAAjB0I,QACR,OAAI2I,EAAM9Q,KAAO+B,EAAU/B,IAClBmI,EAAQE,KAAK,sCAKf,IAAAvG,EACmEtC,KAAKC,MAAvEqV,EADDhT,EACCgT,mBAAoB1N,EADrBtF,EACqBsF,aAAc6J,EADnCnP,EACmCmP,iBAAkBlP,EADrDD,EACqDC,UAE5D,OAAI4N,GAAcmF,GAEd7U,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyF,EAAA,WAAD,QAKNpG,KAAKwR,qBAAqB8D,EAAoB/S,GAG5C9B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,4CACAF,EAAAC,EAAAC,cAAC4U,GAAD,CAAiBtO,cAAeqO,EAAoBlO,SAAUQ,IAC9DnH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,UAAQC,UAAU,6BAA6B0C,QAASmO,GAAxD,+CACHhR,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,gBA7BsBK,aAmCfgU,MCpCTG,eACJ,SAAAA,EAAYvV,GAAO,IAAA8D,EAAAqK,OAAAC,EAAA,EAAAD,CAAApO,KAAAwV,GACjBzR,EAAAqK,OAAAE,EAAA,EAAAF,CAAApO,KAAAoO,OAAAG,EAAA,EAAAH,CAAAoH,GAAAhH,KAAAxO,KAAMC,IADW,IAET6F,EAAW7F,EAAMsQ,MAAjBzK,OAFS,OAGjB/B,EAAK0R,KAAOjF,SAAS1K,EAAOtF,GAAI,IAHfuD,oFAOjB/D,KAAKC,MAAMyV,2BAA2B1V,KAAKyV,2CAGhCnN,GACX,IAAI,IACM1I,EAA+C0I,EAA/C1I,QAASL,EAAsC+I,EAAtC/I,sBAAuB0C,EAAeqG,EAAfrG,WAGlCsP,EAAW,CAAE3R,UAASY,GAFjBR,KAAKyV,KAEgBlW,wBAAuB0C,cACvD,OAAOjC,KAAKC,MAAM2H,aAAa2J,GAC/B,MAAOxI,GAEP,YADAN,QAAQC,IAAI,IAAKK,EAAEC,mDAKND,GACf,IAAI,IACMhJ,EAASC,KAAKC,MAAMwF,MAAMC,KAA1B3F,KACA4I,EAAY3I,KAAKC,MAAjB0I,QACF7C,EAAS,CACbzC,QAAStD,EAAKS,GACdA,GAAIR,KAAKyV,KACT9M,WAEF,OAAO3I,KAAKC,MAAMqU,0BAA0BxO,GAC5C,MAAOiD,GACP,yCAIK,IACCuM,EAAuBtV,KAAKC,MAAMwF,MAAMoP,qBAAxCS,mBACF/S,EAAYvC,KAAKC,MAAMwF,MAAMC,KAAK3F,KAExC,OACEU,EAAAC,EAAAC,cAACgV,GAAD,CACEL,mBAAoBA,EACpB1N,aAAc5H,KAAK4H,aAAarE,KAAKvD,MACrCyR,iBAAkBzR,KAAKyR,iBAAiBlO,KAAKvD,MAC7CuC,UAAWA,WAhDmBlB,aAsDvBmU,MCvCAhQ,qBAZS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACL8P,2BAA4B,SAAClV,GAAD,OAAQoF,EAASsO,GAAyB1T,KACtEoH,aAAc,SAACkB,GAAD,OAAclD,EAASyO,GAA4BvL,KACjEwL,0BAA2B,SAAC5C,GAAD,OAAgB9L,EAAS0O,GAA0B5C,OAInElM,CAA6CgQ,ICftDI,oLAEK7O,GAAQ,IACPzG,EAAkBN,KAAKC,MAAMM,KAA7BD,cACJ0G,EAAS,GAOb,OANKD,EAAOnH,UACVoH,EAAOpH,QAAUU,EAAc,CAACE,GAAI,iCAEjCuG,EAAOxH,wBACVyH,EAAOzH,sBAAwBe,EAAc,CAACE,GAAI,+CAE7CwG,mCAGA,IAAAjD,EAAA/D,KACCM,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,OACEG,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEQ,cAAe,CACbrH,QAAS,GACTL,sBAAuB,IAEzB4H,SAAUnH,KAAKmH,SAAS5D,KAAKvD,MAC7BkH,oBAAoB,EACpBE,SAAU,SAACL,EAADM,GAAqD,IAA1CC,EAA0CD,EAA1CC,cAA0BC,GAAgBF,EAA3BG,UAA2BH,EAAhBE,WAC3CxD,EAAK9D,MAAMmH,SAASL,GACpBO,GAAc,GACdC,KAGJE,OAAQ,SAAAC,KAAGX,OAAH,IAAWC,EAAXU,EAAWV,OAAQW,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAA5BF,EAA0CG,aAA1CH,EAAwDI,cAAxD,OACNrH,EAAAC,EAAAC,cAAA,QAAMyG,SAAUQ,GACdnH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEjG,GAAI,UACDN,KAAK,UACLwG,UAAU,WACVqB,KAAK,OACLvB,YAAalG,EAAc,CAACE,GAAI,sCAChCwH,KAAK,IACLpH,UAAW,8BAGjB+G,EAAQ/H,SAAWoH,EAAOpH,SAAWa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBoG,EAAOpH,SAC/Ea,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACwH,GAAD,CAAoBjI,KAAK,wBAAwBsG,YAAalG,EAAc,CAACE,GAAI,sDAChFmH,EAAQpI,uBAAyByH,EAAOzH,uBAAyBkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBoG,EAAOzH,wBAG7GkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BAAgCN,EAAc,CAACE,GAAI,qCApDjDa,aA8DrBC,eAAWsU,IChEbC,GAAgCnY,OAAO,iCACvCoY,GAA2BpY,OAAO,4BAClCqY,GAA+BrY,OAAO,gCACtCsY,GAA+BtY,OAAO,gCACtCuY,GAA4BvY,OAAO,6BACnCG,GAAeH,OAAO,gBACtBI,GAAuBJ,OAAO,wBAC9BK,GAA8BL,OAAO,+BACrCM,GAAsBN,OAAO,uBAC7BwY,GAAoCxY,OAAO,qCAE3CyY,GAA6B7X,YAAauX,IAC1CO,GAAyB9X,YAAawX,IACtCO,GAA4B/X,YAAayX,IACzCO,GAA4BhY,YAAa0X,IACzCO,GAA0BjY,YAAa2X,IACvCxX,GAAcH,YAAaT,IAC3Ba,GAAqBJ,YAAaR,IAClCa,GAA2BL,YAAaP,IACxCa,GAAoBN,YAAaN,IACjCwY,GAAiClY,YAAa4X,ICVrDO,eACJ,SAAAA,EAAYxW,GAAO,IAAA8D,EAAA,OAAAqK,OAAAC,EAAA,EAAAD,CAAApO,KAAAyW,IACjB1S,EAAAqK,OAAAE,EAAA,EAAAF,CAAApO,KAAAoO,OAAAG,EAAA,EAAAH,CAAAqI,GAAAjI,KAAAxO,KAAMC,KACDyW,IAAM3S,EAAK9D,MAAMyW,IAFL3S,oFAMjB/D,KAAKC,MAAMgG,gBAAgBjG,KAAK0W,sCAGzB/S,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM2D,eAAeD,sCAGxBA,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM4D,iBAAiBF,8CAGpB6Q,EAAiBjS,GAAW,IAAA+M,EAAAtP,KACnBA,KAAKC,MAAMM,KAA7BD,cAER,OACEG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCACX4T,EAAgB9U,IAAI,SAAAG,GAEnB,IAkBM4C,EAAW,CAAE2B,eAjBI,CACnBf,QAASiM,EAAKrP,MAAMF,KAAKS,GACzBiU,wBAAyB,KACzBC,sBAAuB7U,EAAYW,GACnCmU,2BAA4B,KAC5BnQ,OAAQ,EAERsI,SAAUjN,EAAYyE,WAUUH,IAlBxB,UAmBNzB,EAAa,CAAE+B,iBATI,CACrBpB,QAASiM,EAAKrP,MAAMF,KAAKS,GACzB2D,IAAM,SAENO,QAAS7E,EAAYW,GAErBsM,SAAUjN,EAAYyE,WAGcH,IAnB5B,UAqBX,OACE1D,EAAAC,EAAAC,cAAA,MAAIwD,IAAKtE,EAAYW,IACnBC,EAAAC,EAAAC,cAAA,WAASC,UAAU,cACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACbH,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAACwM,WAAc,aACvB5M,EAAAC,EAAAC,cAACiP,GAAAlP,EAAD,CAASmP,WAAY,CAAE5F,OAAQ,WAAapK,EAAYD,SACxDa,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACuE,GAAD,CAEGnF,KAASF,EAAYE,KAErBwC,UAAcA,EACdC,MAAU3C,EAAY+U,kBACtBnS,SAAaA,EACbC,WAAeA,EACfC,SAAQ,6BAAAd,OAAiChC,EAAYW,IAErDqC,gBAAmByM,EAAKnK,SAAS5B,KAAK+L,GACtCxM,kBAAqBwM,EAAK5N,WAAW6B,KAAK+L,GAC1CvM,WAAc,KAInBtC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBmE,IAAMlF,EAAYmF,YAAYC,OAAO,yBAEpExE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyE,GAAD,CAAUrF,KAAOF,EAAYE,8CAWrC,IAAAiQ,EACwChQ,KAAKC,MAAMwF,MAAMkR,mBAAxDxQ,EADD6J,EACC7J,WAAY2O,EADb9E,EACa8E,uBACdvS,EAAYvC,KAAKC,MAAMwF,MAAMC,KAAK3F,KAExC,GAAIoG,EACF,OAAQ1F,EAAAC,EAAAC,cAACyF,EAAA,WAAD,MAEV,IAAMxG,EAAUI,KAAK+U,mBAAmBD,EAAwBvS,GAChE,OACE9B,EAAAC,EAAAC,cAAA,WACGf,UApG2ByB,aA2HrBmE,qBAhBS,SAAAC,GAEtB,MAAO,CACL1F,KAFe0F,EAAMC,KAAf3F,OAMiB,SAAA6F,GACzB,MAAO,CAEHhC,eAAgB,SAACD,GAAD,OAAUiC,EAASnE,GAASkC,KAC5CE,iBAAkB,SAACF,GAAD,OAAUiC,EAASlE,GAAWiC,OAKvC6B,CAA6ClE,YAAWmV,KC1HxDjR,qBAVS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACHK,gBAAiB,SAAC3B,GAAD,OAAesB,EAASuQ,GAA2B7R,OAI7DkB,CAA6CiR,ICKtDG,eACJ,SAAAA,EAAY3W,GAAO,IAAA8D,EAAAqK,OAAAC,EAAA,EAAAD,CAAApO,KAAA4W,GACjB7S,EAAAqK,OAAAE,EAAA,EAAAF,CAAApO,KAAAoO,OAAAG,EAAA,EAAAH,CAAAwI,GAAApI,KAAAxO,KAAMC,IADW,IAEV6F,EAAU7F,EAAMsQ,MAAhBzK,OAFU,OAGjB/B,EAAK2S,IAAMlG,SAAS1K,EAAOxB,UAAW,IAHrBP,oFAOjB/D,KAAKC,MAAMmT,cAAcpT,KAAK0W,0CAGnBpO,GACX,IAAI,IACM1I,EAAmC0I,EAAnC1I,QAASL,EAA0B+I,EAA1B/I,sBACjB,GAAgB,KAAZK,EAAgB,CAElB,MAAM,IAAIqV,MADE,kFAHZ,IAMMlV,EAASC,KAAKC,MAAMwF,MAAMC,KAA1B3F,KACFuE,EAAYtE,KAAK0W,IACjBrT,EAAUtD,EAAKS,GACrB,OAAOR,KAAKC,MAAM2H,aAAa,CAAChI,UAAS0E,YAAWjB,UAAS9D,0BAC7D,MAAOwJ,GAEP,YADAN,QAAQC,IAAI,IAAKK,EAAEC,2CAKd,IACC1I,EAAkBN,KAAKC,MAAMM,KAA7BD,cACA+S,EAAkBrT,KAAKC,MAAMwF,MAAMmJ,QAAnCyE,cACR,GAAIlD,GAAckD,GAChB,OACE5S,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyF,EAAA,WAAD,OAKN,IAAMrG,EAAQsT,EAActT,KAAQsT,EAActT,KAAO,KAEjDsE,GADUtE,GAAQA,EAAKG,KACPmT,EAAhBhP,aAER,OACE5D,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4DACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACiP,GAAAlP,EAAD,CAASmP,WAAY,CAAE5F,OAAQ,WAAaoJ,EAAczT,UAC7Da,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBmE,IAAMsO,EAAcrO,YAAYC,OAAO,wBACpExE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyE,GAAD,CAAUrF,KAAMA,OAKtBU,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAkBH,EAAAC,EAAAC,cAAA,YAAOL,EAAc,CAACE,GAAI,8BAC1DC,EAAAC,EAAAC,cAACkW,GAAD,CAAuBH,IAAK1W,KAAK0W,IAAKtP,SAAUpH,KAAK4H,aAAarE,KAAKvD,QACvES,EAAAC,EAAAC,cAACmW,GAAD,CAAuBJ,IAAK1W,KAAK0W,MACjCjW,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBACdH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAE,cAAAa,OAAgBwC,IAAgB/D,EAAc,CAACE,GAAI,6BAC9DC,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,gBA5DyBK,aA8ErBmE,qBAZS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACLwN,cAAe,SAAC5S,GAAD,OAAQoF,EAASwF,GAAY5K,KAC5C4Q,aAAc,SAAC/M,GAAD,OAAiBuB,EAASuF,GAAgB9G,KACxDuD,aAAc,SAACkB,GAAD,OAAclD,EAASyQ,GAA0BvN,OAIpDtD,CAA6ClE,YAAWsV,KCtCxDG,eArDb,SAAAA,EAAY9W,GAAO,IAAA8D,EAAAqK,OAAAC,EAAA,EAAAD,CAAApO,KAAA+W,GACjBhT,EAAAqK,OAAAE,EAAA,EAAAF,CAAApO,KAAAoO,OAAAG,EAAA,EAAAH,CAAA2I,GAAAvI,KAAAxO,KAAMC,IADW,IAET6F,EAAW7F,EAAMsQ,MAAjBzK,OAFS,OAGjB/B,EAAKiT,KAAOxG,SAAS1K,EAAOtF,GAAI,IAHfuD,oFAOjB/D,KAAKC,MAAMgX,yBAAyBjX,KAAKgX,2CAG9B1O,GACX,IAAI,IACM1I,EAA+C0I,EAA/C1I,QAASL,EAAsC+I,EAAtC/I,sBAAuB0C,EAAeqG,EAAfrG,WAGlCsP,EAAW,CAAE3R,UAASY,GAFjBR,KAAKgX,KAEgBzX,wBAAuB0C,cACvD,OAAOjC,KAAKC,MAAM2H,aAAa2J,GAC/B,MAAOxI,GAEP,YADAN,QAAQC,IAAI,IAAKK,EAAEC,mDAKND,GACf,IAAI,IACMhJ,EAASC,KAAKC,MAAMwF,MAAMC,KAA1B3F,KACA4I,EAAY3I,KAAKC,MAAjB0I,QACF7C,EAAS,CACbzC,QAAStD,EAAKS,GACdA,GAAIR,KAAKgX,KACTrO,WAEF,OAAO3I,KAAKC,MAAMsW,wBAAwBzQ,GAC1C,MAAOiD,GACP,yCAIK,IACCuM,EAAuBtV,KAAKC,MAAMwF,MAAMkR,mBAAxCrB,mBACF/S,EAAYvC,KAAKC,MAAMwF,MAAMC,KAAK3F,KAExC,OACEU,EAAAC,EAAAC,cAACgV,GAAD,CACEL,mBAAoBA,EACpB1N,aAAc5H,KAAK4H,aAAarE,KAAKvD,MACrCyR,iBAAkBzR,KAAKyR,iBAAiBlO,KAAKvD,MAC7CuC,UAAWA,WAhDiBlB,aCerBmE,qBAZS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACLqR,yBAA0B,SAACzW,GAAD,OAAQoF,EAASwQ,GAAuB5V,KAClEoH,aAAc,SAACkB,GAAD,OAAclD,EAAS0Q,GAA0BxN,KAC/DyN,wBAAyB,SAAC7E,GAAD,OAAgB9L,EAAS2Q,GAAwB7E,OAI/DlM,CAA6CuR,ICftDG,oLAEKnQ,GAAQ,IACPzG,EAAkBN,KAAKC,MAAMM,KAA7BD,cACJ0G,EAAS,GAOb,OANKD,EAAOnH,UACVoH,EAAOpH,QAAUU,EAAc,CAACE,GAAI,iCAEjCuG,EAAOxH,wBACVyH,EAAOzH,sBAAwBe,EAAc,CAACE,GAAI,+CAE7CwG,mCAGA,IAAAjD,EAAA/D,KACCM,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,OACEG,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEQ,cAAe,CACbrH,QAAS,GACTL,sBAAuB,IAEzB4H,SAAUnH,KAAKmH,SAAS5D,KAAKvD,MAC7BkH,oBAAoB,EACpBE,SAAU,SAACL,EAADM,GAAqD,IAA1CC,EAA0CD,EAA1CC,cAA0BC,GAAgBF,EAA3BG,UAA2BH,EAAhBE,WAC3CxD,EAAK9D,MAAMmH,SAASL,GACpBO,GAAc,GACdC,KAGJE,OAAQ,SAAAC,KAAGX,OAAH,IAAWC,EAAXU,EAAWV,OAAQW,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAA5BF,EAA0CG,aAA1CH,EAAwDI,cAAxD,OACNrH,EAAAC,EAAAC,cAAA,QAAMyG,SAAUQ,GACdnH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEjG,GAAI,UACDN,KAAK,UACLwG,UAAU,WACVqB,KAAK,OACLvB,YAAalG,EAAc,CAACE,GAAI,sCAChCwH,KAAK,IACLpH,UAAW,8BAGjB+G,EAAQ/H,SAAWoH,EAAOpH,SAAWa,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBoG,EAAOpH,SAC/Ea,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACwH,GAAD,CAAoBjI,KAAK,wBAAwBsG,YAAalG,EAAc,CAACE,GAAI,sDAChFmH,EAAQpI,uBAAyByH,EAAOzH,uBAAyBkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBoG,EAAOzH,wBAG7GkB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BAAgCN,EAAc,CAACE,GAAI,qCApDhDa,aA8DtBC,eAAW4V,IChEbC,GAAiCzZ,OAAO,kCACxC0Z,GAA4B1Z,OAAO,6BACnC2Z,GAAgC3Z,OAAO,iCACvC4Z,GAAgC5Z,OAAO,iCACvC6Z,GAA6B7Z,OAAO,8BACpCG,GAAeH,OAAO,gBACtBI,GAAuBJ,OAAO,wBAC9BK,GAA8BL,OAAO,+BACrCM,GAAsBN,OAAO,uBAC7B8Z,GAAqC9Z,OAAO,sCAG5C+Z,GAA8BnZ,YAAa6Y,IAC3CO,GAA0BpZ,YAAa8Y,IACvCO,GAA6BrZ,YAAa+Y,IAC1CO,GAA6BtZ,YAAagZ,IAC1CO,GAA2BvZ,YAAaiZ,IACxC9Y,GAAcH,YAAaT,IAC3Ba,GAAqBJ,YAAaR,IAClCa,GAA2BL,YAAaP,IACxCa,GAAoBN,YAAaN,IACjC8Z,GAAkCxZ,YAAakZ,ICXtDO,eACJ,SAAAA,EAAY9X,GAAO,IAAA8D,EAAA,OAAAqK,OAAAC,EAAA,EAAAD,CAAApO,KAAA+X,IACjBhU,EAAAqK,OAAAE,EAAA,EAAAF,CAAApO,KAAAoO,OAAAG,EAAA,EAAAH,CAAA2J,GAAAvJ,KAAAxO,KAAMC,KACDsT,UAAYxP,EAAK9D,MAAMsT,UAFXxP,oFAMjB/D,KAAKC,MAAMgG,gBAAgBjG,KAAKuT,4CAGzB5P,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM2D,eAAeD,sCAGxBA,EAAMN,GACb,GAAe,MAAXA,EAGJ,OAAOrD,KAAKC,MAAM4D,iBAAiBF,8CAGpB6Q,EAAiBjS,GAAW,IAAA+M,EAAAtP,KACnBA,KAAKC,MAAMM,KAA7BD,cAER,OACEG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCACX4T,EAAgB9U,IAAI,SAAAG,GACjB,IAkBM4C,EAAW,CAAE2B,eAjBI,CACnBf,QAASiM,EAAKrP,MAAMF,KAAKS,GACzBiU,wBAAyB,KACzBC,sBAAuB,KACvBsD,uBAAwBnY,EAAYW,GACpCgE,OAAQ,EAER+O,UAAW1T,EAAY0E,YAUSJ,IAlBxB,WAmBNzB,EAAa,CAAE+B,iBATI,CACrBpB,QAASiM,EAAKrP,MAAMF,KAAKS,GACzB2D,IAAM,UAENO,QAAS7E,EAAYW,GAErB+S,UAAW1T,EAAY0E,YAGaJ,IAnB5B,WAqBb,OACE1D,EAAAC,EAAAC,cAAA,MAAIwD,IAAKtE,EAAYW,IACnBC,EAAAC,EAAAC,cAAA,WAASC,UAAU,cACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCACbH,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAACwM,WAAc,aACvB5M,EAAAC,EAAAC,cAACiP,GAAAlP,EAAD,CAASmP,WAAY,CAAE5F,OAAQ,WAAapK,EAAYD,SAD1D,IAEEa,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACuE,GAAD,CAEGnF,KAASF,EAAYE,KAErBwC,UAAcA,EACdC,MAAU3C,EAAY+U,kBACtBnS,SAAaA,EACbC,WAAeA,EACfC,SAAQ,8BAAAd,OAAkChC,EAAYW,IAEtDqC,gBAAmByM,EAAKnK,SAAS5B,KAAK+L,GACtCxM,kBAAqBwM,EAAK5N,WAAW6B,KAAK+L,GAC1CvM,WAAc,KAGnBtC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBmE,IAAMlF,EAAYmF,YAAYC,OAAO,yBAEpExE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyE,GAAD,CAAUrF,KAAOF,EAAYE,+CAWvC,IAAAkY,EACwCjY,KAAKC,MAAMwF,MAAMyS,oBAAxD/R,EADD8R,EACC9R,WAAY2O,EADbmD,EACanD,uBACdvS,EAAYvC,KAAKC,MAAMwF,MAAMC,KAAK3F,KAExC,GAAIoG,EACF,OAAQ1F,EAAAC,EAAAC,cAACyF,EAAA,WAAD,MAGV,IAAMxG,EAAUI,KAAK+U,mBAAmBD,EAAwBvS,GAEhE,OACE9B,EAAAC,EAAAC,cAAA,WACGf,UArG4ByB,aA4HtBmE,qBAhBS,SAAAC,GAEtB,MAAO,CACL1F,KAFe0F,EAAMC,KAAf3F,OAMiB,SAAA6F,GACzB,MAAO,CAEHhC,eAAgB,SAACD,GAAD,OAAUiC,EAASnE,GAASkC,KAC5CE,iBAAkB,SAACF,GAAD,OAAUiC,EAASlE,GAAWiC,OAKvC6B,CAA6ClE,YAAWyW,KC3HxDvS,qBAVS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACHK,gBAAiB,SAAC3B,GAAD,OAAesB,EAAS6R,GAA4BnT,OAI9DkB,CAA6CuS,ICItDI,eACJ,SAAAA,EAAYlY,GAAO,IAAA8D,EAAAqK,OAAAC,EAAA,EAAAD,CAAApO,KAAAmY,GACjBpU,EAAAqK,OAAAE,EAAA,EAAAF,CAAApO,KAAAoO,OAAAG,EAAA,EAAAH,CAAA+J,GAAA3J,KAAAxO,KAAMC,IADW,IAEV6F,EAAU7F,EAAMsQ,MAAhBzK,OAFU,OAGjB/B,EAAKwP,UAAY/C,SAAS1K,EAAOvB,WAAY,IAH5BR,oFAOjB/D,KAAKC,MAAMuT,eAAexT,KAAKuT,gDAGpBjL,GACX,IAAI,IACM1I,EAAmC0I,EAAnC1I,QAASL,EAA0B+I,EAA1B/I,sBACjB,GAAgB,KAAZK,EAAgB,CAElB,MAAM,IAAIqV,MADE,kFAHZ,IAMMlV,EAASC,KAAKC,MAAMwF,MAAMC,KAA1B3F,KACFwE,EAAavE,KAAKuT,UAClBlQ,EAAUtD,EAAKS,GACrB,OAAOR,KAAKC,MAAM2H,aAAa,CAAChI,UAAS2E,aAAYlB,UAAS9D,0BAC9D,MAAOwJ,GAEP,YADAN,QAAQC,IAAI,IAAKK,EAAEC,2CAMd,IACC1I,EAAkBN,KAAKC,MAAMM,KAA7BD,cACAmT,EAAmBzT,KAAKC,MAAMwF,MAAMoH,SAApC4G,eACAzG,EAAoBhN,KAAKC,MAAMwF,MAAMM,UAArCiH,gBAER,GAAImD,GAAcsD,GAChB,OACEhT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyF,EAAA,WAAD,OAKN,IAAMrG,EAAQ0T,EAAe1T,KAAQ0T,EAAe1T,KAAO,KAErDqY,GADYrY,GAAQA,EAAKG,KACHiQ,GAAcnD,GAEf,GADCvM,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAE,cAAAa,OAAgBmL,EAAgBxM,KAAOF,EAAc,CAACE,GAAI,8BAGjG,OACAC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4DACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACiP,GAAAlP,EAAD,CAASmP,WAAY,CAAE5F,OAAQ,WAAawJ,EAAe7T,UAC9Da,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBmE,IAAM0O,EAAezO,YAAYC,OAAO,wBACrExE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyE,GAAD,CAAUrF,KAAMA,OAItBU,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAkBH,EAAAC,EAAAC,cAAA,YAAOL,EAAc,CAACE,GAAI,8BAC1DC,EAAAC,EAAAC,cAAC0X,GAAD,CAAwB9E,UAAWvT,KAAKuT,UAAWnM,SAAUpH,KAAK4H,aAAarE,KAAKvD,QACpFS,EAAAC,EAAAC,cAAC2X,GAAD,CAAwB/E,UAAWvT,KAAKuT,YACxC9S,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBACZwX,EACF3X,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,gBAhE4BK,aAiFtBmE,qBAXS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACL4N,eAAgB,SAAChT,GAAD,OAAQoF,EAASwG,GAAmB5L,KACpDoH,aAAc,SAACkB,GAAD,OAAclD,EAAS+R,GAA2B7O,OAIrDtD,CAA6ClE,YAAW6W,KCtCxDI,eAtDb,SAAAA,EAAYtY,GAAO,IAAA8D,EAAAqK,OAAAC,EAAA,EAAAD,CAAApO,KAAAuY,GACjBxU,EAAAqK,OAAAE,EAAA,EAAAF,CAAApO,KAAAoO,OAAAG,EAAA,EAAAH,CAAAmK,GAAA/J,KAAAxO,KAAMC,IADW,IAET6F,EAAW7F,EAAMsQ,MAAjBzK,OAFS,OAGjB/B,EAAKyU,KAAOhI,SAAS1K,EAAOtF,GAAI,IAHfuD,oFAOjB0E,QAAQC,IAAI,6BACZ1I,KAAKC,MAAMwY,0BAA0BzY,KAAKwY,2CAG/BlQ,GACX,IAAI,IACM1I,EAA+C0I,EAA/C1I,QAASL,EAAsC+I,EAAtC/I,sBAAuB0C,EAAeqG,EAAfrG,WAGlCsP,EAAW,CAAE3R,UAASY,GAFjBR,KAAKwY,KAEgBjZ,wBAAuB0C,cACvD,OAAOjC,KAAKC,MAAM2H,aAAa2J,GAC/B,MAAOxI,GAEP,YADAN,QAAQC,IAAI,IAAKK,EAAEC,mDAKND,GACf,IAAI,IACMhJ,EAASC,KAAKC,MAAMwF,MAAMC,KAA1B3F,KACA4I,EAAY3I,KAAKC,MAAjB0I,QACF7C,EAAS,CACbzC,QAAStD,EAAKS,GACdA,GAAIR,KAAKwY,KACT7P,WAEF,OAAO3I,KAAKC,MAAM4X,yBAAyB/R,GAC3C,MAAOiD,GACP,yCAIK,IACCuM,EAAuBtV,KAAKC,MAAMwF,MAAMyS,oBAAxC5C,mBACF/S,EAAYvC,KAAKC,MAAMwF,MAAMC,KAAK3F,KAExC,OACEU,EAAAC,EAAAC,cAACgV,GAAD,CACEL,mBAAoBA,EACpB1N,aAAc5H,KAAK4H,aAAarE,KAAKvD,MACrCyR,iBAAkBzR,KAAKyR,iBAAiBlO,KAAKvD,MAC7CuC,UAAWA,WAjDkBlB,aCctBmE,qBAZS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACL6S,0BAA2B,SAACjY,GAAD,OAAQoF,EAAS8R,GAAwBlX,KACpEoH,aAAc,SAACkB,GAAD,OAAclD,EAASgS,GAA2B9O,KAChE+O,yBAA0B,SAACnG,GAAD,OAAgB9L,EAASiS,GAAyBnG,OAIjElM,CAA6C+S,sKCGtDG,8MACJjT,MAAQ,CACNkT,KAAK,EACLC,MAAM,EACNC,QAAQ,EACRC,OAAO,KAGTC,aAAe,SAACC,EAAMC,GAAP,OAAgB,WAC7BlV,EAAKsL,SAALjB,OAAA8K,GAAA,EAAA9K,CAAA,GACG4K,EAAOC,mFAIElZ,GACZ,IAAKA,EAAKS,GACR,MAAO,GAFS,IAKZ2Y,EAAa,CAAExQ,QADD3I,KAAKC,MAAjB0I,SAER,OACElI,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,IAAIsC,QAAStD,KAAKC,MAAMmZ,OAAO7V,KAAKvD,KAAMmZ,IAAnD,2CAIK,IAAA7W,EAC0BtC,KAAKC,MAA9BoZ,EADD/W,EACC+W,QAASC,EADVhX,EACUgX,YAEXC,EAAe,CACnB,CACEC,KAAM,uCACN9S,UAAW3F,IACXC,GAAI,uBAEN,CACEwY,KAAM,iCACN9S,UAAW3F,IACXC,GAAI,kBAIFyY,EACJhZ,EAAAC,EAAAC,cAAA,OAAKC,UAAWyY,EAAQ7L,MACtB/M,EAAAC,EAAAC,cAAC+Y,GAAAhZ,EAAD,KACG6Y,EAAa7Z,IAAI,SAACia,EAAUC,GAAX,OAChBnZ,EAAAC,EAAAC,cAACkZ,GAAAnZ,EAAD,CAAUoZ,QAAM,EAACpT,UAAWiT,EAASjT,UAAW1F,GAAI2Y,EAAS3Y,GAAKmD,IAAKyV,GAErEnZ,EAAAC,EAAAC,cAACoZ,GAAArZ,EAAD,CAAcsZ,QAASL,EAASH,YAO1C,OACE/Y,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAACsZ,GAAAvZ,EAAD,CAAQ4C,QAAStD,KAAK+Y,aAAa,SAAS,IAASO,GACrD7Y,EAAAC,EAAAC,cAACuZ,GAAAxZ,EAAD,CAAQyZ,OAAO,QAAQlB,KAAMjZ,KAAKyF,MAAMqT,MAAOsB,QAASpa,KAAK+Y,aAAa,SAAS,IACjFtY,EAAAC,EAAAC,cAAA,OACE0Z,SAAU,EACVC,KAAK,SACLhX,QAAStD,KAAK+Y,aAAa,SAAS,GACpCwB,UAAWva,KAAK+Y,aAAa,SAAS,IAErCU,YAhEYtP,IAAM9I,eA6EhBmZ,sBAtFA,CACbhN,KAAM,CACJtM,MAAO,KAETuZ,SAAU,CACRvZ,MAAO,SAiFIsZ,CAAmB9B,2CC1F5BgC,eACJ,SAAAA,EAAYza,GAAO,IAAA8D,EAAA,OAAAqK,OAAAC,EAAA,EAAAD,CAAApO,KAAA0a,IACjB3W,EAAAqK,OAAAE,EAAA,EAAAF,CAAApO,KAAAoO,OAAAG,EAAA,EAAAH,CAAAsM,GAAAlM,KAAAxO,KAAMC,KACDwF,MAAQ,CACXkV,SAAU,MAHK5W,+EASjB,IADiB/D,KAAKC,MAAMwF,MAAMC,KAA1B3F,KACES,GACR,MAAO,GAHK,IAMR2Y,EAAa,CAAExQ,QADD3I,KAAKC,MAAjB0I,SAER,OAAO3I,KAAKC,MAAMmZ,OAAOD,mCAGnBG,GAAa,IAAAhK,EAAAtP,KACX2a,EAAa3a,KAAKyF,MAAlBkV,SACAra,EAAkBN,KAAKC,MAAMM,KAA7BD,cAMFsa,EAAc,WAClBtL,EAAKD,SAAS,CAAEsL,SAAU,QAGtBE,EAAe,WAEnB,OADAD,IACOtL,EAAKwL,iBAuDNpV,EAAS1F,KAAKC,MAAMwF,MAApBC,KACFqV,EArDiB,SAACrV,GACtB,IAAKA,EAAK8C,WACR,MAAO,GAFsB,IAIvBzI,EAAS2F,EAAT3F,KAkBR,MAjBiB,CACf,CACEyZ,KAAMlZ,EAAc,CAACE,GAAI,kBACzBQ,GAAE,kBAAAa,OAAoB9B,EAAKS,IAC3B0C,KAAM,QAER,CACEsW,KAAMlZ,EAAc,CAACE,GAAI,uBACzBQ,GAAI,sBACJkC,KAAM,UAER,CACEsW,KAAMlZ,EAAc,CAACE,GAAI,iCACzBQ,GAAE,kBACFkC,KAAM,UAGMxD,IAAI,SAACJ,EAAGqO,GAAJ,OAClBlN,EAAAC,EAAAC,cAACqa,GAAAta,EAAD,CAAUyD,IAAKwJ,EAAGrK,QAASsX,GACzBna,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAI1B,EAAE0B,IACVP,EAAAC,EAAAC,cAAA,QAAMsa,UAAS3b,EAAE4D,OACjBzC,EAAAC,EAAAC,cAAA,YAAOrB,EAAEka,UA2BG0B,CAAexV,GAC7ByV,EAtBe,SAACzV,GACpB,OAAQA,EAAK8C,WAEN/H,EAAAC,EAAAC,cAACqa,GAAAta,EAAD,CAAU4C,QAASuX,EAAatX,KAAK+L,IACnC7O,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,IACPP,EAAAC,EAAAC,cAAA,QAAMsa,UAAQ,aACdxa,EAAAC,EAAAC,cAAA,YAAOL,EAAc,CAACE,GAAI,oBAK9BC,EAAAC,EAAAC,cAACqa,GAAAta,EAAD,CAAU4C,QAASsX,GACjBna,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,gBACPP,EAAAC,EAAAC,cAAA,QAAMsa,UAAQ,YACdxa,EAAAC,EAAAC,cAAA,YAAOL,EAAc,CAACE,GAAI,mBAQrB4a,CAAa1V,GAE/B,OACEjF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACbH,EAAAC,EAAAC,cAACsZ,GAAAvZ,EAAD,CACE2a,YAAWV,EAAW,mBAAgBW,EACtCC,gBAAc,OACdjY,QA1Ec,SAAAkY,GAClBlM,EAAKD,SAAS,CAAEsL,SAAUa,EAAMC,iBA0E5B7a,UAAU,gBACVC,MAAO,CAAC6a,cAAiB,SAExBpC,GAEH7Y,EAAAC,EAAAC,cAACgb,GAAAjb,EAAD,CACEF,GAAG,cACHma,SAAUA,EACV1B,KAAM2C,QAAQjB,GACdP,QAASQ,GAERG,EACAI,EACD1a,EAAAC,EAAAC,cAACqa,GAAAta,EAAD,CAAU4C,QAASsX,GACjBna,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,iBACPP,EAAAC,EAAAC,cAAA,QAAMsa,UAAQ,UACdxa,EAAAC,EAAAC,cAAA,YAAOL,EAAc,CAACE,GAAI,wDAQ7B,IACCT,EAASC,KAAKC,MAAMwF,MAAMC,KAA1B3F,KACF8b,EAAY9b,EAAKI,WAAaJ,EAAKI,WAAa,mCAChD2b,EAAkBrb,EAAAC,EAAAC,cAAA,OAAKM,IAAK4a,EAAWjb,UAAU,mBAAmBM,MAAM,KAAKC,OAAO,KAAKC,IAAI,KAC/F2a,EAAO/b,KAAKgc,QAAQF,GAE1B,OACErb,EAAAC,EAAAC,cAAA,UAAQC,UAAU,6DAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,KAAG6I,KAAK,IAAI5I,UAAU,2BACpBH,EAAAC,EAAAC,cAAA,OAAKM,IAAG,YAAeG,IAAI,OAAOP,MAAO,CAAEob,UAAa,WAE1Dxb,EAAAC,EAAAC,cAAA,QAAMC,UAAU,6DAAhB,gBAIFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACXmb,WA1IS5R,IAAM9I,WAiJZC,eAAWoZ,ICxJbwB,GAAsBxe,OAAO,uBAC7Bye,GAAeze,OAAO,gBACtB0e,GAAqB1e,OAAO,sBAC5B2e,GAAa3e,OAAO,cACpB4e,GAAiB5e,OAAO,kBACxB6e,GAAc7e,OAAO,eACrB8e,GAAmB9e,OAAO,oBAC1B+e,GAAiB/e,OAAO,kBACxBgf,GAAqBhf,OAAO,sBAC5Bif,GAAoBjf,OAAO,qBAC3Bkf,GAAmBlf,OAAO,oBAC1BG,GAAeH,OAAO,gBACtBI,GAAuBJ,OAAO,wBAC9BM,GAAsBN,OAAO,uBAC7Bmf,GAAgBnf,OAAO,iBACvBof,GAAepf,OAAO,gBACtBqf,GAAmBrf,OAAO,oBAC1Bsf,GAAoBtf,OAAO,qBAC3Buf,GAAuBvf,OAAO,wBAC9Bwf,GAAgBxf,OAAO,iBACvByf,GAAgCzf,OAAO,iCACvC0f,GAA8B1f,OAAO,+BACrC2f,GAA+B3f,OAAO,gCACtC4f,GAAkC5f,OAAO,mCACzC6f,GAA2B7f,OAAO,4BAClC8f,GAAiB9f,OAAO,kBACxB+f,GAAgB/f,OAAO,iBAGvBggB,GAAoBpf,YAAa4d,IAGjC3Z,IAFcjE,YAAa6d,IACR7d,YAAa8d,IACpB9d,YAAa+d,KACzBsB,GAAerf,YAAage,IAC5BsB,GAAatf,YAAaie,IAC1BsB,GAAevf,YAAame,IAC5BqB,GAAmBxf,YAAaoe,IAEhCqB,IADiBzf,YAAake,IACZle,YAAaqe,KAC/BqB,GAAiB1f,YAAase,IAC9Bne,GAAcH,YAAaT,IAC3Ba,GAAqBJ,YAAaR,IAClCc,GAAoBN,YAAaN,IACjCigB,GAAe3f,YAAaue,IAC5BqB,GAAc5f,YAAawe,IAC3BqB,GAAiB7f,YAAaye,IAC9BqB,GAAiB9f,YAAa0e,IAC9BqB,GAAqB/f,YAAa2e,IAClCqB,GAAehgB,YAAa4e,IAC5BqB,GAA6BjgB,YAAa6e,IAC1CqB,GAA2BlgB,YAAa8e,IACxCqB,GAA4BngB,YAAa+e,IACzCqB,GAA+BpgB,YAAagf,IAC5CqB,GAAwBrgB,YAAaif,IAErCqB,IADgBtgB,YAAakf,IACdlf,YAAamf,KC5C1BjY,qBAVS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACHwT,OAAQ,SAACzV,GAAD,OAAUiC,EAASgY,GAAWja,OAI/B6B,CAA6CkV,aC8B7CmE,gMAlCX7e,KAAKC,MAAM6e,wIAcJ,IACCC,EAAa/e,KAAKC,MAAlB8e,SAGR,OAFiB/e,KAAKC,MAAMwF,MAApBC,KAEIsZ,WACVve,EAAAC,EAAAC,cAACse,EAAA,EAAD,KACExe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAACue,GAAD,MACCH,EACDte,EAAAC,EAAAC,cAACwe,GAAAze,EAAD,CAAqB0e,MAAOA,SAIhC3e,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyF,EAAA,WAAD,cA9BU/E,aCMHmE,qBAVS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACHkZ,gBAAiB,kBAAMlZ,EAAS+X,SAIzBnY,CAA6CqZ,cCXtDQ,8LACeC,GACbtf,KAAKC,MAAMsJ,WAAa+V,EAAU/V,UACpCD,OAAOiW,SAAS,EAAG,oCAKrB,OAAOvf,KAAKC,MAAM8e,gBARI1d,aAYXme,gBAAWH,ICTpBI,oLACK1Y,GAAQ,IACPzG,EAAkBN,KAAKC,MAAMM,KAA7BD,cACJ0G,EAAS,GAwBb,OAtBKD,EAAO7G,OACV8G,EAAO9G,KAAOI,EAAc,CAACE,GAAI,0BAG9BuG,EAAO2Y,KAEA,4CAA4CC,KAAK5Y,EAAO2Y,QAClE1Y,EAAO0Y,KAAOpf,EAAc,CAACE,GAAI,sCAFjCwG,EAAO0Y,KAAOpf,EAAc,CAACE,GAAI,yBAK9BuG,EAAO9E,aACV+E,EAAO/E,WAAa3B,EAAc,CAACE,GAAI,6BAGpCuG,EAAO6Y,WACV5Y,EAAO4Y,SAAWtf,EAAc,CAACE,GAAI,8BAGnCuG,EAAO8Y,kBAAoB9Y,EAAO6Y,WACpC5Y,EAAO6Y,gBAAkBvf,EAAc,CAACE,GAAI,sCAGvCwG,mCAGA,IAAAjD,EAAA/D,KACCM,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,OACEG,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEQ,cAAe,CACb/G,KAAM,GACNwf,KAAM,GACNzd,WAAY,GACZ2d,SAAU,GACVC,gBAAiB,IAEnB3Y,oBAAoB,EACpBC,SAAUnH,KAAKmH,SAAS5D,KAAKvD,MAC7BoH,SAAU,SAACL,EAADM,GAAqD,IAA1CC,EAA0CD,EAA1CC,cAA0BC,GAAgBF,EAA3BG,UAA2BH,EAAhBE,WAC3CxD,EAAK9D,MAAMmH,SAASL,GACpBO,GAAc,GACdC,KAGJE,OAAQ,SAAAC,KAAGX,OAAH,IAAWC,EAAXU,EAAWV,OAAQW,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAA5BF,EAA0CG,aAA1CH,EAAwDI,cAAxD,OACNrH,EAAAC,EAAAC,cAAA,QAAMyG,SAAUQ,GACdnH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEjG,GAAI,OACDN,KAAK,OACLwG,UAAU,QACVqB,KAAK,OACLvB,YAAalG,EAAc,CAACE,GAAI,+BAChCI,UAAW,0BAEf+G,EAAQzH,MAAQ8G,EAAO9G,MAAQO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBoG,EAAO9G,OAE3EO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEjG,GAAI,OACDN,KAAK,OACLwG,UAAU,QACVqB,KAAK,OACLvB,YAAalG,EAAc,CAACE,GAAI,+BAChCI,UAAW,0BAEf+G,EAAQ+X,MAAQ1Y,EAAO0Y,MAAQjf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBoG,EAAO0Y,OAG3Ejf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAACuH,GAAD,CACE1H,GAAI,aACJN,KAAK,aACLsG,YAAalG,EAAc,CAACE,GAAI,oCACjCmH,EAAQ1F,YAAc+E,EAAO/E,YAAcxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAoBN,EAAc,CAACE,GAAI,8BAGpGC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEjG,GAAI,WACDN,KAAK,WACLwG,UAAU,QACVqB,KAAK,WACLvB,YAAalG,EAAc,CAACE,GAAI,mCAChCI,UAAW,0BAEf+G,EAAQiY,UAAY5Y,EAAO4Y,UAAYnf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBoG,EAAO4Y,WAEnFnf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEjG,GAAI,kBACDN,KAAK,kBACLwG,UAAU,QACVqB,KAAK,WACLvB,YAAalG,EAAc,CAACE,GAAI,2CAChCI,UAAW,0BAEf+G,EAAQkY,iBAAmB7Y,EAAO6Y,iBAAmBpf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBoG,EAAO6Y,kBAEjGpf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BAAgCN,EAAc,CAACE,GAAI,wCA3G5D2J,IAAM9I,WAgIhBmE,qBAXS,SAAAC,GACtB,MAAO,CACLA,UAIuB,SAAAG,GACzB,MAAO,IAIMJ,CAA6ClE,YAAWme,KCjIjEK,yLAEUxX,GAAU,IACdpI,EAAqCoI,EAArCpI,KAAMwf,EAA+BpX,EAA/BoX,KAAMzd,EAAyBqG,EAAzBrG,WAAY2d,EAAatX,EAAbsX,SACxBjX,EAAY3I,KAAKC,MAAjB0I,QACR3I,KAAKC,MAAM8f,YAAY,CAAE7f,OAAMwf,OAAMzd,aAAY2d,WAAUjX,6CAGpD,IACCrI,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,OACEG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAWN,EAAc,CAACE,GAAI,oBAE5CC,EAAAC,EAAAC,cAACqf,GAAD,CAAY5Y,SAAUpH,KAAKigB,cAAc1c,KAAKvD,QAE9CS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,iBAlBQmJ,IAAM9I,WAyBZC,eAAWwe,ICbXta,qBAVS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACHma,YAAa,SAACpc,GAAD,OAAUiC,EAAS8X,GAAkB/Z,OAI3C6B,CAA6Csa,ICZtDI,oLACKnZ,GAAQ,IACPzG,EAAkBN,KAAKC,MAAMM,KAA7BD,cACJ0G,EAAS,GAYb,OAVKD,EAAO2Y,KAEA,4CAA4CC,KAAK5Y,EAAO2Y,QAClE1Y,EAAO0Y,KAAOpf,EAAc,CAACE,GAAI,mCAFjCwG,EAAO0Y,KAAOpf,EAAc,CAACE,GAAI,sBAK9BuG,EAAO6Y,WACV5Y,EAAO4Y,SAAWtf,EAAc,CAACE,GAAI,2BAGhCwG,mCAGA,IAAAjD,EAAA/D,KACCM,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,OACEG,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEQ,cAAe,CACbyY,KAAM,GACNE,SAAU,IAEZ1Y,oBAAoB,EACpBC,SAAUnH,KAAKmH,SAAS5D,KAAKvD,MAC7BoH,SAAU,SAACL,EAADM,GAAqD,IAA1CC,EAA0CD,EAA1CC,cAA0CD,EAA3BG,UAA2BH,EAAhBE,UAC3CxD,EAAK9D,MAAMmH,SAASL,GACpBO,GAAc,IAGlBG,OAAQ,SAAAC,KAAGX,OAAH,IAAWC,EAAXU,EAAWV,OAAQW,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAA5BF,EAA0CG,aAA1CH,EAAwDI,cAAxD,OACNrH,EAAAC,EAAAC,cAAA,QAAMyG,SAAUQ,GACdnH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEjG,GAAI,OACDN,KAAK,OACLwG,UAAU,QACVqB,KAAK,OACLvB,YAAalG,EAAc,CAACE,GAAI,4BAChCI,UAAW,0BAEf+G,EAAQ+X,MAAQ1Y,EAAO0Y,MAAQjf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBoG,EAAO0Y,OAE3Ejf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEjG,GAAI,WACDN,KAAK,WACLwG,UAAU,QACVqB,KAAK,WACLvB,YAAalG,EAAc,CAACE,GAAI,gCAChCI,UAAW,0BAEf+G,EAAQiY,UAAY5Y,EAAO4Y,UAAYnf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBoG,EAAO4Y,WAEnFnf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQoH,KAAK,SAASnH,UAAU,+BAAgCN,EAAc,CAACE,GAAI,sCA5D3E2J,IAAM9I,WAkFfmE,qBAXS,SAAAC,GACtB,MAAO,CACLA,UAIuB,SAAAG,GACzB,MAAO,IAIMJ,CAA6ClE,YAAW4e,KChFjEC,yLAEU7X,GAAU,IACdoX,EAAmBpX,EAAnBoX,KAAME,EAAatX,EAAbsX,SACNjX,EAAY3I,KAAKC,MAAjB0I,QACR,OAAO3I,KAAKC,MAAM2H,aAAa,CAAE8X,OAAME,WAAUjX,6CAG1C,IACCrI,EAAkBN,KAAKC,MAAMM,KAA7BD,cACR,OACEG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAUN,EAAc,CAACE,GAAI,kBAE3CC,EAAAC,EAAAC,cAACyf,GAAD,CAAWhZ,SAAUpH,KAAKigB,cAAc1c,KAAKvD,QAC7CS,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,yBAA0BV,EAAc,CAACE,GAAI,2BAEzDC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,iBAlBOmJ,IAAM9I,WA0BXC,eAAW6e,ICjBX3a,qBAVS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACHgC,aAAc,SAACjE,GAAD,OAAUiC,EAASrD,GAAUoB,OAIpC6B,CAA6C2a,ICXtDE,oLACKtZ,GAAQ,IACPzG,EAAkBN,KAAKC,MAAMM,KAA7BD,cACJ0G,EAAS,GAQb,OANKD,EAAO2Y,KAEA,4CAA4CC,KAAK5Y,EAAO2Y,QAClE1Y,EAAO0Y,KAAOpf,EAAc,CAACE,GAAI,mCAFjCwG,EAAO0Y,KAAOpf,EAAc,CAACE,GAAI,sBAK5BwG,mCAGA,IAAAjD,EAAA/D,KACCM,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,OACEG,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEQ,cAAe,CACbyY,KAAM,IAERxY,oBAAoB,EACpBC,SAAUnH,KAAKmH,SAAS5D,KAAKvD,MAC7BoH,SAAU,SAACL,EAADM,GAAqD,IAA1CC,EAA0CD,EAA1CC,cAA0CD,EAA3BG,UAA2BH,EAAhBE,UAC3CxD,EAAK9D,MAAMmH,SAASL,GACpBO,GAAc,IAGlBG,OAAQ,SAAAC,KAAGX,OAAH,IAAWC,EAAXU,EAAWV,OAAQW,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAA5BF,EAA0CG,aAA1CH,EAAwDI,cAAxD,OACNrH,EAAAC,EAAAC,cAAA,QAAMyG,SAAUQ,GACdnH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEjG,GAAI,OACDN,KAAK,OACLwG,UAAU,QACVqB,KAAK,OACLvB,YAAalG,EAAc,CAACE,GAAI,4BAChCI,UAAW,0BAEf+G,EAAQ+X,MAAQ1Y,EAAO0Y,MAAQjf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBoG,EAAO0Y,OAE3Ejf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQoH,KAAK,SAASnH,UAAU,+BAAgCN,EAAc,CAACE,GAAI,qCA5CnEa,aAkEjBmE,qBAXS,SAAAC,GACtB,MAAO,CACLA,UAIuB,SAAAG,GACzB,MAAO,IAIMJ,CAA6ClE,YAAW+e,KCjEjEC,yLAEUhY,GAAU,IACdoX,EAASpX,EAAToX,KACR,OAAO1f,KAAKC,MAAM2H,aAAa,CAAE8X,0CAG1B,IACCpf,EAAkBN,KAAKC,MAAMM,KAA7BD,cACR,OACEG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAUN,EAAc,CAACE,GAAI,2BAC3CC,EAAAC,EAAAC,cAAA,SAAIL,EAAc,CAACE,GAAI,yBACvBC,EAAAC,EAAAC,cAAC4f,GAAD,CAAmBnZ,SAAUpH,KAAKigB,cAAc1c,KAAKvD,QAErDS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,iBAhBeK,aAwBbC,eAAWgf,ICdX9a,qBAVS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACLgC,aAAc,SAACjE,GAAD,OAAUiC,EAAS+Y,GAAsBhb,OAI5C6B,CAA6C8a,ICXtDE,oLACKzZ,GAAQ,IACPzG,EAAkBN,KAAKC,MAAMM,KAA7BD,cACJ0G,EAAS,GAUb,OARKD,EAAO6Y,WACV5Y,EAAO4Y,SAAWtf,EAAc,CAACE,GAAI,8BAGnCuG,EAAO8Y,kBAAoB9Y,EAAO6Y,WACpC5Y,EAAO6Y,gBAAkBvf,EAAc,CAACE,GAAI,sCAGvCwG,mCAGA,IAAAjD,EAAA/D,KACCM,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,OACEG,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEQ,cAAe,CACb2Y,SAAU,GACVC,gBAAiB,IAEnB3Y,oBAAoB,EACpBC,SAAUnH,KAAKmH,SAAS5D,KAAKvD,MAC7BoH,SAAU,SAACL,EAADM,GAAqD,IAA1CC,EAA0CD,EAA1CC,cAA0BC,GAAgBF,EAA3BG,UAA2BH,EAAhBE,WAC3CxD,EAAK9D,MAAMmH,SAASL,GACpBO,GAAc,GACdC,KAGJE,OAAQ,SAAAC,KAAGX,OAAH,IAAWC,EAAXU,EAAWV,OAAQW,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAA5BF,EAA0CG,aAA1CH,EAAwDI,cAAxD,OACNrH,EAAAC,EAAAC,cAAA,QAAMyG,SAAUQ,GACdnH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEjG,GAAI,WACDN,KAAK,WACLwG,UAAU,QACVqB,KAAK,WACLvB,YAAalG,EAAc,CAACE,GAAI,mCAChCI,UAAW,0BAEf+G,EAAQiY,UAAY5Y,EAAO4Y,UAAYnf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBoG,EAAO4Y,WAEnFnf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEjG,GAAI,kBACDN,KAAK,kBACLwG,UAAU,QACVqB,KAAK,WACLvB,YAAalG,EAAc,CAACE,GAAI,2CAChCI,UAAW,0BAEf+G,EAAQkY,iBAAmB7Y,EAAO6Y,iBAAmBpf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBoG,EAAO6Y,kBAEjGpf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,+BAAgCN,EAAc,CAACE,GAAI,qCA3D1Da,aAiFZmE,qBAXS,SAAAC,GACtB,MAAO,CACLA,UAIuB,SAAAG,GACzB,MAAO,IAIMJ,CAA6ClE,YAAWkf,KC9EjEC,+LAEgB,IAEVC,EADW1gB,KAAKC,MAAMsQ,MAAtBzK,OACA4a,MAER,OADA1gB,KAAK0gB,MAAQA,EACN1gB,KAAKC,MAAM0gB,UAAUD,yCAGhBpY,GAAU,IACdsX,EAAatX,EAAbsX,SACApf,EAAOR,KAAKC,MAAMwF,MAAMC,KAAK3F,KAA7BS,GACAmI,EAAY3I,KAAKC,MAAjB0I,QACF+X,EAAQ1gB,KAAK0gB,MACnB,OAAO1gB,KAAKC,MAAM2H,aAAa,CAAEpH,KAAIof,WAAUc,QAAO/X,6CAG/C,IAAAJ,EACsBvI,KAAKC,MAAMwF,MAAMC,KAAtC3F,EADDwI,EACCxI,KAER,GAHOwI,EACOpC,WAGZ,OACE1F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyF,EAAA,WAAD,OAKN,GAAI+J,GAAcpQ,GAChB,OACEU,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,oEAdC,IAmBCL,EAAkBN,KAAKC,MAAMM,KAA7BD,cACR,OACEG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAUN,EAAc,CAACE,GAAI,2BAC3CC,EAAAC,EAAAC,cAAA,SAAIL,EAAc,CAACE,GAAI,iCACvBC,EAAAC,EAAAC,cAACigB,GAAD,CAAcxZ,SAAUpH,KAAKigB,cAAc1c,KAAKvD,QAEhDS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,iBA5CaK,aAoDXC,eAAWmf,IC1CXjb,qBAXS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACL+a,UAAW,SAACD,GAAD,OAAW9a,EAASwY,GAAesC,KAC9C9Y,aAAc,SAACjE,GAAD,OAAUiC,EAASkY,GAAiBna,OAIvC6B,CAA6Cib,ICZtDI,+LAEgB,IACV/a,EAAW9F,KAAKC,MAAMsQ,MAAtBzK,OACA6C,EAAY3I,KAAKC,MAAjB0I,QACA+X,EAAU5a,EAAV4a,MAER,OADA1gB,KAAK0gB,MAAQA,EACN1gB,KAAKC,MAAM2e,aAAa,CAAE8B,QAAO/X,6CAGjC,IAAAJ,EACsBvI,KAAKC,MAAMwF,MAAMC,KAAtC3F,EADDwI,EACCxI,KAER,GAHOwI,EACOpC,WAGZ,OACE1F,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyF,EAAA,WAAD,OAKN,GAAI+J,GAAcpQ,GAChB,OACEU,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,oEAdC,IAmBCL,EAAkBN,KAAKC,MAAMM,KAA7BD,cACR,OACEG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAUN,EAAc,CAACE,GAAI,qBAC3CC,EAAAC,EAAAC,cAAA,SAAIL,EAAc,CAACE,GAAI,iCAEvBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,iBApCUK,aA4CRC,eAAWuf,IClCXrb,qBAVS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACLgZ,aAAc,SAAC8B,GAAD,OAAW9a,EAASgZ,GAAa8B,OAIpClb,CAA6Cqb,cCNtDC,eACJ,SAAAA,EAAY7gB,GAAO,IAAA8D,EAAAqK,OAAAC,EAAA,EAAAD,CAAApO,KAAA8gB,GACjB/c,EAAAqK,OAAAE,EAAA,EAAAF,CAAApO,KAAAoO,OAAAG,EAAA,EAAAH,CAAA0S,GAAAtS,KAAAxO,KAAMC,IADW,IAET6F,EAAW7F,EAAMsQ,MAAjBzK,OAFS,OAGjB/B,EAAK0B,MAAQ,CAACsM,WAAY,aAC1BhO,EAAKgd,OAASvQ,SAAS1K,EAAOtF,GAAI,IAClCuD,EAAK9D,MAAM+gB,iBAAiBjd,EAAKgd,QALhBhd,0EAQR0O,EAAW1J,GACpBA,EAAEG,iBACFH,EAAEI,kBACFnJ,KAAKqP,SAAS,CACZ0C,WAAYU,yCAIH,IAAAnD,EAAAtP,KACHM,EAAkBN,KAAKC,MAAMM,KAA7BD,cACFqS,EAAU,CACd,CACEzS,KAAMI,EAAc,CAACE,GAAI,mBACzB2D,IAAK,aAEP,CACEjE,KAAMI,EAAc,CAACE,GAAI,iBACzB2D,IAAK,WAEP,CACEjE,KAAMI,EAAc,CAACE,GAAI,kBACzB2D,IAAK,YAEP,CACEjE,KAAMI,EAAc,CAACE,GAAI,oBACzB2D,IAAK,eAIT,OACE1D,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACX+R,EAAQjT,IAAI,SAAAJ,GACV,IAAMsT,EAAStD,EAAK7J,MAAL,aAA6BnG,EAAE6E,IAC/B,YACA,GACf,OACE1D,EAAAC,EAAAC,cAAA,MAAIC,UAAWgS,EAAQtP,QAASgM,EAAKuD,WAAWtP,KAAK+L,EAAMhQ,EAAE6E,KAAMA,IAAK7E,EAAE6E,KACxE1D,EAAAC,EAAAC,cAAA,KAAG6I,KAAK,IAAIlK,EAAEY,gDAQb0O,GACZ,OACEnO,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCACbgO,EAAQlP,IAAI,SAAA8P,GAAU,IACbzP,EAASyP,EAATzP,KACFmC,EAAWnC,EAAOA,EAAKG,KAAO,6CACpC,OACEO,EAAAC,EAAAC,cAAA,MAAIwD,IAAKqL,EAAOhP,IACdC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iCAAiCH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAE,cAAAa,OAAgB2N,EAAOnL,cAA/B,GAAAxC,OAAkD2N,EAAO5P,WACvGa,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBmE,IAAMyK,EAAOxK,YAAYC,OAAO,wBAC7DxE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCAAqCK,IAAKlB,EAAKI,WAAYe,MAAM,KAAKC,OAAO,KAAKC,IAAI,MAEvGX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oCAAqCsB,gDAUlD2K,GACb,OACEpM,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCACXiM,EAASnN,IAAI,SAAAuhB,GAAW,IACdlhB,EAAiBkhB,EAAjBlhB,KAAMyP,EAAWyR,EAAXzR,OACRtN,EAAWnC,EAAOA,EAAKG,KAAO,6CACpC,OACEO,EAAAC,EAAAC,cAAA,MAAIwD,IAAK8c,EAAQzgB,IACfC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iCAAiCH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAE,cAAAa,OAAgB2N,EAAOnL,cAA/B,GAAAxC,OAAkDof,EAAQrhB,WACxGa,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBmE,IAAMkc,EAAQjc,YAAYC,OAAO,wBAC9DxE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qCAAqCK,IAAKlB,EAAKI,WAAYe,MAAM,KAAKC,OAAO,KAAKC,IAAI,MAEvGX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oCAAqCsB,mDAUlDgf,GAChB,OACEzgB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,yCACXsgB,EAAWxhB,IAAI,SAAAqD,GACb,IAAMoe,EAAOpe,EAAUqe,iBACvB,OACE3gB,EAAAC,EAAAC,cAAA,MAAIwD,IAAG,aAAAtC,OAAekB,EAAUoB,MAC9B1D,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iCAAiCH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAImgB,GAAV,GAAAtf,OAAoBkB,EAAUnD,WAC5Ea,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBmE,IAAMhC,EAAUiC,YAAYC,OAAO,4EAQrDlC,GAEtB,IADA,IAAMse,EAAyB,GADEC,EAAA,eAAAja,EAAAka,EAAAC,GAErBrd,GAFqBuD,EAAA0G,OAAAqT,GAAA,EAAArT,CAAA/G,EAAA,OAAAK,EAAA,GAGzBga,QAAQ,SAAC3Y,GACbA,EAAC,IAAQ5E,EAAI4E,EAAEvI,GACf6gB,EAAuBxY,KAAKE,MAHhCyY,EAAA,EAAAD,EAA2BnT,OAAOuT,QAAQ5e,GAA1Cye,EAAAD,EAAA/hB,OAAAgiB,IAAqD,KAAA9Z,EAAA4Z,IAMrD,OAAOD,gDAGahP,EAAUN,GAAY,IAClChM,EAA6CsM,EAA7CtM,UAAW6I,EAAkCyD,EAAlCzD,QAAS/B,EAAyBwF,EAAzBxF,SAAUqU,EAAe7O,EAAf6O,WAC9B1gB,EAAOR,KAAKC,MAAMwF,MAAMC,KAAK3F,KAA7BS,GACR,GAAmB,cAAfuR,EACF,OAAQtR,EAAAC,EAAAC,cAAC0F,GAAD,CAAkBvC,cAAeiC,EAAW7G,oBAAqBsB,IACpE,GAAmB,YAAfuR,EACT,OAAO/R,KAAKkQ,cAActB,GACrB,GAAmB,aAAfmD,EACT,OAAO/R,KAAK4hB,eAAe/U,GACtB,GAAmB,eAAfkF,EAA6B,CACtC,IAAM8P,EAAiB7hB,KAAK8hB,wBAAwBZ,GACpD,OAAOlhB,KAAK+hB,kBAAkBF,qCAIzB,IAGCG,EAAYhiB,KAAKC,MAAMwF,MAAvBuc,QACAjiB,EAASiiB,EAATjiB,KACAO,EAAkBN,KAAKC,MAAMM,KAA7BD,cAER,GAAI6P,GAAcpQ,GAChB,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oDACbH,EAAAC,EAAAC,cAACyF,EAAA,WAAD,OAKN,IAAM6M,EAAUjT,KAAKkT,aACf+O,EAAejiB,KAAK+S,sBAAsBiP,EAAShiB,KAAKyF,MAAMsM,YAEpE,OACEtR,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yDACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,+BACbH,EAAAC,EAAAC,cAAA,OAAKM,IAAKlB,EAAKI,WAAYS,UAAU,mBAAmBQ,IAAI,GAAGF,MAAM,MAAMC,OAAO,MAEpFV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBAAgBb,EAAKG,MAClCO,EAAAC,EAAAC,cAAA,SAAIL,EAAc,CAACE,GAAI,wBAAvB,KAAkDT,EAAK4Q,QAAQzQ,QAGnEO,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGE,MAAO,CAACwM,WAAc,aAActN,EAAKiiB,UAE9CvhB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAkBH,EAAAC,EAAAC,cAAA,YAAOL,EAAc,CAACE,GAAI,uBACzDyS,EACAgP,UApLa5gB,aAoMPmE,qBAVS,SAAAC,GACtB,MAAO,CAACA,UAGiB,SAAAG,GACzB,MAAO,CACLob,iBAAkB,SAACD,GAAD,OAAYnb,EAASuY,GAAe4C,OAI3Cvb,CAA6ClE,YAAWwf,KCvMjEoB,eACJ,SAAAA,EAAYjiB,GAAO,IAAA8D,EAAA,OAAAqK,OAAAC,EAAA,EAAAD,CAAApO,KAAAkiB,IACjBne,EAAAqK,OAAAE,EAAA,EAAAF,CAAApO,KAAAoO,OAAAG,EAAA,EAAAH,CAAA8T,GAAA1T,KAAAxO,KAAMC,KACDwF,MAAQ,CACX0c,UAAW,IAHIpe,iFAOD+D,EAAeiB,GAC/B,IAAMqZ,EAAOrZ,EAAE0S,cAAc4G,MAAM,GACnCva,EAAc,QAASsa,GACvB,IACMD,IADmB7Y,OAAOgZ,KAAOhZ,OAAOiZ,WAAWC,iBAAmBlZ,OAAOkZ,iBACjDJ,GAClCpiB,KAAKqP,SAAS,CAAE8S,+CAGTpb,GAAQ,IACPzG,EAAkBN,KAAKC,MAAMM,KAA7BD,cACJ0G,EAAS,GAIb,OAHKD,EAAO9E,aACV+E,EAAO/E,WAAa3B,EAAc,CAACE,GAAI,iCAElCwG,mCAGA,IAAAsI,EAAAtP,KACCD,EAASC,KAAKC,MAAMwF,MAAMC,KAA1B3F,KACAO,EAAkBN,KAAKC,MAAMM,KAA7BD,cACAE,EAAkCT,EAAlCS,GAAIN,EAA8BH,EAA9BG,KAAM8hB,EAAwBjiB,EAAxBiiB,QAAS/f,EAAelC,EAAfkC,WACrBwgB,EAAwC,KAAzBziB,KAAKyF,MAAM0c,UACV1hB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,OAAKM,IAAKjB,KAAKyF,MAAM0c,UAAW/gB,IAAI,GAAGF,MAAM,SACjD,GAErB,OACET,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACAQ,cAAe,CAAEzG,KAAIN,OAAM8hB,UAAS/f,aAAYygB,MAAO,IACrDxb,oBAAoB,EACpBC,SAAUnH,KAAKmH,SACfC,SAAU,SAACL,EAADM,GAA0C,IAA/BC,EAA+BD,EAA/BC,cAA+BD,EAAhBG,UAChC8H,EAAKrP,MAAMmH,SAASL,GACpBO,GAAc,IAGlBG,OAAQ,SAAAC,KAAGX,OAAH,IAAWC,EAAXU,EAAWV,OAAQW,EAAnBD,EAAmBC,QAASC,EAA5BF,EAA4BE,aAAcC,EAA1CH,EAA0CG,aAAcC,EAAxDJ,EAAwDI,cAAxD,OACNrH,EAAAC,EAAAC,cAAA,QAAMyG,SAAUQ,EAAchH,UAAU,mBACtCH,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAClBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,iBAAiBN,EAAc,CAACE,GAAI,mCACrDC,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEjG,GAAI,OACDN,KAAK,OACLwG,UAAU,QACVqB,KAAK,OACLvB,YAAalG,EAAc,CAACE,GAAI,sCAChCI,UAAW,6BAEf+G,EAAQzH,MAAQ8G,EAAO9G,MAAQO,EAAAC,EAAAC,cAAA,WAAMqG,EAAO9G,OAE/CO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,iBAAiBN,EAAc,CAACE,GAAI,oCAErDC,EAAAC,EAAAC,cAACuH,GAAD,CACE1H,GAAI,aACJN,KAAK,aACLsG,YAAalG,EAAc,CAACE,GAAI,oCAGjCmH,EAAQ1F,YAAc+E,EAAO/E,YAAcxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBoG,EAAO/E,aAEvFxB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,iBAAiBN,EAAc,CAACE,GAAI,iCACrDC,EAAAC,EAAAC,cAAC8F,GAAA,EAAD,CACEjG,GAAI,UACDN,KAAK,UACLwG,UAAU,WACVqB,KAAK,OACLvB,YAAalG,EAAc,CAACE,GAAI,qCAChCI,UAAW,8BACXoH,KAAK,MAETL,EAAQqa,SAAWhb,EAAOgb,SAAWvhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBoG,EAAOgb,UAEjFvhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBAAsB+hB,iBAAe,QAClDliB,EAAAC,EAAAC,cAAA,SAAOC,UAAU,iBAAiBN,EAAc,CAACE,GAAI,oCACrDC,EAAAC,EAAAC,cAAA,SAAOH,GAAG,OAAON,KAAK,QAAQ6H,KAAK,OAAOgC,SAAUuF,EAAKsT,kBAAkBrf,KAAK+L,EAAMxH,KAErFH,EAAQ+a,OAAS1b,EAAO0b,OAASjiB,EAAAC,EAAAC,cAAA,WAAMqG,EAAO0b,OAC/CjiB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,8BAA8BmH,KAAK,SAASsS,SAAS,MAAM/Z,EAAc,CAACE,GAAI,iCAC/FiiB,GAEHhiB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,UAAQoH,KAAK,SAASnH,UAAU,8BAA8BiiB,SAAUhb,GACvEvH,EAAc,CAACE,GAAI,4CA5FVa,aAmHXmE,qBAXS,SAAAC,GACtB,MAAO,CACLA,UAIuB,SAAAG,GACzB,MAAO,IAIMJ,CAA6ClE,YAAW4gB,KCpHjEpB,eAEJ,SAAAA,EAAY7gB,GAAQ,OAAAmO,OAAAC,EAAA,EAAAD,CAAApO,KAAA8gB,GAAA1S,OAAAE,EAAA,EAAAF,CAAApO,KAAAoO,OAAAG,EAAA,EAAAH,CAAA0S,GAAAtS,KAAAxO,KACZC,qFAGY,IAAAsI,EACwBvI,KAAKC,MAAMwF,MAAMC,KAAK3F,KAAxDS,EADU+H,EACV/H,GAAIN,EADMqI,EACNrI,KAAM+B,EADAsG,EACAtG,WAAY+f,EADZzZ,EACYyZ,QAC9BvZ,QAAQC,IAAI,OAAQ1I,KAAKC,MAAMwF,MAAMC,KAAK3F,MAE1CC,KAAKqP,SAAS,CACZhM,QAAS7C,EACTN,OACA8hB,UACA/f,qDAIUqG,GAAU,IAGhBQ,EAAW,CACfzF,QAH+CiF,EAAzC9H,GAINN,KAJ+CoI,EAArCpI,KAKV8hB,QAL+C1Z,EAA/B0Z,QAMhB/f,WAN+CqG,EAAtBrG,WAOzBygB,MAP+Cpa,EAAVoa,OASvC1iB,KAAKC,MAAM6iB,kBAAkBha,oCAGtB,IACCxI,EAAkBN,KAAKC,MAAMM,KAA7BD,cACR,OACEG,EAAAC,EAAAC,cAAA,QAAMC,UAAU,mCACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAUN,EAAc,CAACE,GAAI,yBAE3CC,EAAAC,EAAAC,cAACoiB,GAAD,CAAa3b,SAAUpH,KAAKigB,cAAc1c,KAAKvD,QAE/CS,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,KAAT,iBAxCSmJ,IAAM9I,WAgDbC,eAAWwf,ICrCXtb,qBAVS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,CACHkd,kBAAmB,SAACha,GAAD,OAAclD,EAASiY,GAAa/U,OAIhDtD,CAA6Csb,uBCbvCkC,gMAMjBhjB,KAAKijB,kBAAkBjjB,KAAKC,MAAOD,KAAKkjB,QAAQC,oDAG9BC,GAClBpjB,KAAKijB,kBAAkBG,EAAWpjB,KAAKkjB,QAAQC,kDAG/BljB,EAAOkjB,GAAQ,IACvBzd,EAASzF,EAAMwF,MAAfC,KACAiD,EAAYwa,EAAZxa,QACR,QAAKjD,EAAK8C,YACDG,EAAQE,KAAK,iDAMtB,OACEpI,EAAAC,EAAAC,cAAC0iB,EAAA,EAAD,CAAOtE,SAAU/e,KAAKC,MAAM8e,kBAxBI1d,aAAjB2hB,GACZM,aAAe,CACpBH,OAAQI,KAAUC,OAAOC,YCH7B,IAQeje,qBARS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,IAGIJ,CAA6Cwd,ICPvCU,gMAMjBjb,QAAQC,IAAI,QACZ1I,KAAK2jB,iBAAiB3jB,KAAKC,MAAOD,KAAKkjB,QAAQC,oDAG7BC,GAClBpjB,KAAK2jB,iBAAiBP,EAAWpjB,KAAKkjB,QAAQC,iDAG/BljB,EAAOkjB,GAAQ,IACtBzd,EAASzF,EAAMwF,MAAfC,KACAiD,EAAYwa,EAAZxa,QACR,GAAIjD,EAAK8C,WAEP,OAAOG,EAAQib,QAAQ,sCAKzB,OACEnjB,EAAAC,EAAAC,cAAC0iB,EAAA,EAAD,CAAOtE,SAAU/e,KAAKC,MAAM8e,kBAzBK1d,aAAlBqiB,GACZJ,aAAe,CACpBH,OAAQI,KAAUC,OAAOC,YCH7B,UAQeje,qBARS,SAAAC,GACpB,MAAO,CAACA,UAGe,SAAAG,GACvB,MAAO,IAGIJ,CAA6Cke,yCCR/CG,GAAU,CACrBC,GAAI,CACF7a,OAAQ,KACR8a,UCNOC,GAAA,CACTC,iBAAkB,2BAClBC,eAAgB,2BAChBC,kBAAmB,eACnBC,wBAAyB,mDACzBC,uBAAwB,2BACxBC,qBAAsB,2BACtBC,mBAAoB,2BACpBC,0BAA2B,2BAC3BC,6BAA8B,iCAC9BC,gCAAiC,iCACjCC,iCAAkC,qBAClCC,8BAA+B,uCAC/BC,iCAAkC,mDAClCC,sBAAuB,mDACvBC,yBAA0B,yJAC1BC,sBAAuB,qBACvBC,8BAA+B,mHAC/BC,sBAAuB,mGACvBC,8BAA+B,yGAC/BC,8BAA+B,2EAC/BC,+BAAgC,yDAChCC,aAAc,eACdC,iBAAkB,eAClBC,eAAgB,eAChBC,gBAAiB,2BACjBC,kBAAmB,eACnBC,gBAAiB,uCACjBC,qBAAsB,mDACtBC,gBAAiB,2BACjBC,cAAe,2BACfC,eAAgB,iCAChBC,uBAAwB,yDACxBC,yBAA0B,uCAC1BC,qBAAsB,qBACtBC,oBAAqB,eACrBC,kBAAmB,eACnBC,gBAAiB,6CACjBC,0BAA2B,iCAC3BC,iBAAkB,qBAClBC,wBAAyB,uCACzBC,qBAAsB,eACtBC,qBAAsB,eACtBC,mBAAoB,eACpBC,2BAA4B,2EAC5BC,8BAA+B,uFAC/BC,yCAA0C,iFAC1CC,+BAAgC,uFAChCC,yBAA0B,2EAC1BC,uCAAwC,iFACxCC,0BAA2B,iFAC3BC,wCAAyC,iFACzCC,8BAA+B,qEAC/BC,4CAA6C,iFAC7CC,uBAAwB,uFACxBC,uBAAwB,mGACxBC,0BAA2B,mGAC3BC,mCAAoC,qHACpCC,2BAA4B,uFAC5BC,mCAAoC,uFACpCC,oBAAqB,mGACrBC,gCAAiC,qHACjCC,wBAAyB,uFACzBC,8BAA+B,2EAC/BC,6BAA8B,eAC9BC,6BAA8B,6CAC9BC,gCAAiC,6CACjCC,iCAAkC,iCAClCC,yCAA0C,6CAC1CC,0BAA2B,6CAC3BC,8BAA+B,iCAC/BC,iCAAkC,qEAClCC,oCAAqC,iCACrCC,+CAAgD,2BAChDC,qCAAsC,iCACtCC,oCAAqC,eACrCC,+BAAgC,qEAChCC,6CAA8C,2BAC9CC,kCAAmC,eACnCC,gCAAiC,iFACjCC,8CAA+C,2BAC/CC,mCAAoC,eACpCC,oCAAqC,qEACrCC,kDAAmD,2BACnDC,mCAAoC,6FACpCC,mCAAoC,6CACpCC,sBAAuB,eACvBC,qBAAsB,eACtBC,wBAAyB,2BACzBC,sBAAuB,2BACvBC,qBAAsB,eACtBC,8BAA+B,eAC/BC,4BAA6B,eAC7BC,kBAAmB,qBACnBC,mBAAoB,qBACpBC,yBAA0B,wCA/FjB3b,OAAA8K,GAAA,EAAA9K,CAAA4V,GAAA,qBAgGa,gBAhGb5V,OAAA8K,GAAA,EAAA9K,CAAA4V,GAAA,qBAiGa,gBAjGb5V,OAAA8K,GAAA,EAAA9K,CAAA4V,GAAA,mBAkGW,gBAlGXA,IDOP9kB,oBAAqB,GAEvB8qB,GAAI,CACF/gB,OAAQ,KACR8a,UEXOkG,GAAA,CACThG,iBAAkB,UAClBC,eAAgB,QAChBC,kBAAmB,aACnBC,wBAAyB,iBACzBC,uBAAwB,YACxBC,qBAAsB,UACtBC,mBAAoB,QACpBC,0BAA2B,eAC3BC,6BAA8B,sBAC9BC,gCAAiC,YACjCC,iCAAkC,2BAClCC,8BAA+B,UAC/BC,iCAAkC,gBAClCC,sBAAuB,eACvBC,yBAA0B,oDAC1BC,sBAAuB,aACvBC,8BAA+B,+CAC/BC,sBAAuB,4BACvBC,8BAA+B,sBAC/BC,8BAA+B,2BAC/BC,+BAAgC,2BAChCC,aAAc,OACdC,iBAAkB,WAClBC,eAAgB,SAChBC,gBAAiB,UACjBC,kBAAmB,YACnBC,gBAAiB,UACjBC,qBAAsB,eACtBC,gBAAiB,UACjBC,cAAe,QACfE,uBAAwB,kBACxBD,eAAgB,SAChBE,yBAA0B,mBAC1BC,qBAAsB,WACtBC,oBAAqB,UACrBC,kBAAmB,QACnBC,gBAAiB,MACjBC,0BAA2B,gBAC3BC,iBAAkB,MAClBC,wBAAyB,mBACzBC,qBAAsB,UACtBC,qBAAsB,UACtBC,mBAAoB,QACpBC,2BAA4B,gCAC5BC,8BAA+B,gCAC/BC,yCAA0C,8BAC1CC,+BAAgC,8BAChCC,yBAA0B,+BAC1BC,uCAAwC,8BACxCC,0BAA2B,gCAC3BC,wCAAyC,8BACzCC,8BAA+B,kCAC/BC,4CAA6C,8BAC7CC,uBAAwB,0BACxBC,uBAAwB,oCACxBC,0BAA2B,6CAC3BC,mCAAoC,+CACpCC,2BAA4B,yBAC5BC,mCAAoC,2BACpCC,oBAAqB,oCACrBC,gCAAiC,+CACjCC,wBAAyB,yBACzBC,8BAA+B,6CAC/BC,6BAA8B,OAC9BC,6BAA8B,OAC9BC,gCAAiC,2BACjCC,iCAAkC,WAClCC,yCAA0C,mBAC1CC,0BAA2B,OAC3BC,8BAA+B,WAC/BC,iCAAkC,wBAClCC,oCAAqC,sBACrCC,+CAAgD,WAChDC,qCAAsC,WACtCC,oCAAqC,OACrCC,+BAAgC,sBAChCC,6CAA8C,WAC9CC,kCAAmC,OACnCC,gCAAiC,uBACjCC,8CAA+C,WAC/CC,mCAAoC,OACpCC,oCAAqC,kCACrCC,kDAAmD,WACnDC,mCAAoC,4BACpCC,mCAAoC,2BACpCC,sBAAuB,QACvBC,qBAAsB,OACtBC,wBAAyB,UACzBC,sBAAuB,QACvBC,qBAAsB,OACtBC,8BAA+B,SAC/BC,4BAA6B,OAC7BC,kBAAmB,aACnBC,mBAAoB,eACpBC,yBAA0B,oBA/FjB3b,OAAA8K,GAAA,EAAA9K,CAAA6b,GAAA,qBAgGa,WAhGb7b,OAAA8K,GAAA,EAAA9K,CAAA6b,GAAA,qBAiGa,WAjGb7b,OAAA8K,GAAA,EAAA9K,CAAA6b,GAAA,mBAkGW,SAlGXA,IFYP/qB,oBAAqB,IAIZgrB,GAAa,CACxBC,IAAK,CACDtlB,SAAU,MACVzF,WAAY,GAEhBgrB,WAAY,CACRvlB,SAAU,aACVzF,WAAY,GAEhBirB,QAAS,CACLxlB,SAAU,UACVzF,WAAY,GAEhBkrB,QAAS,CACLzlB,SAAU,UACVzF,WAAY,GAEhBmrB,MAAO,CACH1lB,SAAU,QACVzF,WAAY,IGjCZorB,GAAcphB,aAAaqhB,QAAQ,UACnCC,GAAgBF,IAA4B,KAC5CG,GAAgBvhB,aAAaqhB,QAAQ,YAG9BG,GAAe,CAC1BrqB,KAAMsjB,GAAQ6G,IACd/kB,KAAMukB,GAJgBS,IAAgC,OAKtDE,OAAQ,CACNnL,KAAM,GACNE,SAAU,GACVkL,SAAU,GACVC,KAAM,IAER/I,QAAS,CACP7b,YAAY,EACZpG,KAAM,GACNgG,UAAW,GACX6I,QAAS,GACT/B,SAAU,IAEZnH,KAAM,CACJsZ,YAAY,EACZ7Y,YAAY,EACZqC,YAAY,EACZzI,KAAM,GACNirB,IAAK,IAEPpc,QAAS,CACPzI,YAAY,EACZ0I,YAAa,GACbwE,cAAe,IAEjBsD,mBAAoB,CAClBxQ,YAAY,EACZ2O,uBAAwB,GACxBQ,mBAAoB,IAEtBvP,UAAW,CACTI,YAAY,EACZjH,oBAAqB,EACrB4E,cAAe,GACfkJ,gBAAiB,IAEnB6H,qBAAsB,CACpB1O,YAAY,EACZ2O,uBAAwB,GACxBQ,mBAAoB,IAEtBzI,SAAU,CACR1G,YAAY,EACZ8kB,mBAAoB,GACpBxX,eAAgB,IAElByE,oBAAqB,CACnB/R,YAAY,EACZ2O,uBAAwB,GACxBQ,mBAAoB,IAGtBtD,cAAe,CAEb7L,YAAY,EACZJ,UAAW,GACX6I,QAAS,GACT/B,SAAU,IAGZrK,MAAO,CAEL2D,YAAY,EACZ3B,OAAQ,IAGV0mB,iBAAkB,CAEhB/kB,YAAY,EACZ3B,OAAQ,KC7CG2mB,GAlBCC,aAAgB,CAC9B7qB,KCXkB,WAAuC,IAAtCkF,EAAsC4lB,UAAA7rB,OAAA,QAAA8b,IAAA+P,UAAA,GAAAA,UAAA,GAA9BT,GAAarqB,KAAM+qB,EAAWD,UAAA7rB,OAAA,EAAA6rB,UAAA,QAAA/P,EACzD,OAAQgQ,EAAOvjB,MACf,KAAKqC,GAAL,IAAAmhB,EACoD1H,GAAQyH,EAAOE,SAAzDviB,EADVsiB,EACUtiB,OAAQ8a,EADlBwH,EACkBxH,SAAU7kB,EAD5BqsB,EAC4BrsB,oBAE1B,OADAkK,aAAaC,QAAQ,SAAUJ,GACxBmF,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEwD,SACA8a,WACA7kB,wBAEJ,QACE,OAAOuG,IDATE,KEdkB,WAAuC,IAAtCF,EAAsC4lB,UAAA7rB,OAAA,QAAA8b,IAAA+P,UAAA,GAAAA,UAAA,GAA9BT,GAAajlB,KAAM2lB,EAAWD,UAAA7rB,OAAA,EAAA6rB,UAAA,QAAA/P,EAE3D,OAAQgQ,EAAOvjB,MACf,KAAKuC,GAAL,IAAAohB,EACqCxB,GAAWoB,EAAOE,SAA3C3mB,EADZ6mB,EACY7mB,SAAUzF,EADtBssB,EACsBtsB,WAElB,OADAgK,aAAaC,QAAQ,WAAYxE,GAC1BuJ,OAAAqd,GAAA,EAAArd,CAAA,GACJ3I,EADH,CAEAZ,WACAzF,eAEJ,QACI,OAAOqG,IFGTmJ,QG4BkB,WAA0C,IAAzCnJ,EAAyC4lB,UAAA7rB,OAAA,QAAA8b,IAAA+P,UAAA,GAAAA,UAAA,GAAjCT,GAAahc,QAAS0c,EAAWD,UAAA7rB,OAAA,EAAA6rB,UAAA,QAAA/P,EAC1D,OAAQgQ,EAAOvjB,MACf,KAAKlK,GACD,OAAOuQ,OAAAqd,GAAA,EAAArd,CAAA,GACA3I,EADP,CAEIU,YAAY,IAEpB,KAAKrI,GACD,OAAOsQ,OAAAqd,GAAA,EAAArd,CAAA,GACA3I,EADP,CAEIU,YAAY,EACZ0I,YAAayc,EAAOE,QAAQ7nB,OAEpC,KAAK5F,GACD,OAAOqQ,OAAAqd,GAAA,EAAArd,CAAA,GACA3I,EADP,CAEIU,YAAY,EACZkN,cAAeiY,EAAOE,QAAQ7nB,OAEtC,KAAK3F,GACD,OAAOoQ,OAAAqd,GAAA,EAAArd,CAAA,GACA3I,EADP,CAEIU,YAAY,IAEpB,KAAK6E,GACD,OAAOoD,OAAAqd,GAAA,EAAArd,CAAA,GACA3I,EADP,CAEI7F,QAAS,KAEjB,QACI,OAAO6F,IHzDbM,UIEkB,WAA4C,IAA3CN,EAA2C4lB,UAAA7rB,OAAA,QAAA8b,IAAA+P,UAAA,GAAAA,UAAA,GAAnCT,GAAa7kB,UAAWulB,EAAWD,UAAA7rB,OAAA,EAAA6rB,UAAA,QAAA/P,EAC9D,OAAQgQ,EAAOvjB,MACf,KAAKlK,EACH,OAAOuQ,OAAAqd,GAAA,EAAArd,CAAA,GAEF3I,EAFL,CAGEU,YAAY,IAEhB,KAAKrI,EACH,OAAOsQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAGEU,YAAY,EAEZrC,cAAewnB,EAAOE,QAAQ7nB,OAElC,KAAK5F,EACH,OAAOqQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,EACZ6G,gBAAiBse,EAAOE,QAAQ7nB,OAEpC,KAAK3F,EACH,OAAOoQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,IAEhB,KAAKlI,EACH,OAAOmQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEvG,oBAAqBsR,SAAS8a,EAAOE,WAEzC,KAAKrtB,EACH,OAAOiQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,EACZ6G,gBAAiBse,EAAOE,QAAQ7nB,OAEpC,QACE,OAAO8B,IJxCToP,qBKZkB,WAAuD,IAAtDpP,EAAsD4lB,UAAA7rB,OAAA,QAAA8b,IAAA+P,UAAA,GAAAA,UAAA,GAA9CT,GAAa/V,qBAAsByW,EAAWD,UAAA7rB,OAAA,EAAA6rB,UAAA,QAAA/P,EACzE,OAAQgQ,EAAOvjB,MACf,KAAKlK,GACH,OAAOuQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,IAEhB,KAAKrI,GACH,OAAOsQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,EACZ2O,uBAAwBwW,EAAOE,QAAQ7nB,OAE3C,KAAK5F,GACH,OAAOqQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,EACZmP,mBAAoBgW,EAAOE,QAAQ7nB,OAEvC,KAAK3F,GACH,OAAOoQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,IAEhB,KAAK2N,GACH,OAAO1F,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEE6P,mBAAoBgW,EAAOE,QAAQ7nB,OAEvC,QACE,OAAO8B,ILjBTkR,mBMZkB,WAAqD,IAApDlR,EAAoD4lB,UAAA7rB,OAAA,QAAA8b,IAAA+P,UAAA,GAAAA,UAAA,GAA5CT,GAAajU,mBAAoB2U,EAAWD,UAAA7rB,OAAA,EAAA6rB,UAAA,QAAA/P,EACvE,OAAQgQ,EAAOvjB,MACf,KAAKlK,GACH,OAAOuQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,IAEhB,KAAKrI,GACH,OAAOsQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,EACZ2O,uBAAwBwW,EAAOE,QAAQ7nB,OAE3C,KAAK5F,GACH,OAAOqQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,EACZmP,mBAAoBgW,EAAOE,QAAQ7nB,OAEvC,KAAK3F,GACH,OAAOoQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,IAEhB,KAAK+P,GACH,OAAO9H,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEE6P,mBAAoBgW,EAAOE,QAAQ7nB,OAEvC,QACE,OAAO8B,INjBTC,KOKkB,WAAuC,IAAtCD,EAAsC4lB,UAAA7rB,OAAA,QAAA8b,IAAA+P,UAAA,GAAAA,UAAA,GAA9BT,GAAallB,KAAM4lB,EAAWD,UAAA7rB,OAAA,EAAA6rB,UAAA,QAAA/P,EACzD,OAAQgQ,EAAOvjB,MACf,KAAK8U,GACH,OAAOzO,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEE+C,YAAY,EACZzI,KAAMurB,EAAOE,QAAQ7nB,KACrBqnB,IAAKM,EAAOE,QAAQ7nB,KAAKqnB,MAE7B,KAAKlO,GAOL,KAAKF,GACH,OAAOxO,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEE+C,YAAY,EACZzI,KAAM,GACNirB,IAAK,KAET,KAAKntB,GACH,OAAOuQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,IAEhB,KAAKnI,GACH,OAAOoQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,IAEhB,KAAKwW,GACH,OAAOvO,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,EACZpG,KAAMurB,EAAOE,QAAQ7nB,OAEzB,KAAKuZ,GACH,OAAO9O,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEuZ,YAAY,IAEhB,QACE,OAAOvZ,IPjDTolB,OOPoB,WAAyC,IAAxCplB,EAAwC4lB,UAAA7rB,OAAA,QAAA8b,IAAA+P,UAAA,GAAAA,UAAA,GAAhCT,GAAaC,OAC1C,QAD6DQ,UAAA7rB,OAAA,EAAA6rB,UAAA,QAAA/P,GAC9CvT,MACf,KAAKoU,GACH,OAAO/N,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,GAEP,QACE,OAAOA,IPCTuc,QOoDqB,WAA0C,IAAzCvc,EAAyC4lB,UAAA7rB,OAAA,QAAA8b,IAAA+P,UAAA,GAAAA,UAAA,GAAjCT,GAAa5I,QAASsJ,EAAWD,UAAA7rB,OAAA,EAAA6rB,UAAA,QAAA/P,EAC/D,OAAQgQ,EAAOvjB,MACf,KAAKlK,GACH,OAAOuQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,IAEhB,KAAK8W,GACH,OAAO7O,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,EACZpG,KAAMurB,EAAOE,QAAQ7nB,OAEzB,KAAKwZ,GACH,OAAO/O,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,EACZJ,UAAWulB,EAAOE,QAAQ7nB,OAE9B,KAAKyZ,GACH,OAAOhP,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,EACZyI,QAAS0c,EAAOE,QAAQ7nB,OAE5B,KAAK0Z,GACH,OAAOjP,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,EACZ0G,SAAUye,EAAOE,QAAQ7nB,OAE7B,KAAK2Z,GACH,OAAOlP,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,EACZ+a,WAAYoK,EAAOE,QAAQ7nB,OAE/B,QACE,OAAO8B,IPzFToH,SQhBkB,WAA2C,IAA1CpH,EAA0C4lB,UAAA7rB,OAAA,QAAA8b,IAAA+P,UAAA,GAAAA,UAAA,GAAlCT,GAAa/d,SAAUye,EAAWD,UAAA7rB,OAAA,EAAA6rB,UAAA,QAAA/P,EAC7D,OAAQgQ,EAAOvjB,MACf,KAAKlK,GACH,OAAOuQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,IAEhB,KAAKqF,GAML,KAAKS,GACH,OAAOmC,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,EACZ8G,aAAcqe,EAAOE,QAAQ7nB,OAEjC,KAAKkI,GACH,OAAOuC,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,EACZ8kB,mBAAoBK,EAAOE,QAAQ7nB,OAEvC,KAAKmI,GACH,OAAOsC,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,EACZsN,eAAgB6X,EAAOE,QAAQ7nB,OAEnC,QACE,OAAO8B,IRfTyS,oBSlBkB,WAAsD,IAArDzS,EAAqD4lB,UAAA7rB,OAAA,QAAA8b,IAAA+P,UAAA,GAAAA,UAAA,GAA7CT,GAAa1S,oBAAqBoT,EAAWD,UAAA7rB,OAAA,EAAA6rB,UAAA,QAAA/P,EACxE,OAAQgQ,EAAOvjB,MACf,KAAKlK,GACH,OAAOuQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,IAEhB,KAAKrI,GACH,OAAOsQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,EACZ2O,uBAAwBwW,EAAOE,QAAQ7nB,OAE3C,KAAK5F,GACH,OAAOqQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,EACZmP,mBAAoBgW,EAAOE,QAAQ7nB,OAEvC,KAAK3F,GACH,OAAOoQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,IAEhB,KAAKqR,GACH,OAAOpJ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEE6P,mBAAoBgW,EAAOE,QAAQ7nB,OAEvC,QACE,OAAO8B,ITXTuM,cUrBkB,WAAgD,IAA/CvM,EAA+C4lB,UAAA7rB,OAAA,QAAA8b,IAAA+P,UAAA,GAAAA,UAAA,GAAvCT,GAAa5Y,cAAesZ,EAAWD,UAAA7rB,OAAA,EAAA6rB,UAAA,QAAA/P,EAClE,OAAQgQ,EAAOvjB,MACf,KAAKlK,GACH,OAAOuQ,OAAAqd,GAAA,EAAArd,CAAA,GAEF3I,EAFL,CAGEU,YAAY,IAGhB,KAAKrI,GAAL,IAAA6tB,EAE2CL,EAAOE,QAAxCzlB,EAFV4lB,EAEU5lB,UAAW6I,EAFrB+c,EAEqB/c,QAAS/B,EAF9B8e,EAE8B9e,SAE5B,OAAOuB,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAGEU,YAAY,EAEZJ,YACA6I,UACA/B,aAGJ,QACE,OAAOpH,IVFTjD,MWpBoB,WAAwC,IAAvCiD,EAAuC4lB,UAAA7rB,OAAA,QAAA8b,IAAA+P,UAAA,GAAAA,UAAA,GAA/BT,GAAapoB,MAAO8oB,EAAWD,UAAA7rB,OAAA,EAAA6rB,UAAA,QAAA/P,EAC1D,OAAQgQ,EAAOvjB,MACf,KAAKxG,GACH,OAAO6M,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,GAEP,KAAK5H,GACH,OAAOuQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,IAEhB,KAAKrI,GACH,OAAOsQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,EACZrC,cAAewnB,EAAOE,QAAQ7nB,OAElC,KAAK3F,GACH,OAAOoQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,IAEhB,QACE,OAAOV,IXFXylB,iBYVkB,WAAmD,IAAlDzlB,EAAkD4lB,UAAA7rB,OAAA,QAAA8b,IAAA+P,UAAA,GAAAA,UAAA,GAA1CT,GAAaM,iBAAkBI,EAAWD,UAAA7rB,OAAA,EAAA6rB,UAAA,QAAA/P,EACrE,OAAQgQ,EAAOvjB,MACf,KAAKlK,GACH,OAAOuQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,IAEhB,KAAKrI,GACH,OAAOsQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,EACZ3B,OAAQ8mB,EAAOE,QAAQ7nB,OAE3B,KAAK3F,GACH,OAAOoQ,OAAAqd,GAAA,EAAArd,CAAA,GACF3I,EADL,CAEEU,YAAY,IAEhB,QACE,OAAOV,IZRTmmB,cAAeC,sEa7BJnO,GAAoB,SAAC5U,GAC9B,OAAOgjB,KAAMC,KAAK,aAAcjjB,IAGvBvG,GAAY,SAACuG,GACtB,IAAMkjB,EAAWljB,EAAS4W,KAClBE,EAAa9W,EAAb8W,SAER,OAAOkM,KAAMC,KAAK,mBAAoB,CAClCC,WACApM,cAIKjC,GAAe,SAAC7U,GAAa,IAC9BkiB,EAAQliB,EAARkiB,IACFiB,EAAU,CACZC,eAAgB,mBAChBC,cAAA,UAAAtqB,OAA2BmpB,IAE/B,OAAOc,KAAMC,KAAK,uBAAwB,GAAI,CAAEE,aAGvCrN,GAAe,SAAC9V,GAAa,IAChC4X,EAAU5X,EAAV4X,MACR,OAAOoL,KAAMC,KAAN,uBAAAlqB,OAAkC6e,GAAS5X,IAGvCsjB,GAAgB,SAACtjB,GAC5B,OAAOgjB,KAAMC,KAAN,4BAAwCjjB,IAGpCgV,GAAmB,SAAChV,GAAa,IACpC4X,EAAU5X,EAAV4X,MACR,OAAOoL,KAAMO,IAAN,8BAAAxqB,OACyB6e,GAC9B5X,IAISwjB,GAAkB,SAACxjB,GAAa,IACjCzF,EAA8CyF,EAA9CzF,QAASnD,EAAqC4I,EAArC5I,KAAM8hB,EAA+BlZ,EAA/BkZ,QAAS/f,EAAsB6G,EAAtB7G,WAAYygB,EAAU5Z,EAAV4Z,MACxC/e,EAAO,IAAI4oB,SAKf,OAJA5oB,EAAK6oB,OAAO,OAAQtsB,GACpByD,EAAK6oB,OAAO,UAAWxK,GACvBre,EAAK6oB,OAAO,aAAcvqB,GAC1B0B,EAAK6oB,OAAO,QAAS9J,GACdoJ,KAAMO,IAAN,cAAAxqB,OACWwB,GACdM,EACA,CACIsoB,QAAS,CACLC,eAAgB,0BAMnBO,GAAU,SAACppB,GACpB,OAAOyoB,KAAMY,IAAN,cAAA7qB,OAAwBwB,KAGtB+a,GAAiB,SAACsC,GAC7B,OAAOoL,KAAMY,IAAN,6BAAA7qB,OAAuC6e,KC/DnCriB,GAAoB,SAACyH,GAC9B,OAAOgmB,KAAMY,IAAI,iBAAkB,CAC/B5mB,YAIKvH,GAAgB,SAACiC,GAC1B,OAAOsrB,KAAMY,IAAN,kBAAA7qB,OAA4BrB,KAG1BhC,GAAmB,SAACsK,GAC7B,OAAOgjB,KAAMC,KAAK,iBAAkBjjB,IAG3BjK,GAAmB,SAACiK,GAAa,IACpCzE,EAAgByE,EAAhBzE,YACR,OAAOynB,KAAMO,IAAN,kBAAAxqB,OAA4BwC,GAAeyE,IAGvC6jB,GAAqB,SAAC7mB,GAAW,IACpCzB,EAAgByB,EAAhBzB,YACR,OAAOynB,KAAMc,OAAN,kBAAA/qB,OAA+BwC,GAAe,CAAEyB,YCrBnD+mB,GAAS,eAEFzhB,GAAc,SAAC5K,GAC1B,OAAOsrB,KAAMY,IAAN,GAAA7qB,OAAagrB,GAAb,KAAAhrB,OAAuBrB,KAGnB2K,GAAkB,SAACrF,GAC9B,OAAOgmB,KAAMY,IAAIG,GAAQ,CACvB/mB,YAISgnB,GAA8B,SAAChnB,GAC1C,OAAOgmB,KAAMY,IAAN,GAAA7qB,OAAagrB,GAAb,kBAAqC,CAC1C/mB,YAISuF,GAAiB,SAACvF,GAC7B,OAAOgmB,KAAMC,KAAKc,GAAQ/mB,IAGfwF,GAAiB,SAACiG,GAAa,IAClCjN,EAAciN,EAAdjN,UACR,OAAOwnB,KAAMO,IAAN,GAAAxqB,OAAagrB,GAAb,KAAAhrB,OAAuByC,GAAaiN,IAGhCwb,GAAmB,SAACjnB,GAAW,IAClCxB,EAAcwB,EAAdxB,UACR,OAAOwnB,KAAMc,OAAN,GAAA/qB,OAAgBgrB,GAAhB,KAAAhrB,OAA0ByC,GAAa,CAAEwB,YC5BrCknB,GAA2B,SAAClnB,GACvC,OAAOgmB,KAAMY,IAAN,0BAAqC,CAC1C5mB,YAISmnB,GAAoB,SAACnnB,GAC9B,OAAOgmB,KAAMY,IATF,gBASc,CACrB5mB,YAIKonB,GAAe,SAAC1sB,GACzB,OAAOsrB,KAAMY,IAAN,GAAA7qB,OAfI,gBAeJ,KAAAA,OAAuBrB,KAGrB2sB,GAA6B,SAACrnB,GACzC,OAAOgmB,KAAMY,IAAN,GAAA7qB,OAnBM,gBAmBN,gBAAmC,CACxCiE,YAISsnB,GAAkB,SAACtkB,GAC5B,OAAOgjB,KAAMC,KAzBF,gBAyBejjB,IAGjByD,GAAkB,SAACgF,GAAa,IACnChN,EAAegN,EAAfhN,WACR,OAAOunB,KAAMO,IAAN,GAAAxqB,OA9BM,gBA8BN,KAAAA,OAAuB0C,GAAcgN,IAGjC8b,GAAoB,SAACvnB,GAAW,IACnCvB,EAAeuB,EAAfvB,WACR,OAAOunB,KAAMc,OAAN,GAAA/qB,OAnCM,gBAmCN,KAAAA,OAA0B0C,GAAc,CAAEuB,YClCtCwnB,GAA0B,SAAExnB,GACrC,OAAOgmB,KAAMY,IAAN,4BAAsC,CAC3C5mB,YCFC,SAASynB,GAAcvkB,GAC5B,OAAOwkB,2BAAO,CACZxkB,UACAykB,SAAU,KACVjpB,OAAQ,UACRkpB,aAAc,MAIX,SAASC,GAAY3kB,GAC1B,OAAOwkB,2BAAO,CACZxkB,UACAykB,SAAU,KACVjpB,OAAQ,QACRkpB,aAAc,uBCWDhQ,iBAgBAkQ,iBAmBAC,iBAeAC,iBAcAjQ,iBAcAC,iBAkBAsO,iBAgBAjO,iBA0BAC,iBAWAQ,IArJV,SAAUlB,GAAkB4N,GAA5B,IAAA3iB,EAAA6iB,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGH,OAFMxlB,EAAY2iB,EAAOE,QAAnB7iB,QADHslB,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGG9B,aAAI5tB,MAHP,OAIa,OAJbwvB,EAAAE,KAAA,EAImB3f,aAAK4f,GAAuB9C,EAAOE,SAJtD,OAKH,OADMA,EAJHyC,EAAAI,KAAAJ,EAAAE,KAAA,EAKG9B,aAAI3tB,GAAmB8sB,IAL1B,OAOH,MADgB,qEANbyC,EAAAE,KAAA,GAOG9B,aAAIkB,GADM,uEANb,QAQH,OARGU,EAAAE,KAAA,GAQG3f,aAAK7F,EAAQE,KAAM,gBARtB,QAAAolB,EAAAE,KAAA,iBAUH,OAVGF,EAAAC,KAAA,GAAAD,EAAAK,GAAAL,EAAA,SAAAA,EAAAE,KAAA,GAUG9B,aAAIztB,MAVP,QAYH,MADgB,qEAXbqvB,EAAAE,KAAA,GAYG9B,aAAIsB,GADM,uEAXb,yBAAAM,EAAAM,SAAAC,GAAA,eAgBA,SAAUZ,GAAiBtC,GAA3B,IAAA3iB,EAAA6iB,EAAAR,EAAA,OAAA+C,GAAArtB,EAAAstB,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OAGa,OAFVxlB,EAAY2iB,EAAOE,QAAnB7iB,QADH8lB,EAAAP,KAAA,EAAAO,EAAAN,KAAA,EAGmB3f,aAAK4f,GAAe9C,EAAOE,SAH9C,OAIH,OADMA,EAHHiD,EAAAJ,KAAAI,EAAAN,KAAA,EAIG9B,aAAIpO,GAAauN,IAJpB,OAQH,OAHQR,EAAQQ,EAAQ7nB,KAAhBqnB,IACR5hB,aAAaC,QAAQ,MAAO2hB,GACZ,qEAPbyD,EAAAN,KAAA,GAQG9B,aAAIkB,GADM,uEAPb,QASH,OATGkB,EAAAN,KAAA,GASG3f,aAAK7F,EAAQE,KAAM,KATtB,QAAA4lB,EAAAN,KAAA,iBAcH,OAdGM,EAAAP,KAAA,GAAAO,EAAAH,GAAAG,EAAA,SAaa,+JAbbA,EAAAN,KAAA,GAcG9B,aAAIsB,GADM,iKAbb,QAeH,OAfGc,EAAAN,KAAA,GAeG3f,aAAK7F,EAAQE,KAAM,gBAftB,yBAAA4lB,EAAAF,SAAAG,GAAA,eAmBA,SAAUb,GAAoBvC,GAA9B,IAAAN,EAAAQ,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,UAAAQ,EAAAT,KAAA,EAEGlD,EAAM5hB,aAAaqhB,QAAQ,OAF9B,CAAAkE,EAAAR,KAAA,cAIK,IAAIlZ,MAAM,iDAJf,OAMa,OANb0Z,EAAAR,KAAA,EAMmB3f,aAAK4f,GAAkB,CAAEpD,QAN5C,OAOH,OADMQ,EANHmD,EAAAN,KAAAM,EAAAR,KAAA,EAOG9B,aAAIpO,GAAauN,IAPpB,OAQH,OARGmD,EAAAR,KAAA,GAQG9B,aAAI/N,MARP,QAAAqQ,EAAAR,KAAA,iBAUH,OAVGQ,EAAAT,KAAA,GAAAS,EAAAL,GAAAK,EAAA,SAAAA,EAAAR,KAAA,GAUG9B,aAAInO,MAVP,QAWH,OAXGyQ,EAAAR,KAAA,GAWG9B,aAAI/N,MAXP,yBAAAqQ,EAAAJ,SAAAK,GAAA,eAeA,SAAUd,GAAkBxC,GAA5B,IAAA3iB,EAAA,OAAAolB,GAAArtB,EAAAstB,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,OAIH,OAJGU,EAAAX,KAAA,EAEKvlB,EAAY2iB,EAAOE,QAAnB7iB,QACRS,aAAa0lB,WAAW,OAHrBD,EAAAV,KAAA,EAIG9B,aAAIrO,MAJP,OAMH,MADgB,yDALb6Q,EAAAV,KAAA,EAMG9B,aAAIkB,GADM,2DALb,OAOH,OAPGsB,EAAAV,KAAA,GAOG3f,aAAK7F,EAAQE,KAAM,KAPtB,QAAAgmB,EAAAV,KAAA,iBAAAU,EAAAX,KAAA,GAAAW,EAAAP,GAAAO,EAAA,kCAAAA,EAAAN,SAAAQ,GAAA,eAcA,SAAUlR,GAAayN,GAAvB,IAAAE,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,OAEH,OAFGa,EAAAd,KAAA,EAAAc,EAAAb,KAAA,EAEG9B,aAAI5tB,MAFP,OAGa,OAHbuwB,EAAAb,KAAA,EAGmB3f,aAAK4f,GAAqB9C,EAAOE,SAHpD,OAKH,OAFMA,EAHHwD,EAAAX,KAIa,iFAJbW,EAAAb,KAAA,EAKG9B,aAAIkB,GADM,mFAJb,OAMH,OANGyB,EAAAb,KAAA,GAMG9B,aAAItO,GAAgByN,IANvB,QAAAwD,EAAAb,KAAA,iBASH,OATGa,EAAAd,KAAA,GAAAc,EAAAV,GAAAU,EAAA,SAQa,mGARbA,EAAAb,KAAA,GASG9B,aAAIsB,GADM,qGARb,QAUH,OAVGqB,EAAAb,KAAA,GAUG9B,aAAIztB,MAVP,yBAAAowB,EAAAT,SAAAU,GAAA,eAcA,SAAUnR,GAAiBwN,GAA3B,IAAA3iB,EAAA6iB,EAAAR,EAAA,OAAA+C,GAAArtB,EAAAstB,KAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,OAGH,OAHGe,EAAAhB,KAAA,EAEKvlB,EAAY2iB,EAAOE,QAAnB7iB,QAFLumB,EAAAf,KAAA,EAGG9B,aAAI5tB,MAHP,OAIa,OAJbywB,EAAAf,KAAA,EAImB3f,aAAK4f,GAAsB9C,EAAOE,SAJrD,OAKH,OADMA,EAJH0D,EAAAb,KAAAa,EAAAf,KAAA,EAKG9B,aAAIpO,GAAauN,IALpB,OASH,OAHQR,EAAQQ,EAAQ7nB,KAAhBqnB,IACR5hB,aAAaC,QAAQ,MAAO2hB,GACZ,2EARbkE,EAAAf,KAAA,GASG9B,aAAIkB,GADM,6EARb,QAUH,OAVG2B,EAAAf,KAAA,GAUG3f,aAAK7F,EAAQE,KAAM,KAVtB,QAAAqmB,EAAAf,KAAA,iBAaH,OAbGe,EAAAhB,KAAA,GAAAgB,EAAAZ,GAAAY,EAAA,SAYa,6FAZbA,EAAAf,KAAA,GAaG9B,aAAIsB,GADM,+FAZb,QAcH,OAdGuB,EAAAf,KAAA,GAcG9B,aAAIztB,MAdP,yBAAAswB,EAAAX,SAAAY,GAAA,eAkBA,SAAU/C,GAAcd,GAAxB,IAAA7lB,EAAAwD,EAAA,OAAA8kB,GAAArtB,EAAAstB,KAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OAEW,OAFXiB,EAAAlB,KAAA,EAAAkB,EAAAjB,KAAA,EAEiBkB,eAFjB,OAKH,OAHM5pB,EAFH2pB,EAAAf,KAGKplB,EAAWxD,EAAMlF,KAAjB0I,OACRqiB,EAAOE,QAAQviB,OAASA,EAJrBmmB,EAAAjB,KAAA,EAKG9B,aAAI5tB,MALP,OAMa,OANb2wB,EAAAjB,KAAA,GAMmB3f,aAAK4f,GAAmB9C,EAAOE,SANlD,QAQH,OARG4D,EAAAf,KAOa,+DAPbe,EAAAjB,KAAA,GAQG9B,aAAIkB,GADM,iEAPb,QAAA6B,EAAAjB,KAAA,iBAWH,OAXGiB,EAAAlB,KAAA,GAAAkB,EAAAd,GAAAc,EAAA,SAUa,2EAVbA,EAAAjB,KAAA,GAWG9B,aAAIsB,GADM,6EAVb,QAYH,OAZGyB,EAAAjB,KAAA,GAYG9B,aAAIztB,MAZP,yBAAAwwB,EAAAb,SAAAe,GAAA,eAgBA,SAAUnR,GAAemN,GAAzB,IAAAE,EAAA+D,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAA/B,GAAArtB,EAAAstB,KAAA,SAAA+B,GAAA,cAAAA,EAAA7B,KAAA6B,EAAA5B,MAAA,OAEH,OAFG4B,EAAA7B,KAAA,EAAA6B,EAAA5B,KAAA,EAEG9B,aAAI5tB,MAFP,OAGa,OAHbsxB,EAAA5B,KAAA,EAGmB3f,aAAK4f,GAAa9C,EAAOE,SAH5C,OAKqB,OAFlBA,EAHHuE,EAAA1B,KAIGkB,EAAiB,CAAClsB,QAAUioB,EAAOE,SAJtCuE,EAAA5B,KAAA,EAK2B3f,aAAKnQ,GAAmBkxB,GALnD,OAQmB,OAHhBC,EALHO,EAAA1B,KAOGoB,EAAe,CAACpsB,QAAUioB,EAAOE,SAPpCuE,EAAA5B,KAAA,GAQyB3f,aAAKse,GAA6B2C,GAR3D,QAWoB,OAHjBC,EARHK,EAAA1B,KAUGsB,EAAgB,CAACtsB,QAAUioB,EAAOE,SAVrCuE,EAAA5B,KAAA,GAW0B3f,aAAK2e,GAA4BwC,GAX3D,QAcuB,OAHpBC,EAXHG,EAAA1B,KAaGwB,EAAkB,CAACxsB,QAAUioB,EAAOE,SAbvCuE,EAAA5B,KAAA,GAc6B3f,aAAK8e,GAAyBuC,GAd3D,QAgBH,OAFMC,EAdHC,EAAA1B,KAAA0B,EAAA5B,KAAA,GAgBG9B,aAAIhO,GAAmBmN,IAhB1B,QAiBH,OAjBGuE,EAAA5B,KAAA,GAiBG9B,aAAI9N,GAA2BiR,IAjBlC,QAkBH,OAlBGO,EAAA5B,KAAA,GAkBG9B,aAAI7N,GAAyBkR,IAlBhC,QAmBH,OAnBGK,EAAA5B,KAAA,GAmBG9B,aAAI5N,GAA0BmR,IAnBjC,QAoBH,OApBGG,EAAA5B,KAAA,GAoBG9B,aAAI3N,GAA6BoR,IApBpC,QAAAC,EAAA5B,KAAA,iBAsBH,OAtBG4B,EAAA7B,KAAA,GAAA6B,EAAAzB,GAAAyB,EAAA,SAAAA,EAAA5B,KAAA,GAsBG9B,aAAIztB,MAtBP,yBAAAmxB,EAAAxB,SAAAyB,GAAA,eA0BA,SAAU5R,GAAekN,GAAzB,IAAAE,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAiC,GAAA,cAAAA,EAAA/B,KAAA+B,EAAA9B,MAAA,OAEH,OAFG8B,EAAA/B,KAAA,EAAA+B,EAAA9B,KAAA,EAEG9B,aAAI5tB,MAFP,OAGa,OAHbwxB,EAAA9B,KAAA,EAGmB3f,aAAK4f,GAAoB9C,EAAOE,SAHnD,OAIH,OADMA,EAHHyE,EAAA5B,KAAA4B,EAAA9B,KAAA,EAIG9B,aAAItO,GAAgByN,IAJvB,OAAAyE,EAAA9B,KAAA,iBAOH,OAPG8B,EAAA/B,KAAA,GAAA+B,EAAA3B,GAAA2B,EAAA,SAMHxnB,QAAQC,IAAI,qBANTunB,EAAA9B,KAAA,GAOG9B,aAAIztB,MAPP,yBAAAqxB,EAAA1B,SAAA2B,GAAA,eAWA,SAAUtR,GAAa0M,GAAvB,IAAA3iB,EAAA6iB,EAAAR,EAAA,OAAA+C,GAAArtB,EAAAstB,KAAA,SAAAmC,GAAA,cAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,OAIH,OAJGgC,EAAAjC,KAAA,EAEKvlB,EAAY2iB,EAAOE,QAAnB7iB,QACRF,QAAQC,IAAI,UAAWC,GAHpBwnB,EAAAhC,KAAA,EAIG9B,aAAI5tB,MAJP,OAKa,OALb0xB,EAAAhC,KAAA,EAKmB3f,aAAK4f,GAAkB9C,EAAOE,SALjD,OAMH,OADMA,EALH2E,EAAA9B,KAAA8B,EAAAhC,KAAA,GAMG9B,aAAIpO,GAAauN,IANpB,QAUH,OAHQR,EAAQQ,EAAQ7nB,KAAhBqnB,IACR5hB,aAAaC,QAAQ,MAAO2hB,GACZ,+DATbmF,EAAAhC,KAAA,GAUG9B,aAAIkB,GADM,iEATb,QAWH,OAXG4C,EAAAhC,KAAA,GAWG3f,aAAK7F,EAAQE,KAAM,KAXtB,QAAAsnB,EAAAhC,KAAA,iBAcH,OAdGgC,EAAAjC,KAAA,GAAAiC,EAAA7B,GAAA6B,EAAA,SAaH1nB,QAAQC,IAAI,qBAbTynB,EAAAhC,KAAA,GAcG9B,aAAIztB,MAdP,yBAAAuxB,EAAA5B,SAAA6B,GAAA,eAkBP,IAaeC,GAbG,CAChBC,aAAUpU,GAAqBwB,IAC/B4S,aAAUjU,GAAYuR,IACtB0C,aAAUhU,GAAgBuR,IAC1ByC,aAAU/T,GAAauR,IACvBwC,aAAU7T,GAAgBoB,IAC1ByS,aAAU5T,GAAoBoB,IAC9BwS,aAAUvT,GAAkBoB,IAC5BmS,aAAUtT,GAAmBoB,IAC7BkS,aAAU/S,GAA0B6O,IACpCkE,aAAU7S,GAAemB,kBCvLV3Y,iBAUAsqB,iBAWAC,iBAuBA3xB,iBAcA8tB,IA1DV,SAAU1mB,GAAgBqlB,GAA1B,IAAAE,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEH,OAFGF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEG9B,aAAI5tB,KAFP,OAGa,OAHbwvB,EAAAE,KAAA,EAGmB3f,aAAK4f,GAAuB9C,EAAOE,SAHtD,OAIH,OADMA,EAHHyC,EAAAI,KAAAJ,EAAAE,KAAA,EAIG9B,aAAI3tB,EAAmB8sB,IAJ1B,OAAAyC,EAAAE,KAAA,iBAMH,OANGF,EAAAC,KAAA,GAAAD,EAAAK,GAAAL,EAAA,SAAAA,EAAAE,KAAA,GAMG9B,aAAIztB,KANP,yBAAAqvB,EAAAM,SAAAkC,GAAA,eAUA,SAAUF,GAAwBjF,GAAlC,IAAA9qB,EAAAgrB,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OAGH,OAHGM,EAAAP,KAAA,EAEI1tB,EAAO8qB,EAAOE,QAFlBiD,EAAAN,KAAA,EAGG9B,aAAI5tB,KAHP,OAIa,OAJbgwB,EAAAN,KAAA,EAImB3f,aAAK4f,GAAmB5tB,GAJ3C,OAKH,OADMgrB,EAJHiD,EAAAJ,KAAAI,EAAAN,KAAA,EAKG9B,aAAI1tB,EAAyB6sB,IALhC,OAAAiD,EAAAN,KAAA,iBAOH,OAPGM,EAAAP,KAAA,GAAAO,EAAAH,GAAAG,EAAA,SAAAA,EAAAN,KAAA,GAOG9B,aAAIztB,KAPP,yBAAA6vB,EAAAF,SAAAmC,GAAA,eAWA,SAAUF,GAAalF,GAAvB,IAAAE,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,OAEH,OAFGQ,EAAAT,KAAA,EAAAS,EAAAR,KAAA,EAEG9B,aAAI5tB,KAFP,OAGH,OAHGkwB,EAAAR,KAAA,EAGG3f,aAAK4f,GAAsB9C,EAAOE,SAHrC,OAIa,OAJbmD,EAAAR,KAAA,EAImB3f,aAAK4f,IAJxB,OAKH,OADM5C,EAJHmD,EAAAN,KAAAM,EAAAR,KAAA,GAKG9B,aAAI3tB,EAAmB8sB,IAL1B,QAAAmD,EAAAR,KAAA,iBAOH,OAPGQ,EAAAT,KAAA,GAAAS,EAAAL,GAAAK,EAAA,SAAAA,EAAAR,KAAA,GAOG9B,aAAIztB,KAPP,yBAAA+vB,EAAAJ,SAAAoC,GAAA,eAuBA,SAAU9xB,GAAiBysB,GAA3B,IAAAE,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,OAEH,OAFGa,EAAAd,KAAA,EAAAc,EAAAb,KAAA,EAEG9B,aAAI5tB,KAFP,OAGa,OAHbuwB,EAAAb,KAAA,EAGmB3f,aAAK4f,GAAsB9C,EAAOE,SAHrD,OAKH,OAFMA,EAHHwD,EAAAX,KAIa,yDAJbW,EAAAb,KAAA,EAKG9B,aAAIkB,GADM,2DAJb,OAMH,OANGyB,EAAAb,KAAA,GAMG9B,aAAIvtB,EAAoB0sB,IAN3B,QAAAwD,EAAAb,KAAA,iBASH,OATGa,EAAAd,KAAA,GAAAc,EAAAV,GAAAU,EAAA,SAQa,2EARbA,EAAAb,KAAA,GASG9B,aAAIsB,GADM,6EARb,QAUH,OAVGqB,EAAAb,KAAA,GAUG9B,aAAIztB,KAVP,yBAAAowB,EAAAT,SAAAqC,GAAA,eAcA,SAAUjE,GAAmBrB,GAA7B,IAAAK,EAAAhjB,EAAA6iB,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAkB,GAAA,cAAAA,EAAAhB,KAAAgB,EAAAf,MAAA,OAGH,OAHGe,EAAAhB,KAAA,EAAAvC,EAE8BL,EAAOE,QAFrCG,EAEKtnB,YAAasE,EAFlBgjB,EAEkBhjB,QAFlBumB,EAAAf,KAAA,EAGG9B,aAAI5tB,KAHP,OAIH,OAJGywB,EAAAf,KAAA,EAIG3f,aAAK4f,GAAwB9C,EAAOE,SAJvC,OAMH,MADgB,yDALb0D,EAAAf,KAAA,EAMG9B,aAAIkB,GADM,2DALb,OAOa,OAPb2B,EAAAf,KAAA,GAOmB3f,aAAK4f,IAPxB,QAQH,OADM5C,EAPH0D,EAAAb,KAAAa,EAAAf,KAAA,GAQG9B,aAAI3tB,EAAmB8sB,IAR1B,QASH,OATG0D,EAAAf,KAAA,GASG3f,aAAK7F,EAAQE,KAAM,KATtB,QAAAqmB,EAAAf,KAAA,iBAYH,OAZGe,EAAAhB,KAAA,GAAAgB,EAAAZ,GAAAY,EAAA,SAWa,2EAXbA,EAAAf,KAAA,GAYG9B,aAAIsB,GADM,6EAXb,QAaH,OAbGuB,EAAAf,KAAA,GAaG9B,aAAIztB,KAbP,yBAAAswB,EAAAX,SAAAsC,GAAA,eAiBP,IAUeC,GAVO,CAEpBR,aAAU7yB,EAAqBwI,IAC/BqqB,aAAU3yB,EAAgB4yB,IAE1BD,aAAU1yB,EAAoB4yB,IAC9BF,aAAUpyB,EAAoBW,IAC9ByxB,aAAUlyB,EAAiBuuB,2BCrFZoE,iBAcAC,iBAaAC,iBAWA3lB,iBAeAyhB,IArDV,SAAUgE,GAAsBzF,GAAhC,IAAArb,EAAAnD,EAAAS,EAAA,OAAAwgB,GAAArtB,EAAAstB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEH,OAFGF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEG9B,aAAI5tB,MAFP,OAGgB,OAHhBwvB,EAAAE,KAAA,EAGsB3f,aAAK4f,GAAqB9C,EAAOE,SAHvD,OAKiB,OAFdvb,EAHHge,EAAAI,KAIGvhB,EAAWmD,EAAWtM,KAAKjE,IAAI,SAAAJ,GAAM,OAAOA,EAAEkB,KAJjDytB,EAAAE,KAAA,EAKuB3f,aAAKwe,GAA0BlgB,GALtD,OAMH,OADMS,EALH0gB,EAAAI,KAAAJ,EAAAE,KAAA,GAMG9B,aAAI3tB,GAAmBuR,IAN1B,QAOH,OAPGge,EAAAE,KAAA,GAOG9B,aAAI6E,GAA8B3jB,IAPrC,QAQH,OARG0gB,EAAAE,KAAA,GAQG9B,aAAI6E,GAAwB5F,EAAOE,UARtC,QAAAyC,EAAAE,KAAA,iBAUH,OAVGF,EAAAC,KAAA,GAAAD,EAAAK,GAAAL,EAAA,SAAAA,EAAAE,KAAA,GAUG9B,aAAIztB,MAVP,yBAAAqvB,EAAAM,SAAA4C,GAAA,eAcA,SAAUH,GAAW1F,GAArB,IAAAK,EAAAtnB,EAAA9E,EAAAmwB,EAAA,OAAA3B,GAAArtB,EAAAstB,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OAEH,OAFGM,EAAAP,KAAA,EAAAO,EAAAN,KAAA,EAEG9B,aAAI5tB,MAFP,OAGa,OAHbgwB,EAAAN,KAAA,EAGmB3f,aAAK4f,GAAoB9C,EAAOE,SAHnD,OAKmB,OALnBiD,EAAAJ,KAAA1C,EAI4CL,EAAOE,QAA9CnnB,EAJLsnB,EAIKtnB,YAAa9E,EAJlBosB,EAIkBpsB,sBAJlBkvB,EAAAN,KAAA,EAKyB3f,aAAK4f,GAAqB,CAAE/pB,cAAa9E,0BALlE,OAMH,OADMmwB,EALHjB,EAAAJ,KAAAI,EAAAN,KAAA,GAMG9B,aAAI3tB,GAAmBgxB,IAN1B,QAOH,OAPGjB,EAAAN,KAAA,GAOG9B,aAAI+E,aAAM,eAPb,QAAA3C,EAAAN,KAAA,iBASH,OATGM,EAAAP,KAAA,GAAAO,EAAAH,GAAAG,EAAA,SAAAA,EAAAN,KAAA,GASG9B,aAAIztB,MATP,yBAAA6vB,EAAAF,SAAA8C,GAAA,eAaA,SAAUJ,GAAsB3F,GAAhC,IAAAE,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,OAEH,OAFGQ,EAAAT,KAAA,EAAAS,EAAAR,KAAA,EAEG9B,aAAI5tB,MAFP,OAGa,OAHbkwB,EAAAR,KAAA,EAGmB3f,aAAK4f,GAAiB9C,EAAOE,SAHhD,OAIH,OADMA,EAHHmD,EAAAN,KAAAM,EAAAR,KAAA,EAIG9B,aAAI1tB,GAAyB6sB,IAJhC,OAKH,OALGmD,EAAAR,KAAA,GAKG9B,aAAI+E,aAAM,eALb,QAAAzC,EAAAR,KAAA,iBAOH,OAPGQ,EAAAT,KAAA,GAAAS,EAAAL,GAAAK,EAAA,SAAAA,EAAAR,KAAA,GAOG9B,aAAIztB,MAPP,yBAAA+vB,EAAAJ,SAAA+C,GAAA,eAWA,SAAUhmB,GAAeggB,GAAzB,IAAAiG,EAAAltB,EAAAsE,EAAA,OAAAolB,GAAArtB,EAAAstB,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,OAGH,OAHGU,EAAAX,KAAA,EAAAqD,EAE8BjG,EAAOE,QAAhCnnB,EAFLktB,EAEKltB,YAAasE,EAFlB4oB,EAEkB5oB,QAFlBkmB,EAAAV,KAAA,EAGG9B,aAAI5tB,MAHP,OAIa,OAJbowB,EAAAV,KAAA,EAImB3f,aAAK4f,GAAoB9C,EAAOE,SAJnD,OAMH,OANGqD,EAAAR,KAKa,yDALbQ,EAAAV,KAAA,GAMG9B,aAAIkB,GADM,2DALb,QAOH,OAPGsB,EAAAV,KAAA,GAOG3f,aAAK7F,EAAQE,KAAT,cAAAhH,OAA6BwC,IAPpC,QAAAwqB,EAAAV,KAAA,iBAUH,OAVGU,EAAAX,KAAA,GAAAW,EAAAP,GAAAO,EAAA,SASa,2EATbA,EAAAV,KAAA,GAUG9B,aAAIsB,GADM,6EATb,QAWH,OAXGkB,EAAAV,KAAA,GAWG9B,aAAIztB,MAXP,yBAAAiwB,EAAAN,SAAAiD,GAAA,eAeA,SAAUzE,GAAiBzB,GAA3B,IAAAmG,EAAAptB,EAAAsE,EAAA,OAAAolB,GAAArtB,EAAAstB,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,OAGH,OAHGa,EAAAd,KAAA,EAAAuD,EAEyCnG,EAAOE,QAFhDiG,EAEKntB,UAAWD,EAFhBotB,EAEgBptB,YAAasE,EAF7B8oB,EAE6B9oB,QAF7BqmB,EAAAb,KAAA,EAGG9B,aAAI5tB,MAHP,OAIH,OAJGuwB,EAAAb,KAAA,EAIG3f,aAAK4f,GAAsB9C,EAAOE,SAJrC,OAMH,MADgB,yDALbwD,EAAAb,KAAA,EAMG9B,aAAIkB,GADM,2DALb,OAOH,OAPGyB,EAAAb,KAAA,GAOG3f,aAAK7F,EAAQE,KAAT,cAAAhH,OAA6BwC,IAPpC,QAAA2qB,EAAAb,KAAA,iBAUH,OAVGa,EAAAd,KAAA,GAAAc,EAAAV,GAAAU,EAAA,SASa,2EATbA,EAAAb,KAAA,GAUG9B,aAAIsB,GADM,6EATb,QAWH,OAXGqB,EAAAb,KAAA,GAWG9B,aAAIztB,MAXP,yBAAAowB,EAAAT,SAAAmD,GAAA,eAgBP,IAQeC,GARK,CAClBrB,aAAUzlB,GAAmBkmB,IAC7BT,aAAUvlB,GAAkBimB,IAC5BV,aAAUxlB,GAAcmmB,IACxBX,aAAUrlB,GAAkBK,IAC5BglB,aAAUplB,GAAe6hB,KCxFd9Y,GAA+B,SAAC5P,GAC3C,OAAOynB,KAAMY,IAHA,6BAGY,CACvB5mB,OAAQ,CAAEzB,kBAID6P,GAA2B,SAAC1T,GACvC,OAAOsrB,KAAMY,IAAN,GAAA7qB,OATM,6BASN,KAAAA,OAAuBrB,KAGnB2T,GAA8B,SAACrL,GAAa,IAErDlJ,EAIEkJ,EAJFlJ,QACAyD,EAGEyF,EAHFzF,QACAgB,EAEEyE,EAFFzE,YACA9E,EACEuJ,EADFvJ,sBAEF,OAAOusB,KAAMC,KAnBA,6BAmBa,CACxBnsB,UACAyD,UACAgB,cACA9E,2BAIS8U,GAA8B,SAAC9C,GAAa,IAC/C/Q,EAAO+Q,EAAP/Q,GACR,OAAOsrB,KAAMO,IAAN,GAAAxqB,OA7BM,6BA6BN,KAAAA,OAAuBrB,GAAM+Q,IAGzB+C,GAA2B,SAACxO,GAAW,IAC1CtF,EAAOsF,EAAPtF,GACR,OAAOsrB,KAAMc,OAAN,GAAA/qB,OAlCM,6BAkCN,KAAAA,OAA0BrB,GAAM,CAAEsF,yBCjB1B8rB,iBAWAC,iBAWAC,iBAcAzd,iBAcAC,IAlDV,SAAUsd,GAAmCtG,GAA7C,IAAAE,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEH,OAFGF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEG9B,aAAI5tB,MAFP,OAGa,OAHbwvB,EAAAE,KAAA,EAGmB3f,aAAK4f,GAAkC9C,EAAOE,SAHjE,OAIH,OADMA,EAHHyC,EAAAI,KAAAJ,EAAAE,KAAA,EAIG9B,aAAI3tB,GAAmB8sB,IAJ1B,OAAAyC,EAAAE,KAAA,iBAOH,OAPGF,EAAAC,KAAA,GAAAD,EAAAK,GAAAL,EAAA,SAAAA,EAAAE,KAAA,GAOG9B,aAAIztB,MAPP,yBAAAqvB,EAAAM,SAAAwD,GAAA,eAWA,SAAUF,GAAmCvG,GAA7C,IAAA9qB,EAAAgrB,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OAGH,OAHGM,EAAAP,KAAA,EAEG1tB,EAAK8qB,EAAOE,QAFfiD,EAAAN,KAAA,EAGG9B,aAAI5tB,MAHP,OAIa,OAJbgwB,EAAAN,KAAA,EAImB3f,aAAK4f,GAA8B5tB,GAJtD,OAKH,OADMgrB,EAJHiD,EAAAJ,KAAAI,EAAAN,KAAA,EAKG9B,aAAI1tB,GAAyB6sB,IALhC,OAAAiD,EAAAN,KAAA,iBAOH,OAPGM,EAAAP,KAAA,GAAAO,EAAAH,GAAAG,EAAA,SAAAA,EAAAN,KAAA,GAOG9B,aAAIztB,MAPP,yBAAA6vB,EAAAF,SAAAyD,GAAA,eAWA,SAAUF,GAAwBxG,GAAlC,IAAAjnB,EAAAmnB,EAAA7nB,EAAA,OAAAoqB,GAAArtB,EAAAstB,KAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,OAGH,OAHGQ,EAAAT,KAAA,EAEK7pB,EAAgBinB,EAAOE,QAAvBnnB,YAFLsqB,EAAAR,KAAA,EAGG9B,aAAI5tB,MAHP,OAIH,OAJGkwB,EAAAR,KAAA,EAIG3f,aAAK4f,GAAiC9C,EAAOE,SAJhD,OAKa,OALbmD,EAAAR,KAAA,EAKmB3f,aAAK4f,GAAkC/pB,GAL1D,OAMH,OADMmnB,EALHmD,EAAAN,KAAAM,EAAAR,KAAA,GAMG9B,aAAI3tB,GAAmB8sB,IAN1B,QAQH,OADM7nB,EAAO,CAAC6nB,QAAS,IAPpBmD,EAAAR,KAAA,GAQG3f,aAAKsiB,GAA+BntB,GARvC,QAAAgrB,EAAAR,KAAA,iBAUH,OAVGQ,EAAAT,KAAA,GAAAS,EAAAL,GAAAK,EAAA,SAAAA,EAAAR,KAAA,GAUG9B,aAAIztB,MAVP,yBAAA+vB,EAAAJ,SAAA0D,GAAA,eAcA,SAAU5d,GAA4BiX,GAAtC,IAAAE,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,OAEH,OAFGU,EAAAX,KAAA,EAAAW,EAAAV,KAAA,EAEG9B,aAAI5tB,MAFP,OAGa,OAHbowB,EAAAV,KAAA,EAGmB3f,aAAK4f,GAAiC9C,EAAOE,SAHhE,OAKH,OAFMA,EAHHqD,EAAAR,KAIa,yDAJbQ,EAAAV,KAAA,EAKG9B,aAAIkB,GADM,2DAJb,OAMH,OANGsB,EAAAV,KAAA,GAMG9B,aAAIjY,GAAiCoX,IANxC,QAAAqD,EAAAV,KAAA,iBASH,OATGU,EAAAX,KAAA,GAAAW,EAAAP,GAAAO,EAAA,SAQa,2EARbA,EAAAV,KAAA,GASG9B,aAAIsB,GADM,6EARb,QAUH,OAVGkB,EAAAV,KAAA,GAUG9B,aAAIztB,MAVP,yBAAAiwB,EAAAN,SAAA2D,GAAA,eAcA,SAAU5d,GAA0BgX,GAApC,IAAAK,EAAAhjB,EAAA6iB,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,OAGH,OAHGa,EAAAd,KAAA,EAAAvC,EAEqBL,EAAOE,QAF5BG,EAEKnrB,GAAImI,EAFTgjB,EAEShjB,QAFTqmB,EAAAb,KAAA,EAGG9B,aAAI5tB,MAHP,OAIH,OAJGuwB,EAAAb,KAAA,EAIG3f,aAAK4f,GAA+B9C,EAAOE,SAJ9C,OAMH,MADgB,yDALbwD,EAAAb,KAAA,EAMG9B,aAAIkB,GADM,2DALb,OAOa,OAPbyB,EAAAb,KAAA,GAOmB3f,aAAK4f,IAPxB,QAQH,OADM5C,EAPHwD,EAAAX,KAAAW,EAAAb,KAAA,GAQG9B,aAAI3tB,GAAmB8sB,IAR1B,QASH,OATGwD,EAAAb,KAAA,GASG3f,aAAK7F,EAAQE,KAAM,KATtB,QAAAmmB,EAAAb,KAAA,iBAYH,OAZGa,EAAAd,KAAA,GAAAc,EAAAV,GAAAU,EAAA,SAWa,2EAXbA,EAAAb,KAAA,GAYG9B,aAAIsB,GADM,6EAXb,QAaH,OAbGqB,EAAAb,KAAA,GAaG9B,aAAIztB,MAbP,yBAAAowB,EAAAT,SAAA4D,GAAA,eAiBP,IAQeC,GARkB,CAC/B9B,aAAUzc,GAAgCie,IAC1CxB,aAAU3c,GAAiCie,IAC3CtB,aAAU1c,GAA4Bie,IACtCvB,aAAUvc,GAAgCM,IAC1Cic,aAAUtc,GAA6BM,KCvF5B6B,GAA6B,SAAC7R,GACzC,OAAOwnB,KAAMY,IAHA,2BAGY,CACvB5mB,OAAQ,CAAExB,gBAID8R,GAAyB,SAAC5V,GACrC,OAAOsrB,KAAMY,IAAN,GAAA7qB,OATM,2BASN,KAAAA,OAAuBrB,KAGnB6V,GAA4B,SAACvN,GAAa,IAEnDlJ,EAIEkJ,EAJFlJ,QACAyD,EAGEyF,EAHFzF,QACAiB,EAEEwE,EAFFxE,UACA/E,EACEuJ,EADFvJ,sBAEF,OAAOusB,KAAMC,KAnBA,2BAmBa,CACxBnsB,UACAyD,UACAiB,YACA/E,2BAIS+W,GAA4B,SAAC/E,GAAa,IAC7C/Q,EAAO+Q,EAAP/Q,GACR,OAAOsrB,KAAMO,IAAN,GAAAxqB,OA7BM,2BA6BN,KAAAA,OAAuBrB,GAAM+Q,IAGzBgF,GAAyB,SAACzQ,GAAW,IACxCtF,EAAOsF,EAAPtF,GACR,OAAOsrB,KAAMc,OAAN,GAAA/qB,OAlCM,2BAkCN,KAAAA,OAA0BrB,GAAM,CAAEsF,yBCjB1BusB,iBAYAC,iBAWAC,iBAYAjc,iBAcAC,IAjDV,SAAU8b,GAAiC/G,GAA3C,IAAAE,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGH,OAHGF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGG9B,aAAI5tB,MAHP,OAIa,OAJbwvB,EAAAE,KAAA,EAImB3f,aAAK4f,GAAgC9C,EAAOE,SAJ/D,OAKH,OADMA,EAJHyC,EAAAI,KAAAJ,EAAAE,KAAA,EAKG9B,aAAI3tB,GAAmB8sB,IAL1B,OAAAyC,EAAAE,KAAA,iBAQH,OARGF,EAAAC,KAAA,GAAAD,EAAAK,GAAAL,EAAA,SAAAA,EAAAE,KAAA,GAQG9B,aAAIztB,MARP,yBAAAqvB,EAAAM,SAAAiE,GAAA,eAYA,SAAUF,GAAiChH,GAA3C,IAAA9qB,EAAAgrB,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OAGH,OAHGM,EAAAP,KAAA,EAEG1tB,EAAM8qB,EAAOE,QAFhBiD,EAAAN,KAAA,EAGG9B,aAAI5tB,MAHP,OAIa,OAJbgwB,EAAAN,KAAA,EAImB3f,aAAK4f,GAA4B5tB,GAJpD,OAKH,OADMgrB,EAJHiD,EAAAJ,KAAAI,EAAAN,KAAA,EAKG9B,aAAI1tB,GAAyB6sB,IALhC,OAAAiD,EAAAN,KAAA,iBAOH,OAPGM,EAAAP,KAAA,GAAAO,EAAAH,GAAAG,EAAA,SAAAA,EAAAN,KAAA,GAOG9B,aAAIztB,MAPP,yBAAA6vB,EAAAF,SAAAkE,GAAA,eAWA,SAAUF,GAAsBjH,GAAhC,IAAAhnB,EAAAknB,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,OAGH,OAHGQ,EAAAT,KAAA,EAEK5pB,EAAcgnB,EAAOE,QAArBlnB,UAFLqqB,EAAAR,KAAA,EAGG9B,aAAI5tB,MAHP,OAIH,OAJGkwB,EAAAR,KAAA,EAIG3f,aAAK4f,GAA+B9C,EAAOE,SAJ9C,OAKa,OALbmD,EAAAR,KAAA,EAKmB3f,aAAK4f,GAAgC9pB,GALxD,OAMH,OADMknB,EALHmD,EAAAN,KAAAM,EAAAR,KAAA,GAMG9B,aAAI3tB,GAAmB8sB,IAN1B,QAAAmD,EAAAR,KAAA,iBAQH,OARGQ,EAAAT,KAAA,GAAAS,EAAAL,GAAAK,EAAA,SAAAA,EAAAR,KAAA,GAQG9B,aAAIztB,MARP,yBAAA+vB,EAAAJ,SAAAmE,GAAA,eAYA,SAAUpc,GAA0BgV,GAApC,IAAAE,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,OAEH,OAFGU,EAAAX,KAAA,EAAAW,EAAAV,KAAA,EAEG9B,aAAI5tB,MAFP,OAGa,OAHbowB,EAAAV,KAAA,EAGmB3f,aAAK4f,GAA+B9C,EAAOE,SAH9D,OAKH,OAFMA,EAHHqD,EAAAR,KAIa,yDAJbQ,EAAAV,KAAA,EAKG9B,aAAIkB,GADM,2DAJb,OAMH,OANGsB,EAAAV,KAAA,GAMG9B,aAAI7V,GAA+BgV,IANtC,QAAAqD,EAAAV,KAAA,iBASH,OATGU,EAAAX,KAAA,GAAAW,EAAAP,GAAAO,EAAA,SAQa,2EARbA,EAAAV,KAAA,GASG9B,aAAIsB,GADM,6EARb,QAUH,OAVGkB,EAAAV,KAAA,GAUG9B,aAAIztB,MAVP,yBAAAiwB,EAAAN,SAAAoE,GAAA,eAcA,SAAUpc,GAAwB+U,GAAlC,IAAAK,EAAAhjB,EAAA6iB,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,OAGH,OAHGa,EAAAd,KAAA,EAAAvC,EAEqBL,EAAOE,QAF5BG,EAEKnrB,GAAImI,EAFTgjB,EAEShjB,QAFTqmB,EAAAb,KAAA,EAGG9B,aAAI5tB,MAHP,OAIH,OAJGuwB,EAAAb,KAAA,EAIG3f,aAAK4f,GAA6B9C,EAAOE,SAJ5C,OAMH,MADgB,yDALbwD,EAAAb,KAAA,EAMG9B,aAAIkB,GADM,2DALb,OAOa,OAPbyB,EAAAb,KAAA,GAOmB3f,aAAK4f,IAPxB,QAQH,OADM5C,EAPHwD,EAAAX,KAAAW,EAAAb,KAAA,GAQG9B,aAAI3tB,GAAmB8sB,IAR1B,QASH,OATGwD,EAAAb,KAAA,GASG3f,aAAK7F,EAAQE,KAAM,KATtB,QAAAmmB,EAAAb,KAAA,iBAYH,OAZGa,EAAAd,KAAA,GAAAc,EAAAV,GAAAU,EAAA,SAWa,2EAXbA,EAAAb,KAAA,GAYG9B,aAAIsB,GADM,6EAXb,QAaH,OAbGqB,EAAAb,KAAA,GAaG9B,aAAIztB,MAbP,yBAAAowB,EAAAT,SAAAqE,GAAA,eAiBP,IAQeC,GARgB,CAC7BvC,aAAUva,GAA8Bwc,IACxCjC,aAAUza,GAA+Bwc,IACzC/B,aAAUxa,GAA0Bwc,IACpChC,aAAUta,GAA8BM,IACxCga,aAAUra,GAA2BM,kBC1EtBnK,iBAaAD,iBAwBA2mB,iBAoBAzF,IAzDV,SAAUjhB,GAAmBkf,GAA7B,IAAA/mB,EAAA0c,EAAA,OAAA8M,GAAArtB,EAAAstB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEH,OAFGF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEG9B,aAAI6E,MAFP,OAIa,OADV3sB,EAAa+mB,EAAOE,QAHvByC,EAAAE,KAAA,EAImB3f,aAAK4f,GAAkB7pB,GAJ1C,OAKH,OADM0c,EAJHgN,EAAAI,KAAAJ,EAAAE,KAAA,EAKG9B,aAAI6E,GAA6BjQ,IALpC,OAAAgN,EAAAE,KAAA,iBAQH,OARGF,EAAAC,KAAA,GAAAD,EAAAK,GAAAL,EAAA,SAOa,6FAPbA,EAAAE,KAAA,GAQG9B,aAAIsB,GADM,+FAPb,yBAAAM,EAAAM,SAAAwE,GAAA,eAaA,SAAU5mB,GAAYmf,GAAtB,IAAAK,EAAArnB,EAAAD,EAAAyK,EAAAC,EAAAjC,EAAAS,EAAA5J,EAAA,OAAAoqB,GAAArtB,EAAAstB,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OAEH,OAFGM,EAAAP,KAAA,EAAAO,EAAAN,KAAA,EAEG9B,aAAI6E,MAFP,OAIH,OAJGvF,EAG6EL,EAAOE,QAA/ElnB,EAHLqnB,EAGKrnB,UAAWD,EAHhBsnB,EAGgBtnB,YAAayK,EAH7B6c,EAG6B7c,8BAA+BC,EAH5D4c,EAG4D5c,aAH5D0f,EAAAN,KAAA,EAIG3f,aAAK4f,GAAqB9C,EAAOE,SAJpC,OAKoB,OALpBiD,EAAAN,KAAA,EAK0B3f,aAAK4f,GAAuB,CAAE9pB,cALxD,OAOiB,OAPjBmqB,EAAAJ,KAMGvhB,EAAWiC,EANd0f,EAAAN,KAAA,GAOuB3f,aAAKwe,GAA0BlgB,GAPtD,QAQH,OADMS,EAPHkhB,EAAAJ,KAAAI,EAAAN,KAAA,GAQG9B,aAAI2G,GAA+BzlB,IARtC,QAWH,MADgB,2EAVbkhB,EAAAN,KAAA,GAWG9B,aAAIkB,GADM,6EAVb,QAgBH,OAJM5pB,EAAO,CAAE6nB,QAAS,CACtBnnB,cACA9E,sBAAuBuP,IAdtB2f,EAAAN,KAAA,GAgBG3f,aAAKykB,GAAkCtvB,GAhB1C,QAAA8qB,EAAAN,KAAA,iBAmBH,OAnBGM,EAAAP,KAAA,GAAAO,EAAAH,GAAAG,EAAA,SAkBa,6FAlBbA,EAAAN,KAAA,GAmBG9B,aAAIsB,GADM,+FAlBb,yBAAAc,EAAAF,SAAA2E,GAAA,eAwBA,SAAUJ,GAAYxH,GAAtB,IAAAiG,EAAAltB,EAAAsE,EAAAsY,EAAA,OAAA8M,GAAArtB,EAAAstB,KAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,OAEH,OAFGQ,EAAAT,KAAA,EAAAS,EAAAR,KAAA,EAEG9B,aAAI6E,MAFP,OAQa,OARbK,EAOCjG,EAAOE,QAPR+F,EAIDhtB,WACAF,EALCktB,EAKDltB,YACAsE,EANC4oB,EAMD5oB,QANCgmB,EAAAR,KAAA,EAQmB3f,aAAK4f,GAAqB9C,EAAOE,SARpD,OASH,OADMvK,EARH0N,EAAAN,KAAAM,EAAAR,KAAA,EASG9B,aAAI6E,GAA6BjQ,IATpC,OAWH,MADgB,2EAVb0N,EAAAR,KAAA,GAWG9B,aAAIkB,GADM,6EAVb,QAYH,OAZGoB,EAAAR,KAAA,GAYG3f,aAAK7F,EAAQE,KAAT,cAAAhH,OAA6BwC,IAZpC,QAAAsqB,EAAAR,KAAA,iBAeH,OAfGQ,EAAAT,KAAA,GAAAS,EAAAL,GAAAK,EAAA,SAca,6FAdbA,EAAAR,KAAA,GAeG9B,aAAIsB,GADM,+FAdb,yBAAAgB,EAAAJ,SAAA4E,GAAA,eAoBA,SAAU9F,GAAkB/B,GAA5B,IAAAmG,EAAAptB,EAAAsE,EAAA,OAAAolB,GAAArtB,EAAAstB,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,OAGH,OAHGU,EAAAX,KAAA,EAAAuD,EAEmDnG,EAAOE,QAF1DiG,EAEKltB,WAAYF,EAFjBotB,EAEiBptB,YAFjBotB,EAE8BpuB,QAASsF,EAFvC8oB,EAEuC9oB,QAFvCkmB,EAAAV,KAAA,EAGG9B,aAAI6E,MAHP,OAIH,OAJGrC,EAAAV,KAAA,EAIG3f,aAAK4f,GAAuB9C,EAAOE,SAJtC,OAMH,MADgB,qEALbqD,EAAAV,KAAA,EAMG9B,aAAIkB,GADM,uEALb,OAOH,OAPGsB,EAAAV,KAAA,GAOG3f,aAAK7F,EAAQE,KAAT,cAAAhH,OAA6BwC,IAPpC,QAAAwqB,EAAAV,KAAA,iBAUH,OAVGU,EAAAX,KAAA,GAAAW,EAAAP,GAAAO,EAAA,SASa,uFATbA,EAAAV,KAAA,GAUG9B,aAAIsB,GADM,yFATb,QAWH,OAXGkB,EAAAV,KAAA,GAWG9B,aAAI6E,MAXP,yBAAArC,EAAAN,SAAA6E,GAAA,eAeP,IAOeC,GAPM,CACnB/C,aAAU7kB,GAAsBW,IAChCkkB,aAAU3kB,GAAcQ,IACxBmkB,aAAUvkB,GAAmB+mB,IAC7BxC,aAAUtkB,GAAgBqhB,KCxFf5V,GAA8B,SAAClT,GAC1C,OAAOunB,KAAMY,IAHA,4BAGY,CACvB5mB,OAAQ,CACNvB,iBAKOmT,GAA0B,SAAClX,GACtC,OAAOsrB,KAAMY,IAAN,GAAA7qB,OAXM,4BAWN,KAAAA,OAAuBrB,KAGnBmX,GAA6B,SAAC7R,GACzC,OAAOgmB,KAAMC,KAfA,4BAea,CACxBjmB,YAIS8R,GAA6B,SAACrG,GAAa,IAC9C/Q,EAAO+Q,EAAP/Q,GACR,OAAOsrB,KAAMO,IAAN,GAAAxqB,OAtBM,4BAsBN,KAAAA,OAAuBrB,GAAM+Q,IAGzBsG,GAA2B,SAAC/R,GAAW,IAC1CtF,EAAOsF,EAAPtF,GACR,OAAOsrB,KAAMc,OAAN,GAAA/qB,OA3BM,4BA2BN,KAAAA,OAA0BrB,GAAM,CAAEsF,yBCX1BwtB,iBAWAC,iBAWAC,iBAgBA5b,iBAcAC,IApDV,SAAUyb,GAAkChI,GAA5C,IAAAE,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEH,OAFGF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEG9B,aAAI5tB,MAFP,OAGa,OAHbwvB,EAAAE,KAAA,EAGmB3f,aAAK4f,GAAiC9C,EAAOE,SAHhE,OAIH,OADMA,EAHHyC,EAAAI,KAAAJ,EAAAE,KAAA,EAIG9B,aAAI3tB,GAAmB8sB,IAJ1B,OAAAyC,EAAAE,KAAA,iBAOH,OAPGF,EAAAC,KAAA,GAAAD,EAAAK,GAAAL,EAAA,SAAAA,EAAAE,KAAA,GAOG9B,aAAIztB,MAPP,yBAAAqvB,EAAAM,SAAAkF,GAAA,eAWA,SAAUF,GAAkCjI,GAA5C,IAAA9qB,EAAAgrB,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OAGH,OAHGM,EAAAP,KAAA,EAEG1tB,EAAM8qB,EAAOE,QAFhBiD,EAAAN,KAAA,EAGG9B,aAAI5tB,MAHP,OAIa,OAJbgwB,EAAAN,KAAA,EAImB3f,aAAK4f,GAA6B5tB,GAJrD,OAKH,OADMgrB,EAJHiD,EAAAJ,KAAAI,EAAAN,KAAA,EAKG9B,aAAI1tB,GAAyB6sB,IALhC,OAAAiD,EAAAN,KAAA,iBAOH,OAPGM,EAAAP,KAAA,GAAAO,EAAAH,GAAAG,EAAA,SAAAA,EAAAN,KAAA,GAOG9B,aAAIztB,MAPP,yBAAA6vB,EAAAF,SAAAmF,GAAA,eAWA,SAAUF,GAAuBlI,GAAjC,IAAA/mB,EAAAinB,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,OAGH,OAHGQ,EAAAT,KAAA,EAEK3pB,EAAe+mB,EAAOE,QAAtBjnB,WAFLoqB,EAAAR,KAAA,EAGG9B,aAAI5tB,MAHP,OAIH,OAJGkwB,EAAAR,KAAA,EAIG3f,aAAK4f,GAAgC9C,EAAOE,SAJ/C,OAKa,OALbmD,EAAAR,KAAA,EAKmB3f,aAAK4f,GAAiC7pB,GALzD,OAMH,OADMinB,EALHmD,EAAAN,KAAAM,EAAAR,KAAA,GAMG9B,aAAI3tB,GAAmB8sB,IAN1B,QAQH,MADgB,+DAPbmD,EAAAR,KAAA,GAQG9B,aAAIkB,GADM,iEAPb,QAAAoB,EAAAR,KAAA,iBAUH,OAVGQ,EAAAT,KAAA,GAAAS,EAAAL,GAAAK,EAAA,SAAAA,EAAAR,KAAA,GAUG9B,aAAIztB,MAVP,QAYH,MADgB,iFAXb+vB,EAAAR,KAAA,GAYG9B,aAAIsB,GADM,mFAXb,yBAAAgB,EAAAJ,SAAAoF,GAAA,eAgBA,SAAU/b,GAA2B0T,GAArC,IAAAE,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAa,GAAA,cAAAA,EAAAX,KAAAW,EAAAV,MAAA,OAEH,OAFGU,EAAAX,KAAA,EAAAW,EAAAV,KAAA,EAEG9B,aAAI5tB,MAFP,OAGa,OAHbowB,EAAAV,KAAA,EAGmB3f,aAAK4f,GAAgC9C,EAAOE,SAH/D,OAKH,OAFMA,EAHHqD,EAAAR,KAIa,yDAJbQ,EAAAV,KAAA,EAKG9B,aAAIkB,GADM,2DAJb,OAMH,OANGsB,EAAAV,KAAA,GAMG9B,aAAIvU,GAAgC0T,IANvC,QAAAqD,EAAAV,KAAA,iBASH,OATGU,EAAAX,KAAA,GAAAW,EAAAP,GAAAO,EAAA,SAQa,2EARbA,EAAAV,KAAA,GASG9B,aAAIsB,GADM,6EARb,QAUH,OAVGkB,EAAAV,KAAA,GAUG9B,aAAIztB,MAVP,yBAAAiwB,EAAAN,SAAAqF,GAAA,eAcA,SAAU/b,GAAyByT,GAAnC,IAAAK,EAAAhjB,EAAA6iB,EAAA,OAAAuC,GAAArtB,EAAAstB,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,OAGH,OAHGa,EAAAd,KAAA,EAAAvC,EAEqBL,EAAOE,QAF5BG,EAEKnrB,GAAImI,EAFTgjB,EAEShjB,QAFTqmB,EAAAb,KAAA,EAGG9B,aAAI5tB,MAHP,OAIH,OAJGuwB,EAAAb,KAAA,EAIG3f,aAAK4f,GAA8B9C,EAAOE,SAJ7C,OAMH,MADgB,yDALbwD,EAAAb,KAAA,EAMG9B,aAAIkB,GADM,2DALb,OAOa,OAPbyB,EAAAb,KAAA,GAOmB3f,aAAK4f,IAPxB,QAQH,OADM5C,EAPHwD,EAAAX,KAAAW,EAAAb,KAAA,GAQG9B,aAAI3tB,GAAmB8sB,IAR1B,QASH,OATGwD,EAAAb,KAAA,GASG3f,aAAK7F,EAAQE,KAAM,KATtB,QAAAmmB,EAAAb,KAAA,iBAYH,OAZGa,EAAAd,KAAA,GAAAc,EAAAV,GAAAU,EAAA,SAWa,2EAXbA,EAAAb,KAAA,GAYG9B,aAAIsB,GADM,6EAXb,QAaH,OAbGqB,EAAAb,KAAA,GAaG9B,aAAIztB,MAbP,yBAAAowB,EAAAT,SAAAsF,GAAA,eAiBP,IAQeC,GARiB,CAC9BxD,aAAUjZ,GAA+Bmc,IACzClD,aAAUnZ,GAAgCmc,IAC1ChD,aAAUlZ,GAA2Bmc,IACrCjD,aAAUhZ,GAA+BM,IACzC0Y,aAAU/Y,GAA4BM,KCzF3Bkc,GAA8B,SAACjuB,GACxC,OAAOgmB,KAAMY,IAAI,gCAAiC,CAC9C5mB,YAKKkuB,GAA4B,SAACluB,GACtC,OAAOgmB,KAAMY,IAAI,8BAA+B,CAC5C5mB,YAKKmuB,GAA6B,SAACnuB,GACvC,OAAOgmB,KAAMY,IAAI,+BAAgC,CAC7C5mB,yBCHSG,IAAV,SAAUA,GAAgBqlB,GAA1B,IAAAvlB,EAAA6I,EAAA/B,EAAAqnB,EAAA,OAAAnG,GAAArtB,EAAAstB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGH,OAHGF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAGG9B,aAAI5tB,MAHP,OASe,OATfwvB,EAAAE,KAAA,EASqB3f,aAAKulB,GAA6BzI,EAAOE,SAT9D,OAYa,OAHVzlB,EATHkoB,EAAAI,KAAAJ,EAAAE,KAAA,EAYmB3f,aAAKwlB,GAA2B1I,EAAOE,SAZ1D,OAec,OAHX5c,EAZHqf,EAAAI,KAAAJ,EAAAE,KAAA,GAeoB3f,aAAKylB,GAA4B3I,EAAOE,SAf5D,QAwBH,OATM3e,EAfHohB,EAAAI,KAiBG6F,EAAkB,CACtBnuB,UAAYA,EAAUpC,KACtBiL,QAAUA,EAAQjL,KAClBkJ,SAAUA,EAASlJ,MApBlBsqB,EAAAE,KAAA,GAwBG9B,aAAI3tB,GAAmBw1B,IAxB1B,QAAAjG,EAAAE,KAAA,iBA2BH,OA3BGF,EAAAC,KAAA,GAAAD,EAAAK,GAAAL,EAAA,SAAAA,EAAAE,KAAA,GA2BG9B,aAAIztB,MA3BP,yBAAAqvB,EAAAM,SAAA4F,GAAA,eA+BP,IAKeC,GALY,CAEzB9D,aAAU1e,GAAsB3L,KC/CrBouB,GAAY,SAACvrB,GACtB,OAAOgjB,KAAMC,KAAK,aAAcjjB,IAGvBwrB,GAAc,SAACxuB,GAAW,IAC3BpB,EAAYoB,EAAZpB,QACR,OAAOonB,KAAMc,OAAN,cAAA/qB,OAA2B6C,GAAW,CAAEoB,yBC0BlCrE,iBAsCAC,IAtCV,SAAUD,GAAS6pB,GAAnB,IAAAK,EAAAvnB,EAAAD,EAAAR,EAAA,OAAAoqB,GAAArtB,EAAAstB,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OAGH,OAHGM,EAAAP,KAAA,EAAAvC,EAE6BL,EAAOE,QAA/BpnB,EAFLunB,EAEKvnB,eAAgBD,EAFrBwnB,EAEqBxnB,IAFrBsqB,EAAAN,KAAA,EAGG9B,aAAI5tB,MAHP,OAIH,OAJGgwB,EAAAN,KAAA,EAIG3f,aAAK6lB,GAAWjwB,GAJnB,OAAAqqB,EAAAH,GAOKnqB,EAPLsqB,EAAAN,KAQI,YARJM,EAAAH,GAAA,EASI,WATJG,EAAAH,GAAA,EAgBI,iBAhBJG,EAAAH,GAAA,GAsBI,iBAtBJG,EAAAH,GAAA,mBAcG,OAJA3qB,EAAO,CAAE6nB,QAAS,CAChBnnB,YAAaD,EAAe8I,WAC5B3N,sBAAuB,IAZ5BkvB,EAAAN,KAAA,GAcS3f,aAAKykB,GAAkCtvB,GAdhD,eAAA8qB,EAAA8F,OAAA,oBAoBG,OAHA5wB,EAAO,CAAE6nB,QAAS,CAChBvpB,WAAYmC,EAAenC,aAlBhCwsB,EAAAN,KAAA,GAoBS3f,aAAKsiB,GAA+BntB,GApB7C,eAAA8qB,EAAA8F,OAAA,oBAwBG,OADA5wB,EAAO,CAAE6nB,QAASpnB,EAAeC,aAvBpCoqB,EAAAN,KAAA,GAwBS3f,aAAKsiB,GAAuCntB,GAxBrD,eAAA8qB,EAAA8F,OAAA,oBA6BH,MADgB,6CA5Bb9F,EAAAN,KAAA,GA6BG9B,aAAIkB,GADM,+CA5Bb,QAAAkB,EAAAN,KAAA,iBAiCH,OAjCGM,EAAAP,KAAA,GAAAO,EAAA+F,GAAA/F,EAAA,SAgCa,+DAhCbA,EAAAN,KAAA,GAiCG9B,aAAIsB,GADM,iEAhCb,QAkCH,OAlCGc,EAAAN,KAAA,GAkCG9B,aAAIztB,MAlCP,yBAAA6vB,EAAAF,SAAAkG,GAAA,eAsCA,SAAU/yB,GAAW4pB,GAArB,IAAAiG,EAAA9sB,EAAAN,EAAAuwB,EAAA,OAAA3G,GAAArtB,EAAAstB,KAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,OAGH,OAHGQ,EAAAT,KAAA,EAAAqD,EAE+BjG,EAAOE,QAAjC/mB,EAFL8sB,EAEK9sB,iBAAkBN,EAFvBotB,EAEuBptB,IAFvBwqB,EAAAR,KAAA,EAGG9B,aAAI5tB,MAHP,OAIH,OAJGkwB,EAAAR,KAAA,EAIG3f,aAAK8lB,GAAa7vB,GAJrB,OAAAkqB,EAAAL,GAOKnqB,EAPLwqB,EAAAR,KAQI,YARJQ,EAAAL,GAAA,EASI,WATJK,EAAAL,GAAA,EAgBI,iBAhBJK,EAAAL,GAAA,GAsBI,iBAtBJK,EAAAL,GAAA,mBAcG,OAJA3qB,EAAO,CAAE6nB,QAAS,CAChBnnB,YAAaI,EAAiByI,WAC9B3N,sBAAuB,IAZ5BovB,EAAAR,KAAA,GAcS3f,aAAKykB,GAAkCtvB,GAdhD,eAAAgrB,EAAA4F,OAAA,oBAoBG,OAHA5wB,EAAO,CAAE6nB,QAAS,CAChBvpB,WAAYwC,EAAiBxC,aAlBlC0sB,EAAAR,KAAA,GAoBS3f,aAAKsiB,GAA+BntB,GApB7C,eAAAgrB,EAAA4F,OAAA,oBAwBG,OADA5wB,EAAO,CAAE6nB,QAAS/mB,EAAiBC,SAvBtCiqB,EAAAR,KAAA,GAwBS3f,aAAKsiB,GAAuCntB,GAxBrD,eAAAgrB,EAAA4F,OAAA,oBA4BH,MADgB,+DA3Bb5F,EAAAR,KAAA,GA4BG9B,aAAIkB,GADM,iEA3Bb,QAAAoB,EAAAR,KAAA,iBA+BH,OA/BGQ,EAAAT,KAAA,GAAAS,EAAA6F,GAAA7F,EAAA,SA8Ba,iFA9BbA,EAAAR,KAAA,GA+BG9B,aAAIsB,GADM,mFA9Bb,QAgCH,OAhCGgB,EAAAR,KAAA,GAgCG9B,aAAIztB,MAhCP,yBAAA+vB,EAAAJ,SAAAoG,GAAA,eAoCP,IAKeC,GALG,CAChBtE,aAAU/uB,EAAWE,IACrB6uB,aAAU9uB,EAAaE,KC5GZ2yB,GAAY,SAACvuB,GACtB,OAAOgmB,KAAMC,KAAK,yBAA0BjmB,IAGnCwuB,GAAc,SAACxuB,GAAW,IAC3BpB,EAAYoB,EAAZpB,QACR,OAAOonB,KAAMc,OAAN,0BAAA/qB,OAAuC6C,GAAW,CAAEoB,yBCY9CrE,iBA+BAC,IA/BV,SAAUD,GAAS6pB,GAAnB,IAAAK,EAAAvnB,EAAAD,EAAAR,EAAA,OAAAoqB,GAAArtB,EAAAstB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGH,OAHGF,EAAAC,KAAA,EAAAvC,EAE6BL,EAAOE,QAA/BpnB,EAFLunB,EAEKvnB,eAAgBD,EAFrBwnB,EAEqBxnB,IAFrB8pB,EAAAE,KAAA,EAGG9B,aAAI5tB,MAHP,OAIH,OAJGwvB,EAAAE,KAAA,EAIG3f,aAAK6lB,GAAWjwB,GAJnB,OAAA6pB,EAAAK,GAMKnqB,EANL8pB,EAAAE,KAOI,YAPJF,EAAAK,GAAA,EAWI,WAXJL,EAAAK,GAAA,GAeI,aAfJL,EAAAK,GAAA,mBASG,OADA3qB,EAAO,CAAE6nB,QAASpnB,EAAemP,WARpC0a,EAAAE,KAAA,GASS3f,aAAKslB,GAA2DnwB,GATzE,eAAAsqB,EAAAsG,OAAA,oBAaG,OADA5wB,EAAO,CAAE6nB,QAASpnB,EAAe0I,UAZpCmhB,EAAAE,KAAA,GAaS3f,aAAKqkB,GAAyDlvB,GAbvE,eAAAsqB,EAAAsG,OAAA,oBAiBG,OADA5wB,EAAO,CAAE6nB,QAASpnB,EAAe8I,YAhBpC+gB,EAAAE,KAAA,GAiBS3f,aAAK4jB,GAA6DzuB,GAjB3E,eAAAsqB,EAAAsG,OAAA,oBAsBH,MADgB,6CArBbtG,EAAAE,KAAA,GAsBG9B,aAAIkB,GADM,+CArBb,QAAAU,EAAAE,KAAA,iBA0BH,OA1BGF,EAAAC,KAAA,GAAAD,EAAAuG,GAAAvG,EAAA,SAyBa,+DAzBbA,EAAAE,KAAA,GA0BG9B,aAAIsB,GADM,iEAzBb,QA2BH,OA3BGM,EAAAE,KAAA,GA2BG9B,aAAIztB,MA3BP,yBAAAqvB,EAAAM,SAAAsG,GAAA,eA+BA,SAAUnzB,GAAW4pB,GAArB,IAAAiG,EAAA9sB,EAAAN,EAAAuwB,EAAA,OAAA3G,GAAArtB,EAAAstB,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OAGH,OAHGM,EAAAP,KAAA,EAAAqD,EAE+BjG,EAAOE,QAAjC/mB,EAFL8sB,EAEK9sB,iBAAkBN,EAFvBotB,EAEuBptB,IAFvBsqB,EAAAN,KAAA,EAGG9B,aAAI5tB,MAHP,OAIH,OAJGgwB,EAAAN,KAAA,EAIG3f,aAAK8lB,GAAa7vB,GAJrB,OAAAgqB,EAAAH,GAOKnqB,EAPLsqB,EAAAN,KAQI,YARJM,EAAAH,GAAA,EAYI,WAZJG,EAAAH,GAAA,GAgBI,aAhBJG,EAAAH,GAAA,mBAUG,OADA3qB,EAAO,CAAE6nB,QAAS/mB,EAAiB8O,WATtCkb,EAAAN,KAAA,GAUS3f,aAAKslB,GAA2DnwB,GAVzE,eAAA8qB,EAAA8F,OAAA,oBAcG,OADA5wB,EAAO,CAAE6nB,QAAS/mB,EAAiBqI,UAbtC2hB,EAAAN,KAAA,GAcS3f,aAAKqkB,GAAyDlvB,GAdvE,eAAA8qB,EAAA8F,OAAA,oBAkBG,OADA5wB,EAAO,CAAE6nB,QAAU/mB,EAAiByI,YAjBvCuhB,EAAAN,KAAA,GAkBS3f,aAAK4jB,GAA6DzuB,GAlB3E,eAAA8qB,EAAA8F,OAAA,oBAsBH,MADgB,+DArBb9F,EAAAN,KAAA,GAsBG9B,aAAIkB,GADM,iEArBb,QAAAkB,EAAAN,KAAA,iBAyBH,OAzBGM,EAAAP,KAAA,GAAAO,EAAA+F,GAAA/F,EAAA,SAwBa,iFAxBbA,EAAAN,KAAA,GAyBG9B,aAAIsB,GADM,mFAxBb,QA0BH,OA1BGc,EAAAN,KAAA,GA0BG9B,aAAIztB,MA1BP,yBAAA6vB,EAAAF,SAAAuG,GAAA,eA8BP,IAKeC,GALc,CAC3BzE,aAAU/uB,GAAWE,IACrB6uB,aAAU9uB,GAAaE,kBC7ERkH,IAAV,SAAUA,GAAa0iB,GAAvB,OAAAyC,GAAArtB,EAAAstB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACH,OADGF,EAAAE,KAAA,EACG9B,cjBakBrjB,EiBbFsiB,EAAOE,QjBcxBgC,2BAAO,CACZxkB,UACAykB,SAAU,KACVjpB,OAAQ,QACRkpB,aAAc,QiBnBX,wBAAAO,EAAAM,OjBcA,IAAqBvlB,GiBdrBgsB,IAIL,IAIaC,GAJa,CACxB3E,aAAU9lB,GAAsB5B,kBCEXssB,IAAV,SAAUA,KAAV,OAAAnH,GAAArtB,EAAAstB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACb,OADaF,EAAAE,KAAA,EACPhE,aAAG,GAAAtoB,OAAAuM,OAAA+mB,EAAA,EAAA/mB,CACJiiB,IADIjiB,OAAA+mB,EAAA,EAAA/mB,CAEJ0iB,IAFI1iB,OAAA+mB,EAAA,EAAA/mB,CAGJujB,IAHIvjB,OAAA+mB,EAAA,EAAA/mB,CAIJgkB,IAJIhkB,OAAA+mB,EAAA,EAAA/mB,CAKJykB,IALIzkB,OAAA+mB,EAAA,EAAA/mB,CAMJilB,IANIjlB,OAAA+mB,EAAA,EAAA/mB,CAOJ0lB,IAPI1lB,OAAA+mB,EAAA,EAAA/mB,CAQJgmB,IARIhmB,OAAA+mB,EAAA,EAAA/mB,CASJwmB,IATIxmB,OAAA+mB,EAAA,EAAA/mB,CAUJ2mB,IAVI3mB,OAAA+mB,EAAA,EAAA/mB,CAWJ6mB,MAZQ,wBAAAhH,EAAAM,SAAA6G,uCCDTC,GAAmB/rB,OAAOgsB,sCAAwCC,KAElE5sB,GAAU6sB,eAChBC,KAAQC,WAAW,kBACnB/sB,GAAQgtB,OAAO,SAAAtuB,GAAkB,IAAfuuB,EAAevuB,EAAfuuB,SAChBntB,QAAQC,IAAI,cAAcktB,KAK5B,IAAMC,GAAoBC,2BAAiBntB,IACrCotB,GAAiBC,eAEjBC,GAAQC,aACV/K,GACAP,GACAyK,GACIc,aACIC,KACAP,GACAE,GACAM,QAKZN,GAAeO,IAAIpB,GAAU,CAAEvsB,aAKhBstB,iHCGP11B,GAAS01B,GAAMM,WAAfh2B,KACA0I,GAAqB1I,GAArB0I,OAAQ8a,GAAaxjB,GAAbwjB,SAChByS,YAAa,GAAA30B,OAAAuM,OAAA+mB,EAAA,EAAA/mB,CAAK0V,MAAL1V,OAAA+mB,EAAA,EAAA/mB,CAAY4b,QAEzByM,KAAQC,IAAIC,KAAKC,MAGjBxtB,aAAaC,QAAQ,gBAAiB,IAEtC,IAAM5B,GAAS,WACbovB,IAASpvB,OACPhH,EAAAC,EAAAC,cAACm2B,EAAA,SAAD,CAAUb,MAAOA,IACfx1B,EAAAC,EAAAC,cAACo2B,EAAA,EAAD,CAAc9tB,OAAQA,GAAQ8a,SAAUA,IACtCtjB,EAAAC,EAAAC,cAACse,EAAA,EAAD,KACExe,EAAAC,EAAAC,cAACq2B,GAAD,KACEv2B,EAAAC,EAAAC,cAACs2B,GAAD,KACEx2B,EAAAC,EAAAC,cAACu2B,EAAA,EAAD,KACEz2B,EAAAC,EAAAC,cAAC0iB,EAAA,EAAD,CAAO8T,OAAK,EAACC,KAAK,IAAI1wB,UAAW2B,KACjC5H,EAAAC,EAAAC,cAAC0iB,EAAA,EAAD,CAAO8T,OAAK,EAACC,KAAK,iBAAiB1wB,UAAW4J,GAAe+mB,QAAS,kBAAM/tB,OAAOiW,SAAS,EAAG,MAC/F9e,EAAAC,EAAAC,cAAC0iB,EAAA,EAAD,CAAO8T,OAAK,EAACC,KAAK,sCAAsC1wB,UAAWsO,KACnEvU,EAAAC,EAAAC,cAAC0iB,EAAA,EAAD,CAAO8T,OAAK,EAACC,KAAK,kCAAkC1wB,UAAWkQ,KAC/DnW,EAAAC,EAAAC,cAAC0iB,EAAA,EAAD,CAAO8T,OAAK,EAACC,KAAK,oCAAoC1wB,UAAWyR,KACjE1X,EAAAC,EAAAC,cAAC0iB,EAAA,EAAD,CAAO8T,OAAK,EAACC,KAAK,qBAAqB1wB,UAAWoa,KAClDrgB,EAAAC,EAAAC,cAAC0iB,EAAA,EAAD,CAAO8T,OAAK,EAACC,KAAK,eAAe1wB,UAAWyZ,KAC5C1f,EAAAC,EAAAC,cAAC0iB,EAAA,EAAD,CAAO8T,OAAK,EAACC,KAAK,gBAAgB1wB,UAAWoZ,KAC7Crf,EAAAC,EAAAC,cAAC0iB,EAAA,EAAD,CAAO8T,OAAK,EAACC,KAAK,yBAAyB1wB,UAAWma,KACtDpgB,EAAAC,EAAAC,cAAC0iB,EAAA,EAAD,CAAO8T,OAAK,EAACC,KAAK,wBAAwB1wB,UAAW4Z,KACrD7f,EAAAC,EAAAC,cAAC0iB,EAAA,EAAD,CAAO8T,OAAK,EAACC,KAAK,+BAA+B1wB,UAAW+Z,KAC5DhgB,EAAAC,EAAAC,cAAC22B,GAAD,KACE72B,EAAAC,EAAAC,cAACu2B,EAAA,EAAD,KACEz2B,EAAAC,EAAAC,cAAC0iB,EAAA,EAAD,CAAO8T,OAAK,EAACC,KAAK,sBAAsB1wB,UAAW2K,KACnD5Q,EAAAC,EAAAC,cAAC0iB,EAAA,EAAD,CAAO8T,OAAK,EAACC,KAAK,oBAAoB1wB,UAAWyM,KACjD1S,EAAAC,EAAAC,cAAC0iB,EAAA,EAAD,CAAO8T,OAAK,EAACC,KAAK,qBAAqB1wB,UAAW4M,KAClD7S,EAAAC,EAAAC,cAAC0iB,EAAA,EAAD,CAAO8T,OAAK,EAACC,KAAK,sBAAsB1wB,UAAW6wB,KACnD92B,EAAAC,EAAAC,cAAC0iB,EAAA,EAAD,CAAO8T,OAAK,EAACC,KAAK,kCAAkC1wB,UAAW8O,KAC/D/U,EAAAC,EAAAC,cAAC0iB,EAAA,EAAD,CAAO8T,OAAK,EAACC,KAAK,gCAAgC1wB,UAAWqQ,KAC7DtW,EAAAC,EAAAC,cAAC0iB,EAAA,EAAD,CAAO8T,OAAK,EAACC,KAAK,iCAAiC1wB,UAAW6R,KAE9D9X,EAAAC,EAAAC,cAAC0iB,EAAA,EAAD,CAAO8T,OAAK,EAACC,KAAK,kBAAkB1wB,UAAWoL,OAGnDrR,EAAAC,EAAAC,cAAC62B,GAAD,KACE/2B,EAAAC,EAAAC,cAACu2B,EAAA,EAAD,aASdO,SAASC,eAAe,UAI5BzB,GAAM0B,UAAU,WACdlwB,OASFA","file":"static/js/main.f35fc63b.chunk.js","sourcesContent":["import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_QUESTION_LIST = Symbol('FETCH_QUESTION_LIST');\nexport const FETCH_QUESTION = Symbol('FETCH_QUESTION');\nexport const POST_QUESTION_DATA = Symbol('POST_QUESTION_DATA');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATE_CURRENT_TRANSLATE_LANGUAGE = Symbol('UPDATE_CURRENT_TRANSLATE_LANGUAGE');\nexport const SAVE_QUESTION_DATA = Symbol('SAVE_QUESTION_DATA');\nexport const UPDATED_QUESTION_DATA = Symbol('UPDATED_QUESTION_DATA');\nexport const DELETE_QUESTION = Symbol('DELETE_QUESTION');\n\n\n//createAction(FETCH_QUESTION_LIST)はFETCH_QUESTION_LISTという名前でアクションを発火させる。\nexport const fetchQuestionList = createAction(FETCH_QUESTION_LIST);\nexport const fetchQuestion = createAction(FETCH_QUESTION);\nexport const postQuestionData = createAction(POST_QUESTION_DATA);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updateCurrentTranslateLanguage = createAction(UPDATE_CURRENT_TRANSLATE_LANGUAGE);\nexport const saveQuestionData = createAction(SAVE_QUESTION_DATA);\nexport const updatedQuestionData = createAction(UPDATED_QUESTION_DATA);\nexport const deleteQuestion = createAction(DELETE_QUESTION);\n\n","'use strict';\n\nexport const getFilteredContents = (contentList, translateLanguageId, contentType, categoryId) => {\n  const filteredContents = contentList.filter((v) => {\n    if (v.translate_language_id === translateLanguageId) {\n      return true ;\n    }\n\n    const targetTranslationsNum = v[contentType].filter((v) => {\n      return (v.translate_language_id === translateLanguageId);\n    }).length;\n    return (targetTranslationsNum !== 0);\n  });\n  return filteredContents;\n};\n\nexport const getTranslatedContents = (contentList, translateLanguageId, contentType, categoryId) => {\n  const translatedContents = contentList.map((v) => {\n    if (v.translate_language_id === translateLanguageId) {\n        v.dispText = v.content;\n        return v;\n    }\n\n    const translation = v[contentType].filter(v => {\n      return (v.translate_language_id === translateLanguageId);\n    })[0];\n\n    v.dispText = translation.content;\n    return v;\n\n  });\n\n  return translatedContents;\n};","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\n\nclass Translator extends Component {\n\n  render() {\n    const { user } = this.props;\n    const { name, image_path, profile_link } = user;\n    const { formatMessage } = this.props.intl;\n    const msg = formatMessage({id: \"translated.name\"});\n\n    return (\n      <div className=\"uk-text-right\">\n        <div className=\"uk-comment-meta uk-display-inline-block\" style={{padding: '0 10px'}}>{ msg }</div>\n        <div className=\"uk-display-inline-block\">\n          <Link to={profile_link}>\n            <img className=\"uk-comment-avatar uk-border-circle uk-text-right\" src={image_path} width=\"35\" height=\"35\" alt={name} />\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(Translator);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const POST_VOTE = Symbol('POST_VOTE');\nexport const DELETE_VOTE = Symbol('DELETE_VOTE');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\n\n//createAction(FETCH_QUESTION_LIST)はFETCH_QUESTION_LISTという名前でアクションを発火させる。\nexport const postVote = createAction(POST_VOTE);\nexport const deleteVote = createAction(DELETE_VOTE);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass PostUser extends Component {\n  \n    selectedNationalFlag(countryId) {\n        let src;\n        switch(countryId) {\n            case 1:\n            src = \"japan\";\n            break;\n            case 2:\n            src = \"usa\";\n            break;\n            default :\n            src = \"japan\";\n            break;\n        }\n        return <img className=\"\" src={`/image/common/flag/${src}.png`} style={{border: \"1px solid #dcdcdc\"}} width=\"20\" height=\"20\" alt=\"\"/>;\n    }\n\n    render() {\n        const { user } = this.props;\n        const nationalFlag = this.selectedNationalFlag(user.country_id);\n        const userName = user ? user.name : '不明なユーザー';\n        const profileLink = `/users/profile/${user.id}`;\n\n        return (\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n                <div className=\"uk-width-auto\">\n                    <Link to={profileLink}><img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"43\" height=\"43\" alt=\"\" /></Link>\n                </div>\n                <div>\n                <div className=\"uk-width-auto\" >\n                    { nationalFlag }\n                </div>\n                    <div>\n                        <h4 className=\"uk-comment-meta uk-margin-remove\"><Link className=\"\" to={profileLink}>{ userName }</Link></h4>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default PostUser;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass PostIcons extends Component {\n    render() {\n        const { \n            user, \n            loginUser, \n            votes, \n            sendData, \n            deleteData,\n            editLink,\n            translateLink,\n            onClickSendVote,\n            onClickDeleteVote,\n            translate\n        } = this.props;\n        \n        const editLinkButton = user.id === loginUser.id\n                        ? <Link className=\"uk-margin-small-right\" to={editLink}><FontAwesomeIcon icon=\"edit\" color=\"steelblue\" size=\"lg\"/></Link>\n                        : '';\n\n        const myVotes = votes.filter(v => {return v.user_id === loginUser.id});\n        const voteState = myVotes.length !== 0;\n\n        let votebutton\n        if (voteState) {\n        votebutton = (\n            <a onClick={onClickDeleteVote.bind(this, deleteData, loginUser.id)}>\n            <FontAwesomeIcon icon=\"heart\" color=\"red\" size=\"lg\"/>\n            </a>\n        );\n        } else {\n        votebutton = (\n            <a onClick={onClickSendVote.bind(this, sendData, loginUser.id)}>\n            <FontAwesomeIcon icon={['far','heart']} color=\"gray\"  size=\"lg\"/>\n            </a>\n        );\n        }\n        const voteNumbers = <span className=\"uk-margin-small-right uk-text-default\">{ votes.length }</span>;\n\n        const translateButton = translate === true\n                            ?<Link to={translateLink}><FontAwesomeIcon icon=\"globe-americas\" color=\"steelblue\" size=\"lg\"/></Link>\n                            :\"\";\n\n        return (\n            <div>\n                { votebutton }\n                { voteNumbers }\n                { editLinkButton }\n                { translateButton }\n            </div>\n        );\n  }\n}\n\nexport default PostIcons;\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { getFilteredContents, getTranslatedContents } from '../utils/Translations';\nimport { injectIntl } from 'react-intl';\nimport { sprintf } from 'sprintf-js';\nimport Translator from './Translator';\n//componentの中でdispatchするための設定\nimport { connect } from 'react-redux';\n//評価するための関数\nimport { postVote, deleteVote } from '../actions/Vote';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass QuestionListView extends Component {\n\n  sendVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(data, user_id) {\n      if (user_id == null) {\n          return;\n      }\n      return this.props.handleDeleteVote(data);\n  }\n\n  getQuestionList(questionArray, translateLanguageId, categoryId) {\n    const contentType = 'question_translations';\n    const filteredQuestions = getFilteredContents(questionArray, translateLanguageId, contentType, categoryId);\n    const translatedQuestions = getTranslatedContents(filteredQuestions, translateLanguageId, contentType, categoryId);\n\n    return translatedQuestions.map(question => {\n      const { user } = question;\n      const { formatMessage } = this.props.intl\n\n      const { votes } = question;\n\n      const key = \"questionList\";\n      const sendVoteParams = {\n          user_id: this.props.user.id,\n          question_id: question.id,\n          answer_id: null,\n          comment_id: null,\n          status: 1,\n      };\n      const deleteVoteParams = {\n          user_id: this.props.user.id,\n          key : \"question\",\n          vote_id: question.id,\n      };\n      const sendData = { sendVoteParams,  key };\n      const deleteData = { deleteVoteParams,  key };\n\n      const { question_translations } = question;\n      let translator;\n      translator = (\n        <h4 className=\"uk-comment-meta uk-text-right\">\n          { formatMessage({id: \"translated.state\" })}\n        </h4>\n      );\n      if (question_translations.length !== 0) {\n        const { user } = question_translations[0];\n        translator = <Translator user={user} />;\n      }\n\n      return (\n        <li key={question.id} >\n          <p>\n            <span className=\"uk-text-muted\">{ formatMessage({id: question.category.intl_key })}</span>\n            <span className=\"uk-text-meta uk-margin-small-left\">{dayjs(question.created_at).format('YYYY/MM/DD HH:mm:ss')}</span>\n          </p>\n          <p className=\"uk-text-lead uk-text-truncate\" ><Link to={`/questions/${question.id}`}>{`${question.dispText}`}</Link></p>\n          <div className=\"button-area uk-margin-bottom\" >\n          <PostIcons \n              //コンテンツのユーザー\n              user = { user } \n              //ログインユーザー\n              loginUser = { this.props.user  } \n              votes = { votes }\n              sendData = { sendData }\n              deleteData = { deleteData }\n              editLink = {`/questions/edit/${question.id}`}\n              translateLink = {`/question_translations/${question.id}`}\n              onClickSendVote = {this.sendVote.bind(this)}\n              onClickDeleteVote = {this.deleteVote.bind(this)}\n              translate = { true }\n          />\n          </div>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div>\n              <PostUser user={user} />\n            </div>\n            <div className=\"uk-width-expand\" >\n              { translator }\n            </div>\n          </div>\n        </li>\n      )\n    });\n  }\n\n  getQuestionListView(questionArray, translateLanguageId, categoryId) {\n    const questionList = this.getQuestionList(questionArray, translateLanguageId, categoryId);\n\n    return (\n      <div>\n        <ul className=\"uk-list uk-list-divider uk-list-large\">\n          {questionList}\n        </ul>\n      </div>\n    );\n  }\n\n  render() {\n    const { questionArray, translateLanguageId, categoryId } = this.props;\n    const content = this.getQuestionListView(questionArray, translateLanguageId, categoryId);\n\n    return (\n      <div>\n        {content}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  const { categoryId } = state.ctgr;\n  const { intl } = state;\n\n  return {\n    user,\n    categoryId,\n    intl\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    //評価機能\n    handlePostVote: (data) => dispatch(postVote(data)),\n    handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(QuestionListView));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport QuestionListView from './QuestionListView';\n\nclass QuestionList extends Component {\n\n  componentDidMount() {\n    const { questionArray } = this.props.state.questions;\n    const categoryId = this.props.state.ctgr.categoryId;\n\n    if (questionArray.length !== 0) {\n      return;\n    }\n\n    let params \n    params = {};\n    if (categoryId !== 0){\n      params = { category_id: categoryId };\n    }\n    this.props.handleFetchData(params);\n  }\n\n  render() {\n    const { isFetching, questionArray } = this.props.state.questions;\n    const { translateLanguageId } = this.props.state.intl;\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    return (\n      <QuestionListView questionArray={questionArray} translateLanguageId={translateLanguageId} loginUser={this.props.state.auth.user.id}/>\n    );\n  }\n}\n\nexport default QuestionList;\n","import { connect } from 'react-redux';\nimport { fetchQuestionList } from '../actions/Question';\nimport QuestionList from '../components/QuestionList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (queryData) => dispatch(fetchQuestionList(queryData)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionList);\n","import React, { Component } from 'react';\nimport { Field } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass LanguageFormSelect extends Component {\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { name, placeholder } =  this.props;\n\n    return (\n      <Field name={name} component=\"select\" className={'form-control uk-select'}>\n        <option value=\"\">{placeholder}</option>\n        <option value=\"1\" >{ formatMessage({id: \"languages.japanese\" })}</option>\n        <option value=\"2\" >{ formatMessage({id: \"languages.english\" })}</option>\n      </Field>\n    );\n  }\n}\n\nexport default injectIntl(LanguageFormSelect);\n","import React, { Component } from 'react';\nimport { Field } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass CategoryFormSelect extends Component {\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { name, placeholder } =  this.props;\n    \n    return (\n      <Field name={name} component=\"select\" className={'form-control uk-select'}>\n        <option value=\"\">{placeholder}</option>\n        <option value=\"1\" >{ formatMessage({id: \"categories.subculture\" })}</option>\n        <option value=\"2\" >{ formatMessage({id: \"categories.culture\" })}</option>\n        <option value=\"3\" >{ formatMessage({id: \"categories.tourism\" })}</option>\n        <option value=\"4\" >{ formatMessage({id: \"categories.music\" })}</option>\n      </Field>\n    );\n  }\n}\n\nexport default injectIntl(CategoryFormSelect);\n","import React, { Component } from 'react';\nimport { Field } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass CountryFormSelect extends Component {\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { id, name, placeholder } =  this.props;\n\n    return (\n      <Field id={id} name={name} component=\"select\" className={'form-control uk-select'}>\n        <option value=\"\">{placeholder}</option>\n        <option value=\"1\" >{ formatMessage({id: \"countries.japan\" })}</option>\n        <option value=\"2\" >{ formatMessage({id: \"countries.usa\" })}</option>\n        <option value=\"3\" >{ formatMessage({id: \"countries.southeastasia\" })}</option>\n      </Field>\n    );\n  }\n}\n\nexport default injectIntl(CountryFormSelect);","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport CategoryFormSelect from './CategoryFormSelect';\nimport { injectIntl } from 'react-intl';\nimport { Persist } from 'formik-persist';\nimport CountryFormSelect from './CountryFormSelect';\n\nclass QuestionForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      // errors.content = formatMessage({id: \"errors.questions.content\"});\n      errors.content = \"errors.questions.content\";\n    }\n    if (!values.country_id) {\n      // errors.country_id = formatMessage({id: \"errors.questions.country_id\"});\n      errors.country_id  = \"errors.questions.country_id\";\n    }\n    if (!values.translate_language_id) {\n      // errors.translate_language_id = formatMessage({id: \"errors.questions.translate_language_id\"});\n      errors.translate_language_id = \"errors.questions.translate_language_id\";\n    }\n    if (!values.category_id) {\n      // errors.category_id = formatMessage({id: \"errors.questions.category_id\"});\n      errors.category_id = \"errors.questions.category_id\";\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues } = this.props;\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: 'placeholders.questions.content'})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n                {touched.content && errors.content && <div className=\"uk-text-warning\">{ formatMessage({id: errors.content}) }</div>}\n                {/* {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>} */}\n                <Persist name=\"question-form\"/>\n              </div>\n              <div className=\"uk-margin uk-grid uk-grid-small uk-child-width-expand@s\" >\n                <div className=\"uk-grid-margin\" >\n\n                  <CountryFormSelect \n                  id={'counrty_id'}\n                  name=\"country_id\" \n                  placeholder={formatMessage({id: \"placeholders.questions.country_id\"})} />\n\n                  {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{ formatMessage({id: errors.country_id}) }</div>}\n                  {/* {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{errors.country_id}</div>} */}\n                </div>\n                <div className=\"uk-grid-margin\" >\n                  <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.questions.translate_language_id\"})} />\n                  {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{ formatMessage({id: errors.translate_language_id}) }</div>}\n                  {/* {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>} */}\n                </div>\n\n                <div className=\"uk-grid-margin\" >\n                  <CategoryFormSelect name=\"category_id\" placeholder={formatMessage({id: \"placeholders.questions.category_id\"})} />\n                  {touched.category_id && errors.category_id && <div className=\"uk-text-warning\">{ formatMessage({id: errors.category_id}) }</div>}\n                  {/* {touched.category_id && errors.category_id && <div className=\"uk-text-warning\">{errors.category_id}</div>} */}\n                </div>\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-default\" >{formatMessage({id: \"placeholders.questions.submit_btn\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(QuestionForm);","import React from 'react';\nimport QuestionList from '../containers/QuestionList';\nimport QuestionForm from './QuestionForm';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\n\nclass Home extends React.Component {\n\n  submitQuestionForm(formData) {\n    try {\n      const { user, isLoggedIn } = this.props.state.auth;\n      console.log(\"this.props\",this.props);\n      if (!isLoggedIn) {\n        const { history } = this.props;\n        this.props.alertMessage(\"ログインしてください。\");\n        return history.push(\"/users/login\");\n      }\n      const { content, translate_language_id, country_id, category_id } = formData;\n      const user_id = user.id;\n      const postData = { content, user_id, translate_language_id, country_id, category_id };\n      return this.props.handleSubmit(postData);\n    } catch (e) {\n      console.log('e.message', e.message);\n      return;\n    }\n  }\n\n  selectedCategory(value) {\n    switch(value) {\n      case \"all\" :\n        return 0;\n      case \"subculture\":\n        return 1;\n      case \"culture\":\n        return 2;\n      case \"tourism\":\n        return 3;\n      case \"music\":\n        return 4;\n      default:\n        return 0;\n    }\n  }\n\n  onChangeLanguage(locale, e) {\n    e.preventDefault();\n    e.stopPropagation();\n    localStorage.setItem('locale', locale);\n    // かなり不適切な書き方だが一旦ここでリダイレクトさせるようにしておく\n    window.location.href = '/';\n    return;\n  }\n\n  changeCateogryfunction(value) {\n     this.props.changeCategory(value);\n     const categoryId = this.selectedCategory(value);\n     let params;\n     params = {};\n     if (categoryId !== 0) {\n       params = { category_id: categoryId };\n     }\n     this.props.handleFetchData(params);\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { locale, translateLanguageId } = this.props.state.intl;\n    const { category } = this.props.state.ctgr;\n    const { auth } = this.props.state;\n    const questionFormInitVals = {\n      content: '',\n      country_id: '',\n      translate_language_id: '',\n      category_id: ''\n    };\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-width-auto uk-margin-bottom uk-text-right\" >\n          {/* <select className=\"uk-select\" value={locale} onChange={this.onChangeLanguage.bind(this)} >\n              <option value=\"ja\" >{ formatMessage({id: \"languages.japanese\" })}</option>\n              <option value=\"en\" >{ formatMessage({id: \"languages.english\" })}</option>\n              </select> */}\n          <span>\n            <a href=\"/\" onClick={this.onChangeLanguage.bind(this, 'ja')} >\n              { formatMessage({id: \"languages.japanese\" })}\n            </a>\n          </span>\n          <span className=\"uk-margin-small-left\">\n            <a href=\"/\" onClick={this.onChangeLanguage.bind(this, 'en')} >\n              { formatMessage({id: \"languages.english\" })}\n            </a>\n          </span>\n        </div>\n        <QuestionForm initialValues={questionFormInitVals} loginUser={auth} onSubmit={this.submitQuestionForm.bind(this)} />\n        {/* 言語切り替え */}\n        <h3 className=\"uk-heading-line\"><span>{ formatMessage({id: \"titles.question_list\" })}</span></h3>\n        {/* カテゴリー切り替え */}\n        <div className=\"uk-margin\">\n          <select className=\"uk-select\" value={category} onChange={e => this.changeCateogryfunction( e.target.value )} >\n            <option value=\"all\" >{ formatMessage({id: \"categories.all\" })}</option>\n            <option value=\"subculture\" >{ formatMessage({id: \"categories.subculture\" })}</option>\n            <option value=\"culture\" >{ formatMessage({id: \"categories.culture\" })}</option>\n            <option value=\"tourism\" >{ formatMessage({id: \"categories.tourism\" })}</option>\n            <option value=\"music\" >{ formatMessage({id: \"categories.music\" })}</option>\n          </select>\n        </div>\n        <QuestionList translate_language_id={translateLanguageId}/>\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(Home);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const UPDATE_CURRENT_LANGUAGE = Symbol('UPDATE_CURRENT_LANGUAGE');\n\n\nexport const updateCurrentLanguage = createAction(UPDATE_CURRENT_LANGUAGE);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const UPDATE_CURRENT_CATEGORY = Symbol('UPDATE_CURRENT_CATEGORY');\nexport const updateCurrentCategory = createAction(UPDATE_CURRENT_CATEGORY);","import { createAction } from 'redux-actions';\n\nexport const ACTION_ALERT_MESSAGE = Symbol('ACTION_ALERT_MESSAGE');\n\nexport const actionAlertMessage = createAction(ACTION_ALERT_MESSAGE);\n\n","import { connect } from 'react-redux';\nimport Home from '../components/Home';\nimport {\n  postQuestionData,\n  fetchQuestionList\n} from '../actions/Question';\nimport {\n  updateCurrentLanguage,\n} from '../actions/Intl';\nimport {\n  updateCurrentCategory,\n} from '../actions/Category';\nimport {\n  actionAlertMessage,\n} from '../actions/Notification';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleSubmit: (postData) => dispatch(postQuestionData(postData)),\n    changeLanguage: (locale) => dispatch(updateCurrentLanguage(locale)),\n    changeCategory: (category) => dispatch(updateCurrentCategory(category)),\n    handleFetchData: (queryData) => dispatch(fetchQuestionList(queryData)),\n    alertMessage: (message) => dispatch(actionAlertMessage(message)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\n//<AnswerForm qId={this.qId} initialValues={answerFormInitVals} onSubmit={this.handleSubmit.bind(this)} />\n//この中のqId={this.qId} initialValues={answerFormInitVals} onSubmit={this.handleSubmit.bind(this)は\n//props（プロパティーの中に)入る。props.qIdという形式で値を取り出すことができる。\n\nclass AnswerForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.answers.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.answers.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues } = this.props;\n    const { formatMessage } = this.props.intl;\n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: 'placeholders.answers.content'})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n                {touched.content && errors.content && <div className=\"uk-text-warning\" >{errors.content}</div>}\n              </div>\n              <div className=\"uk-grid-margin\" >\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: 'placeholders.answers.translate_language_id'})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\" >{errors.translate_language_id}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"placeholders.answers.submit_btn\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(AnswerForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const CHANGE_ANSWER_FORM_CONTENT = Symbol('CHANGE_ANSWER_FORM_CONTENT');\nexport const FETCH_ANSWER_LIST = Symbol('FETCH_ANSWER_LIST');\nexport const FETCH_ANSWER = Symbol('FETCH_ANSWER');\nexport const POST_ANSWER_DATA = Symbol('POST_ANSWER_DATA');\nexport const INITIALIZE_FORM = Symbol('INITIALIZE_FORM');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const SAVE_ANSWER_DATA = Symbol('SAVE_ANSWER_DATA');\nexport const DELETE_ANSWER = Symbol('DELETE_ANSWER');\n\nexport const changeAnswerFormContent = createAction(CHANGE_ANSWER_FORM_CONTENT);\nexport const fetchAnswerList = createAction(FETCH_ANSWER_LIST);\nexport const fetchAnswer = createAction(FETCH_ANSWER);\nexport const postAnswerData = createAction(POST_ANSWER_DATA);\nexport const initializeForm = createAction(INITIALIZE_FORM);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const saveAnswerData = createAction(SAVE_ANSWER_DATA);\nexport const deleteAnswer = createAction(DELETE_ANSWER);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_COMMENT_DATA_SUCCESS = Symbol('RECEIVE_COMMENT_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const FETCH_SINGLE_COMMENT = Symbol('FETCH_SINGLE_COMMENT');\nexport const FETCH__COMMENT_WITH_USER_LIST = Symbol('FETCH__COMMENT_WITH_USER_LIST');\nexport const POST_COMMENT = Symbol('POST_COMMENT');\nexport const UPDATE_COMMENT = Symbol('UPDATE_COMMENT');\nexport const UPDATED_COMMENT_DATA = Symbol('UPDATED_COMMENT_DATA');\nexport const UPDATED_SINGLE_COMMENT_DATA = Symbol('UPDATED_SINGLE_COMMENT_DATA');\nexport const SAVE_COMMENT_DATA = Symbol('SAVE_COMMENT_DATA');\nexport const DELETE_COMMENT = Symbol('DELETE_COMMENT');\nexport const UPDATED_COMMENT_ARRAY = Symbol('UPDATED_COMMENT_ARRAY');\n\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveCommentDataSuccess = createAction(RECEIVE_COMMENT_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const postComment = createAction(POST_COMMENT);\nexport const fetchSingleComment = createAction(FETCH_SINGLE_COMMENT);\nexport const fetchCommentWithUserList = createAction(FETCH__COMMENT_WITH_USER_LIST);\nexport const updateComment = createAction(UPDATE_COMMENT);\nexport const updatedCommentData = createAction(UPDATED_COMMENT_DATA);\nexport const updatedSingleCommentData = createAction(UPDATED_SINGLE_COMMENT_DATA);\nexport const deleteComment = createAction(DELETE_COMMENT);\nexport const saveCommentData = createAction(SAVE_COMMENT_DATA);\nexport const updatedCommentArray = createAction(UPDATED_COMMENT_ARRAY);\n\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\n//componentの中でdispatchするための設定\nimport { connect } from 'react-redux';\n//評価するための関数\nimport { postVote, deleteVote } from '../actions/Vote';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { sprintf } from 'sprintf-js';\nimport { injectIntl } from 'react-intl';\nimport Translator from './Translator';\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass Comment extends Component {\n\n  sendVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(data, user_id) {\n      if (user_id == null) {\n          return;\n      }\n      return this.props.handleDeleteVote(data);\n  }\n\n  render() {\n    const { id, user, content, isOwner, voteList, questions, commentUser, comments, answerId, intl} = this.props;\n    const currentQuestionId = questions.currentQuestion.id;\n\n    const { formatMessage } = intl;\n    const { commentArray } = comments;\n\n    const key = \"comment\";\n    const sendVoteParams = {\n      user_id: this.props.user.id,\n      question_id: null,\n      answer_id: null,\n      comment_id: id,\n      status: 1,\n      //再レンダリングするためのquestion_id\n      questionId: currentQuestionId,\n    };\n    const deleteVoteParams = {\n      user_id: this.props.user.id,\n      key : \"comment\",\n      //他のコンテンツと共通化するためvote_idというkeyにする\n      vote_id: id,\n      //再レンダリングするためのquestion_id\n      questionId: currentQuestionId,\n    };\n    const sendData = { sendVoteParams,  key };\n    const deleteData = { deleteVoteParams,  key };\n\n    let translator;\n    translator = <h4 className=\"uk-comment-meta uk-text-right\">{formatMessage({id: 'translated.state'})}</h4>;\n    if(typeof commentArray !== 'undefined'){\n      const thisAnswerCommentList = commentArray[answerId] ;\n      const thisCommentData = thisAnswerCommentList.filter(v => v.id === id);\n      const commentTranslated = thisCommentData[0].comment_translations;\n      if (commentTranslated.length !== 0) {\n        const { user } = commentTranslated[0];\n        translator = <Translator user={user} />;\n      }\n    }\n\n    return (\n      <article className=\"uk-comment uk-comment-primary\">\n        <div className=\"uk-comment-header uk-comment-body\">\n          <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n            {content}\n            <br/>\n            <br/>\n            <PostIcons \n                //コンテンツのユーザー\n                user = { user } \n                //ログインユーザー\n                loginUser = { this.props.user } \n                votes = { voteList }\n                sendData = { sendData }\n                deleteData = { deleteData }\n                editLink = {`/comments/edit/${id}`}\n                translateLink = {`/comment_translations/${id}`}\n                onClickSendVote = {this.sendVote.bind(this)}\n                onClickDeleteVote = {this.deleteVote.bind(this)}\n                translate = { true }\n            />\n\n          </p>\n        </div>\n        <div className=\"uk-grid uk-grid-small uk-flex-middle\">\n          <div>\n            <PostUser user={ commentUser } />\n          </div>\n          <div className=\"uk-width-expand\" >\n            { translator }\n          </div>\n        </div>\n      </article>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { questions, comments } = state;\n  const { user } = state.auth;\n  const { intl } = state;\n  return {\n    user,\n    questions,\n    comments,\n    intl,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    //評価機能\n    handlePostVote: (data, questionId) => dispatch(postVote(data, questionId)),\n    handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(Comment))\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Comment from './Comment';\nimport { getFilteredContents, getTranslatedContents } from '../utils/Translations';\n\n\nclass CommentList extends Component {\n\n  render() {\n    const { loginUser, translateLanguageId } = this.props;\n    const commentList = this.props.list ? this.props.list : [];\n    const contentType = 'comment_translations';\n    const filteredCommentList = getFilteredContents(commentList, translateLanguageId, contentType);\n    const translatedCommentList = getTranslatedContents(filteredCommentList, translateLanguageId, contentType);\n\n    return (\n      <ul className=\"uk-comment-list\" >\n        { translatedCommentList.map((v, i) => {\n            const isOwner = loginUser.id === v.user.id;\n            const voteState = v.votes;\n\n            return (\n              <li className=\"uk-margin-small-top\" key={i} >\n                <Comment id={v.id} answerId={v.answer_id} commentUser={v.user} content={v.dispText} isOwner={isOwner} voteList={ voteState } />\n              </li>\n            );\n        })}\n      </ul>\n    );\n  }\n}\n\nexport default CommentList;\n","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { Persist } from 'formik-persist';\nimport { injectIntl } from 'react-intl';\n\nclass CommentForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.comments.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.comments.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues, state } = this.props;\n    const { formatMessage } = this.props.intl;\n    const buttonStr = formatMessage({id: 'placeholders.comments.submit_btn'});\n    const postButton = state.auth.isLoggedIn\n                     ? <div className=\"uk-margin\"><button className=\"uk-button uk-button-default\" >{buttonStr}</button></div>\n                     : <a class=\"uk-button uk-button-default\" href='/users/login'>{buttonStr}</a>;\n\n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: 'placeholders.comments.content'})}\n                     rows=\"3\"\n                     className={'form-control uk-textarea'}\n                />\n                <Persist name={`\"comment-form\"${values.answer_id}`}/>\n                {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: 'placeholders.comments.translate_language_id'})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n              </div>\n              {postButton}\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    state\n  };\n};\n\nexport default connect(mapStateToProps)(injectIntl(CommentForm));\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport Linkify from 'react-linkify';\nimport CommentList from './CommentList';\nimport CommentForm from './CommentForm';\nimport dayjs from 'dayjs';\nimport { getFilteredContents, getTranslatedContents } from '../utils/Translations';\nimport { injectIntl } from 'react-intl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { sprintf } from 'sprintf-js';\nimport Translator from './Translator';\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass AnswerList extends Component {\n  constructor(props) {\n    super(props);\n    this.qId = this.props.qId;\n    //ここからはコメント機能を実装するところ\n    this.state = {\n      buttonState: {},//空のオブジェクト\n      voteState: {},//評価のための\n    };\n  }\n\n  componentWillMount() {\n    const question_id = this.props.qId;\n    /* const translate_language_id = this.props.translateLanguageId;*/\n    this.props.handleFetchData({ question_id });\n  }\n\n  onClickCommentForm(formData) {\n    const { user } = this.props.state.auth;\n    const { answer_id, translate_language_id, content } = formData;\n    const answerIds = this.props.state.answers.answerArray.map((v) =>{ return v.id })\n    const postData = {\n      user_id: user.id,\n      answer_id,\n      translate_language_id,\n      content,\n      question_id: this.qId,\n      current_translate_language_id: this.translateLanguageId,\n      //翻訳済みコメントのリストを取得するためのAnswer_idリスト\n      answerIdList: answerIds,\n    };\n    return this.props.handlePostComment(postData);\n  }\n\n  getComment(answerId) {\n\n    const { buttonState } = this.state;\n\n    if (buttonState[answerId] !== \"open\") {\n      return \"\";\n    }\n\n    const initialValues = {\n      answer_id: answerId,\n      content: \"\",\n      translate_language_id: \"\",\n    };\n    return (\n      <div className=\"uk-margin-bottom\" style={{\"paddingLeft\": \"30px\"}} >\n        {/*commentFormはコメントを投稿する場所*/}\n        <CommentForm form={`commentForm_${answerId}`} onSubmit={this.onClickCommentForm.bind(this)} initialValues={initialValues} />\n      </div>\n    );\n  }\n\n  onClickReply(answerId) {\n    //値がtrueかfalseか値を取得\n    let { buttonState } = this.state;\n\n    if (buttonState[answerId] && buttonState[answerId] === \"open\") {\n      buttonState[answerId] = \"close\";\n      this.setState({buttonState});\n      return\n    } else {\n      buttonState[answerId] = \"open\";\n      this.setState({buttonState});\n      return\n    }\n  }\n\n  sendVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(data, user_id) {\n      if (user_id == null) {\n          return;\n      }\n      return this.props.handleDeleteVote(data);\n  }\n\n  getAnswerList(answerArray, translateLanguageId) {\n    const { formatMessage } = this.props.intl;\n    const loginUser = this.props.state.auth.user;\n\n    const contentType = 'answer_translations';\n    const filteredAnswers = getFilteredContents(answerArray, translateLanguageId, contentType);\n    const translatedAnswers = getTranslatedContents(filteredAnswers, translateLanguageId, contentType);\n\n\n    return translatedAnswers.map(answer => {\n\n      const { user } = answer;\n      const { votes } = answer;\n\n      const key = \"answer\";\n      const sendVoteParams = {\n        user_id: this.props.state.auth.user.id,\n        question_id: null,\n        answer_id: answer.id,\n        comment_id: null,\n        status: 1,\n        //再レンダリングするためのquestion_id\n        questionId: this.props.qId,\n      };\n      const deleteVoteParams = {\n        user_id: this.props.state.auth.user.id,\n        key : \"answer\",\n        //他のコンテンツと共通化するためvote_idというkeyにする\n        vote_id: answer.id,\n        //再レンダリングするためのquestion_id\n        questionId: this.props.qId,\n      };\n      const sendData = { sendVoteParams,  key };\n      const deleteData = { deleteVoteParams,  key };\n\n      const commentForm = this.getComment(answer.id);\n\n      const { answer_translations } = answer;\n\n      let translator;\n      translator = <h4 className=\"uk-comment-meta uk-text-right\">{formatMessage({id: 'translated.state'})}</h4>;\n      if (answer_translations.length !== 0) {\n        const { user } = answer_translations[0];\n        translator = <Translator user={user} />;\n      }\n\n      return (\n        <li key={answer.id} >\n          <article className=\"uk-comment\">\n            <div className=\"uk-comment-header uk-comment-body\">\n              <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n                <Linkify properties={{ target: '_blank'}} >{answer.dispText}</Linkify>\n                <br/>\n                <br/>\n                <PostIcons \n                    //コンテンツのユーザー\n                    user = { user } \n                    //ログインユーザー\n                    loginUser = { this.props.state.auth.user } \n                    votes = { votes }\n                    sendData = { sendData }\n                    deleteData = { deleteData }\n                    editLink = {`/answers/edit/${answer.id}`}\n                    translateLink = {`/answer_translations/${answer.id}`}\n                    onClickSendVote = {this.sendVote.bind(this)}\n                    onClickDeleteVote = {this.deleteVote.bind(this)}\n                    translate = { true }\n                />\n\n              </p>\n              <p className=\"uk-text-meta\">{dayjs(answer.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n\n            </div>\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n              <div>\n                <PostUser user={ answer.user } />\n              </div>\n              <div className=\"uk-width-expand\" >\n                { translator }\n              </div>\n            </div>\n          </article>\n          <hr className=\"uk-divider-small\" />\n          <div className=\"uk-margin-bottom\" >\n            {/*CommentListはすでに投稿されたコメントの一覧を表示する*/}\n            <CommentList list={answer.comments} loginUser={loginUser} translateLanguageId={translateLanguageId} />\n            <div className=\"uk-text-right uk-margin-top\">\n              <p onClick={this.onClickReply.bind(this,answer.id)}><FontAwesomeIcon icon={['far','comment-dots']} color=\"black\" size=\"2x\"/></p>\n            </div>\n          </div>\n\n          {commentForm}\n\n        </li>\n      );\n    });\n  }\n\n  render() {\n    const { isFetching, answerArray } = this.props.state.answers;\n    const { formatMessage } = this.props.intl;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const { translateLanguageId } = this.props;\n    const answerList = this.getAnswerList(answerArray, translateLanguageId);\n\n    if (answerList.length === 0) {\n      return (\n        <div>\n          <h4 className=\"uk-text-success\">{formatMessage({id: \"messages.empty_answers\"})}</h4>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <ul className=\"uk-list uk-list-divider uk-list-large\" >\n          { answerList }\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(AnswerList);\n","import { connect } from 'react-redux';\nimport { fetchAnswerList } from '../actions/Answer';\nimport { postComment } from '../actions/Comment';\nimport AnswerList from '../components/AnswerList';\n//評価するための関数\nimport { postVote, deleteVote } from '../actions/Vote';\n\n\n\n//this.propsを取得する\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (data) => dispatch(fetchAnswerList(data)),\n        handlePostComment: (data) => dispatch(postComment(data)),\n        //評価機能\n        handlePostVote: (data) => dispatch(postVote(data)),\n        //評価の削除機能\n        handleDeleteVote: (data) => dispatch(deleteVote(data)),\n    };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerList);\n","'use strict';\n\nexport function isEmptyObject(obj) {\n  return !Object.keys(obj).length;\n}\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport Linkify from 'react-linkify';\nimport AnswerForm from './AnswerForm';\nimport AnswerList from '../containers/AnswerList';\nimport dayjs from 'dayjs';\nimport { sprintf } from 'sprintf-js';\nimport { injectIntl } from 'react-intl';\nimport { isEmptyObject } from '../utils';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Translator from './Translator';\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass QuestionView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.qId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getQuestionById(this.qId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      //authの中にあるuserキーに対応するvalueを取り出す。という意味\n      const { user } = this.props.state.auth;\n      //formDataの中のcontent,translate_langugase_idを取り出す\n      const { content, translate_language_id } = formData;\n      const question_id = this.qId;\n      const user_id = user.id;\n      /* const { translate_language_id } = currentQuestion;*/\n      return this.props.handleSubmit({content, question_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  getTranslatedQuestion(question, translateLanguageId) {\n    if (question.translate_language_id === translateLanguageId) {\n      question.dispText = question.content;\n      return question;\n    }\n    const questionTranslation = question.question_translations.filter(question => {\n      //「DBに保存されている言語id」と「画面に表示されている言語」が一致している要素だけを取得する。[0]とすることで最初にフィルタリングされたものを取り出す。\n      return (question.translate_language_id === translateLanguageId);\n    })[0];\n\n    question.dispText = questionTranslation.content;\n    return question;\n  }\n\n  sendVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(data, user_id) {\n      if (user_id == null) {\n          return;\n      }\n      return this.props.handleDeleteVote(data);\n  }\n\n  getAnswerForm(currentQuestion, loginUser) {\n    const { formatMessage } = this.props.intl;\n    const { intl_key } = currentQuestion.country;\n    if (currentQuestion.country_id !== loginUser.country_id) {\n      const temp = formatMessage({id: \"messages.you_are_not_target\"});\n      const message = sprintf(temp, formatMessage({id: intl_key}));\n      return (\n        <div>\n          <p className=\"uk-text-meta\">{message}</p>\n        </div>\n      );\n    }\n\n    const answerFormInitVals = { content: '', translate_language_id: '' };\n    return (\n      <AnswerForm qId={this.qId} initialValues={answerFormInitVals} onSubmit={this.handleSubmit.bind(this)}/>\n    );\n  }\n\n  getTranslateUser(img) {\n    const { formatMessage } = this.props.intl;\n    const msg = formatMessage({id: \"translated.name\"});\n\n    return (\n      <div className=\"uk-text-right\">\n        <div className=\"uk-comment-meta uk-display-inline-block\" style={{padding: '0 10px'}}>{ msg }</div>\n        <div className=\"uk-display-inline-block\">\n          <img className=\"uk-comment-avatar uk-border-circle uk-text-right\" src={img} width=\"35\" height=\"35\" alt=\"\" />\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { currentQuestion } = this.props.state.questions;\n    const { translateLanguageId } = this.props.state.intl;\n    const { formatMessage } = this.props.intl;\n\n    if (isEmptyObject(currentQuestion)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const loginUser = this.props.state.auth.user;\n    const question = this.getTranslatedQuestion(currentQuestion, translateLanguageId);\n    const { user, votes } = currentQuestion;\n    const answerForm = this.getAnswerForm(currentQuestion, loginUser);\n\n    const key = \"questionView\";\n    const sendVoteParams = {\n        user_id: this.props.state.auth.user.id,\n        question_id: currentQuestion.id,\n        answer_id: null,\n        comment_id: null,\n        status: 1,\n    };\n    const deleteVoteParams = {\n        user_id: this.props.state.auth.user.id,\n        key : \"question\",\n        vote_id: currentQuestion.id,\n    };\n    const sendData = { sendVoteParams,  key };\n    const deleteData = { deleteVoteParams,  key };\n\n    const { question_translations } = question;\n    let translator;\n    translator = <h4 className=\"uk-comment-meta uk-text-right\">{formatMessage({id: 'translated.state'})}</h4>;\n    if (question_translations.length !== 0) {\n      const { user } = question_translations[0];\n      translator = <Translator user={user} />;\n    }\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n          <p className=\"uk-text-muted\">{ question.category.category }</p>\n          <p>\n            <Linkify properties={{ target: '_blank'}} >{question.dispText}</Linkify>\n            <br/>\n            <br/>\n            <PostIcons\n              user = { user }\n              loginUser = { loginUser }\n              votes = { votes }\n              sendData = { sendData }\n              deleteData = { deleteData }\n              editLink = {`/questions/edit/${this.qId}`}\n              translateLink = {`/question_translations/${this.qId}`}\n              onClickSendVote = {this.sendVote.bind(this)}\n              onClickDeleteVote = {this.deleteVote.bind(this)}\n              translate = { true }\n            />\n          </p>\n          <p className=\"uk-text-meta\">{dayjs(question.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div>\n              <PostUser user={user} />\n            </div>\n            <div className=\"uk-width-expand\" >\n                { translator }\n            </div>\n          </div>\n        </div>\n\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.answer_list\"})}</span></h3>\n\n        <div className=\"uk-margin-bottom\">\n          { answerForm }\n        </div>\n          <AnswerList qId={this.qId} translateLanguageId={translateLanguageId} />\n        <hr className=\"uk-divider-icon\" />\n\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default injectIntl(QuestionView);\n","import { connect } from 'react-redux';\nimport QuestionView from '../components/QuestionView';\nimport {\n    fetchQuestion\n} from '../actions/Question';\nimport {\n    postAnswerData,\n    fetchAnswerList\n} from '../actions/Answer';\n//評価するための関数\nimport {\n    postVote,\n    deleteVote\n} from '../actions/Vote';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getQuestionById: (id) => dispatch(fetchQuestion(id)),\n        handleSubmit: (postData) => dispatch(postAnswerData(postData)),\n        fetchAnswers: (question_id) => dispatch(fetchAnswerList(question_id)),\n        handlePostVote: (data) => dispatch(postVote(data)),\n        handleDeleteVote: (data) => dispatch(deleteVote(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionView);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport QuestionForm from './QuestionForm';\nimport { isEmptyObject } from '../utils';\n\nclass QuestionEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.qId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getQuestionById(this.qId);\n  }\n\n  notOwnerWillTransfer(currentQuestion) {\n    const owner = currentQuestion.user;\n    const loginUser = this.props.state.auth.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const question_id = this.qId;\n      /* const { translate_language_id } = currentQuestion;*/\n      const saveData = { content, question_id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        question_id: this.qId,\n        history\n      };\n      return this.props.deleteQuestion(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentQuestion } = this.props.state.questions;\n    if (isEmptyObject(currentQuestion)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentQuestion);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>質問の編集</h2>\n        <QuestionForm initialValues={currentQuestion} onSubmit={this.handleSubmit.bind(this)} />\n        <p><button className=\"uk-button uk-button-danger\" onClick={this.onClickDeleteBtn.bind(this)}>この質問を削除</button></p>\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default QuestionEdit;\n","import { connect } from 'react-redux';\nimport QuestionEdit from '../components/QuestionEdit';\nimport {\n  fetchQuestion,\n  saveQuestionData,\n  deleteQuestion,\n} from '../actions/Question';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestionById: (id) => dispatch(fetchQuestion(id)),\n    handleSubmit: (postData) => dispatch(saveQuestionData(postData)),\n    deleteQuestion: (conditions) => dispatch(deleteQuestion(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionEdit);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const CHANGE_QUESTION_LIST_LANGUAGE = Symbol('CHANGE_QUESTION_LIST_LANGUAGE');\n// export const FETCH_QUESTION_LIST = Symbol('FETCH_QUESTION_LIST');\n\nexport const FETCH_NOT_TRANSLATED = Symbol('FETCH_NOT_TRANSLATED');\n\nexport const FETCH_QUESTION = Symbol('FETCH_QUESTION');\nexport const POST_QUESTION_DATA = Symbol('POST_QUESTION_DATA');\nexport const INITIALIZE_FORM = Symbol('INITIALIZE_FORM');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\n\nexport const changeQuestionListLanguage = createAction(CHANGE_QUESTION_LIST_LANGUAGE);\n// export const fetchQuestionList = createAction(FETCH_QUESTION_LIST);\n\nexport const fetchNotTranslated = createAction(FETCH_NOT_TRANSLATED);\n\nexport const fetchQuestion = createAction(FETCH_QUESTION);\nexport const postQuestionData = createAction(POST_QUESTION_DATA);\nexport const initializeForm = createAction(INITIALIZE_FORM);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nclass NotTranslated extends Component {\n\n  constructor(props) {\n    super(props);\n    //タブの切り替えのための要素\n    this.state = {currentTab: 'questions'};\n  }\n\n  componentDidMount() {\n    const { questions } = this.props.state.not_translate;\n    if (questions.length !== 0) {\n      return;\n    }\n    let params = {};\n    this.props.handleFetchData(params);\n  }\n\n  //各カテゴリの翻訳一覧を表示する関数\n  getNotTranslated(contents, url, key) {\n\n    // getNotTranslatedの関数\n    return contents.map((v) => {\n      const { user } = v;\n      const userName = user ? user.name : '不明なユーザー';\n      const profileLink = `/users/profile/${user.id}`;\n      //コンテンツに対応したidを返す関数\n      const id = this.getNotTranslatedId(v, key);\n\n      // ここreturnはmap関数のreturn\n      return (\n        //ここでcontentの種類+そのコンテンツのidの組み合わせをkeyとすることでこのHTML要素が一意になるようにする\n        <li key={`${key}_${v.id}`} >\n        {/* <li> */}\n          {/* 未翻訳の質問を表示する */}\n          <p className=\"uk-text-lead uk-text-truncate\" >\n            <Link to={`/questions/${id}`}>{`${v.content}`}</Link>\n            <Link to={`${url}${v.id}`}><FontAwesomeIcon icon=\"globe-americas\" color=\"steelblue\" size=\"lg\"/></Link>\n          </p>\n          {/* 作成時間を表示する */}\n          <p className=\"uk-text-meta\">{dayjs(v.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          {/* プロフィールを表示する */}\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div className=\"uk-width-auto\">\n              <Link to={profileLink}><img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" /></Link>\n            </div>\n            <div className=\"uk-width-expand\">\n              <h4 className=\"uk-comment-meta uk-margin-remove\"><Link className=\"\" to={profileLink}>{ userName }</Link></h4>\n            </div>\n          </div>\n        </li>\n      );\n    })\n  }\n\n  //コンテンツに対応したidを返す関数\n  getNotTranslatedId(v, key) {\n    switch(key) {\n      case \"questions\":\n        return v.id;\n      case \"answers\":\n        return v.question_id;\n      case \"comments\":\n        return v.answer.question_id;\n    }\n  }\n\n  //コンテンツに対応したurlを付加する関数\n  getNotTranslatedQuestions(contents) {\n    const url = \"/question_translations/\";\n    const key = \"questions\";\n    return this.getNotTranslated(contents, url, key);\n  }\n  getNotTranslatedAnswers(contents) {\n    const url = \"/answer_translations/\";\n    const key = \"answers\";\n    return this.getNotTranslated(contents, url, key);\n  }\n  getNotTranslatedComments(contents) {\n    const url = \"/comment_translations/\";\n    const key = \"comments\";\n    console.log('contents', contents);\n    return this.getNotTranslated(contents, url, key);\n  }\n\n  //現在のユーザーリスト\n  getCurrentTabContents(tabState, currentTab) {\n    //tabState = state.not_translate の中に3つの連想配列が入っている\n    const { questions, answers, comments } = tabState;\n    if (currentTab === 'questions') {\n      return this.getNotTranslatedQuestions(questions);\n    } else if (currentTab === 'answers') {\n      return  this.getNotTranslatedAnswers(answers);\n    } else if (currentTab === 'comments') {\n      return this.getNotTranslatedComments(comments);\n    }\n  }\n\n  onClickTab(newTabKey, e) {\n    e.preventDefault();\n    e.stopPropagation();\n    //stateの状態変更\n    this.setState({\n      currentTab: newTabKey\n    });\n  }\n\n  getTabList() {\n    const { formatMessage } = this.props.intl;\n    const tabData = [\n      {\n        name: formatMessage({id: \"links.question\"}),\n        key: 'questions'\n      },\n      {\n        name: formatMessage({id: \"links.answer\"}),\n        key: 'answers'\n      },\n      {\n        name: formatMessage({id: \"links.comment\"}),\n        key: 'comments'\n      }\n    ];\n\n    return (\n      <ul className=\"uk-tab\" >\n        {tabData.map(v => {\n           //currentTabとkeyが一致したとき、それをactiveにする\n           const active = this.state['currentTab'] === v.key\n                        ? 'uk-active'\n                        : '';\n           return (\n             <li key={v.key} className={active} onClick={this.onClickTab.bind(this, v.key)} >\n               <a href=\"\">{v.name}</a>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  getNotTranslatedView(state) {\n\n    const { isFetching } = state.not_translate;\n\n    //読み込み中であることを示すロゴを表示する\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const tabContents = this.getCurrentTabContents(state.not_translate, this.state.currentTab);\n\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\" >\n        {tabContents}\n      </ul>\n    );\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const content = this.getNotTranslatedView(this.props.state);\n    const tabList = this.getTabList();\n    \n    return (\n      <div>\n        <div className=\"uk-container uk-container-small\">\n          <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.not_translated_list\"})}</span></h3>\n          <br></br>\n        </div>\n        <div className=\"uk-container uk-container-small\">\n          {tabList}\n          {content}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(NotTranslated);\n","import { connect } from 'react-redux';\nimport { fetchNotTranslated } from '../actions/NotTranslated';\nimport NotTranslated from '../components/NotTranslated';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (queryData) => dispatch(fetchNotTranslated(queryData)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NotTranslated);","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport AnswerForm from './AnswerForm';\nimport { isEmptyObject } from '../utils';\n\nclass AnswerEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.answerId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getAnswerById(this.answerId);\n  }\n\n  notOwnerWillTransfer(currentAnswer) {\n    const owner = currentAnswer.user;\n    const loginUser = this.props.state.auth.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { currentAnswer } = this.props.state.answers;\n      const { content, translate_language_id, country_id } = formData;\n      const { history } = this.props;\n      const answer_id = this.answerId;\n      const { question_id } = currentAnswer;\n      /* const { translate_language_id } = currentQuestion;*/\n      const saveData = { content, answer_id, translate_language_id, country_id, history, question_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { currentAnswer } = this.props.state.answers;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        answer_id: this.answerId,\n        question_id: currentAnswer.question_id,\n        history\n      };\n      return this.props.deleteAnswer(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentAnswer } = this.props.state.answers;\n\n    if (isEmptyObject(currentAnswer)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentAnswer);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>回答の編集</h2>\n        <AnswerForm initialValues={currentAnswer} onSubmit={this.handleSubmit.bind(this)} />\n        <p><button className=\"uk-button uk-button-danger\" onClick={this.onClickDeleteBtn.bind(this)}>この回答を削除</button></p>\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default AnswerEdit;\n","import { connect } from 'react-redux';\nimport AnswerEdit from '../components/AnswerEdit';\nimport {\n  fetchAnswer,\n  saveAnswerData,\n  deleteAnswer,\n} from '../actions/Answer';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAnswerById: (id) => dispatch(fetchAnswer(id)),\n    handleSubmit: (postData) => dispatch(saveAnswerData(postData)),\n    deleteAnswer: (params) => dispatch(deleteAnswer(params)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerEdit);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport CommentForm from './CommentForm';\nimport { isEmptyObject } from '../utils';\n\nclass CommentEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.commentId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getCommentById(this.commentId);\n  }\n\n  notOwnerWillTransfer(currentComment) {\n    const owner = currentComment.user;\n    const loginUser = this.props.state.auth.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { currentComment } = this.props.state.comments;\n      const { content, translate_language_id } = formData;\n      const { history } = this.props;\n      const comment_id = this.commentId;\n      const { answer_id } = currentComment;\n      const { question_id } = currentComment.answer;\n      const saveData = { content, comment_id, translate_language_id, history, answer_id, question_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { currentComment } = this.props.state.comments;\n      const { question_id } = currentComment.answer;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        comment_id: this.commentId,\n        question_id,\n        history\n      };\n      return this.props.deleteComment(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentComment } = this.props.state.comments;\n\n    if (isEmptyObject(currentComment)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentComment);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>コメントの編集</h2>\n        <CommentForm initialValues={currentComment} onSubmit={this.handleSubmit.bind(this)} />\n        <p><button className=\"uk-button uk-button-danger\" onClick={this.onClickDeleteBtn.bind(this)}>このコメントを削除</button></p>\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default CommentEdit;\n","import { connect } from 'react-redux';\nimport CommentEdit from '../components/CommentEdit';\nimport {\n  fetchSingleComment,\n  saveCommentData,\n  deleteComment,\n} from '../actions/Comment';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCommentById: (id) => dispatch(fetchSingleComment(id)),\n    handleSubmit: (postData) => dispatch(saveCommentData(postData)),\n    deleteComment: (params) => dispatch(deleteComment(params)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentEdit);\n","import React, { Component } from 'react';\nimport { Formik, Field } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\nclass QuestionTranslatinoForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.translations.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.translations.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          content: '',\n          translate_language_id: ''\n        }}\n        validate={this.validate.bind(this)}\n        enableReinitialize={true}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: 'placeholders.translations.content'})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n              </div>\n              {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.translations.translate_language_id\"})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"buttons.title.post\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(QuestionTranslatinoForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_QUESTION_TRANSLATION_LIST = Symbol('FETCH_QUESTION_TRANSLATION_LIST');\nexport const FETCH_QUESTION_TRANSLATION = Symbol('FETCH_QUESTION_TRANSLATION');\nexport const POST_QUESTION_TRANSLATION_DATA = Symbol('POST_QUESTION_TRANSLATION_DATA');\nexport const INITIALIZE_FORM = Symbol('INITIALIZE_FORM');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATED_SINGLE_QUESTION_TRANSLATION = Symbol('UPDATED_SINGLE_QUESTION_TRANSLATION');\nexport const SAVE_QUESTION_TRANSLATION_DATA = Symbol('SAVE_QUESTION_TRANSLATION_DATA');\nexport const DELETE_QUESTION_TRANSLATION = Symbol('DELETE_QUESTION_TRANSLATION');\n\n\nexport const fetchQuestionTranslationList = createAction(FETCH_QUESTION_TRANSLATION_LIST);\nexport const fetchQuestionTranslation = createAction(FETCH_QUESTION_TRANSLATION);\nexport const postQuestionTranslationData = createAction(POST_QUESTION_TRANSLATION_DATA);\nexport const initializeForm = createAction(INITIALIZE_FORM);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updatedSingleQuestionTranslation = createAction(UPDATED_SINGLE_QUESTION_TRANSLATION);\nexport const saveQuestionTranslationData = createAction(SAVE_QUESTION_TRANSLATION_DATA);\nexport const deleteQuestionTranslation = createAction(DELETE_QUESTION_TRANSLATION);\n\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const POST_VOTE = Symbol('POST_VOTE');\nexport const DELETE_VOTE = Symbol('DELETE_VOTE');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\n\n//createAction(FETCH_QUESTION_LIST)はFETCH_QUESTION_LISTという名前でアクションを発火させる。\nexport const postVote = createAction(POST_VOTE);\nexport const deleteVote = createAction(DELETE_VOTE);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\n\n//componentの中でdispatchするための設定\nimport { connect } from 'react-redux';\n//評価するための関数\nimport { postVote, deleteVote } from '../actions/VoteTranslation';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass QuestionTranslationList extends Component {\n  constructor(props) {\n    super(props);\n    this.qId = this.props.qId;\n  }\n\n  componentWillMount() {\n    this.props.handleFetchData(this.qId);\n  }\n\n  sendVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(data, user_id) {\n      if (user_id == null) {\n          return;\n      }\n      return this.props.handleDeleteVote(data);\n  }\n\n  getTranslationList(translationList, loginUser) {\n    const { formatMessage } = this.props.intl;\n\n    return translationList.map(translation => {\n\n      const key = \"question\";\n      const sendVoteParams = {\n          user_id: this.props.user.id,\n          question_translation_id: translation.id,\n          answer_translation_id: null,\n          commcomment_translation_id: null,\n          status: 1,\n          //再レンダリング用のId\n          questionId: translation.question_id,\n      };\n      const deleteVoteParams = {\n          user_id: this.props.user.id,\n          key : \"question\",\n          //他のコンテンツと共通化するためvote_idというkeyにする\n          vote_id: translation.id,\n          //再レンダリング用のId\n          questionId: translation.question_id,\n      };\n      const sendData = { sendVoteParams,  key };\n      const deleteData = { deleteVoteParams,  key };\n\n      return (\n        <li key={translation.id} >\n          <article className=\"uk-comment\">\n            <div className=\"uk-comment-header uk-comment-body\">\n              <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n                <Linkify properties={{ target: '_blank'}} >{translation.content}</Linkify>\n                <br/>\n                <br/>\n                <PostIcons \n                    //コンテンツのユーザー\n                    user = { translation.user } \n                    //ログインユーザー\n                    loginUser = { loginUser  } \n                    votes = { translation.vote_translations }\n                    sendData = { sendData }\n                    deleteData = { deleteData }\n                    editLink = {`/question_translations/edit/${translation.id}`}\n                    // translateLink = {}\n                    onClickSendVote = {this.sendVote.bind(this)}\n                    onClickDeleteVote = {this.deleteVote.bind(this)}\n                    translate = { false }\n                />\n              </p>\n              <p className=\"uk-text-meta\">{dayjs(translation.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n\n            </div>\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n              <div>\n                <PostUser user={ translation.user } />\n              </div>\n            </div>\n          </article>\n        </li>\n      );})\n\n  }\n\n  render() {\n    const { isFetching, currentTranslationList } = this.props.state.questionTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const translationList = this.getTranslationList(currentTranslationList, loginUser);\n\n    return (\n      <div>\n        <ul className=\"uk-list uk-list-divider uk-list-large\" >\n          {translationList}\n        </ul>\n      </div>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  return {\n    user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      //評価機能\n      handlePostVote: (data) => dispatch(postVote(data)),\n      handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(QuestionTranslationList));\n","import { connect } from 'react-redux';\nimport { fetchQuestionTranslationList } from '../actions/QuestionTranslation';\nimport QuestionTranslationList from '../components/QuestionTranslationList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (question_id) => dispatch(fetchQuestionTranslationList(question_id)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionTranslationList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport QuestionTranslationForm from '../components/QuestionTranslationForm';\nimport QuestionTranslationList from '../containers/QuestionTranslationList';\nimport {\n  fetchQuestion\n} from '../actions/Question';\nimport {\n  fetchAnswerList\n} from '../actions/Answer';\nimport {\n    postQuestionTranslationData\n} from '../actions/QuestionTranslation';\nimport { isEmptyObject } from '../utils';\nimport { injectIntl } from 'react-intl';\nimport PostUser from '../components/PostUser';\n\nclass QuestionTranslationView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.qId = parseInt(params.question_id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getQuestionById(this.qId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id } = formData;\n      if (content === '') {\n        throw new Error('空文字で投稿はできません。');\n      }\n      const { user } = this.props.state.auth;\n      const question_id = this.qId;\n      const user_id = user.id;\n      return this.props.handleSubmit({content, question_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { currentQuestion } = this.props.state.questions;\n    if (isEmptyObject(currentQuestion)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const { user } = currentQuestion;\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n          <p><Linkify properties={{ target: '_blank'}} >{currentQuestion.content}</Linkify></p>\n          <p className=\"uk-text-meta\">{dayjs(currentQuestion.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div>\n              <PostUser user={user} />\n            </div>\n          </div>\n        </div>\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.translation_list\"})}</span></h3>\n        <QuestionTranslationForm qId={this.qId} onSubmit={this.handleSubmit.bind(this)} />\n        <QuestionTranslationList qId={this.qId} />\n        <hr className=\"uk-divider-icon\" />\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestionById: (id) => dispatch(fetchQuestion(id)),\n    fetchAnswers: (question_id) => dispatch(fetchAnswerList(question_id)),\n    handleSubmit: (postData) => dispatch(postQuestionTranslationData(postData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(QuestionTranslationView));\n","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\n\nclass TranslationForm extends Component {\n\n  validate(values) {\n    let errors = {};\n    if (!values.content) {\n      errors.content = '翻訳文を入力してください';\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = '投稿言語を指定してください';\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues } = this.props;\n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        validate={this.validate}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder=\"翻訳文を入力してください\"\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n                {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              </div>\n              <div className=\"uk-margin uk-grid uk-grid-small uk-child-width-expand@s\" >\n                <div className=\"uk-grid-margin\" >\n                  <LanguageFormSelect name=\"translate_language_id\" placeholder=\"投稿言語\" />\n                  {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n                </div>\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >投稿</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default TranslationForm;\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationForm from './TranslationForm';\nimport { isEmptyObject } from '../utils';\n\nclass TranslationEdit extends Component {\n\n  notOwnerWillTransfer(currentTranslation, loginUser) {\n    const owner = currentTranslation.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  render() {\n    const { currentTranslation, handleSubmit, onClickDeleteBtn, loginUser } = this.props;\n\n    if (isEmptyObject(currentTranslation)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentTranslation, loginUser);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>翻訳の編集</h2>\n        <TranslationForm initialValues={currentTranslation} onSubmit={handleSubmit} />\n        <p><button className=\"uk-button uk-button-danger\" onClick={onClickDeleteBtn}>この翻訳を削除</button></p>\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default TranslationEdit;\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationEdit from './TranslationEdit';\n\nclass QuestionTranslationEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.qtId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getQuestionTranslationById(this.qtId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const id = this.qtId;\n      /* const { translate_language_id } = currentTranslation;*/\n      const saveData = { content, id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        id: this.qtId,\n        history\n      };\n      return this.props.deleteQuestionTranslation(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentTranslation } = this.props.state.questionTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    return (\n      <TranslationEdit\n        currentTranslation={currentTranslation}\n        handleSubmit={this.handleSubmit.bind(this)}\n        onClickDeleteBtn={this.onClickDeleteBtn.bind(this)}\n        loginUser={loginUser}\n      />\n    );\n  }\n}\n\nexport default QuestionTranslationEdit;\n","import { connect } from 'react-redux';\nimport QuestionTranslationEdit from '../components/QuestionTranslationEdit';\nimport {\n  fetchQuestionTranslation,\n  saveQuestionTranslationData,\n  deleteQuestionTranslation,\n} from '../actions/QuestionTranslation';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestionTranslationById: (id) => dispatch(fetchQuestionTranslation(id)),\n    handleSubmit: (postData) => dispatch(saveQuestionTranslationData(postData)),\n    deleteQuestionTranslation: (conditions) => dispatch(deleteQuestionTranslation(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionTranslationEdit);\n","import React, { Component } from 'react';\nimport { Formik, Field } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\nclass AnswerTranslatinoForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.translations.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.translations.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          content: '',\n          translate_language_id: ''\n        }}\n        validate={this.validate.bind(this)}\n        enableReinitialize={true}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.translations.content\"})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n              </div>\n              {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.translations.translate_language_id\"})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"buttons.title.post\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(AnswerTranslatinoForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_ANSWER_TRANSLATION_LIST = Symbol('FETCH_ANSWER_TRANSLATION_LIST');\nexport const FETCH_ANSWER_TRANSLATION = Symbol('FETCH_ANSWER_TRANSLATION');\nexport const POST_ANSWER_TRANSLATION_DATA = Symbol('POST_ANSWER_TRANSLATION_DATA');\nexport const SAVE_ANSWER_TRANSLATION_DATA = Symbol('SAVE_ANSWER_TRANSLATION_DATA');\nexport const DELETE_ANSWER_TRANSLATION = Symbol('DELETE_ANSWER_TRANSLATION');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATED_SINGLE_ANSWER_TRANSLATION = Symbol('UPDATED_SINGLE_ANSWER_TRANSLATION');\n\nexport const fetchAnswerTranslationList = createAction(FETCH_ANSWER_TRANSLATION_LIST);\nexport const fetchAnswerTranslation = createAction(FETCH_ANSWER_TRANSLATION);\nexport const postAnswerTranslationData = createAction(POST_ANSWER_TRANSLATION_DATA);\nexport const saveAnswerTranslationData = createAction(SAVE_ANSWER_TRANSLATION_DATA);\nexport const deleteAnswerTranslation = createAction(DELETE_ANSWER_TRANSLATION);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updatedSingleAnswerTranslation = createAction(UPDATED_SINGLE_ANSWER_TRANSLATION);\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\n\nimport { connect } from 'react-redux';\nimport { postVote, deleteVote } from '../actions/VoteTranslation';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass AnswerTranslationList extends Component {\n  constructor(props) {\n    super(props);\n    this.aId = this.props.aId;\n  }\n\n  componentWillMount() {\n    this.props.handleFetchData(this.aId);\n  }\n\n  sendVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(data, user_id) {\n      if (user_id == null) {\n          return;\n      }\n      return this.props.handleDeleteVote(data);\n  }\n\n  getTranslationList(translationList, loginUser) {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\" >\n        {translationList.map(translation => {\n\n          const key = \"answer\";\n          const sendVoteParams = {\n              user_id: this.props.user.id,\n              question_translation_id: null,\n              answer_translation_id: translation.id,\n              commcomment_translation_id: null,\n              status: 1,\n              //再レンダリング用のId\n              answerId: translation.answer_id\n          };\n          const deleteVoteParams = {\n              user_id: this.props.user.id,\n              key : \"answer\",\n              //他のコンテンツと共通化するためvote_idというkeyにする\n              vote_id: translation.id,\n              //再レンダリング用のId\n              answerId: translation.answer_id,\n          };\n          const sendData = { sendVoteParams,  key };\n          const deleteData = { deleteVoteParams,  key };\n                  \n           return (\n             <li key={translation.id} >\n               <article className=\"uk-comment\">\n                 <div className=\"uk-comment-header uk-comment-body\">\n                   <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n                     <Linkify properties={{ target: '_blank'}} >{translation.content}</Linkify>\n                     <br/>\n                     <br/>\n                     <PostIcons \n                        //コンテンツのユーザー\n                        user = { translation.user } \n                        //ログインユーザー\n                        loginUser = { loginUser  } \n                        votes = { translation.vote_translations }\n                        sendData = { sendData }\n                        deleteData = { deleteData }\n                        editLink = {`/answer_translations/edit/${translation.id}`}\n                        // translateLink = {}\n                        onClickSendVote = {this.sendVote.bind(this)}\n                        onClickDeleteVote = {this.deleteVote.bind(this)}\n                        translate = { false }\n                     />\n\n                   </p>\n                   <p className=\"uk-text-meta\">{dayjs(translation.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n                 </div>\n                 <div>\n                   <PostUser user={ translation.user } />\n                 </div>\n               </article>\n             </li>\n           );\n        })}\n      </ul>\n    );\n\n  }\n\n  render() {\n    const { isFetching, currentTranslationList } = this.props.state.answerTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n    const content = this.getTranslationList(currentTranslationList, loginUser);\n    return (\n      <div>\n        {content}\n      </div>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  return {\n    user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      //評価機能\n      handlePostVote: (data) => dispatch(postVote(data)),\n      handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(AnswerTranslationList));\n","import { connect } from 'react-redux';\nimport { fetchAnswerTranslationList } from '../actions/AnswerTranslation';\nimport AnswerTranslationList from '../components/AnswerTranslationList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (answer_id) => dispatch(fetchAnswerTranslationList(answer_id)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerTranslationList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport AnswerTranslationForm from '../components/AnswerTranslationForm';\nimport AnswerTranslationList from '../containers/AnswerTranslationList';\nimport {\n  fetchAnswer,\n  fetchAnswerList\n} from '../actions/Answer';\nimport {\n  postAnswerTranslationData\n} from '../actions/AnswerTranslation';\nimport { isEmptyObject } from '../utils';\nimport { injectIntl } from 'react-intl';\nimport PostUser from '../components/PostUser';\n\nclass AnswerTranslationView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.aId = parseInt(params.answer_id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getAnswerById(this.aId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id } = formData;\n      if (content === '') {\n        const msg = '空文字で投稿はできません。';\n        throw new Error(msg);\n      }\n      const { user } = this.props.state.auth;\n      const answer_id = this.aId;\n      const user_id = user.id;\n      return this.props.handleSubmit({content, answer_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { currentAnswer } = this.props.state.answers;\n    if (isEmptyObject(currentAnswer)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const user = (currentAnswer.user) ? currentAnswer.user : null;\n    const userName = (user) ? user.name : '';\n    const { question_id } = currentAnswer;\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n          <p><Linkify properties={{ target: '_blank'}} >{currentAnswer.content}</Linkify></p>\n          <p className=\"uk-text-meta\">{dayjs(currentAnswer.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div>\n              <PostUser user={user} />\n            </div>\n          </div>\n\n        </div>\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.translation_list\"})}</span></h3>\n        <AnswerTranslationForm aId={this.aId} onSubmit={this.handleSubmit.bind(this)} />\n        <AnswerTranslationList aId={this.aId} />\n        <hr className=\"uk-divider-icon\" />\n        <p><Link to={`/questions/${question_id}`}>{formatMessage({id: \"links.to_question_view\"})}</Link></p>\n        <p><Link to=\"/\">Top</Link></p>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAnswerById: (id) => dispatch(fetchAnswer(id)),\n    fetchAnswers: (question_id) => dispatch(fetchAnswerList(question_id)),\n    handleSubmit: (postData) => dispatch(postAnswerTranslationData(postData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(AnswerTranslationView));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationEdit from './TranslationEdit';\n\nclass AnswerTranslationEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.atId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getAnswerTranslationById(this.atId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const id = this.atId;\n      /* const { translate_language_id } = currentTranslation;*/\n      const saveData = { content, id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        id: this.atId,\n        history\n      };\n      return this.props.deleteAnswerTranslation(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentTranslation } = this.props.state.answerTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    return (\n      <TranslationEdit\n        currentTranslation={currentTranslation}\n        handleSubmit={this.handleSubmit.bind(this)}\n        onClickDeleteBtn={this.onClickDeleteBtn.bind(this)}\n        loginUser={loginUser}\n      />\n    );\n  }\n}\n\nexport default AnswerTranslationEdit;\n","import { connect } from 'react-redux';\nimport AnswerTranslationEdit from '../components/AnswerTranslationEdit';\nimport {\n  fetchAnswerTranslation,\n  saveAnswerTranslationData,\n  deleteAnswerTranslation,\n} from '../actions/AnswerTranslation';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAnswerTranslationById: (id) => dispatch(fetchAnswerTranslation(id)),\n    handleSubmit: (postData) => dispatch(saveAnswerTranslationData(postData)),\n    deleteAnswerTranslation: (conditions) => dispatch(deleteAnswerTranslation(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerTranslationEdit);\n","import React, { Component } from 'react';\nimport { Formik, Field } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\nclass CommentTranslatinoForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.translations.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.translations.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          content: '',\n          translate_language_id: ''\n        }}\n        validate={this.validate.bind(this)}\n        enableReinitialize={true}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.translations.content\"})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n              </div>\n              {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.translations.translate_language_id\"})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"buttons.title.post\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(CommentTranslatinoForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_COMMENT_TRANSLATION_LIST = Symbol('FETCH_COMMENT_TRANSLATION_LIST');\nexport const FETCH_COMMENT_TRANSLATION = Symbol('FETCH_COMMENT_TRANSLATION');\nexport const POST_COMMENT_TRANSLATION_DATA = Symbol('POST_COMMENT_TRANSLATION_DATA');\nexport const SAVE_COMMENT_TRANSLATION_DATA = Symbol('SAVE_COMMENT_TRANSLATION_DATA');\nexport const DELETE_COMMENT_TRANSLATION = Symbol('DELETE_COMMENT_TRANSLATION');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATED_SINGLE_COMMENT_TRANSLATION = Symbol('UPDATED_SINGLE_COMMENT_TRANSLATION');\n\n\nexport const fetchCommentTranslationList = createAction(FETCH_COMMENT_TRANSLATION_LIST);\nexport const fetchCommentTranslation = createAction(FETCH_COMMENT_TRANSLATION);\nexport const postCommentTranslationData = createAction(POST_COMMENT_TRANSLATION_DATA);\nexport const saveCommentTranslationData = createAction(SAVE_COMMENT_TRANSLATION_DATA);\nexport const deleteCommentTranslation = createAction(DELETE_COMMENT_TRANSLATION);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updatedSingleCommentTranslation = createAction(UPDATED_SINGLE_COMMENT_TRANSLATION);\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\n\nimport { connect } from 'react-redux';\nimport { postVote, deleteVote } from '../actions/VoteTranslation';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport PostUser from './PostUser';\nimport PostIcons from './PostIcons';\n\nclass CommentTranslationList extends Component {\n  constructor(props) {\n    super(props);\n    this.commentId = this.props.commentId;\n  }\n\n  componentWillMount() {\n    this.props.handleFetchData(this.commentId);\n  }\n\n  sendVote(data, user_id) {\n    if (user_id == null) {\n        return;\n    }\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(data, user_id) {\n      if (user_id == null) {\n          return;\n      }\n      return this.props.handleDeleteVote(data);\n  }\n\n  getTranslationList(translationList, loginUser) {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\" >\n        {translationList.map(translation => {\n            const key = \"comment\";\n            const sendVoteParams = {\n                user_id: this.props.user.id,\n                question_translation_id: null,\n                answer_translation_id: null,\n                comment_translation_id: translation.id,\n                status: 1,\n                //再レンダリング用のId\n                commentId: translation.comment_id\n            };\n            const deleteVoteParams = {\n                user_id: this.props.user.id,\n                key : \"comment\",\n                //他のコンテンツと共通化するためvote_idというkeyにする\n                vote_id: translation.id,\n                //再レンダリング用のId\n                commentId: translation.comment_id,\n            };\n            const sendData = { sendVoteParams,  key };\n            const deleteData = { deleteVoteParams,  key };\n\n           return (\n             <li key={translation.id} >\n               <article className=\"uk-comment\">\n                 <div className=\"uk-comment-header uk-comment-body\">\n                   <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n                     <Linkify properties={{ target: '_blank'}} >{translation.content}</Linkify>z\n                     <br/>\n                     <br/>\n                     <PostIcons \n                        //コンテンツのユーザー\n                        user = { translation.user } \n                        //ログインユーザー\n                        loginUser = { loginUser  } \n                        votes = { translation.vote_translations }\n                        sendData = { sendData }\n                        deleteData = { deleteData }\n                        editLink = {`/comment_translations/edit/${translation.id}`}\n                        // translateLink = {}\n                        onClickSendVote = {this.sendVote.bind(this)}\n                        onClickDeleteVote = {this.deleteVote.bind(this)}\n                        translate = { false }\n                     />\n                   </p>\n                   <p className=\"uk-text-meta\">{dayjs(translation.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n                 </div>\n                 <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n                   <div>\n                     <PostUser user={ translation.user } />\n                   </div>\n                 </div>\n               </article>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  render() {\n    const { isFetching, currentTranslationList } = this.props.state.commentTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const content = this.getTranslationList(currentTranslationList, loginUser);\n\n    return (\n      <div>\n        {content}\n      </div>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  return {\n    user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      //評価機能\n      handlePostVote: (data) => dispatch(postVote(data)),\n      handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(CommentTranslationList));\n","import { connect } from 'react-redux';\nimport { fetchCommentTranslationList } from '../actions/CommentTranslation';\nimport CommentTranslationList from '../components/CommentTranslationList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (answer_id) => dispatch(fetchCommentTranslationList(answer_id)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentTranslationList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport CommentTranslationForm from '../components/CommentTranslationForm';\nimport CommentTranslationList from '../containers/CommentTranslationList';\nimport {\n  fetchSingleComment,\n} from '../actions/Comment';\nimport {\n  postCommentTranslationData\n} from '../actions/CommentTranslation';\nimport { isEmptyObject } from '../utils';\nimport { injectIntl } from 'react-intl';\nimport PostUser from '../components/PostUser';\n\nclass CommentTranslationView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.commentId = parseInt(params.comment_id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getCommentById(this.commentId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id } = formData;\n      if (content === '') {\n        const msg = '空文字で投稿はできません。';\n        throw new Error(msg);\n      }\n      const { user } = this.props.state.auth;\n      const comment_id = this.commentId;\n      const user_id = user.id;\n      return this.props.handleSubmit({content, comment_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { currentComment } = this.props.state.comments;\n    const { currentQuestion } = this.props.state.questions;\n\n    if (isEmptyObject(currentComment)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const user = (currentComment.user) ? currentComment.user : null;\n    const userName = (user) ? user.name : '';\n    const toQuestionViewLink = !isEmptyObject(currentQuestion)\n                             ? (<p><Link to={`/questions/${currentQuestion.id}`}>{formatMessage({id: \"links.to_question_view\"})}</Link></p>)\n                             : '';                         \n\n    return (\n    <main className=\"uk-container uk-container-small\">\n      <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n        <p><Linkify properties={{ target: '_blank'}} >{currentComment.content}</Linkify></p>\n        <p className=\"uk-text-meta\">{dayjs(currentComment.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n        <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n          <div>\n            <PostUser user={user} />\n          </div>\n        </div>\n      </div>\n      <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.translation_list\"})}</span></h3>\n      <CommentTranslationForm commentId={this.commentId} onSubmit={this.handleSubmit.bind(this)} />\n      <CommentTranslationList commentId={this.commentId} />\n      <hr className=\"uk-divider-icon\" />\n      { toQuestionViewLink }\n      <p><Link to=\"/\">Top</Link></p>\n    </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCommentById: (id) => dispatch(fetchSingleComment(id)),\n    handleSubmit: (postData) => dispatch(postCommentTranslationData(postData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(CommentTranslationView));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationEdit from './TranslationEdit';\n\n\nclass CommentTranslationEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.ctId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    console.log('getCommentTranslationById');\n    this.props.getCommentTranslationById(this.ctId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const id = this.ctId;\n      /* const { translate_language_id } = currentTranslation;*/\n      const saveData = { content, id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        id: this.ctId,\n        history\n      };\n      return this.props.deleteCommentTranslation(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentTranslation } = this.props.state.commentTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    return (\n      <TranslationEdit\n        currentTranslation={currentTranslation}\n        handleSubmit={this.handleSubmit.bind(this)}\n        onClickDeleteBtn={this.onClickDeleteBtn.bind(this)}\n        loginUser={loginUser}\n      />\n    );\n  }\n}\n\nexport default CommentTranslationEdit;\n","import { connect } from 'react-redux';\nimport CommentTranslationEdit from '../components/CommentTranslationEdit';\nimport {\n  fetchCommentTranslation,\n  saveCommentTranslationData,\n  deleteCommentTranslation,\n} from '../actions/CommentTranslation';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCommentTranslationById: (id) => dispatch(fetchCommentTranslation(id)),\n    handleSubmit: (postData) => dispatch(saveCommentTranslationData(postData)),\n    deleteCommentTranslation: (conditions) => dispatch(deleteCommentTranslation(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentTranslationEdit);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Drawer from '@material-ui/core/Drawer';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = {\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: 'auto',\n  },\n};\n\nclass MenuDrawer extends React.Component {\n  state = {\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  };\n\n  toggleDrawer = (side, open) => () => {\n    this.setState({\n      [side]: open,\n    });\n  };\n\n  getLogoutLink(user) {\n    if (!user.id) {\n      return '';\n    }\n    const { history } = this.props;\n    const actionData = { history };\n    return (\n      <Link to=\"/\" onClick={this.props.logout.bind(this, actionData)}>Logout</Link>\n    );\n  }\n\n  render() {\n    const { classes, displayName } = this.props;\n\n    const menuDataList = [\n      {\n        text: 'プロフィール',\n        component: Link,\n        to: '/users/profile_edit',\n      },\n      {\n        text: 'ログアウト',\n        component: Link,\n        to: '/users/logout',\n      },\n    ];\n\n    const sideList = (\n      <div className={classes.list}>\n        <List>\n          {menuDataList.map((menuData, index) => (\n            <ListItem button component={menuData.component} to={menuData.to}  key={index} >\n              {/* <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon> */}\n              <ListItemText primary={menuData.text} />\n            </ListItem>\n          ))}\n        </List>\n      </div>\n    );\n\n    return (\n      <div className=\"uk-display-inline-block\" >\n        <Button onClick={this.toggleDrawer('right', true)}>{ displayName }</Button>\n        <Drawer anchor=\"right\" open={this.state.right} onClose={this.toggleDrawer('right', false)}>\n          <div\n            tabIndex={0}\n            role=\"button\"\n            onClick={this.toggleDrawer('right', false)}\n            onKeyDown={this.toggleDrawer('right', false)}\n          >\n            {sideList}\n          </div>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\nMenuDrawer.propTypes = {\n  classes: PropTypes.object.isRequired,\n  displayName: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(MenuDrawer);\n","import React from 'react';\n/* import MenuDrawer from '../../containers/layouts/MenuDrawer';*/\nimport MenuDrawer from './MenuDrawer';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      anchorEl: null\n    };\n  }\n\n  onClickLogout() {\n    const { user } = this.props.state.auth;\n    if (!user.id) {\n      return '';\n    }\n    const { history } = this.props;\n    const actionData = { history };\n    return this.props.logout(actionData);\n  }\n\n  getMenu(displayName) {\n    const { anchorEl } = this.state;\n    const { formatMessage } = this.props.intl;\n\n    const handleClick = event => {\n      this.setState({ anchorEl: event.currentTarget });\n    };\n\n    const handleClose = () => {\n      this.setState({ anchorEl: null });\n    };\n\n    const handleLogout = () => {\n      handleClose();\n      return this.onClickLogout();\n    };\n\n    const getProfileElem = (auth) => {\n      if (!auth.isLoggedIn) {\n        return '';\n      }\n      const { user } = auth;\n      const menuList = [\n        {\n          text: formatMessage({id: \"links.profile\"}),\n          to: `/users/profile/${user.id}`,\n          icon: \"user\"\n        },\n        {\n          text: formatMessage({id: \"links.profile_edit\"}),\n          to: '/users/profile_edit',\n          icon: \"pencil\",\n        },\n        {\n          text: formatMessage({id: \"links.to_not_translated_list\"}),\n          to: `/not_translated`,\n          icon: \"album\"\n        },\n      ];\n      return menuList.map((v, i) => (\n        <MenuItem key={i} onClick={handleClose}>\n          <Link to={v.to} >\n            <span uk-icon={v.icon} ></span>\n            <span>{v.text}</span>\n          </Link>\n        </MenuItem>\n      ));\n    };\n\n    const getLoginElem = (auth) => {\n      return (auth.isLoggedIn)\n           ? (\n             <MenuItem onClick={handleLogout.bind(this)}>\n               <Link to=\"\" >\n                 <span uk-icon=\"sign-out\" ></span>\n                 <span>{formatMessage({id: \"links.logout\"})}</span>\n               </Link>\n             </MenuItem>\n           )\n           : (\n             <MenuItem onClick={handleClose}>\n               <Link to=\"/users/login\" >\n                 <span uk-icon=\"sign-in\" ></span>\n                 <span>{formatMessage({id: \"links.login\"})}</span>\n               </Link>\n             </MenuItem>\n           );\n    };\n\n    const { auth } = this.props.state;\n    const profileElem = getProfileElem(auth);\n    const loginElem = getLoginElem(auth);\n\n    return (\n      <div className=\"uk-display-inline-block uk-height-1-1\" >\n        <Button\n          aria-owns={anchorEl ? 'simple-menu' : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleClick}\n          className=\"uk-height-1-1\"\n          style={{\"textTransform\": \"none\"}}\n        >\n          {displayName}\n        </Button>\n        <Menu\n          id=\"simple-menu\"\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={handleClose}\n        >\n          {profileElem}\n          {loginElem}\n          <MenuItem onClick={handleClose}>\n            <Link to=\"/users/signup\" >\n              <span uk-icon=\"check\" ></span>\n              <span>{formatMessage({id: \"links.sign_up\"})}</span>\n            </Link>\n          </MenuItem>\n        </Menu>\n      </div>\n    );\n  }\n\n  render() {\n    const { user } = this.props.state.auth;\n    const imagePath = user.image_path ? user.image_path : '/image/profile/blank-profile.png';\n    const displayMenuElem = <img src={imagePath} className=\"uk-border-circle\" width=\"50\" height=\"50\" alt=\"\" />;\n    const menu = this.getMenu(displayMenuElem);\n\n    return (\n      <header className=\"uk-margin-bottom uk-heading-divider uk-grid uk-grid-small\" >\n        <div className=\"uk-width-expand uk-margin-small-left\" >\n          <a href=\"/\" className=\"uk-display-inline-block\" >\n            <img src={`/logo.png`} alt=\"Logo\" style={{ \"maxHeight\": \"60px\" }} />\n          </a>\n          <span className=\"uk-text-meta uk-margin-small-left uk-display-inline-block\">\n            α ver.\n          </span>\n        </div>\n        <div className=\"uk-margin-small-right\">\n          { menu }\n        </div>\n      </header>\n    );\n  }\n};\n\nexport default injectIntl(Header);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const CREATE_USER_ACCOUNT = Symbol('CREATE_USER_ACCOUNT');\nexport const CLICK_SUBMIT = Symbol('CLICK_SUBMIT');\nexport const SAVE_USER_MNEMONIC = Symbol('SAVE_USER_MNEMONIC');\nexport const LOGIN_USER = Symbol('LOGIN_USER');\nexport const LOGIN_USER_JWT = Symbol('LOGIN_USER_JWT');\nexport const LOGOUT_USER = Symbol('LOGOUT_USER');\nexport const UPDATE_USER_DATA = Symbol('UPDATE_USER_DATA');\nexport const SAVE_USER_DATA = Symbol('SAVE_USER_DATA');\nexport const SAVE_USER_PASSWORD = Symbol('SAVE_USER_PASSWORD');\nexport const UPDATED_USER_DATA = Symbol('UPDATED_USER_DATA');\nexport const REMOVE_USER_DATA = Symbol('REMOVE_USER_DATA');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const LOGIN_SUCCESS = Symbol('LOGIN_SUCCESS');\nexport const LOGIN_FAILED = Symbol('LOGIN_FAILED');\nexport const GET_USER_PROFILE = Symbol('GET_USER_PROFILE');\nexport const GET_USER_BY_TOKEN = Symbol('GET_USER_BY_TOKEN');\nexport const UPDATED_PROFILE_DATA = Symbol('UPDATED_PROFILE_DATA');\nexport const PREPARED_AUTH = Symbol('PREPARED_AUTH');\nexport const UPDATED_PROFILE_QUESTION_DATA = Symbol('UPDATED_PROFILE_QUESTION_DATA');\nexport const UPDATED_PROFILE_ANSWER_DATA = Symbol('UPDATED_PROFILE_ANSWER_DATA');\nexport const UPDATED_PROFILE_COMMENT_DATA = Symbol('UPDATED_PROFILE_COMMENT_DATA');\nexport const UPDATED_PROFILE_TRANSLATED_DATA = Symbol('UPDATED_PROFILE_TRANSLATED_DATA');\nexport const SEND_RESET_PASSWORD_MAIL = Symbol('SEND_RESET_PASSWORD_MAIL');\nexport const RESET_PASSWORD = Symbol('RESET_PASSWORD');\nexport const ACTIVATE_USER = Symbol('ACTIVATE_USER');\n\n\nexport const createUserAccount = createAction(CREATE_USER_ACCOUNT);\nexport const clickSubmit = createAction(CLICK_SUBMIT);\nexport const saveUserMnemonic = createAction(SAVE_USER_MNEMONIC);\nexport const loginUser = createAction(LOGIN_USER);\nexport const loginUserJwt = createAction(LOGIN_USER_JWT);\nexport const logoutUser = createAction(LOGOUT_USER);\nexport const saveUserData = createAction(SAVE_USER_DATA);\nexport const saveUserPassword = createAction(SAVE_USER_PASSWORD);\nexport const updateUserData = createAction(UPDATE_USER_DATA);\nexport const updatedUserData = createAction(UPDATED_USER_DATA);\nexport const removeUserData = createAction(REMOVE_USER_DATA);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const loginSuccess = createAction(LOGIN_SUCCESS);\nexport const loginFailed = createAction(LOGIN_FAILED);\nexport const getUserProfile = createAction(GET_USER_PROFILE);\nexport const getUserByToken = createAction(GET_USER_BY_TOKEN);\nexport const updatedProfileData = createAction(UPDATED_PROFILE_DATA);\nexport const preparedAuth = createAction(PREPARED_AUTH);\nexport const updatedProfileQuestionData = createAction(UPDATED_PROFILE_QUESTION_DATA);\nexport const updatedProfileAnswerData = createAction(UPDATED_PROFILE_ANSWER_DATA);\nexport const updatedProfileCommentData = createAction(UPDATED_PROFILE_COMMENT_DATA);\nexport const updatedProfileTranslatedData = createAction(UPDATED_PROFILE_TRANSLATED_DATA);\nexport const sendResetPasswordMail = createAction(SEND_RESET_PASSWORD_MAIL);\nexport const resetPassword = createAction(RESET_PASSWORD);\nexport const activateUser = createAction(ACTIVATE_USER);\n","import { connect } from 'react-redux';\nimport Header from '../../components/layouts/Header';\nimport { logoutUser } from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        logout: (data) => dispatch(logoutUser(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React, { Component, PropTypes } from 'react';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\nimport NotificationsSystem from 'reapop';\nimport theme from 'reapop-theme-wybo';\nimport Header from '../containers/layouts/Header';\nimport { ClipLoader } from 'react-spinners';\nimport ReactGA from 'react-ga';\n\nclass App extends Component {\n  componentWillMount() {\n    this.props.fetchLoginState();\n  }\n\n  componentDidMount() {\n    // const { pathname } = this.props.location;\n    /* console.log(\"appjs-------------\",this.props);*/\n    // ReactGA.set({ page: pathname });\n    // ReactGA.pageview(pathname);\n  }\n\n  handleLogout() {\n    //this.props.dispatch(clickLogout());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { auth } = this.props.state;\n\n    return auth.isPrepared ? (\n      <BrowserRouter >\n        <div className=\"uk-margin-bottom\" >\n          <Header />\n          {children}\n          <NotificationsSystem theme={theme} />\n        </div>\n      </BrowserRouter>\n    ) : (\n      <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n        <ClipLoader />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from '../components/App';\nimport { loginUserJwt } from '../actions/User.js';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchLoginState: () => dispatch(loginUserJwt())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nclass ScrollToTop extends Component {\n  componentDidUpdate(prevProps) {\n    if (this.props.location !== prevProps.location) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n\nexport default withRouter(ScrollToTop);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\nimport CountryFormSelect from '../CountryFormSelect';\n\nclass SignUpForm extends React.Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.name) {\n      errors.name = formatMessage({id: \"errors.sign_ups.name\"});\n    }\n\n    if (!values.mail) {\n      errors.mail = formatMessage({id: \"errors.sign_ups.mail\"});\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.mail)) {\n      errors.mail = formatMessage({id: \"errors.sign_ups.appropriate_mail\"});\n    }\n\n    if (!values.country_id) {\n      errors.country_id = formatMessage({id: \"errors.sign_ups.country\"});\n    }\n\n    if (!values.password) {\n      errors.password = formatMessage({id: \"errors.sign_ups.password\"});\n    }\n\n    if (values.passwordConfirm !== values.password) {\n      errors.passwordConfirm = formatMessage({id: \"errors.sign_ups.confirm_password\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          mail: '',\n          country_id: '',\n          password: '',\n          passwordConfirm: ''\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'name'}\n                     name=\"name\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.name\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.name && errors.name && <div className=\"uk-text-warning\">{errors.name}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'mail'}\n                     name=\"mail\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.mail\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.mail && errors.mail && <div className=\"uk-text-warning\">{errors.mail}</div>}\n              </div>\n\n              <div className=\"uk-margin\" >\n                <CountryFormSelect \n                  id={'counrty_id'}\n                  name=\"country_id\" \n                  placeholder={formatMessage({id: \"placeholders.sign_ups.country\"})} />\n                {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{ formatMessage({id: \"errors.sign_ups.country\"}) }</div>}\n              </div>\n\n              <div className=\"uk-margin\">\n                <Field\n                  id={'password'}\n                     name=\"password\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.password && errors.password && <div className=\"uk-text-warning\">{errors.password}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'passwordConfirm'}\n                     name=\"passwordConfirm\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.confirm_password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.passwordConfirm && errors.passwordConfirm && <div className=\"uk-text-warning\">{errors.passwordConfirm}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.sign_up\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(SignUpForm));\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport SignUpForm from './SignUpForm';\nimport { injectIntl } from 'react-intl';\n\nclass SignUp extends React.Component {\n\n  onClickSubmit(formData) {\n    const { name, mail, country_id, password } = formData;\n    const { history } = this.props;\n    this.props.clickSubmit({ name, mail, country_id, password, history });\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{ formatMessage({id: \"titles.sign_up\"}) }</h2>\n\n        <SignUpForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(SignUp);\n","import { connect } from 'react-redux';\nimport SignUp from '../../components/users/SignUp';\nimport {\n    createUserAccount,\n    saveUserMnemonic\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        clickSubmit: (data) => dispatch(createUserAccount(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass LoginForm extends React.Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.mail) {\n      errors.mail = formatMessage({id: \"errors.login.mail\"});\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.mail)) {\n      errors.mail = formatMessage({id: \"errors.login.appropriate_mail\"});\n    }\n\n    if (!values.password) {\n      errors.password = formatMessage({id: \"errors.login.password\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          mail: '',\n          password: ''\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'mail'}\n                     name=\"mail\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.login.mail\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.mail && errors.mail && <div className=\"uk-text-warning\">{errors.mail}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'password'}\n                     name=\"password\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.login.password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.password && errors.password && <div className=\"uk-text-warning\">{errors.password}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.login\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(LoginForm));\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n/* import { ClipLoader } from 'react-spinners';*/\nimport LoginForm from './LoginForm';\nimport { injectIntl } from 'react-intl';\n\n\nclass Login extends React.Component {\n\n  onClickSubmit(formData) {\n    const { mail, password } = formData;\n    const { history } = this.props;\n    return this.props.handleSubmit({ mail, password, history });\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.login\"})}</h2>\n\n        <LoginForm onSubmit={this.onClickSubmit.bind(this)} />\n        <p><Link to=\"/users/password_reset\" >{formatMessage({id: \"links.password_reset\"})}</Link></p>\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(Login);\n","import { connect } from 'react-redux';\nimport Login from '../../components/users/Login';\nimport {\n    loginUser\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleSubmit: (data) => dispatch(loginUser(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass PasswordResetForm extends Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.mail) {\n      errors.mail = formatMessage({id: \"errors.login.mail\"});\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.mail)) {\n      errors.mail = formatMessage({id: \"errors.login.appropriate_mail\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          mail: '',\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'mail'}\n                     name=\"mail\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.login.mail\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.mail && errors.mail && <div className=\"uk-text-warning\">{errors.mail}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.send\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(PasswordResetForm));\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n/* import { ClipLoader } from 'react-spinners';*/\nimport PasswordResetForm from './PasswordResetForm';\nimport { injectIntl } from 'react-intl';\n\nclass PasswordReset extends Component {\n\n  onClickSubmit(formData) {\n    const { mail } = formData;\n    return this.props.handleSubmit({ mail });\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.password_reset\"})}</h2>\n        <p>{formatMessage({id: \"messages.enter_mail\"})}</p>\n        <PasswordResetForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(PasswordReset);\n","import { connect } from 'react-redux';\nimport PasswordReset from '../../components/users/PasswordReset';\nimport {\n  sendResetPasswordMail\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleSubmit: (data) => dispatch(sendResetPasswordMail(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordReset);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass PasswordForm extends Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.password) {\n      errors.password = formatMessage({id: \"errors.sign_ups.password\"});\n    }\n\n    if (values.passwordConfirm !== values.password) {\n      errors.passwordConfirm = formatMessage({id: \"errors.sign_ups.confirm_password\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          password: '',\n          passwordConfirm: ''\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'password'}\n                     name=\"password\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.password && errors.password && <div className=\"uk-text-warning\">{errors.password}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'passwordConfirm'}\n                     name=\"passwordConfirm\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.confirm_password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.passwordConfirm && errors.passwordConfirm && <div className=\"uk-text-warning\">{errors.passwordConfirm}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.send\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(PasswordForm));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\n/* import { ClipLoader } from 'react-spinners';*/\nimport PasswordForm from './PasswordForm';\nimport { injectIntl } from 'react-intl';\nimport { isEmptyObject } from '../../utils';\n\nclass NewPassword extends Component {\n\n  componentDidMount() {\n    const { params } = this.props.match;\n    const { token } = params;\n    this.token = token;\n    return this.props.fetchUser(token);\n  }\n\n  onClickSubmit(formData) {\n    const { password } = formData;\n    const { id } = this.props.state.auth.user;\n    const { history } = this.props;\n    const token = this.token;\n    return this.props.handleSubmit({ id, password, token, history });\n  }\n\n  render() {\n    const { user, isFetching } = this.props.state.auth;\n\n    if (isFetching) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    if (isEmptyObject(user)) {\n      return (\n        <main className=\"uk-container uk-container-small\">\n          <p>不正なアクセスです</p>\n        </main>\n      );\n    }\n\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.password_reset\"})}</h2>\n        <p>{formatMessage({id: \"messages.enter_new_password\"})}</p>\n        <PasswordForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(NewPassword);\n","import { connect } from 'react-redux';\nimport NewPassword from '../../components/users/NewPassword';\nimport {\n  saveUserPassword,\n  getUserByToken,\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchUser: (token) => dispatch(getUserByToken(token)),\n    handleSubmit: (data) => dispatch(saveUserPassword(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewPassword);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\nimport { isEmptyObject } from '../../utils';\n\nclass Activate extends Component {\n\n  componentDidMount() {\n    const { params } = this.props.match;\n    const { history } = this.props;\n    const { token } = params;\n    this.token = token;\n    return this.props.activateUser({ token, history });\n  }\n\n  render() {\n    const { user, isFetching } = this.props.state.auth;\n\n    if (isFetching) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    if (isEmptyObject(user)) {\n      return (\n        <main className=\"uk-container uk-container-small\">\n          <p>不正なアクセスです</p>\n        </main>\n      );\n    }\n\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.activate\"})}</h2>\n        <p>{formatMessage({id: \"messages.activate_completed\"})}</p>\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(Activate);\n","import { connect } from 'react-redux';\nimport Activate from '../../components/users/Activate';\nimport {\n  activateUser,\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    activateUser: (token) => dispatch(activateUser(token)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Activate);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { connect } from 'react-redux';\nimport { getUserProfile } from '../../actions/User';\nimport QuestionListView from '../../components/QuestionListView';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { isEmptyObject } from '../../utils';\nimport { injectIntl } from 'react-intl';\n\nclass Profile extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.state = {currentTab: 'questions'};\n    this.userId = parseInt(params.id, 10);\n    this.props.fetchUserProfile(this.userId);\n  }\n\n  onClickTab(newTabKey, e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.setState({\n      currentTab: newTabKey\n    });\n  }\n\n  getTabList() {\n    const { formatMessage } = this.props.intl;\n    const tabData = [\n      {\n        name: formatMessage({id: \"links.question\"}),\n        key: 'questions'\n      },\n      {\n        name: formatMessage({id: \"links.answer\"}),\n        key: 'answers'\n      },\n      {\n        name: formatMessage({id: \"links.comment\"}),\n        key: 'comments'\n      },\n      {\n        name: formatMessage({id: \"links.translate\"}),\n        key: 'translates'\n      }\n    ];\n\n    return (\n      <ul className=\"uk-tab\" >\n        {tabData.map(v => {\n           const active = this.state['currentTab'] === v.key\n                        ? 'uk-active'\n                        : '';\n           return (\n             <li className={active} onClick={this.onClickTab.bind(this, v.key)} key={v.key} >\n               <a href=\"\">{v.name}</a>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  getAnswerList(answers) {\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\">\n      {answers.map(answer => {\n        const { user } = answer;\n        const userName = user ? user.name : '不明なユーザー';\n        return (\n          <li key={answer.id} >\n            <p className=\"uk-text-lead uk-text-truncate\" ><Link to={`/questions/${answer.question_id}`}>{`${answer.content}`}</Link></p>\n            <p className=\"uk-text-meta\">{dayjs(answer.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n              <div className=\"uk-width-auto\">\n                <img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" />\n              </div>\n              <div className=\"uk-width-expand\">\n                <h4 className=\"uk-comment-meta uk-margin-remove\">{ userName }</h4>\n              </div>\n            </div>\n          </li>\n        );\n      })}\n      </ul>\n    );\n  }\n\n  getCommentList(comments) {\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\">\n        {comments.map(comment => {\n           const { user, answer } = comment;\n           const userName = user ? user.name : '不明なユーザー';\n           return (\n             <li key={comment.id} >\n               <p className=\"uk-text-lead uk-text-truncate\" ><Link to={`/questions/${answer.question_id}`}>{`${comment.content}`}</Link></p>\n               <p className=\"uk-text-meta\">{dayjs(comment.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n               <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n                 <div className=\"uk-width-auto\">\n                   <img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" />\n                 </div>\n                 <div className=\"uk-width-expand\">\n                   <h4 className=\"uk-comment-meta uk-margin-remove\">{ userName }</h4>\n                 </div>\n               </div>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  getTranslatedList(translates) {\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\">\n        {translates.map(translate => {\n           const link = translate.translation_link;\n           return (\n             <li key={`translate_${translate.key}`} >\n               <p className=\"uk-text-lead uk-text-truncate\" ><Link to={link}>{`${translate.content}`}</Link></p>\n               <p className=\"uk-text-meta\">{dayjs(translate.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  filterTranslatedContent(translate) {\n    const translatedContentArray = [];\n    for (const [key, value] of Object.entries(translate)){\n      value.forEach((e)=>{\n        e[\"key\"]=key+e.id;\n        translatedContentArray.push(e);\n      });\n  　};\n    return translatedContentArray;\n  }\n\n  getCurrentTabContents(tabState, currentTab) {\n    const { questions, answers, comments, translates } = tabState;\n    const { id } = this.props.state.auth.user\n    if (currentTab === 'questions') {\n      return (<QuestionListView questionArray={questions} translateLanguageId={id} />);\n    } else if (currentTab === 'answers') {\n      return this.getAnswerList(answers);\n    } else if (currentTab === 'comments') {\n      return this.getCommentList(comments);\n    } else if (currentTab === 'translates') {\n      const translateArray = this.filterTranslatedContent(translates);\n      return this.getTranslatedList(translateArray);\n    }\n  }\n\n  render() {\n    // とりあえずログインユーザーのプロフィールページを。\n    // propsで渡されたuserIdのプロフィールページを表示するようにする。\n    const { profile } = this.props.state;\n    const { user } = profile;\n    const { formatMessage } = this.props.intl;\n\n    if (isEmptyObject(user)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const tabList = this.getTabList();\n    const userPostList = this.getCurrentTabContents(profile, this.state.currentTab);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-grid uk-grid-small uk-flex-middle uk-margin-bottom\">\n          <div className=\"uk-width-auto uk-flex-first\">\n            <img src={user.image_path} className=\"uk-border-circle\" alt=\"\" width=\"120\" height=\"\" />\n          </div>\n          <div className=\"uk-width-expand\" >\n            <p className=\"uk-text-lead\">{user.name}</p>\n            <p>{formatMessage({id: \"messages.birthplace\"})}: {user.country.name}</p>\n          </div>\n        </div>\n        <div>\n          <p style={{\"whiteSpace\": \"pre-wrap\"}}>{user.profile}</p>\n        </div>\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.post_list\"})}</span></h3>\n        {tabList}\n        {userPostList}\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchUserProfile: (userId) => dispatch(getUserProfile(userId)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(Profile));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from '../LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\nimport CountryFormSelect from '../CountryFormSelect';\n\nclass ProfileForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      image_url: ''\n    };\n  }\n\n  handleImageChange(setFieldValue, e) {\n    const file = e.currentTarget.files[0];\n    setFieldValue(\"image\", file);\n    const createObjectURL = (window.URL || window.webkitURL).createObjectURL || window.createObjectURL;\n    const image_url = createObjectURL(file);\n    this.setState({ image_url });\n  }\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.country_id) {\n      errors.country_id = formatMessage({id: \"errors.profile_edit.country\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { user } = this.props.state.auth;\n    const { formatMessage } = this.props.intl;\n    const { id, name, profile, country_id } = user;\n    const imagePreview = this.state.image_url !== ''\n                       ? (<p><img src={this.state.image_url} alt=\"\" width=\"200\" /></p>)\n                       : '';\n\n    return (\n      <Formik\n      initialValues={{ id, name, profile, country_id, image: ''}}\n        enableReinitialize={true}\n        validate={this.validate}\n        onSubmit={(values, { setSubmitting, setErrors }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} className=\"uk-form-stacked\" >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <label className=\"uk-form-label\">{formatMessage({id: \"titles.profile_edit.user_name\"})}</label>\n                <Field\n                  id={'name'}\n                     name=\"name\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholder.profile_edit.nickname\"})}\n                     className={'uk-form-control uk-input'}\n                />\n                {touched.name && errors.name && <div>{errors.name}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <label className=\"uk-form-label\">{formatMessage({id: \"titles.profile_edit.birthplace\"})}</label>\n\n                <CountryFormSelect \n                  id={'counrty_id'}\n                  name=\"country_id\" \n                  placeholder={formatMessage({id: \"placeholders.sign_ups.country\"})} />\n                {/* <LanguageFormSelect name=\"country_id\" placeholder=\"出身地\" /> */}\n\n                {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{errors.country_id}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <label className=\"uk-form-label\">{formatMessage({id: \"titles.profile_edit.profile\"})}</label>\n                <Field\n                  id={'profile'}\n                     name=\"profile\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholder.profile_edit.profile\"})}\n                     className={'uk-form-control uk-textarea'}\n                     rows=\"5\"\n                />\n                {touched.profile && errors.profile && <div className=\"uk-text-warning\">{errors.profile}</div>}\n              </div>\n              <div className=\"uk-margin js-upload\" uk-form-custom=\"true\" >\n                <label className=\"uk-form-label\">{formatMessage({id: \"titles.profile_edit.user_image\"})}</label>\n                <input id=\"file\" name=\"image\" type=\"file\" onChange={this.handleImageChange.bind(this, setFieldValue)} />\n\n                {touched.image && errors.image && <div>{errors.image}</div>}\n                <button className=\"uk-button uk-button-default\" type=\"button\" tabIndex=\"-1\">{formatMessage({id: \"buttons.profile_edit.select\"})}</button>\n                {imagePreview}\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-primary\" disabled={isSubmitting}>\n                {formatMessage({id: \"buttons.profile_edit.save\"})}\n                </button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    )\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(ProfileForm));\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ClipLoader } from 'react-spinners';\nimport ProfileForm from './ProfileForm';\nimport { injectIntl } from 'react-intl';\n\nclass Profile extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const { id, name, country_id, profile } = this.props.state.auth.user;\n    console.log('user', this.props.state.auth.user);\n\n    this.setState({\n      user_id: id,\n      name,\n      profile,\n      country_id\n    });\n  }\n\n  onClickSubmit(formData) {\n    const { id, name, profile, country_id, image } = formData;\n\n    const postData = {\n      user_id: id,\n      name,\n      profile,\n      country_id,\n      image\n    };\n    this.props.clickedSaveButton(postData);\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.profile.edit\"})}</h2>\n        \n        <ProfileForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(Profile);","import { connect } from 'react-redux';\nimport Profile from '../../components/users/Profile';\nimport {\n    loginUser,\n    saveUserData\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        clickedSaveButton: (postData) => dispatch(saveUserData(postData)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\n","import React, { Component } from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport default class UserOnly extends Component {\n  static contextTypes = {\n    router: PropTypes.object.isRequired\n  }\n\n  componentWillMount() {\n    this.guestWillTransfer(this.props, this.context.router);\n  }\n\n  componentWillUpdate(nextProps) {\n    this.guestWillTransfer(nextProps, this.context.router);\n  }\n\n  guestWillTransfer(props, router) {\n    const { auth } = props.state;\n    const { history } = router;\n    if (!auth.isLoggedIn) {\n      return history.push('/users/login');\n    }\n    return true;\n  }\n\n  render() {\n    return (\n      <Route children={this.props.children} />\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport UserOnly from '../../components/auth/UserOnly';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserOnly);\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport default class GuestOnly extends Component {\n  static contextTypes = {\n    router: PropTypes.object.isRequired\n  }\n\n  componentWillMount() {\n    console.log('hoge');\n    this.userWillTransfer(this.props, this.context.router);\n  }\n\n  componentWillUpdate(nextProps) {\n    this.userWillTransfer(nextProps, this.context.router);\n  }\n\n  userWillTransfer(props, router) {\n    const { auth } = props.state;\n    const { history } = router;\n    if (auth.isLoggedIn) {\n      /* return <Redirect to={{ pathname: '/login', state: { from: this.props.location } }} />;*/\n      return history.replace('/');\n    }\n  }\n\n  render() {\n    return (\n      <Route children={this.props.children} />\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport GuestOnly from '../../components/auth/GuestOnly';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GuestOnly);\n","import ja_JP from './locales/ja_JP';\nimport en_US from './locales/en_US';\n\nexport const locales = {\n  ja: {\n    locale: 'ja',\n    messages: ja_JP,\n    translateLanguageId: 1,\n  },\n  en: {\n    locale: 'en',\n    messages: en_US,\n    translateLanguageId: 2,\n  }\n};\n\nexport const categories = {\n  all: {\n      category: 'all',\n      categoryId: 0,\n  },\n  subculture: {\n      category: 'subculture',\n      categoryId: 1,\n  },\n  culture: {\n      category: 'culture',\n      categoryId: 2,\n  },\n  tourism: {\n      category: 'tourism',\n      categoryId: 3,\n  },\n  music: {\n      category: 'music',\n      categoryId: 4,\n  },\n};","const ja_JP = {\n  \"titles.sign_up\": '新規登録',\n  \"titles.login\": 'ログイン',\n  \"titles.activate\": '認証',\n  \"titles.password_reset\": 'パスワード再設定',\n  \"titles.question_list\": '質問一覧',\n  \"titles.answer_list\": '回答一覧',\n  \"titles.post_list\": '投稿一覧',\n  \"titles.translation_list\": '翻訳一覧',\n  \"titles.not_translated_list\": '未翻訳一覧',\n  \"titles.profile_edit.user_name\": 'ユーザー名',\n  \"titles.profile_edit.birthplace\": '出身地',\n  \"titles.profile_edit.profile\": 'プロフィール',\n  \"titles.profile_edit.user_image\": 'プロフィール画像',\n  \"titles.profile.edit\": 'プロフィール編集',\n  \"messages.empty_answers\": 'まだ回答がありません。最初の投稿者になりましょう！',\n  \"messages.birthplace\": '出身地',\n  \"messages.you_are_not_target\": 'この質問は 「%s」 の方が回答対象者です。',\n  \"messages.enter_mail\": 'メールアドレスを入力してください',\n  \"messages.enter_new_password\": '新しいパスワードを入力してください',\n  \"messages.activate_completed\": '認証処理が完了しました。',\n  \"links.to_not_translated_list\": '未翻訳の一覧を見る',\n  \"links.edit\": '編集',\n  \"links.question\": '質問',\n  \"links.answer\": '回答',\n  \"links.comment\": 'コメント',\n  \"links.translate\": '翻訳',\n  \"links.profile\": 'プロフィール',\n  \"links.profile_edit\": 'プロフィール編集',\n  \"links.sign_up\": '新規登録',\n  \"links.login\": 'ログイン',\n  \"links.logout\": 'ログアウト',\n  \"links.password_reset\": 'パスワードを忘れた',\n  \"links.to_question_view\": '質問ページへ',\n  \"languages.japanese\": '日本語',\n  \"languages.english\": '英語',\n  \"countries.japan\": '日本',\n  \"countries.usa\": 'アメリカ合衆国',\n  \"countries.southeastasia\": '東南アジア',\n  \"categories.all\": 'すべて',\n  \"categories.subculture\": '漫画・アニメ',\n  \"categories.culture\": '文化',\n  \"categories.tourism\": '観光',\n  \"categories.music\": '音楽',\n  \"errors.questions.content\": '質問文を入力してください',\n  \"errors.questions.country_id\": '回答対象国を指定してください',\n  \"errors.questions.translate_language_id\": '投稿言語を指定してください',\n  \"errors.questions.category_id\": 'カテゴリーを指定してください',\n  \"errors.answers.content\": '回答文を入力してください',\n  \"errors.answers.translate_language_id\": '投稿言語を指定してください',\n  \"errors.comments.content\": 'コメントを入力してください',\n  \"errors.comments.translate_language_id\": '投稿言語を指定してください',\n  \"errors.translations.content\": '翻訳を入力してください',\n  \"errors.translations.translate_language_id\": '投稿言語を指定してください',\n  \"errors.sign_ups.name\": 'ユーザー名を入力してください',\n  \"errors.sign_ups.mail\": 'メールアドレスを入力してください',\n  \"errors.sign_ups.country\": '出身地・所在地を選択してください',\n  \"errors.sign_ups.appropriate_mail\": '適切なメールアドレスを指定してください',\n  \"errors.sign_ups.password\": 'パスワードを入力してください',\n  \"errors.sign_ups.confirm_password\": 'パスワードが一致していません',\n  \"errors.login.mail\": 'メールアドレスを入力してください',\n  \"errors.login.appropriate_mail\": '適切なメールアドレスを指定してください',\n  \"errors.login.password\": 'パスワードを入力してください',\n  \"errors.profile_edit.country\": '出身地を選択してください',\n  \"placeholders.sign_ups.name\": '名前',\n  \"placeholders.sign_ups.mail\": 'メールアドレス',\n  \"placeholders.sign_ups.country\": '出身地・所在地',\n  \"placeholders.sign_ups.password\": 'パスワード',\n  \"placeholders.sign_ups.confirm_password\": 'パスワード確認',\n  \"placeholders.login.mail\": 'メールアドレス',\n  \"placeholders.login.password\": 'パスワード',\n  \"placeholders.questions.content\": '質問を入力してください',\n  \"placeholders.questions.country_id\": '回答対象国',\n  \"placeholders.questions.translate_language_id\": '投稿言語',\n  \"placeholders.questions.category_id\": 'カテゴリー',\n  \"placeholders.questions.submit_btn\": '投稿',\n  \"placeholders.answers.content\": '回答を入力してください',\n  \"placeholders.answers.translate_language_id\": '投稿言語',\n  \"placeholders.answers.submit_btn\": '投稿',\n  \"placeholders.comments.content\": 'コメントを入力してください',\n  \"placeholders.comments.translate_language_id\": '投稿言語',\n  \"placeholders.comments.submit_btn\": '投稿',\n  \"placeholders.translations.content\": '翻訳を入力してください',\n  \"placeholders.translations.translate_language_id\": '投稿言語',\n  \"placeholder.profile_edit.profile\": 'プロフィールを入力してください',\n  \"placeholder.profile_edit.country\": '出身地・所在地',\n  \"buttons.title.reply\": '返信',\n  \"buttons.title.post\": '投稿',\n  \"buttons.title.sign_up\": '新規登録',\n  \"buttons.title.login\": 'ログイン',\n  \"buttons.title.send\": '送信',\n  \"buttons.profile_edit.select\": '選択',\n  \"buttons.profile_edit.save\": '保存',\n  \"translated.name\": '翻訳者',\n  \"translated.state\": '未翻訳',\n  \"categories.comic_anime\": '漫画・アニメ',\n  \"categories.culture\": '文化',\n  \"categories.tourism\": '観光',\n  \"categories.music\": '音楽',\n\n};\nexport default ja_JP;\n","const en_US = {\n  \"titles.sign_up\": 'Sign Up',\n  \"titles.login\": 'Login',\n  \"titles.activate\": 'Activation',\n  \"titles.password_reset\": 'Password Reset',\n  \"titles.question_list\": 'Questions',\n  \"titles.answer_list\": 'Answers',\n  \"titles.post_list\": 'Posts',\n  \"titles.translation_list\": 'Translations',\n  \"titles.not_translated_list\": 'Not Translated List',\n  \"titles.profile_edit.user_name\": 'User Name',\n  \"titles.profile_edit.birthplace\": 'Birthplace・Location',\n  \"titles.profile_edit.profile\": 'Profile',\n  \"titles.profile_edit.user_image\": 'Profile Image',\n  \"titles.profile.edit\": 'Profile Edit',\n  \"messages.empty_answers\": 'There is no answer yet. Be the first contributor!',\n  \"messages.birthplace\": 'BirthPlace',\n  \"messages.you_are_not_target\": 'This question is subject to answers in \"%s\".',\n  \"messages.enter_mail\": 'Enter your email address.',\n  \"messages.enter_new_password\": 'Enter new password.',\n  \"messages.activate_completed\": 'Activation is completed.',\n  \"links.to_not_translated_list\": 'See not translated lists',\n  \"links.edit\": 'Edit',\n  \"links.question\": 'Question',\n  \"links.answer\": 'Answer',\n  \"links.comment\": 'Comment',\n  \"links.translate\": 'translate',\n  \"links.profile\": 'Profile',\n  \"links.profile_edit\": 'Profile Edit',\n  \"links.sign_up\": 'Sign Up',\n  \"links.login\": 'Login',\n  \"links.password_reset\": 'Forgot password',\n  \"links.logout\": 'Logout',\n  \"links.to_question_view\": 'to question page',\n  \"languages.japanese\": 'Japanese',\n  \"languages.english\": 'English',\n  \"countries.japan\": 'Japan',\n  \"countries.usa\": 'USA',\n  \"countries.southeastasia\": 'SouthEastAsia',\n  \"categories.all\": 'All',\n  \"categories.subculture\": 'Comic・Anime',\n  \"categories.culture\": 'Culture',\n  \"categories.tourism\": 'Tourism',\n  \"categories.music\": 'Music',\n  \"errors.questions.content\": 'Please write a question text.',\n  \"errors.questions.country_id\": 'Please select target country.',\n  \"errors.questions.translate_language_id\": 'Please select the language.',\n  \"errors.questions.category_id\": 'Please select the cateogry.',\n  \"errors.answers.content\": 'Please write an answer text.',\n  \"errors.answers.translate_language_id\": 'Please select the language.',\n  \"errors.comments.content\": 'Please write an comment text.',\n  \"errors.comments.translate_language_id\": 'Please select the language.',\n  \"errors.translations.content\": 'Please write a translated text.',\n  \"errors.translations.translate_language_id\": 'Please select the language.',\n  \"errors.sign_ups.name\": 'Please enter user name.',\n  \"errors.sign_ups.mail\": 'Please enter your e-mail address.',\n  \"errors.sign_ups.country\": 'Please enter your Birthplace・Location',\n  \"errors.sign_ups.appropriate_mail\": 'Please specify an appropriate email address.',\n  \"errors.sign_ups.password\": 'Please enter password.',\n  \"errors.sign_ups.confirm_password\": 'Password does not match.',\n  \"errors.login.mail\": 'Please enter your e-mail address.',\n  \"errors.login.appropriate_mail\": 'Please specify an appropriate email address.',\n  \"errors.login.password\": 'Please enter password.',\n  \"errors.profile_edit.country\": 'Please enter your Birthplace・Location',\n  \"placeholders.sign_ups.name\": 'Name',\n  \"placeholders.sign_ups.mail\": 'Mail',\n  \"placeholders.sign_ups.country\": 'Birthplace・Location',\n  \"placeholders.sign_ups.password\": 'Password',\n  \"placeholders.sign_ups.confirm_password\": 'Password Confirm',\n  \"placeholders.login.mail\": 'Mail',\n  \"placeholders.login.password\": 'Password',\n  \"placeholders.questions.content\": 'Write your question!!',\n  \"placeholders.questions.country_id\": 'Target User Country',\n  \"placeholders.questions.translate_language_id\": 'Language',\n  \"placeholders.questions.category_id\": 'Category',\n  \"placeholders.questions.submit_btn\": 'POST',\n  \"placeholders.answers.content\": 'Write your answer!!',\n  \"placeholders.answers.translate_language_id\": 'Language',\n  \"placeholders.answers.submit_btn\": 'POST',\n  \"placeholders.comments.content\": 'Write your comment!!',\n  \"placeholders.comments.translate_language_id\": 'Language',\n  \"placeholders.comments.submit_btn\": 'POST',\n  \"placeholders.translations.content\": 'Please write a translated text.',\n  \"placeholders.translations.translate_language_id\": 'Language',\n  \"placeholder.profile_edit.profile\": 'Please write your profile',\n  \"placeholder.profile_edit.country\": 'Birthplace・Location',\n  \"buttons.title.reply\": 'Reply',\n  \"buttons.title.post\": 'Post',\n  \"buttons.title.sign_up\": 'Sign Up',\n  \"buttons.title.login\": 'Login',\n  \"buttons.title.send\": 'Send',\n  \"buttons.profile_edit.select\": 'Select',\n  \"buttons.profile_edit.save\": 'Save',\n  \"translated.name\": 'Translator',\n  \"translated.state\": 'Untranslated',\n  \"categories.comic_anime\": 'Comic・Anime',\n  \"categories.culture\": 'culture',\n  \"categories.tourism\": 'tourism',\n  \"categories.music\": 'music',\n};\nexport default en_US;\n","import { locales, categories } from './intl';\n\nconst savedLocale = localStorage.getItem('locale');\nconst currentLocale = savedLocale ? savedLocale : 'ja';\nconst savedCategory = localStorage.getItem('category');\nconst currentCategory = savedCategory ? savedCategory : 'all';\n\nexport const initialState = {\n  intl: locales[currentLocale],\n  ctgr: categories[currentCategory],\n  signUp: {\n    mail: '',\n    password: '',\n    mnemonic: '',\n    hash: '',\n  },\n  profile: {\n    isFetching: false,\n    user: {},\n    questions: [],\n    answers: [],\n    comments: [],\n  },\n  auth: {\n    isPrepared: false,\n    isFetching: false,\n    isLoggedIn: false,\n    user: {},\n    jwt: ''\n  },\n  answers: {\n    isFetching: false,\n    answerArray: [],\n    currentAnswer: {}\n  },\n  answerTranslations: {\n    isFetching: false,\n    currentTranslationList: [],\n    currentTranslation: {},\n  },\n  questions: {\n    isFetching: false,\n    translateLanguageId: 1,\n    questionArray: [],\n    currentQuestion: {},\n  },\n  questionTranslations: {\n    isFetching: false,\n    currentTranslationList: [],\n    currentTranslation: {},\n  },\n  comments: {\n    isFetching: false,\n    currentCommentList: [],\n    currentComment: {}\n  },\n  commentTranslations: {\n    isFetching: false,\n    currentTranslationList: [],\n    currentTranslation: {},\n  },\n  //未翻訳コメントリスト一覧表示\n  not_translate: {\n    //api接続中である場合（非同期処理をしている途中）はtrueになる\n    isFetching: false,\n    questions: [],\n    answers: [],\n    comments: [],\n  },\n  //評価機能\n  votes: {\n    //api接続中である場合（非同期処理をしている途中）はtrueになる\n    isFetching: false,\n    status: [],\n  },\n  //評価機能\n  voteTranslations: {\n    //api接続中である場合（非同期処理をしている途中）はtrueになる\n    isFetching: false,\n    status: [],\n  },\n};\n","import { combineReducers } from 'redux';\nimport { reducer as notificationsReducer } from 'reapop';\nimport * as questions from './reducers/Question';\nimport * as answers from './reducers/Answer';\nimport * as users from './reducers/User';\nimport * as comments from './reducers/Comment';\nimport * as questionTranslations from './reducers/QuestionTranslation';\nimport * as answerTranslations from './reducers/AnswerTranslation';\nimport * as commentTranslations from './reducers/CommentTranslation';\nimport * as notTranslated from './reducers/NotTranslated';\nimport * as votes from './reducers/Votes';\nimport * as voteTranslations from './reducers/VoteTranslation';\nimport { intl } from './reducers/Intl';\nimport { ctgr } from './reducers/Category';\nimport { addLocaleData } from 'react-intl';\n\nconst reducer = combineReducers({\n  intl: intl,\n  ctgr: ctgr,\n  answers: answers.list,\n  questions: questions.list,\n  questionTranslations: questionTranslations.list,\n  answerTranslations: answerTranslations.list,\n  auth: users.auth,\n  signUp: users.signUp,\n  profile: users.profile,\n  comments: comments.list,\n  commentTranslations: commentTranslations.list,\n  not_translate: notTranslated.list,\n  votes: votes.list,\n  voteTranslations: voteTranslations.list,\n  notifications: notificationsReducer()\n});\n\nexport default reducer;\n","import {\n  UPDATE_CURRENT_LANGUAGE,\n} from '../actions/Intl';\nimport { initialState } from '../constants';\nimport { locales } from '../intl';\n\nexport const intl = (state = initialState.intl, action) => {\n  switch (action.type) {\n  case UPDATE_CURRENT_LANGUAGE:\n    const { locale, messages, translateLanguageId } = locales[action.payload];\n    localStorage.setItem('locale', locale);\n    return {\n      ...state,\n      locale,\n      messages,\n      translateLanguageId\n    };\n  default:\n    return state;\n  }\n};\n\n","import { UPDATE_CURRENT_CATEGORY } from '../actions/Category';\nimport { initialState } from '../constants';\nimport { categories } from '../intl';\n\nexport const ctgr = (state = initialState.ctgr, action) => {\n\nswitch (action.type) {\ncase UPDATE_CURRENT_CATEGORY:\n    const { category, categoryId } = categories[action.payload];\n    localStorage.setItem('category', category);\n    return {\n    ...state,\n    category,\n    categoryId\n    };\ndefault:\n    return state;\n}\n};","import {\n    CHANGE_ANSWER_FORM_CONTENT,\n    REQUEST_DATA,\n    RECEIVE_DATA_SUCCESS,\n    RECEIVE_SINGLE_DATA_SUCCESS,\n    RECEIVE_DATA_FAILED,\n    INITIALIZE_FORM,\n    POST_ANSWER_DATA\n} from '../actions/Answer';\nimport { initialState } from '../constants';\n\nexport const form = (state = initialState.answerForm, action) => {\n    switch (action.type) {\n    case CHANGE_ANSWER_FORM_CONTENT:\n        return {\n            ...state,\n            content: action.payload,\n        };\n    case POST_ANSWER_DATA:\n        return {\n            ...state\n        };\n    case REQUEST_DATA:\n        return {\n            ...state,\n            isFetching: true,\n        };\n    case RECEIVE_DATA_SUCCESS:\n        return {\n            ...state,\n            isFetching: false,\n        };\n    case RECEIVE_DATA_FAILED:\n        return {\n            ...state,\n            isFetching: false,\n        };\n    case INITIALIZE_FORM:\n        return {\n            ...state,\n            content: ''\n        };\n    default:\n        return state;\n    }\n};\n\nexport const list = (state = initialState.answers, action) => {\n    switch (action.type) {\n    case REQUEST_DATA:\n        return {\n            ...state,\n            isFetching: true,\n        };\n    case RECEIVE_DATA_SUCCESS:\n        return {\n            ...state,\n            isFetching: false,\n            answerArray: action.payload.data,         \n        };\n    case RECEIVE_SINGLE_DATA_SUCCESS:\n        return {\n            ...state,\n            isFetching: false,\n            currentAnswer: action.payload.data\n        };\n    case RECEIVE_DATA_FAILED:\n        return {\n            ...state,\n            isFetching: false,\n        };\n    case INITIALIZE_FORM:\n        return {\n            ...state,\n            content: ''\n        };\n    default:\n        return state;\n    }\n};\n","import {\n  POST_QUESTION_DATA,\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATE_CURRENT_TRANSLATE_LANGUAGE,\n  UPDATED_QUESTION_DATA\n} from '../actions/Question';\nimport { initialState } from '../constants';\n\nexport const form = (state = initialState.questionForm, action) => {\n  switch (action.type) {\n  case POST_QUESTION_DATA:\n    return {\n      ...state\n    };\n  default:\n    return state;\n  }\n};\n\nexport const list = (state = initialState.questions, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      //...stateは他の状態は維持してisFetchingだけを変更するというコード\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      //isFetchingは終了したのでfalseにしている。\n      isFetching: false,\n      //ここでquestionArrayに値を入れている。\n      questionArray: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentQuestion: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATE_CURRENT_TRANSLATE_LANGUAGE:\n    return {\n      ...state,\n      translateLanguageId: parseInt(action.payload)\n    };\n  case UPDATED_QUESTION_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      currentQuestion: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATED_SINGLE_QUESTION_TRANSLATION\n} from '../actions/QuestionTranslation';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.questionTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslationList: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslation: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_SINGLE_QUESTION_TRANSLATION:\n    return {\n      ...state,\n      currentTranslation: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  POST_ANSWER_TRANSLATION_DATA,\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATED_SINGLE_ANSWER_TRANSLATION\n} from '../actions/AnswerTranslation';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.answerTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslationList: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslation: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_SINGLE_ANSWER_TRANSLATION:\n    return {\n      ...state,\n      currentTranslation: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  CLICK_SUBMIT,\n  REQUEST_DATA,\n  RECEIVE_DATA_FAILED,\n  REMOVE_USER_DATA,\n  UPDATED_USER_DATA,\n  UPDATED_PROFILE_DATA,\n  UPDATED_PROFILE_QUESTION_DATA,\n  UPDATED_PROFILE_ANSWER_DATA,\n  UPDATED_PROFILE_COMMENT_DATA,\n  UPDATED_PROFILE_TRANSLATED_DATA,\n  LOGIN_SUCCESS,\n  LOGIN_FAILED,\n  PREPARED_AUTH\n} from '../actions/User';\nimport { initialState } from '../constants';\n\nexport const signUp = (state = initialState.signUp, action) => {\n  switch (action.type) {\n  case CLICK_SUBMIT:\n    return {\n      ...state,\n    };\n  default:\n    return state;\n  }\n};\n\nexport const auth = (state = initialState.auth, action) => {\n  switch (action.type) {\n  case LOGIN_SUCCESS:\n    return {\n      ...state,\n      isLoggedIn: true,\n      user: action.payload.data,\n      jwt: action.payload.data.jwt\n    };\n  case LOGIN_FAILED:\n    return {\n      ...state,\n      isLoggedIn: false,\n      user: {},\n      jwt: ''\n    };\n  case REMOVE_USER_DATA:\n    return {\n      ...state,\n      isLoggedIn: false,\n      user: {},\n      jwt: ''\n    };\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_USER_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      user: action.payload.data\n    };\n  case PREPARED_AUTH:\n    return {\n      ...state,\n      isPrepared: true\n    };\n  default:\n    return state;\n  }\n};\n\nexport const profile = (state = initialState.profile, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true\n    };\n  case UPDATED_PROFILE_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      user: action.payload.data\n    };\n  case UPDATED_PROFILE_QUESTION_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      questions: action.payload.data\n    };\n  case UPDATED_PROFILE_ANSWER_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      answers: action.payload.data\n    };\n  case UPDATED_PROFILE_COMMENT_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      comments: action.payload.data\n    };\n  case UPDATED_PROFILE_TRANSLATED_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      translates: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  REQUEST_DATA,\n  RECEIVE_COMMENT_DATA_SUCCESS,\n  POST_COMMENT,\n  UPDATED_COMMENT_DATA,\n  UPDATED_SINGLE_COMMENT_DATA,\n  UPDATED_COMMENT_ARRAY\n} from '../actions/Comment';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.comments, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true\n    };\n  case RECEIVE_COMMENT_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      commentArray: action.payload.data\n    };\n  case UPDATED_COMMENT_ARRAY:\n    return {\n      ...state,\n      isFetching: false,\n      commentArray: action.payload.data,\n    };\n  case UPDATED_COMMENT_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      currentCommentList: action.payload.data\n    };\n  case UPDATED_SINGLE_COMMENT_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      currentComment: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATED_SINGLE_COMMENT_TRANSLATION,\n} from '../actions/CommentTranslation';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.commentTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslationList: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslation: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_SINGLE_COMMENT_TRANSLATION:\n    return {\n      ...state,\n      currentTranslation: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n    REQUEST_DATA,\n    RECEIVE_DATA_SUCCESS,\n} from '../actions/NotTranslated';\n  \nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.not_translate, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      //...stateは他の状態は維持してisFetchingだけを変更する。\n      ...state,\n      isFetching: true,\n    };\n  \n  case RECEIVE_DATA_SUCCESS:\n\n    const { questions, answers, comments } = action.payload;\n\n    return {\n      ...state,\n      //isFetchingは終了したのでfalseにしている。\n      isFetching: false,\n      //ここでquestionArrayに値を入れている。\n      questions,\n      answers,\n      comments,\n    };\n  \n  default:\n    return state;\n  }\n};","import {\n    POST_VOTE,\n    REQUEST_DATA,\n    RECEIVE_DATA_SUCCESS,\n    RECEIVE_DATA_FAILED,\n  } from '../actions/VoteTranslation.js';\n\n  import { initialState } from '../constants';\n    \n  export const list = (state = initialState.votes, action) => {\n    switch (action.type) {\n    case POST_VOTE:\n      return {\n        ...state\n      }; \n    case REQUEST_DATA:\n      return {\n        ...state,\n        isFetching: true,\n      };\n    case RECEIVE_DATA_SUCCESS:\n      return {\n        ...state,\n        isFetching: false,\n        questionArray: action.payload.data                  \n      };\n    case RECEIVE_DATA_FAILED:\n      return {\n        ...state,\n        isFetching: false\n      };\n    default:\n      return state;\n    }\n  };\n  ","import {\n  POST_VOTE,\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n} from '../actions/VoteTranslation';\n\nimport { initialState } from '../constants';\n\nexport const form = (state = initialState.voteTranslations, action) => {\n  switch (action.type) {\n  case POST_VOTE:\n    return {\n      ...state\n    };\n  default:\n    return state;\n  }\n};\n\nexport const list = (state = initialState.voteTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      status: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  default:\n    return state;\n  }\n};\n","import axios from 'axios';\n\nexport const createUserAccount = (postData) => {\n    return axios.post('/api/users', postData);\n};\n\nexport const loginUser = (postData) => {\n    const username = postData.mail;\n    const { password } = postData;\n\n    return axios.post('/api/users/login', {\n        username,\n        password\n    });\n};\n\nexport const loginUserJwt = (postData) => {\n    const { jwt } = postData;\n    const headers = {\n        \"Content-Type\": 'application/json',\n        \"Authorization\": `Bearer ${jwt}`\n    };\n    return axios.post('/api/users/login_jwt', {}, { headers });\n};\n\nexport const activateUser = (postData) => {\n  const { token } = postData;\n  return axios.post(`/api/users/activate/${token}`, postData);\n};\n\nexport const resetPassword = (postData) => {\n  return axios.post(`/api/users/password_reset`, postData);\n};\n\nexport const saveUserPassword = (postData) => {\n  const { token } = postData;\n  return axios.put(\n    `/api/users/update_password/${token}`,\n    postData\n  );\n};\n\nexport const saveUserProfile = (postData) => {\n    const { user_id, name, profile, country_id, image } = postData;\n    let data = new FormData();\n    data.append('name', name);\n    data.append('profile', profile);\n    data.append('country_id', country_id);\n    data.append('image', image);\n    return axios.put(\n        `/api/users/${user_id}`,\n        data,\n        {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        }\n    );\n};\n\nexport const getUser = (user_id) => {\n    return axios.get(`/api/users/${user_id}`);\n};\n\nexport const getUserByToken = (token) => {\n  return axios.get(`/api/users/password_reset/${token}`);\n};\n","import axios from 'axios';\n\nexport const fetchQuestionList = (params) => {\n    return axios.get('/api/questions', {\n        params\n    });\n};\n\nexport const fetchQuestion = (id) => {\n    return axios.get(`/api/questions/${id}`);\n};\n\nexport const postQuestionData = (postData) => {\n    return axios.post('/api/questions', postData);\n};\n\nexport const saveQuestionData = (postData) => {\n  const { question_id } = postData;\n  return axios.put(`/api/questions/${question_id}`, postData);\n};\n\nexport const deleteQuestionData = (params) => {\n  const { question_id } = params;\n  return axios.delete(`/api/questions/${question_id}`, { params });\n};\n","import axios from 'axios';\n\nconst apiUrl = '/api/answers';\n\nexport const fetchAnswer = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const fetchAnswerList = (params) => {\n  return axios.get(apiUrl, {\n    params\n  });\n};\n\nexport const fetchAnswerListWithQuestion = (params) => {\n  return axios.get(`${apiUrl}_with_question`, {\n    params\n  });\n};\n\nexport const postAnswerData = (params) => {\n  return axios.post(apiUrl, params);\n};\n\nexport const saveAnswerData = (saveData) => {\n  const { answer_id } = saveData;\n  return axios.put(`${apiUrl}/${answer_id}`, saveData);\n};\n\nexport const deleteAnswerData = (params) => {\n  const { answer_id } = params;\n  return axios.delete(`${apiUrl}/${answer_id}`, { params });\n};\n","import axios from 'axios';\nconst apiUrl = '/api/comments';\n\nexport const fetchCommentWithUserList = (params) => {\n  return axios.get(`/api/comments_with_User`, {\n    params\n  });\n}\n\nexport const fetchCommentsList = (params) => {\n    return axios.get(apiUrl, {\n        params\n    });\n};\n\nexport const fetchComment = (id) => {\n    return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const fetchCommentListWithAnswer = (params) => {\n  return axios.get(`${apiUrl}_with_answer`, {\n    params\n  });\n};\n\nexport const postCommentData = (postData) => {\n    return axios.post(apiUrl, postData);\n};\n\nexport const saveCommentData = (saveData) => {\n  const { comment_id } = saveData;\n  return axios.put(`${apiUrl}/${comment_id}`, saveData);\n};\n\nexport const deleteCommentData = (params) => {\n  const { comment_id } = params;\n  return axios.delete(`${apiUrl}/${comment_id}`, { params });\n};\n","import axios from 'axios';\n\nexport const fetchContentTranslation = ( params ) => {\n    return axios.get(`/api/content_translations`,{\n      params\n    });\n};","import { addNotification as notify } from 'reapop';\n\nexport function notifySuccess(message) {\n  return notify({\n    message,\n    position: 'tc',\n    status: 'success',\n    dismissAfter: 2000\n  });\n}\n\nexport function notifyError(message) {\n  return notify({\n    message,\n    position: 'tc',\n    status: 'error',\n    dismissAfter: 2000\n  });\n}\n\nexport function notifyAlert(message) {\n  return notify({\n    message,\n    position: 'tc',\n    status: 'error',\n    dismissAfter: 2000\n  });\n}\n","import { takeEvery, call, put, select } from 'redux-saga/effects';\n// import { push } from 'react-router-redux';\nimport {\n  updateUserData, requestData, receiveDataSuccess, receiveDataFailed,\n  loginSuccess, loginFailed, removeUserData, updatedUserData,\n  updatedProfileData, preparedAuth, updatedProfileQuestionData,\n  updatedProfileAnswerData, updatedProfileCommentData, updatedProfileTranslatedData,\n} from '../actions/User';\nimport {\n  CREATE_USER_ACCOUNT,\n  SAVE_USER_DATA,\n  SAVE_USER_PASSWORD,\n  ACTIVATE_USER,\n  SEND_RESET_PASSWORD_MAIL,\n  GET_USER_PROFILE,\n  GET_USER_BY_TOKEN,\n  LOGIN_USER,\n  LOGIN_USER_JWT,\n  LOGOUT_USER\n} from '../actions/User';\nimport * as api from './apis/Users';\nimport { fetchQuestionList } from './apis/Questions';\nimport { fetchAnswerListWithQuestion } from './apis/Answers';\nimport { fetchCommentListWithAnswer } from './apis/Comments';\nimport { fetchContentTranslation } from './apis/ContentTranslations';\nimport { notifySuccess, notifyError } from './Util';\n\nexport function* createUserAccount(action) {\n  const { history } = action.payload;\n  try {\n    yield put(requestData());\n    const payload = yield call(api.createUserAccount, action.payload);\n    yield put(receiveDataSuccess(payload));\n    const message = '新規登録に成功しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/users/login');\n  } catch (e) {\n    yield put(receiveDataFailed());\n    const message = '新規登録に失敗しました';\n    yield put(notifyError(message));\n  }\n}\n\nexport function* loginUserAccount(action) {\n  const { history } = action.payload;\n  try {\n    const payload = yield call(api.loginUser, action.payload);\n    yield put(loginSuccess(payload));\n    const { jwt } = payload.data;\n    localStorage.setItem('jwt', jwt);\n    const message = 'ログインに成功しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n    // yield put(push('/'));\n  } catch (e) {\n    //yield put(loginFailed());\n    const message = 'アカウントが存在しないか、パスワードが間違っています';\n    yield put(notifyError(message));\n    yield call(history.push, '/users/login');\n  }\n}\n\nexport function* loginUserAccountJwt(action) {\n  try {\n    const jwt = localStorage.getItem('jwt');\n    if (!jwt) {\n      throw new Error('JWTがありません。');\n    }\n    const payload = yield call(api.loginUserJwt, { jwt });\n    yield put(loginSuccess(payload));\n    yield put(preparedAuth());\n  } catch (e) {\n    yield put(loginFailed());\n    yield put(preparedAuth());\n  }\n}\n\nexport function* logoutUserAccount(action) {\n  try {\n    const { history } = action.payload;\n    localStorage.removeItem('jwt');\n    yield put(removeUserData());\n    const message = 'ログアウトしました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n  } catch (e) {\n    //yield put(loginFailed());\n    //yield call(history.push, '/users/login');\n  }\n}\n\nexport function* saveUserData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveUserProfile, action.payload);\n    const message = 'プロフィールを更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedUserData(payload));\n  } catch (e) {\n    const message = 'プロフィールの更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveUserPassword(action) {\n  try {\n    const { history } = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.saveUserPassword, action.payload);\n    yield put(loginSuccess(payload));\n    const { jwt } = payload.data;\n    localStorage.setItem('jwt', jwt);\n    const message = 'パスワードを更新しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = 'パスワードの更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function *resetPassword(action) {\n  try {\n    const state = yield select();\n    const { locale } = state.intl;\n    action.payload.locale = locale;\n    yield put(requestData());\n    const payload = yield call(api.resetPassword, action.payload);\n    const message = 'メールを送信しました';\n    yield put(notifySuccess(message));\n  } catch (e) {\n    const message = 'メール送信に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* getUserProfile(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.getUser, action.payload);\n    const questionParams = {user_id : action.payload};\n    const questionPayload = yield call(fetchQuestionList, questionParams);\n\n    const answerParams = {user_id : action.payload};\n    const answerPayload = yield call(fetchAnswerListWithQuestion, answerParams);\n\n    const commentParams = {user_id : action.payload};\n    const commentPayload = yield call(fetchCommentListWithAnswer, commentParams);\n\n    const translateParams = {user_id : action.payload};\n    const translatedContent = yield call(fetchContentTranslation, translateParams);\n    \n    yield put(updatedProfileData(payload));\n    yield put(updatedProfileQuestionData(questionPayload));\n    yield put(updatedProfileAnswerData(answerPayload));\n    yield put(updatedProfileCommentData(commentPayload));\n    yield put(updatedProfileTranslatedData(translatedContent));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* getUserByToken(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.getUserByToken, action.payload);\n    yield put(updatedUserData(payload));\n  } catch (e) {\n    console.log('receiveDataFailed');\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* activateUser(action) {\n  try {\n    const { history } = action.payload;\n    console.log('history', history);\n    yield put(requestData());\n    const payload = yield call(api.activateUser, action.payload);\n    yield put(loginSuccess(payload));\n    const { jwt } = payload.data;\n    localStorage.setItem('jwt', jwt);\n    const message = '認証が完了しました。';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n  } catch (e) {\n    console.log('receiveDataFailed');\n    yield put(receiveDataFailed());\n  }\n}\n\nconst userSagas = [\n  takeEvery(CREATE_USER_ACCOUNT, createUserAccount),\n  takeEvery(LOGIN_USER, loginUserAccount),\n  takeEvery(LOGIN_USER_JWT, loginUserAccountJwt),\n  takeEvery(LOGOUT_USER, logoutUserAccount),\n  takeEvery(SAVE_USER_DATA, saveUserData),\n  takeEvery(SAVE_USER_PASSWORD, saveUserPassword),\n  takeEvery(GET_USER_PROFILE, getUserProfile),\n  takeEvery(GET_USER_BY_TOKEN, getUserByToken),\n  takeEvery(SEND_RESET_PASSWORD_MAIL, resetPassword),\n  takeEvery(ACTIVATE_USER, activateUser),\n];\n\nexport default userSagas;\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updateCurrentTranslateLanguage,\n  updatedQuestionData\n} from '../actions/Question';\nimport {\n  FETCH_QUESTION_LIST,\n  FETCH_QUESTION,\n  CHANGE_QUESTION_LIST_LANGUAGE,\n  POST_QUESTION_DATA,\n  SAVE_QUESTION_DATA,\n  DELETE_QUESTION,\n} from '../actions/Question';\n\nimport * as api from './apis/Questions';\nimport { notifySuccess, notifyError } from './Util';\n\nexport function* handleFetchData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestionList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* handleFetchQuestionById(action) {\n  try {\n    const  id   = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestion, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postQuestion(action) {\n  try {\n    yield put(requestData());\n    yield call(api.postQuestionData, action.payload);\n    const payload = yield call(api.fetchQuestionList);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* changeQuestionListLanguage(action) {\n  try {\n    const { translate_language_id } = action.payload;\n    yield put(requestData());\n    // const payload = yield call(fetchQuestionList, action.payload);\n    // yield put(updateCurrentTranslateLanguage(action));\n    // yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveQuestionData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveQuestionData, action.payload);\n    const message = '質問を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedQuestionData(payload));\n  } catch (e) {\n    const message = '質問の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteQuestionData(action) {\n  try {\n    const { question_id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteQuestionData, action.payload);\n    const message = '質問を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchQuestionList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '質問の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst questionSagas = [\n  //FETCH_QUESTION_LISTというアクションが発火させた場合はhandleFetchDataを起動させる。\n  takeEvery(FETCH_QUESTION_LIST, handleFetchData),\n  takeEvery(FETCH_QUESTION, handleFetchQuestionById),\n  // takeEvery(CHANGE_QUESTION_LIST_LANGUAGE, changeQuestionListLanguage),\n  takeEvery(POST_QUESTION_DATA, postQuestion),\n  takeEvery(SAVE_QUESTION_DATA, saveQuestionData),\n  takeEvery(DELETE_QUESTION, deleteQuestionData),\n];\n\nexport default questionSagas;\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport { reset } from 'redux-form';\nimport {\n  requestData, receiveDataSuccess, receiveDataFailed, initializeForm,\n  receiveSingleDataSuccess,\n} from '../actions/Answer';\nimport {\n  FETCH_ANSWER,\n  FETCH_ANSWER_LIST,\n  POST_ANSWER_DATA,\n  SAVE_ANSWER_DATA,\n  DELETE_ANSWER,\n} from '../actions/Answer';\nimport * as api from './apis/Answers';\nimport * as act from '../actions/Comment';\nimport { notifySuccess, notifyError } from './Util';\nimport { fetchCommentWithUserList }from './apis/Comments';\n\nexport function* handleFetchAnswerData(action) {\n  try {\n    yield put(requestData());\n    const answerList = yield call(api.fetchAnswerList, action.payload);\n    const answerId = answerList.data.map(v =>{ return v.id });\n    const commentList = yield call(fetchCommentWithUserList, answerId);\n    yield put(receiveDataSuccess(answerList));\n    yield put(act.receiveCommentDataSuccess(commentList));\n    yield put(act.updatedCommentArray(action.payload));   \n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* postAnswer(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.postAnswerData, action.payload);\n    const { question_id, translate_language_id } = action.payload;\n    const answerPayload = yield call(api.fetchAnswerList, { question_id, translate_language_id });\n    yield put(receiveDataSuccess(answerPayload));\n    yield put(reset('answerForm'));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* fetchSingleAnswerData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchAnswer, action.payload);\n    yield put(receiveSingleDataSuccess(payload));\n    yield put(reset('answerForm'));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveAnswerData(action) {\n  try {\n    const { question_id, history } = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.saveAnswerData, action.payload);\n    const message = '回答を更新しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = '回答の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteAnswerData(action) {\n  try {\n    const { answer_id, question_id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteAnswerData, action.payload);\n    const message = '回答を削除しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = '回答の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\n\nconst answerSagas = [\n  takeEvery(FETCH_ANSWER_LIST, handleFetchAnswerData),\n  takeEvery(POST_ANSWER_DATA, postAnswer),\n  takeEvery(FETCH_ANSWER, fetchSingleAnswerData),\n  takeEvery(SAVE_ANSWER_DATA, saveAnswerData),\n  takeEvery(DELETE_ANSWER, deleteAnswerData),\n];\n\nexport default answerSagas;\n","import axios from 'axios';\n\nconst apiUrl = '/api/question_translations';\n\nexport const fetchQuestionTranslationList = (question_id) => {\n  return axios.get(apiUrl, {\n    params: { question_id }\n  });\n};\n\nexport const fetchQuestionTranslation = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const postQuestionTranslationData = (postData) => {\n  const {\n    content,\n    user_id,\n    question_id,\n    translate_language_id\n  } = postData;\n  return axios.post(apiUrl, {\n    content,\n    user_id,\n    question_id,\n    translate_language_id\n  });\n};\n\nexport const saveQuestionTranslationData = (saveData) => {\n  const { id } = saveData;\n  return axios.put(`${apiUrl}/${id}`, saveData);\n};\n\nexport const deleteQuestionTranslation= (params) => {\n  const { id } = params;\n  return axios.delete(`${apiUrl}/${id}`, { params });\n};\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updatedSingleQuestionTranslation\n} from '../actions/QuestionTranslation';\nimport {\n  FETCH_QUESTION_TRANSLATION_LIST,\n  FETCH_QUESTION_TRANSLATION,\n  POST_QUESTION_TRANSLATION_DATA,\n  SAVE_QUESTION_TRANSLATION_DATA,\n  DELETE_QUESTION_TRANSLATION,\n} from '../actions/QuestionTranslation';\nimport * as api from './apis/QuestionTranslations';\nimport { notifySuccess, notifyError } from './Util';\nimport * as questionSagas from './Question';\n\nexport function* handleFetchQuestionTranslationList(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestionTranslationList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* handleFetchQuestionTranslationById(action) {\n  try {\n    const id = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestionTranslation, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* postQuestionTranslation(action) {\n  try {\n    const { question_id } = action.payload;\n    yield put(requestData());\n    yield call(api.postQuestionTranslationData, action.payload);\n    const payload = yield call(api.fetchQuestionTranslationList, question_id);\n    yield put(receiveDataSuccess(payload));\n    const data = {payload: {}};\n    yield call(questionSagas.handleFetchData, data);\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveQuestionTranslationData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveQuestionTranslationData, action.payload);\n    const message = '翻訳を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedSingleQuestionTranslation(payload));\n  } catch (e) {\n    const message = '翻訳の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteQuestionTranslation(action) {\n  try {\n    const { id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteQuestionTranslation, action.payload);\n    const message = '翻訳を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchQuestionTranslationList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '翻訳の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst questionTranslationSagas = [\n  takeEvery(POST_QUESTION_TRANSLATION_DATA, postQuestionTranslation),\n  takeEvery(FETCH_QUESTION_TRANSLATION_LIST, handleFetchQuestionTranslationList),\n  takeEvery(FETCH_QUESTION_TRANSLATION, handleFetchQuestionTranslationById),\n  takeEvery(SAVE_QUESTION_TRANSLATION_DATA, saveQuestionTranslationData),\n  takeEvery(DELETE_QUESTION_TRANSLATION, deleteQuestionTranslation),\n];\n\nexport default questionTranslationSagas;\n","import axios from 'axios';\n\nconst apiUrl = '/api/answer_translations';\n\nexport const fetchAnswerTranslationList = (answer_id) => {\n  return axios.get(apiUrl, {\n    params: { answer_id }\n  });\n};\n\nexport const fetchAnswerTranslation = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const postAnswerTranslationData = (postData) => {\n  const {\n    content,\n    user_id,\n    answer_id,\n    translate_language_id\n  } = postData;\n  return axios.post(apiUrl, {\n    content,\n    user_id,\n    answer_id,\n    translate_language_id\n  });\n};\n\nexport const saveAnswerTranslationData = (saveData) => {\n  const { id } = saveData;\n  return axios.put(`${apiUrl}/${id}`, saveData);\n};\n\nexport const deleteAnswerTranslation= (params) => {\n  const { id } = params;\n  return axios.delete(`${apiUrl}/${id}`, { params });\n};\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updatedSingleAnswerTranslation\n} from '../actions/AnswerTranslation';\nimport {\n  FETCH_ANSWER_TRANSLATION_LIST,\n  FETCH_ANSWER_TRANSLATION,\n  POST_ANSWER_TRANSLATION_DATA,\n  SAVE_ANSWER_TRANSLATION_DATA,\n  DELETE_ANSWER_TRANSLATION,\n} from '../actions/AnswerTranslation';\nimport * as api from './apis/AnswerTranslations';\nimport { notifySuccess, notifyError } from './Util';\nimport * as questionSagas from './Question';\n\nexport function* handleFetchAnswerTranslationList(action) {\n  try {\n    // axios.get()を呼ぶ前にisFetchingをtrueにしておく\n    yield put(requestData());\n    const payload = yield call(api.fetchAnswerTranslationList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* handleFetchAnswerTranslationById(action) {\n  try {\n    const id  = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchAnswerTranslation, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postAnswerTranslation(action) {\n  try {\n    const { answer_id } = action.payload;\n    yield put(requestData());\n    yield call(api.postAnswerTranslationData, action.payload);\n    const payload = yield call(api.fetchAnswerTranslationList, answer_id);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveAnswerTranslationData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveAnswerTranslationData, action.payload);\n    const message = '翻訳を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedSingleAnswerTranslation(payload));\n  } catch (e) {\n    const message = '翻訳の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteAnswerTranslation(action) {\n  try {\n    const { id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteAnswerTranslation, action.payload);\n    const message = '翻訳を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchAnswerTranslationList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '翻訳の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst answerTranslationSagas = [\n  takeEvery(POST_ANSWER_TRANSLATION_DATA, postAnswerTranslation),\n  takeEvery(FETCH_ANSWER_TRANSLATION_LIST, handleFetchAnswerTranslationList),\n  takeEvery(FETCH_ANSWER_TRANSLATION, handleFetchAnswerTranslationById),\n  takeEvery(SAVE_ANSWER_TRANSLATION_DATA, saveAnswerTranslationData),\n  takeEvery(DELETE_ANSWER_TRANSLATION, deleteAnswerTranslation),\n];\n\nexport default answerTranslationSagas;\n","import { takeEvery, call, put } from 'redux-saga/effects';\n// import { push } from 'react-router-redux';\nimport * as act from '../actions/Comment';\nimport * as api from './apis/Comments';\nimport {\n  FETCH_SINGLE_COMMENT,\n  POST_COMMENT,\n  SAVE_COMMENT_DATA,\n  DELETE_COMMENT,\n} from '../actions/Comment';\nimport * as answerSaga from './Answer'; \nimport { notifySuccess, notifyError } from './Util';\n\nimport { fetchCommentWithUserList }from './apis/Comments';\nimport * as act2 from '../actions/Comment';\n\nexport function* fetchSingleComment(action) {\n  try {\n    yield put(act.requestData());\n    const comment_id = action.payload;\n    const comment = yield call(api.fetchComment, comment_id);\n    yield put(act.updatedSingleCommentData(comment));\n  } catch (e) {\n    const message = 'コメントの投稿に失敗しました。';\n    yield put(notifyError(message));\n    //yield put(updatedCommentData());\n  }\n}\n\nexport function* postComment(action) {\n  try {\n    yield put(act.requestData());\n    const { answer_id, question_id, current_translate_language_id, answerIdList } = action.payload;\n    yield call(api.postCommentData, action.payload);\n    const commentPayload = yield call(api.fetchCommentsList, { answer_id });    \n    const answerId = answerIdList;\n    const commentList = yield call(fetchCommentWithUserList, answerId);\n    yield put(act2.receiveCommentDataSuccess(commentList));\n\n    const message = 'コメントを投稿しました。';\n    yield put(notifySuccess(message));\n    const data = { payload: {\n      question_id,\n      translate_language_id: current_translate_language_id\n    } };\n    yield call(answerSaga.handleFetchAnswerData, data);\n  } catch (e) {\n    const message = 'コメントの投稿に失敗しました。';\n    yield put(notifyError(message));\n    //yield put(updatedCommentData());\n  }\n}\n\nexport function* saveComment(action) {\n  try {\n    yield put(act.requestData());\n    const {\n      comment_id,\n      question_id,\n      history\n    } = action.payload;\n    const comment = yield call(api.saveCommentData, action.payload);\n    yield put(act.updatedSingleCommentData(comment));\n    const message = 'コメントを編集しました。';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = 'コメントの編集に失敗しました。';\n    yield put(notifyError(message));\n    //yield put(updatedCommentData());\n  }\n}\n\nexport function* deleteCommentData(action) {\n  try {\n    const { comment_id, question_id, user_id, history } = action.payload;\n    yield put(act.requestData());\n    yield call(api.deleteCommentData, action.payload);\n    const message = 'コメントを削除しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = 'コメントの削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(act.receiveDataFailed());\n  }\n}\n\nconst commentSagas = [\n  takeEvery(FETCH_SINGLE_COMMENT, fetchSingleComment),\n  takeEvery(POST_COMMENT, postComment),\n  takeEvery(SAVE_COMMENT_DATA, saveComment),\n  takeEvery(DELETE_COMMENT, deleteCommentData),\n];\n\nexport default commentSagas;\n","import axios from 'axios';\n\nconst apiUrl = '/api/comment_translations';\n\nexport const fetchCommentTranslationList = (comment_id) => {\n  return axios.get(apiUrl, {\n    params: {\n      comment_id\n    }\n  });\n};\n\nexport const fetchCommentTranslation = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const postCommentTranslationData = (params) => {\n  return axios.post(apiUrl, {\n    params\n  });\n};\n\nexport const saveCommentTranslationData = (saveData) => {\n  const { id } = saveData;\n  return axios.put(`${apiUrl}/${id}`, saveData);\n};\n\nexport const deleteCommentTranslation = (params) => {\n  const { id } = params;\n  return axios.delete(`${apiUrl}/${id}`, { params });\n};\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updatedSingleCommentTranslation\n} from '../actions/CommentTranslation';\nimport {\n  FETCH_COMMENT_TRANSLATION_LIST,\n  FETCH_COMMENT_TRANSLATION,\n  POST_COMMENT_TRANSLATION_DATA,\n  SAVE_COMMENT_TRANSLATION_DATA,\n  DELETE_COMMENT_TRANSLATION,\n} from '../actions/CommentTranslation';\nimport * as api from './apis/CommentTranslations';\nimport { notifySuccess, notifyError } from './Util';\n\nexport function* handleFetchCommentTranslationList(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchCommentTranslationList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* handleFetchCommentTranslationById(action) {\n  try {\n    const id  = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchCommentTranslation, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postCommentTranslation(action) {\n  try {\n    const { comment_id } = action.payload;\n    yield put(requestData());\n    yield call(api.postCommentTranslationData, action.payload);\n    const payload = yield call(api.fetchCommentTranslationList, comment_id);\n    yield put(receiveDataSuccess(payload));\n    const message = '翻訳を投稿しました。';\n    yield put(notifySuccess(message));\n  } catch (e) {\n    yield put(receiveDataFailed());\n    const message = '翻訳の投稿に失敗しました。';\n    yield put(notifyError(message));\n  }\n}\n\nexport function* saveCommentTranslationData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveCommentTranslationData, action.payload);\n    const message = '翻訳を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedSingleCommentTranslation(payload));\n  } catch (e) {\n    const message = '翻訳の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteCommentTranslation(action) {\n  try {\n    const { id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteCommentTranslation, action.payload);\n    const message = '翻訳を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchCommentTranslationList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '翻訳の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst commentTranslationSagas = [\n  takeEvery(POST_COMMENT_TRANSLATION_DATA, postCommentTranslation),\n  takeEvery(FETCH_COMMENT_TRANSLATION_LIST, handleFetchCommentTranslationList),\n  takeEvery(FETCH_COMMENT_TRANSLATION, handleFetchCommentTranslationById),\n  takeEvery(SAVE_COMMENT_TRANSLATION_DATA, saveCommentTranslationData),\n  takeEvery(DELETE_COMMENT_TRANSLATION, deleteCommentTranslation),\n];\n\nexport default commentTranslationSagas;\n","import axios from 'axios';\n\n// 未翻訳の質問一覧取得するAPI\nexport const fetchNotTranslatedQuestions = (params) => {\n    return axios.get('/api/not_translated_questions', {\n        params\n    });\n};\n\n// 未翻訳の回答一覧取得するAPI\nexport const fetchNotTranslatedAnswers = (params) => {\n    return axios.get('/api/not_translated_answers', {\n        params\n    });\n};\n\n// 未翻訳のコメント一覧取得するAPI\nexport const fetchNotTranslatedComments = (params) => {\n    return axios.get('/api/not_translated_comments', {\n        params\n    });\n};\n\n","import { takeEvery, call, put } from 'redux-saga/effects';\n\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveDataFailed,\n  FETCH_NOT_TRANSLATED,\n} from '../actions/NotTranslated';\n\nimport {\n  fetchNotTranslatedQuestions,\n  fetchNotTranslatedAnswers,\n  fetchNotTranslatedComments,\n} from './apis/NotTranslated';\nimport { changeQuestionListLanguage } from './Question';\n\nexport function* handleFetchData(action) {\n  try {\n\n    yield put(requestData());\n\n    //未翻訳一覧を取り出す\n    // const questions = yield call(fetchNotTranslated, action.payload);\n\n    //質問を取り出す\n    const questions = yield call(fetchNotTranslatedQuestions, action.payload);\n\n    //回答を取り出す\n    const answers = yield call(fetchNotTranslatedAnswers, action.payload);\n\n    //コメントを取り出す\n    const comments = yield call(fetchNotTranslatedComments, action.payload);\n\n    const NotTranslatedList={\n      questions : questions.data,\n      answers : answers.data,\n      comments: comments.data,\n    };\n\n    //reducers/NotTranslated.jsで関数を実行する。\n    yield put(receiveDataSuccess(NotTranslatedList));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nconst NotTranslatedSagas = [\n  //FETCH_QUESTION_LISTというアクションが発火させた場合はhandleFetchDataを起動させる。\n  takeEvery(FETCH_NOT_TRANSLATED, handleFetchData),\n];\n\nexport default NotTranslatedSagas;\n","import axios from 'axios';\n\nexport const postVotes = (postData) => {\n    return axios.post('/api/votes', postData);\n};\n\nexport const deleteVotes = (params) => {\n    const { vote_id } = params;\n    return axios.delete(`/api/votes/${vote_id}`, { params });\n};\n\nexport const fetchQuestionVotesList = (question_id) => {\n    return axios.get('/api/votes/questions', {\n      params: { question_id }\n    });\n  };\n\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n    POST_VOTE,\n    DELETE_VOTE,\n    requestData,\n    receiveDataSuccess,\n    receiveDataFailed,\n} from '../actions/Vote.js';\n\nimport * as answerSaga from './Answer';\nimport * as questionSagas from './Question';\nimport {\n  postVotes,\n  deleteVotes,\n  fetchQuestionVotesList,\n} from './apis/Votes';\n\nimport {\n  notifySuccess,\n  notifyError\n} from './Util';\n\n\nexport function* handleFetchQestionVotesList(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(fetchQuestionVotesList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postVote(action) {\n  try {\n    const { sendVoteParams, key } = action.payload;\n    yield put(requestData());\n    yield call(postVotes, sendVoteParams);\n\n    let data;\n    switch (key) {\n      case \"comment\":\n      case \"answer\":\n          data = { payload: {\n            question_id: sendVoteParams.questionId,\n            translate_language_id: 1,\n          } };\n          yield call(answerSaga.handleFetchAnswerData, data);\n          break;\n      case \"questionList\":\n          data = { payload: {\n            country_id: sendVoteParams.country_id,\n          } };\n          yield call(questionSagas.handleFetchData, data);\n          break;\n      case \"questionView\":\n          data = { payload: sendVoteParams.question_id };\n          yield call(questionSagas.handleFetchQuestionById, data);\n          break;\n    }\n\n    const message = 'いいねしました';\n    yield put(notifySuccess(message));\n\n  } catch (e) {\n    const message = 'いいねに失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteVote(action) {\n  try {\n    const { deleteVoteParams, key } = action.payload;\n    yield put(requestData());\n    yield call(deleteVotes, deleteVoteParams);\n\n    let data;\n    switch (key) {\n      case \"comment\":\n      case \"answer\":\n          data = { payload: {\n            question_id: deleteVoteParams.questionId,\n            translate_language_id: 1,\n          } };\n          yield call(answerSaga.handleFetchAnswerData, data);\n          break;\n      case \"questionList\":\n          data = { payload: {\n            country_id: deleteVoteParams.country_id,\n          } };\n          yield call(questionSagas.handleFetchData, data);\n          break;\n      case \"questionView\":\n          data = { payload: deleteVoteParams.vote_id };\n          yield call(questionSagas.handleFetchQuestionById, data);\n          break;\n    }\n    const message = 'いいねを削除しました';\n    yield put(notifySuccess(message));\n  } catch (e) {\n    const message = 'いいねの削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst voteSagas = [\n  takeEvery(POST_VOTE, postVote),\n  takeEvery(DELETE_VOTE, deleteVote),\n];\n\nexport default voteSagas;\n","import axios from 'axios';\n\nexport const postVotes = (params) => {\n    return axios.post('/api/vote_translations', params);\n};\n\nexport const deleteVotes = (params) => {\n    const { vote_id } = params;\n    return axios.delete(`/api/vote_translations/${vote_id}`, { params });\n};","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n    POST_VOTE,\n    DELETE_VOTE,\n    requestData,\n    receiveDataSuccess,\n    receiveDataFailed,\n} from '../actions/VoteTranslation';\n\nimport * as answerTranslationSagas from './AnswerTranslation';\nimport * as questionTranslationSagas from './QuestionTranslation';\nimport * as commentTranslationSagas from './CommentTranslation';\n\nimport { \n  notifySuccess, \n  notifyError \n} from './Util';\n\nimport { postVotes, deleteVotes } from './apis/VoteTranslations';\n\nexport function* postVote(action) {\n  try {\n    const { sendVoteParams, key } = action.payload;\n    yield put(requestData());\n    yield call(postVotes, sendVoteParams);\n    let data;\n    switch (key) {\n      case \"comment\":\n          data = { payload: sendVoteParams.commentId } ;\n          yield call(commentTranslationSagas.handleFetchCommentTranslationList, data);\n          break;\n      case \"answer\":\n          data = { payload: sendVoteParams.answerId } ;\n          yield call(answerTranslationSagas.handleFetchAnswerTranslationList, data);\n          break;\n      case \"question\":\n          data = { payload: sendVoteParams.questionId } ;\n          yield call(questionTranslationSagas.handleFetchQuestionTranslationList, data);\n          break;\n    }\n\n    const message = 'いいねしました';\n    yield put(notifySuccess(message));\n\n  } catch (e) {\n    const message = 'いいねに失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteVote(action) {\n  try {\n    const { deleteVoteParams, key } = action.payload;\n    yield put(requestData());\n    yield call(deleteVotes, deleteVoteParams);\n\n    let data;\n    switch (key) {\n      case \"comment\":\n          data = { payload: deleteVoteParams.commentId } ;\n          yield call(commentTranslationSagas.handleFetchCommentTranslationList, data);\n          break;\n      case \"answer\":\n          data = { payload: deleteVoteParams.answerId };\n          yield call(answerTranslationSagas.handleFetchAnswerTranslationList, data);\n          break;\n      case \"question\":\n          data = { payload:  deleteVoteParams.questionId };\n          yield call(questionTranslationSagas.handleFetchQuestionTranslationList, data);\n          break;\n    }\n    const message = 'いいねを削除しました';\n    yield put(notifySuccess(message));\n  } catch (e) {\n    const message = 'いいねの削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst voteTranslationSagas = [\n  takeEvery(POST_VOTE, postVote),\n  takeEvery(DELETE_VOTE, deleteVote),\n];\n\nexport default voteTranslationSagas;","import { put, takeEvery } from 'redux-saga/effects';\nimport {\n    ACTION_ALERT_MESSAGE,\n} from '../actions/Notification';\nimport { notifyAlert } from './Util';\n\nexport function* alertMessage(action) {\n    yield put(notifyAlert(action.payload));\n}\n\n  const notificationSagas = [\n    takeEvery(ACTION_ALERT_MESSAGE, alertMessage),\n  ];\n  \nexport default notificationSagas;","import { all } from 'redux-saga/effects';\nimport userSagas from './sagas/User';\nimport questionSagas from './sagas/Question';\nimport answerSagas from './sagas/Answer';\nimport questionTranslationSagas from './sagas/QuestionTranslation';\nimport answerTranslationSagas from './sagas/AnswerTranslation';\nimport commentSagas from './sagas/Comment';\nimport commentTranslationSagas from './sagas/CommentTranslation';\nimport NotTranslatedSagas from './sagas/NotTranslated';     \nimport voteSagas from './sagas/Votes';\nimport voteTranslationSagas from './sagas/VoteTranslation';  \nimport notificationSagas from './sagas/Notification';            \n\nexport default function* rootSaga() {\n  yield all([\n    ...userSagas,\n    ...questionSagas,\n    ...answerSagas,\n    ...questionTranslationSagas,\n    ...answerTranslationSagas,\n    ...commentSagas,\n    ...commentTranslationSagas,\n    ...NotTranslatedSagas,\n    ...voteSagas,\n    ...voteTranslationSagas,\n    ...notificationSagas,\n  ]);\n}\n","import { createBrowserHistory as createHistory } from 'history';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { routerMiddleware } from 'react-router-redux';\nimport reducer from './reducer';\nimport { initialState } from './constants';\nimport rootSaga from './rootSaga';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from \"redux-logger\";\nimport ReactGA from 'react-ga';\n\n// Redux DevTools\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst history = createHistory();\nReactGA.initialize('UA-128421111-1');\nhistory.listen(({ pathname }) => {\n  console.log(\"GA---------\",pathname);\n//   ReactGA.set({ page: pathname });\n//   ReactGA.pageview(pathname);\n});\n\nconst routingMiddleware = routerMiddleware(history);\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n    reducer,\n    initialState,\n    composeEnhancers(\n        applyMiddleware(\n            thunkMiddleware,\n            routingMiddleware,\n            sagaMiddleware,\n            logger\n        )\n    )\n);\n\nsagaMiddleware.run(rootSaga, { history });\n\nexport { history }\nexport { store }\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport { ConnectedRouter, routerReducer, routerMiddleware } from 'react-router-redux';\n\nimport Home from './containers/Home';\nimport QuestionView from './containers/QuestionView';\nimport QuestionEdit from './containers/QuestionEdit';\nimport NotTranslated from './containers/NotTranslated';\nimport AnswerEdit from './containers/AnswerEdit';\nimport CommentEdit from './containers/CommentEdit';\nimport QuestionTranslationView from './containers/QuestionTranslationView';\nimport QuestionTranslationEdit from './containers/QuestionTranslationEdit';\nimport AnswerTranslationView from './containers/AnswerTranslationView';\nimport AnswerTranslationEdit from './containers/AnswerTranslationEdit';\nimport CommentTranslationView from './containers/CommentTranslationView';\nimport CommentTranslationEdit from './containers/CommentTranslationEdit';\nimport App from './containers/App';\nimport ScrollToTop from './components/layouts/ScrollToTop';\nimport SignUp from './containers/users/SignUp';\nimport Login from './containers/users/Login';\nimport PasswordReset from './containers/users/PasswordReset';\nimport NewPassword from './containers/users/NewPassword';\nimport Activate from './containers/users/Activate';\nimport Profile from './containers/users/Profile';\nimport ProfileEdit from './containers/users/ProfileEdit';\nimport UserOnly from './containers/auth/UserOnly';\nimport GuestOnly from './containers/auth/GuestOnly';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport history from './store';\nimport UIkit from 'uikit';\n// import Icons from 'uikit/dist/js/uikit-icons';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { fas } from '@fortawesome/free-solid-svg-icons';\nimport { far } from '@fortawesome/free-regular-svg-icons';\n\n// Styles\nimport './css/normalize.css';\nimport './css/main.css';\nimport './css/uikit.min.css';\n\n// 言語設定\nimport { addLocaleData, IntlProvider } from 'react-intl';\nimport ja from 'react-intl/locale-data/ja';\nimport en from 'react-intl/locale-data/en';\nconst { intl } = store.getState();\nconst { locale, messages } = intl;\naddLocaleData([...ja, ...en]);\n\nlibrary.add(fas, far);\n\n// 取り急ぎの質問フォーム初期化処理\nlocalStorage.setItem('question-form', '');\n\nconst render = () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <IntlProvider locale={locale} messages={messages} >\n        <BrowserRouter> \n          <App>\n            <ScrollToTop>\n              <Switch>\n                <Route exact path='/' component={Home} />\n                <Route exact path='/questions/:id' component={QuestionView}  onEnter={() => window.scrollTo(0, 0)}/>\n                <Route exact path='/question_translations/:question_id' component={QuestionTranslationView} />\n                <Route exact path='/answer_translations/:answer_id' component={AnswerTranslationView} />\n                <Route exact path='/comment_translations/:comment_id' component={CommentTranslationView} />\n                <Route exact path='/users/profile/:id' component={Profile} />\n                <Route exact path='/users/login' component={Login} />\n                <Route exact path='/users/signup' component={SignUp} />\n                <Route exact path='/users/activate/:token' component={Activate} />\n                <Route exact path='/users/password_reset' component={PasswordReset} />\n                <Route exact path='/users/password_reset/:token' component={NewPassword} />\n                <UserOnly>\n                  <Switch>\n                    <Route exact path='/questions/edit/:id' component={QuestionEdit} />\n                    <Route exact path='/answers/edit/:id' component={AnswerEdit} />\n                    <Route exact path='/comments/edit/:id' component={CommentEdit} />\n                    <Route exact path='/users/profile_edit' component={ProfileEdit} />\n                    <Route exact path='/question_translations/edit/:id' component={QuestionTranslationEdit} />\n                    <Route exact path='/answer_translations/edit/:id' component={AnswerTranslationEdit} />\n                    <Route exact path='/comment_translations/edit/:id' component={CommentTranslationEdit} />\n                    {/*未翻訳の質問を抽出するルートパス*/}\n                    <Route exact path='/not_translated' component={NotTranslated} />\n                  </Switch>\n                </UserOnly>\n                <GuestOnly>\n                  <Switch>\n                  </Switch>\n                </GuestOnly>\n              </Switch>\n            </ScrollToTop>\n          </App>\n        </BrowserRouter>\n      </IntlProvider>\n    </Provider>,\n    document.getElementById('root')\n  );\n};\n\nstore.subscribe(() => {\n  render();\n});\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nrender()\n"],"sourceRoot":""}