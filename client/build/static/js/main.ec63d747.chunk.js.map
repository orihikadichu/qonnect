{"version":3,"sources":["actions/Question.js","utils/Translations.js","components/Translator.js","actions/Vote.js","components/QuestionListView.js","components/QuestionList.js","containers/QuestionList.js","components/LanguageFormSelect.js","components/CategoryFormSelect.js","components/QuestionForm.js","components/Home.js","actions/Intl.js","actions/Category.js","actions/Notification.js","containers/Home.js","components/AnswerForm.js","actions/Answer.js","actions/Comment.js","components/Comment.js","components/CommentList.js","components/CommentForm.js","components/AnswerList.js","containers/AnswerList.js","utils/index.js","components/QuestionView.js","containers/QuestionView.js","components/QuestionEdit.js","containers/QuestionEdit.js","actions/NotTranslated.js","components/NotTranslated.js","containers/NotTranslated.js","components/AnswerEdit.js","containers/AnswerEdit.js","components/CommentEdit.js","containers/CommentEdit.js","components/QuestionTranslationForm.js","actions/QuestionTranslation.js","actions/VoteTranslation.js","components/QuestionTranslationList.js","containers/QuestionTranslationList.js","containers/QuestionTranslationView.js","components/TranslationForm.js","components/TranslationEdit.js","components/QuestionTranslationEdit.js","containers/QuestionTranslationEdit.js","components/AnswerTranslationForm.js","actions/AnswerTranslation.js","components/AnswerTranslationList.js","containers/AnswerTranslationList.js","containers/AnswerTranslationView.js","components/AnswerTranslationEdit.js","containers/AnswerTranslationEdit.js","components/CommentTranslationForm.js","actions/CommentTranslation.js","components/CommentTranslationList.js","containers/CommentTranslationList.js","containers/CommentTranslationView.js","components/CommentTranslationEdit.js","containers/CommentTranslationEdit.js","components/layouts/MenuDrawer.js","components/layouts/Header.js","actions/User.js","containers/layouts/Header.js","components/App.js","containers/App.js","components/layouts/ScrollToTop.js","components/users/SignUpForm.js","components/users/SignUp.js","containers/users/SignUp.js","components/users/LoginForm.js","components/users/Login.js","containers/users/Login.js","components/users/PasswordResetForm.js","components/users/PasswordReset.js","containers/users/PasswordReset.js","components/users/PasswordForm.js","components/users/NewPassword.js","containers/users/NewPassword.js","components/users/Activate.js","containers/users/Activate.js","containers/users/Profile.js","components/users/ProfileForm.js","components/users/Profile.js","containers/users/ProfileEdit.js","components/auth/UserOnly.js","containers/auth/UserOnly.js","components/auth/GuestOnly.js","containers/auth/GuestOnly.js","intl/index.js","intl/locales/ja_JP.js","intl/locales/en_US.js","constants.js","reducer.js","reducers/Intl.js","reducers/Category.js","reducers/Answer.js","reducers/Question.js","reducers/QuestionTranslation.js","reducers/AnswerTranslation.js","reducers/User.js","reducers/Comment.js","reducers/CommentTranslation.js","reducers/NotTranslated.js","reducers/Votes.js","reducers/VoteTranslation.js","sagas/apis/Users.js","sagas/apis/Questions.js","sagas/apis/Answers.js","sagas/apis/Comments.js","sagas/Util.js","sagas/User.js","sagas/Question.js","sagas/Answer.js","sagas/apis/QuestionTranslations.js","sagas/QuestionTranslation.js","sagas/apis/AnswerTranslations.js","sagas/AnswerTranslation.js","sagas/Comment.js","sagas/apis/CommentTranslations.js","sagas/CommentTranslation.js","sagas/apis/NotTranslated.js","sagas/NotTranslated.js","sagas/apis/Votes.js","sagas/Votes.js","sagas/apis/VoteTranslations.js","sagas/VoteTranslation.js","sagas/Notification.js","rootSaga.js","store.js","index.js"],"names":["FETCH_QUESTION_LIST","Symbol","FETCH_QUESTION","POST_QUESTION_DATA","REQUEST_DATA","RECEIVE_DATA_SUCCESS","RECEIVE_SINGLE_DATA_SUCCESS","RECEIVE_DATA_FAILED","UPDATE_CURRENT_TRANSLATE_LANGUAGE","SAVE_QUESTION_DATA","UPDATED_QUESTION_DATA","DELETE_QUESTION","fetchQuestionList","createAction","fetchQuestion","postQuestionData","requestData","receiveDataSuccess","receiveSingleDataSuccess","receiveDataFailed","saveQuestionData","updatedQuestionData","deleteQuestion","getFilteredContents","contentList","translateLanguageId","contentType","categoryId","filter","v","translate_language_id","length","getTranslatedContents","map","dispText","content","translation","Translator","user","this","props","name","image_path","profile_link","msg","formatMessage","intl","id","react_default","a","createElement","className","style","padding","Link","to","src","width","height","alt","Component","injectIntl","POST_VOTE","DELETE_VOTE","postVote","deleteVote","QuestionListView","question","data","params","user_id","question_id","answer_id","comment_id","status","country_id","key","handlePostVote","vote_id","handleDeleteVote","countryId","concat","border","questionArray","_this","filteredQuestions","translator","userName","profileLink","votes","votebutton","onClick","bind","react_fontawesome_index_es","icon","color","size","sendVote","voteNumbers","nationalFlag","selectedNationalFlag","question_translations","components_Translator","category","intl_key","dayjs","created_at","format","questionList","getQuestionList","_this$props","getQuestionListView","connect","state","auth","ctgr","dispatch","QuestionList","questions","category_id","handleFetchData","_this$props$state$que","isFetching","react_spinners","components_QuestionListView","loginUser","queryData","LanguageFormSelect","placeholder","formik_esm","component","value","CategoryFormSelect","QuestionForm","values","errors","initialValues","enableReinitialize","validate","onSubmit","_ref","setSubmitting","resetForm","setErrors","render","_ref2","touched","handleSubmit","isSubmitting","setFieldValue","type","rows","formik_persist_es6","components_LanguageFormSelect","components_CategoryFormSelect","Home","formData","_this$props$state$aut","isLoggedIn","console","log","history","alertMessage","push","postData","e","message","changeCategory","selectedCategory","_this$props$state$int","locale","components_QuestionForm","submitQuestionForm","onChange","changeLanguage","target","changeCateogryfunction","containers_QuestionList","React","UPDATE_CURRENT_LANGUAGE","updateCurrentLanguage","UPDATE_CURRENT_CATEGORY","updateCurrentCategory","ACTION_ALERT_MESSAGE","actionAlertMessage","AnswerForm","CHANGE_ANSWER_FORM_CONTENT","FETCH_ANSWER_LIST","FETCH_ANSWER","POST_ANSWER_DATA","INITIALIZE_FORM","SAVE_ANSWER_DATA","DELETE_ANSWER","fetchAnswerList","fetchAnswer","postAnswerData","saveAnswerData","deleteAnswer","RECEIVE_COMMENT_DATA_SUCCESS","FETCH_SINGLE_COMMENT","FETCH__COMMENT_WITH_USER_LIST","POST_COMMENT","UPDATE_COMMENT","UPDATED_COMMENT_DATA","UPDATED_SINGLE_COMMENT_DATA","SAVE_COMMENT_DATA","DELETE_COMMENT","UPDATED_COMMENT_ARRAY","receiveCommentDataSuccess","postComment","fetchSingleComment","updatedSingleCommentData","deleteComment","saveCommentData","updatedCommentArray","Comment","commentId","currentQuestionId","questionId","isOwner","voteList","commentUser","comments","answerId","currentQuestion","editLink","commentArray","commentTranslated","comment_translations","whiteSpace","CommentList","commentList","list","filteredCommentList","translatedCommentList","i","voteState","components_Comment","CommentForm","postButton","class","href","ownProps","AnswerList","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","qId","buttonState","answerIds","answers","answerArray","current_translate_language_id","answerIdList","handlePostComment","paddingLeft","components_CommentForm","form","onClickCommentForm","setState","_this2","filteredAnswers","answer","commentForm","getComment","answer_translations","Linkify_default","properties","components_CommentList","onClickReply","_this$props$state$ans","answerList","getAnswerList","isEmptyObject","obj","keys","QuestionView","match","parseInt","getQuestionById","questionTranslation","temp","mesasge","sprintf","country","components_AnswerForm","img","getTranslatedQuestion","answerForm","getAnswerForm","containers_AnswerList","fetchAnswers","QuestionEdit","owner","saveData","notOwnerWillTransfer","onClickDeleteBtn","conditions","CHANGE_QUESTION_LIST_LANGUAGE","FETCH_NOT_TRANSLATED","fetchNotTranslated","NotTranslated","currentTab","not_translate","contents","url","getNotTranslatedId","getNotTranslated","tabState","getNotTranslatedQuestions","getNotTranslatedAnswers","getNotTranslatedComments","newTabKey","preventDefault","stopPropagation","_this3","tabData","active","onClickTab","tabContents","getCurrentTabContents","getNotTranslatedView","tabList","getTabList","AnswerEdit","getAnswerById","currentAnswer","CommentEdit","getCommentById","currentComment","QuestionTranslatinoForm","FETCH_QUESTION_TRANSLATION_LIST","FETCH_QUESTION_TRANSLATION","POST_QUESTION_TRANSLATION_DATA","UPDATED_SINGLE_QUESTION_TRANSLATION","SAVE_QUESTION_TRANSLATION_DATA","DELETE_QUESTION_TRANSLATION","fetchQuestionTranslationList","fetchQuestionTranslation","postQuestionTranslationData","updatedSingleQuestionTranslation","saveQuestionTranslationData","deleteQuestionTranslation","QuestionTranslationList","question_translation_id","answer_translation_id","commcomment_translation_id","translationList","vote_translations","questionTranslations","currentTranslationList","getTranslationList","QuestionTranslationView","Error","QuestionTranslationForm","containers_QuestionTranslationList","TranslationForm","TranslationEdit","currentTranslation","components_TranslationForm","QuestionTranslationEdit","qtId","getQuestionTranslationById","components_TranslationEdit","AnswerTranslatinoForm","FETCH_ANSWER_TRANSLATION_LIST","FETCH_ANSWER_TRANSLATION","POST_ANSWER_TRANSLATION_DATA","SAVE_ANSWER_TRANSLATION_DATA","DELETE_ANSWER_TRANSLATION","UPDATED_SINGLE_ANSWER_TRANSLATION","fetchAnswerTranslationList","fetchAnswerTranslation","postAnswerTranslationData","saveAnswerTranslationData","deleteAnswerTranslation","updatedSingleAnswerTranslation","AnswerTranslationList","aId","answerTranslations","AnswerTranslationView","AnswerTranslationForm","containers_AnswerTranslationList","AnswerTranslationEdit","atId","getAnswerTranslationById","CommentTranslatinoForm","FETCH_COMMENT_TRANSLATION_LIST","FETCH_COMMENT_TRANSLATION","POST_COMMENT_TRANSLATION_DATA","SAVE_COMMENT_TRANSLATION_DATA","DELETE_COMMENT_TRANSLATION","UPDATED_SINGLE_COMMENT_TRANSLATION","fetchCommentTranslationList","fetchCommentTranslation","postCommentTranslationData","saveCommentTranslationData","deleteCommentTranslation","updatedSingleCommentTranslation","CommentTranslationList","comment","comment_translation_id","_this$props$state$com","commentTranslations","CommentTranslationView","toQuestionViewLink","CommentTranslationForm","containers_CommentTranslationList","CommentTranslationEdit","ctId","getCommentTranslationById","MenuDrawer","top","left","bottom","right","toggleDrawer","side","open","defineProperty","actionData","logout","classes","displayName","menuDataList","text","sideList","List_default","menuData","index","ListItem_default","button","ListItemText_default","primary","Button_default","Drawer_default","anchor","onClose","tabIndex","role","onKeyDown","withStyles","fullList","Header","anchorEl","handleClose","handleLogout","onClickLogout","profileElem","MenuItem_default","uk-icon","getProfileElem","loginElem","getLoginElem","aria-owns","undefined","aria-haspopup","event","currentTarget","textTransform","Menu_default","Boolean","imagePath","displayMenuElem","menu","getMenu","maxHeight","CREATE_USER_ACCOUNT","CLICK_SUBMIT","SAVE_USER_MNEMONIC","LOGIN_USER","LOGIN_USER_JWT","LOGOUT_USER","UPDATE_USER_DATA","SAVE_USER_DATA","SAVE_USER_PASSWORD","UPDATED_USER_DATA","REMOVE_USER_DATA","LOGIN_SUCCESS","LOGIN_FAILED","GET_USER_PROFILE","GET_USER_BY_TOKEN","UPDATED_PROFILE_DATA","PREPARED_AUTH","UPDATED_PROFILE_QUESTION_DATA","UPDATED_PROFILE_ANSWER_DATA","UPDATED_PROFILE_COMMENT_DATA","SEND_RESET_PASSWORD_MAIL","RESET_PASSWORD","ACTIVATE_USER","createUserAccount","loginUserJwt","logoutUser","saveUserData","saveUserPassword","updatedUserData","removeUserData","loginSuccess","loginFailed","getUserProfile","getUserByToken","updatedProfileData","preparedAuth","updatedProfileQuestionData","updatedProfileAnswerData","updatedProfileCommentData","sendResetPasswordMail","activateUser","App","fetchLoginState","children","isPrepared","BrowserRouter","containers_layouts_Header","lib_default","theme","ScrollToTop","prevProps","location","window","scrollTo","withRouter","SignUpForm","mail","test","password","passwordConfirm","SignUp","clickSubmit","users_SignUpForm","onClickSubmit","LoginForm","Login","users_LoginForm","PasswordResetForm","PasswordReset","users_PasswordResetForm","PasswordForm","NewPassword","token","fetchUser","users_PasswordForm","Activate","Profile","userId","fetchUserProfile","getCommentList","profile","userPostList","ProfileForm","image_url","file","files","URL","webkitURL","createObjectURL","imagePreview","image","uk-form-custom","handleImageChange","disabled","clickedSaveButton","users_ProfileForm","UserOnly","guestWillTransfer","context","router","nextProps","Route","contextTypes","PropTypes","object","isRequired","GuestOnly","userWillTransfer","replace","locales","ja","messages","_ja_JP","titles.sign_up","titles.login","titles.activate","titles.password_reset","titles.question_list","titles.answer_list","titles.post_list","titles.translation_list","titles.not_translated_list","messages.empty_answers","messages.birthplace","messages.you_are_not_target","messages.enter_mail","messages.enter_new_password","messages.activate_completed","links.to_not_translated_list","links.edit","links.question","links.answer","links.comment","links.profile","links.profile_edit","links.sign_up","links.login","links.logout","links.password_reset","links.to_question_view","languages.japanese","languages.english","countries.japan","countries.usa","categories.all","categories.subculture","categories.culture","categories.tourism","categories.music","errors.questions.content","errors.questions.country_id","errors.questions.translate_language_id","errors.questions.category_id","errors.answers.content","errors.answers.translate_language_id","errors.translations.content","errors.translations.translate_language_id","errors.sign_ups.name","errors.sign_ups.mail","errors.sign_ups.appropriate_mail","errors.sign_ups.password","errors.sign_ups.confirm_password","errors.login.mail","errors.login.appropriate_mail","errors.login.password","placeholders.sign_ups.name","placeholders.sign_ups.mail","placeholders.sign_ups.password","placeholders.sign_ups.confirm_password","placeholders.login.mail","placeholders.login.password","placeholders.questions.content","placeholders.questions.country_id","placeholders.questions.translate_language_id","placeholders.questions.category_id","placeholders.questions.submit_btn","placeholders.answers.content","placeholders.answers.translate_language_id","placeholders.answers.submit_btn","placeholders.translations.content","placeholders.translations.translate_language_id","buttons.title.reply","buttons.title.post","buttons.title.sign_up","buttons.title.login","buttons.title.send","translated.name","translated.state","categories.comic_anime","en","_en_US","categories","all","subculture","culture","tourism","music","savedLocale","localStorage","getItem","currentLocale","savedCategory","initialState","signUp","mnemonic","hash","jwt","currentCommentList","voteTranslations","reducer","combineReducers","arguments","action","_locales$action$paylo","payload","setItem","objectSpread","_categories$action$pa","_action$payload","notifications","notificationsReducer","axios","post","username","headers","Content-Type","Authorization","resetPassword","put","saveUserProfile","FormData","append","getUser","get","deleteQuestionData","delete","apiUrl","fetchAnswerListWithQuestion","deleteAnswerData","fetchCommentWithUserList","fetchCommentsList","fetchComment","fetchCommentListWithAnswer","postCommentData","deleteCommentData","notifySuccess","notify","position","dismissAfter","notifyError","loginUserAccount","loginUserAccountJwt","logoutUserAccount","regenerator_default","wrap","_context","prev","next","api","sent","t0","stop","_marked","_context2","_marked2","_context3","_marked3","_context4","removeItem","_marked4","_context5","_marked5","_context6","_marked6","_context7","_marked7","questionParams","questionPayload","answerParams","answerPayload","commentParams","commentPayload","_context8","_marked8","_context9","_marked9","_context10","_marked10","userSagas","takeEvery","handleFetchQuestionById","postQuestion","Question_marked","Question_marked2","Question_marked3","Question_marked5","Question_marked6","questionSagas","handleFetchAnswerData","postAnswer","fetchSingleAnswerData","act","Answer_marked","reset","Answer_marked2","Answer_marked3","_action$payload2","Answer_marked4","_action$payload3","Answer_marked5","answerSagas","handleFetchQuestionTranslationList","handleFetchQuestionTranslationById","postQuestionTranslation","QuestionTranslation_marked","QuestionTranslation_marked2","QuestionTranslation_marked3","QuestionTranslation_marked4","QuestionTranslation_marked5","questionTranslationSagas","handleFetchAnswerTranslationList","handleFetchAnswerTranslationById","postAnswerTranslation","AnswerTranslation_marked","AnswerTranslation_marked2","AnswerTranslation_marked3","AnswerTranslation_marked4","AnswerTranslation_marked5","answerTranslationSagas","saveComment","Comment_marked","act2","answerSaga","Comment_marked2","Comment_marked3","Comment_marked4","commentSagas","handleFetchCommentTranslationList","handleFetchCommentTranslationById","postCommentTranslation","CommentTranslation_marked","CommentTranslation_marked2","CommentTranslation_marked3","CommentTranslation_marked4","CommentTranslation_marked5","commentTranslationSagas","fetchNotTranslatedQuestions","fetchNotTranslatedAnswers","fetchNotTranslatedComments","NotTranslatedList","NotTranslated_marked","NotTranslatedSagas","postVotes","deleteVotes","abrupt","t1","Votes_marked2","_data","Votes_marked3","voteSagas","VoteTranslation_marked","VoteTranslation_marked2","voteTranslationSagas","Notification_marked","notificationSagas","rootSaga","toConsumableArray","rootSaga_marked","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createHistory","routingMiddleware","routerMiddleware","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","thunkMiddleware","logger","run","getState","addLocaleData","library","add","fas","far","ReactDOM","es","index_es","containers_App","layouts_ScrollToTop","Switch","exact","path","onEnter","auth_UserOnly","ProfileEdit","auth_GuestOnly","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.ec63d747.chunk.js","sourcesContent":["import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_QUESTION_LIST = Symbol('FETCH_QUESTION_LIST');\nexport const FETCH_QUESTION = Symbol('FETCH_QUESTION');\nexport const POST_QUESTION_DATA = Symbol('POST_QUESTION_DATA');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATE_CURRENT_TRANSLATE_LANGUAGE = Symbol('UPDATE_CURRENT_TRANSLATE_LANGUAGE');\nexport const SAVE_QUESTION_DATA = Symbol('SAVE_QUESTION_DATA');\nexport const UPDATED_QUESTION_DATA = Symbol('UPDATED_QUESTION_DATA');\nexport const DELETE_QUESTION = Symbol('DELETE_QUESTION');\n\n\n//createAction(FETCH_QUESTION_LIST)はFETCH_QUESTION_LISTという名前でアクションを発火させる。\nexport const fetchQuestionList = createAction(FETCH_QUESTION_LIST);\nexport const fetchQuestion = createAction(FETCH_QUESTION);\nexport const postQuestionData = createAction(POST_QUESTION_DATA);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updateCurrentTranslateLanguage = createAction(UPDATE_CURRENT_TRANSLATE_LANGUAGE);\nexport const saveQuestionData = createAction(SAVE_QUESTION_DATA);\nexport const updatedQuestionData = createAction(UPDATED_QUESTION_DATA);\nexport const deleteQuestion = createAction(DELETE_QUESTION);\n\n","'use strict';\n\nexport const getFilteredContents = (contentList, translateLanguageId, contentType, categoryId) => {\n  const filteredContents = contentList.filter((v) => {\n    if (v.translate_language_id === translateLanguageId) {\n      return true ;\n    }\n\n    const targetTranslationsNum = v[contentType].filter((v) => {\n      return (v.translate_language_id === translateLanguageId);\n    }).length;\n    return (targetTranslationsNum !== 0);\n  });\n  return filteredContents;\n};\n\nexport const getTranslatedContents = (contentList, translateLanguageId, contentType, categoryId) => {\n  const translatedContents = contentList.map((v) => {\n    if (v.translate_language_id === translateLanguageId) {\n        v.dispText = v.content;\n        return v;\n    }\n\n    const translation = v[contentType].filter(v => {\n      return (v.translate_language_id === translateLanguageId);\n    })[0];\n\n    v.dispText = translation.content;\n    return v;\n\n  });\n\n  return translatedContents;\n};","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\n\nclass Translator extends Component {\n\n  render() {\n    const { user } = this.props;\n    const { name, image_path, profile_link } = user;\n    const { formatMessage } = this.props.intl;\n    const msg = formatMessage({id: \"translated.name\"});\n\n    return (\n      <div className=\"uk-text-right\">\n        <div className=\"uk-comment-meta uk-display-inline-block\" style={{padding: '0 10px'}}>{ msg }</div>\n        <div className=\"uk-display-inline-block\">\n          <Link to={profile_link}>\n            <img className=\"uk-comment-avatar uk-border-circle uk-text-right\" src={image_path} width=\"35\" height=\"35\" alt={name} />\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(Translator);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const POST_VOTE = Symbol('POST_VOTE');\nexport const DELETE_VOTE = Symbol('DELETE_VOTE');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\n\n//createAction(FETCH_QUESTION_LIST)はFETCH_QUESTION_LISTという名前でアクションを発火させる。\nexport const postVote = createAction(POST_VOTE);\nexport const deleteVote = createAction(DELETE_VOTE);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { getFilteredContents, getTranslatedContents } from '../utils/Translations';\nimport { injectIntl } from 'react-intl';\nimport { sprintf } from 'sprintf-js';\nimport Translator from './Translator';\n//componentの中でdispatchするための設定\nimport { connect } from 'react-redux';\n//評価するための関数\nimport { postVote, deleteVote } from '../actions/Vote';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nclass QuestionListView extends Component {\n\n  sendVote(question) {\n    if (this.props.user.id == null) {\n      return;\n    }\n    const params = {\n      user_id: this.props.user.id,\n      question_id: question.id,\n      answer_id: null,\n      comment_id: null,\n      status: 1,\n      country_id: question.country_id,\n    };\n    const key = \"questionList\";\n    const data = { params,  key };\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(question) {\n    if (this.props.user.id == null) {\n      return;\n    }\n    const params = {\n      user_id: this.props.user.id,\n      key : \"question\",\n      //他のコンテンツと共通化するためvote_idというkeyにする\n      vote_id: question.id,\n      country_id: question.country_id,\n    };\n    const key = \"questionList\";\n    const data = { params,  key };\n    return this.props.handleDeleteVote(data);\n  }\n\n  selectedNationalFlag(countryId) {\n    let src;\n    switch(countryId) {\n      case 1:\n        src = \"japan\";\n        break;\n      case 2:\n        src = \"america\";\n        break;\n      default :\n        src = \"japan\";\n        break;\n    }\n    return <img className=\"\" src={`/image/common/flag/${src}.png`} style={{border: \"1px solid #dcdcdc\"}} width=\"25\" height=\"25\" alt=\"\"/>;\n  }\n\n  getQuestionList(questionArray, translateLanguageId, categoryId) {\n    const contentType = 'question_translations';\n    const filteredQuestions = getFilteredContents(questionArray, translateLanguageId, contentType, categoryId);\n    const translatedQuestions = getTranslatedContents(filteredQuestions, translateLanguageId, contentType, categoryId);\n\n    return translatedQuestions.map(question => {\n      const { user } = question;\n      const userName = user ? user.name : '不明なユーザー';\n      const profileLink = `/users/profile/${user.id}`;\n      const { formatMessage } = this.props.intl\n\n      const { votes } = question;\n      const myVotes = votes.filter(v => {return v.user_id === this.props.user.id});\n      const voteState = myVotes.length !== 0;\n      const votebutton = voteState\n                       ? <a onClick={this.deleteVote.bind(this, question)}><FontAwesomeIcon icon=\"heart\" color=\"red\" size=\"lg\"/></a>\n                       : <a onClick={this.sendVote.bind(this, question)}><FontAwesomeIcon icon={['far','heart']} color=\"gray\" size=\"lg\"/></a>;\n\n      const voteNumbers = <span className=\"uk-text-default\">{ votes.length }</span>;\n      const nationalFlag = this.selectedNationalFlag(user.country_id);\n\n      const { question_translations } = question;\n      let translator;\n      translator = (\n        <h4 className=\"uk-comment-meta uk-text-right\">\n          { formatMessage({id: \"translated.state\" })}\n        </h4>\n      );\n      if (question_translations.length !== 0) {\n        const { user } = question_translations[0];\n        translator = <Translator user={user} />;\n      }\n\n      return (\n        <li key={question.id} >\n          <p>\n            <span className=\"uk-text-muted\">{ formatMessage({id: question.category.intl_key })}</span>\n            <span className=\"uk-text-meta uk-margin-small-left\">{dayjs(question.created_at).format('YYYY/MM/DD HH:mm:ss')}</span>\n          </p>\n          <p className=\"uk-text-lead uk-text-truncate\" ><Link to={`/questions/${question.id}`}>{`${question.dispText}`}</Link></p>\n          <div className=\"button-area uk-margin-small-bottom\" >\n            <span>\n              { votebutton }\n              { voteNumbers }\n            </span>\n            <Link to={`/question_translations/${question.id}`} className=\"uk-margin-small-left\" >\n              <FontAwesomeIcon icon=\"globe-americas\" color=\"steelblue\" size=\"lg\"/>\n            </Link>\n          </div>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div className=\"uk-width-auto\">\n              <Link to={profileLink}><img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" /></Link>\n            </div>\n            <div>\n              <h4 className=\"uk-comment-meta uk-margin-remove\"><Link className=\"\" to={profileLink}>{ userName }</Link></h4>\n            </div>\n            <div className=\"uk-width-auto\" >\n              { nationalFlag }\n            </div>\n            <div className=\"uk-width-expand\" >\n              { translator }\n            </div>\n          </div>\n        </li>\n      )\n    });\n  }\n\n  getQuestionListView(questionArray, translateLanguageId, categoryId) {\n    const questionList = this.getQuestionList(questionArray, translateLanguageId, categoryId);\n\n    return (\n      <div>\n        <ul className=\"uk-list uk-list-divider uk-list-large\">\n          {questionList}\n        </ul>\n      </div>\n    );\n  }\n\n  render() {\n    const { questionArray, translateLanguageId, categoryId } = this.props;\n    const content = this.getQuestionListView(questionArray, translateLanguageId, categoryId);\n\n    return (\n      <div>\n        {content}\n      </div>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  const { categoryId } = state.ctgr;\n  const { intl } = state;\n\n  return {\n    user,\n    categoryId,\n    intl\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    //評価機能\n    handlePostVote: (data) => dispatch(postVote(data)),\n    handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(QuestionListView));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport QuestionListView from './QuestionListView';\n\nclass QuestionList extends Component {\n\n  componentDidMount() {\n    const { questionArray } = this.props.state.questions;\n    const categoryId = this.props.state.ctgr.categoryId;\n\n    if (questionArray.length !== 0) {\n      return;\n    }\n\n    let params \n    params = {};\n    if (categoryId !== 0){\n      params = { category_id: categoryId };\n    }\n    this.props.handleFetchData(params);\n  }\n\n  render() {\n    const { isFetching, questionArray } = this.props.state.questions;\n    const { translateLanguageId } = this.props.state.intl;\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    return (\n      <QuestionListView questionArray={questionArray} translateLanguageId={translateLanguageId} loginUser={this.props.state.auth.user.id}/>\n    );\n  }\n}\n\nexport default QuestionList;\n","import { connect } from 'react-redux';\nimport { fetchQuestionList } from '../actions/Question';\nimport QuestionList from '../components/QuestionList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (queryData) => dispatch(fetchQuestionList(queryData)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionList);\n","import React, { Component } from 'react';\nimport { Field } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass LanguageFormSelect extends Component {\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { name, placeholder } =  this.props;\n\n    return (\n      <Field name={name} component=\"select\" className={'form-control uk-select'}>\n        <option value=\"\">{placeholder}</option>\n        <option value=\"1\" >{ formatMessage({id: \"languages.japanese\" })}</option>\n        <option value=\"2\" >{ formatMessage({id: \"languages.english\" })}</option>\n      </Field>\n    );\n  }\n}\n\nexport default injectIntl(LanguageFormSelect);\n","import React, { Component } from 'react';\nimport { Field } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass CategoryFormSelect extends Component {\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { name, placeholder } =  this.props;\n    \n    return (\n      <Field name={name} component=\"select\" className={'form-control uk-select'}>\n        <option value=\"\">{placeholder}</option>\n        <option value=\"1\" >{ formatMessage({id: \"categories.subculture\" })}</option>\n        <option value=\"2\" >{ formatMessage({id: \"categories.culture\" })}</option>\n        <option value=\"3\" >{ formatMessage({id: \"categories.tourism\" })}</option>\n        <option value=\"4\" >{ formatMessage({id: \"categories.music\" })}</option>\n      </Field>\n    );\n  }\n}\n\nexport default injectIntl(CategoryFormSelect);\n","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport CategoryFormSelect from './CategoryFormSelect';\nimport { injectIntl } from 'react-intl';\nimport { Persist } from 'formik-persist';\n\nclass QuestionForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      // errors.content = formatMessage({id: \"errors.questions.content\"});\n      errors.content = \"errors.questions.content\";\n    }\n    if (!values.country_id) {\n      // errors.country_id = formatMessage({id: \"errors.questions.country_id\"});\n      errors.country_id  = \"errors.questions.country_id\";\n    }\n    if (!values.translate_language_id) {\n      // errors.translate_language_id = formatMessage({id: \"errors.questions.translate_language_id\"});\n      errors.translate_language_id = \"errors.questions.translate_language_id\";\n    }\n    if (!values.category_id) {\n      // errors.category_id = formatMessage({id: \"errors.questions.category_id\"});\n      errors.category_id = \"errors.questions.category_id\";\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues } = this.props;\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: 'placeholders.questions.content'})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n                {touched.content && errors.content && <div className=\"uk-text-warning\">{ formatMessage({id: errors.content}) }</div>}\n                {/* {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>} */}\n                <Persist name=\"question-form\"/>\n              </div>\n              <div className=\"uk-margin uk-grid uk-grid-small uk-child-width-expand@s\" >\n                <div className=\"uk-grid-margin\" >\n                  <Field name=\"country_id\" component=\"select\" className={'form-control uk-select'}>\n                    <option value=\"\">{formatMessage({id: \"placeholders.questions.country_id\"})}</option>\n                    <option value=\"1\" >{ formatMessage({id: \"countries.japan\" })}</option>\n                    <option value=\"2\" >{ formatMessage({id: \"countries.usa\" })}</option>\n                  </Field>\n                  {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{ formatMessage({id: errors.country_id}) }</div>}\n                  {/* {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{errors.country_id}</div>} */}\n                </div>\n                <div className=\"uk-grid-margin\" >\n                  <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.questions.translate_language_id\"})} />\n                  {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{ formatMessage({id: errors.translate_language_id}) }</div>}\n                  {/* {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>} */}\n                </div>\n                {/* カテゴリー指定 */}\n                <div className=\"uk-grid-margin\" >\n                  <CategoryFormSelect name=\"category_id\" placeholder={formatMessage({id: \"placeholders.questions.category_id\"})} />\n                  {touched.category_id && errors.category_id && <div className=\"uk-text-warning\">{ formatMessage({id: errors.category_id}) }</div>}\n                  {/* {touched.category_id && errors.category_id && <div className=\"uk-text-warning\">{errors.category_id}</div>} */}\n                </div>\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-default\" >{formatMessage({id: \"placeholders.questions.submit_btn\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(QuestionForm);","import React from 'react';\nimport QuestionList from '../containers/QuestionList';\nimport QuestionForm from './QuestionForm';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\n\nclass Home extends React.Component {\n\n  submitQuestionForm(formData) {\n    try {\n      const { user, isLoggedIn } = this.props.state.auth;\n      console.log(\"this.props\",this.props);\n      if (!isLoggedIn) {\n        const { history } = this.props;\n        this.props.alertMessage(\"ログインしてください。\");\n        return history.push(\"/users/login\");\n      }\n      const { content, translate_language_id, country_id, category_id } = formData;\n      const user_id = user.id;\n      const postData = { content, user_id, translate_language_id, country_id, category_id };\n      return this.props.handleSubmit(postData);\n    } catch (e) {\n      console.log('e.message', e.message);\n      return;\n    }\n  }\n\n  selectedCategory(value) {\n    switch(value) {\n      case \"all\" :\n        return 0;\n      case \"subculture\":\n        return 1;\n      case \"culture\":\n        return 2;\n      case \"tourism\":\n        return 3;\n      case \"music\":\n        return 4;\n      default:\n        return 0;\n    }\n  }\n\n  changeCateogryfunction(value) {\n     this.props.changeCategory(value);\n     const categoryId = this.selectedCategory(value);\n     let params;\n     params = {};\n     if (categoryId !== 0) {\n       params = { category_id: categoryId };\n     }\n     this.props.handleFetchData(params);\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { locale, translateLanguageId } = this.props.state.intl;\n    const { category } = this.props.state.ctgr;\n    const { auth } = this.props.state;\n    const questionFormInitVals = {\n      content: '',\n      country_id: '',\n      translate_language_id: '',\n      category_id: ''\n    };\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <QuestionForm initialValues={questionFormInitVals} loginUser={auth} onSubmit={this.submitQuestionForm.bind(this)} />\n        {/* 言語切り替え */}\n        <h3 className=\"uk-heading-line\"><span>{ formatMessage({id: \"titles.question_list\" })}</span></h3>\n        <div className=\"uk-margin\">\n          <select className=\"uk-select\" value={locale} onChange={e => this.props.changeLanguage(e.target.value)} >\n            <option value=\"ja\" >{ formatMessage({id: \"languages.japanese\" })}</option>\n            <option value=\"en\" >{ formatMessage({id: \"languages.english\" })}</option>\n          </select>\n        </div>\n        {/* カテゴリー切り替え */}\n        <div className=\"uk-margin\">\n          <select className=\"uk-select\" value={category} onChange={e => this.changeCateogryfunction( e.target.value )} >\n            <option value=\"all\" >{ formatMessage({id: \"categories.all\" })}</option>\n            <option value=\"subculture\" >{ formatMessage({id: \"categories.subculture\" })}</option>\n            <option value=\"culture\" >{ formatMessage({id: \"categories.culture\" })}</option>\n            <option value=\"tourism\" >{ formatMessage({id: \"categories.tourism\" })}</option>\n            <option value=\"music\" >{ formatMessage({id: \"categories.music\" })}</option>\n          </select>\n        </div>\n        <QuestionList translate_language_id={translateLanguageId}/>\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(Home);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const UPDATE_CURRENT_LANGUAGE = Symbol('UPDATE_CURRENT_LANGUAGE');\n\n\nexport const updateCurrentLanguage = createAction(UPDATE_CURRENT_LANGUAGE);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const UPDATE_CURRENT_CATEGORY = Symbol('UPDATE_CURRENT_CATEGORY');\nexport const updateCurrentCategory = createAction(UPDATE_CURRENT_CATEGORY);","import { createAction } from 'redux-actions';\n\nexport const ACTION_ALERT_MESSAGE = Symbol('ACTION_ALERT_MESSAGE');\n\nexport const actionAlertMessage = createAction(ACTION_ALERT_MESSAGE);\n\n","import { connect } from 'react-redux';\nimport Home from '../components/Home';\nimport {\n  postQuestionData,\n  fetchQuestionList\n} from '../actions/Question';\nimport {\n  updateCurrentLanguage,\n} from '../actions/Intl';\nimport {\n  updateCurrentCategory,\n} from '../actions/Category';\nimport {\n  actionAlertMessage,\n} from '../actions/Notification';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleSubmit: (postData) => dispatch(postQuestionData(postData)),\n    changeLanguage: (locale) => dispatch(updateCurrentLanguage(locale)),\n    changeCategory: (category) => dispatch(updateCurrentCategory(category)),\n    handleFetchData: (queryData) => dispatch(fetchQuestionList(queryData)),\n    alertMessage: (message) => dispatch(actionAlertMessage(message)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\n//<AnswerForm qId={this.qId} initialValues={answerFormInitVals} onSubmit={this.handleSubmit.bind(this)} />\n//この中のqId={this.qId} initialValues={answerFormInitVals} onSubmit={this.handleSubmit.bind(this)は\n//props（プロパティーの中に)入る。props.qIdという形式で値を取り出すことができる。\n\nclass AnswerForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.answers.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.answers.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues } = this.props;\n    const { formatMessage } = this.props.intl;\n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: 'placeholders.answers.content'})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n                {touched.content && errors.content && <div className=\"uk-text-warning\" >{errors.content}</div>}\n              </div>\n              <div className=\"uk-grid-margin\" >\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: 'placeholders.answers.translate_language_id'})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\" >{errors.translate_language_id}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"placeholders.answers.submit_btn\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(AnswerForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const CHANGE_ANSWER_FORM_CONTENT = Symbol('CHANGE_ANSWER_FORM_CONTENT');\nexport const FETCH_ANSWER_LIST = Symbol('FETCH_ANSWER_LIST');\nexport const FETCH_ANSWER = Symbol('FETCH_ANSWER');\nexport const POST_ANSWER_DATA = Symbol('POST_ANSWER_DATA');\nexport const INITIALIZE_FORM = Symbol('INITIALIZE_FORM');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const SAVE_ANSWER_DATA = Symbol('SAVE_ANSWER_DATA');\nexport const DELETE_ANSWER = Symbol('DELETE_ANSWER');\n\nexport const changeAnswerFormContent = createAction(CHANGE_ANSWER_FORM_CONTENT);\nexport const fetchAnswerList = createAction(FETCH_ANSWER_LIST);\nexport const fetchAnswer = createAction(FETCH_ANSWER);\nexport const postAnswerData = createAction(POST_ANSWER_DATA);\nexport const initializeForm = createAction(INITIALIZE_FORM);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const saveAnswerData = createAction(SAVE_ANSWER_DATA);\nexport const deleteAnswer = createAction(DELETE_ANSWER);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_COMMENT_DATA_SUCCESS = Symbol('RECEIVE_COMMENT_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const FETCH_SINGLE_COMMENT = Symbol('FETCH_SINGLE_COMMENT');\nexport const FETCH__COMMENT_WITH_USER_LIST = Symbol('FETCH__COMMENT_WITH_USER_LIST');\nexport const POST_COMMENT = Symbol('POST_COMMENT');\nexport const UPDATE_COMMENT = Symbol('UPDATE_COMMENT');\nexport const UPDATED_COMMENT_DATA = Symbol('UPDATED_COMMENT_DATA');\nexport const UPDATED_SINGLE_COMMENT_DATA = Symbol('UPDATED_SINGLE_COMMENT_DATA');\nexport const SAVE_COMMENT_DATA = Symbol('SAVE_COMMENT_DATA');\nexport const DELETE_COMMENT = Symbol('DELETE_COMMENT');\nexport const UPDATED_COMMENT_ARRAY = Symbol('UPDATED_COMMENT_ARRAY');\n\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveCommentDataSuccess = createAction(RECEIVE_COMMENT_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const postComment = createAction(POST_COMMENT);\nexport const fetchSingleComment = createAction(FETCH_SINGLE_COMMENT);\nexport const fetchCommentWithUserList = createAction(FETCH__COMMENT_WITH_USER_LIST);\nexport const updateComment = createAction(UPDATE_COMMENT);\nexport const updatedCommentData = createAction(UPDATED_COMMENT_DATA);\nexport const updatedSingleCommentData = createAction(UPDATED_SINGLE_COMMENT_DATA);\nexport const deleteComment = createAction(DELETE_COMMENT);\nexport const saveCommentData = createAction(SAVE_COMMENT_DATA);\nexport const updatedCommentArray = createAction(UPDATED_COMMENT_ARRAY);\n\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\n//componentの中でdispatchするための設定\nimport { connect } from 'react-redux';\n//評価するための関数\nimport { postVote, deleteVote } from '../actions/Vote';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { sprintf } from 'sprintf-js';\nimport { injectIntl } from 'react-intl';\nimport Translator from './Translator';\n\n\nclass Comment extends Component {\n\n  sendVote(commentId, currentQuestionId){\n    if(this.props.user.id == null ){\n      return;\n    }\n    const params = {\n      user_id: this.props.user.id,\n      question_id: null,\n      answer_id: null,\n      comment_id: commentId,\n      status: 1,\n      //再レンダリングするためのquestion_id\n      questionId: currentQuestionId,\n    };\n    const key = \"comment\";\n    const data = { params, key };\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(commentId, currentQuestionId) {\n    if(this.props.user.id == null ){\n      return;\n    }\n    const params = {\n      user_id: this.props.user.id,\n      key : \"comment\",\n      //他のコンテンツと共通化するためvote_idというkeyにする\n      vote_id: commentId,\n      //再レンダリングするためのquestion_id\n      questionId: currentQuestionId,\n    };\n    const key = \"comment\";\n    const data = { params,  key };\n    return this.props.handleDeleteVote(data);\n  }\n\n  selectedNationalFlag(countryId) {\n    let src;\n    switch(countryId) {\n      case 1:\n        src = \"japan\";\n        break;\n      case 2:\n        src = \"america\";\n        break;\n      default:\n        src = \"japan\";\n        break;\n    }\n    return <img className=\"uk-box-shadow-medium\" src={`/image/common/flag/${src}.png`} style={{border: \"1px solid #dcdcdc\"}} width=\"25\" height=\"25\" alt=\"\"/>;\n  }\n\n  render() {\n    const { id, user, content, isOwner, voteList, questions, commentUser, comments, answerId, intl} = this.props;\n    const currentQuestionId = questions.currentQuestion.id;\n    const editLink = isOwner\n                   ? <Link to={`/comments/edit/${id}`}>編集</Link>\n                   : '';\n    const myVotes = voteList.filter(v => {return v.user_id === user.id});\n    const voteState = myVotes.length !== 0;\n    const votebutton = voteState\n                     ? <a onClick={this.deleteVote.bind(this, id, currentQuestionId)}><FontAwesomeIcon icon=\"heart\" color=\"red\" size=\"lg\"/></a>\n                     : <a onClick={this.sendVote.bind(this, id, currentQuestionId)}><FontAwesomeIcon icon={['far','heart']} color=\"gray\" size=\"lg\"/></a>;\n    const voteNumbers = <span className=\"uk-text-default\">{ voteList.length }</span>;\n    const nationalFlag = this.selectedNationalFlag(user.country_id);\n    const { formatMessage } = intl;\n    const { commentArray } = comments;\n\n    let translator;\n    translator = <h4 className=\"uk-comment-meta uk-text-right\">{formatMessage({id: 'translated.state'})}</h4>;\n    if(typeof commentArray !== 'undefined'){\n      const thisAnswerCommentList = commentArray[answerId] ;\n      const thisCommentData = thisAnswerCommentList.filter(v => v.id === id);\n      const commentTranslated = thisCommentData[0].comment_translations;\n      if (commentTranslated.length !== 0) {\n        const { user } = commentTranslated[0];\n        translator = <Translator user={user} />;\n      }\n    }\n\n    return (\n      <article className=\"uk-comment uk-comment-primary\">\n        <div className=\"uk-comment-header uk-comment-body\">\n          <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n            {content}\n            <Link to={`/comment_translations/${id}`}><FontAwesomeIcon icon=\"globe-americas\" color=\"steelblue\" size=\"lg\"/></Link>\n          </p>\n        </div>\n        <div className=\"uk-grid uk-grid-small uk-flex-middle\">\n          <div className=\"uk-width-auto\">\n            <img className=\"uk-comment-avatar uk-border-circle\" src={commentUser.image_path} width=\"35\" height=\"35\" alt=\"\" />\n          </div>\n          <div>\n            <h4 className=\"uk-comment-meta uk-margin-remove\"><Link className=\"\" to={`/users/profile/${commentUser.id}`}>{ commentUser.name }</Link></h4>\n          </div>\n          <div className=\"uk-width-expand\" >\n            { nationalFlag }\n          </div>\n          <div className=\"uk-width-expand\" >\n            { translator }\n          </div>\n          { editLink }\n          { votebutton }\n          { voteNumbers }\n\n        </div>\n      </article>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { questions, comments } = state;\n  const { user } = state.auth;\n  const { intl } = state;\n  return {\n    user,\n    questions,\n    comments,\n    intl,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    //評価機能\n    handlePostVote: (data, questionId) => dispatch(postVote(data, questionId)),\n    handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(Comment))\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Comment from './Comment';\nimport { getFilteredContents, getTranslatedContents } from '../utils/Translations';\n\n\nclass CommentList extends Component {\n\n  render() {\n    const { loginUser, translateLanguageId } = this.props;\n    const commentList = this.props.list ? this.props.list : [];\n    const contentType = 'comment_translations';\n    const filteredCommentList = getFilteredContents(commentList, translateLanguageId, contentType);\n    const translatedCommentList = getTranslatedContents(filteredCommentList, translateLanguageId, contentType);\n\n    return (\n      <ul className=\"uk-comment-list\" >\n        { translatedCommentList.map((v, i) => {\n            const isOwner = loginUser.id === v.user.id;\n            const voteState = v.votes;\n\n            return (\n              <li className=\"uk-margin-small-top\" key={i} >\n                <Comment id={v.id} answerId={v.answer_id} commentUser={v.user} content={v.dispText} isOwner={isOwner} voteList={ voteState } />\n              </li>\n            );\n        })}\n      </ul>\n    );\n  }\n}\n\nexport default CommentList;\n","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { Persist } from 'formik-persist';\n\nclass CommentForm extends Component {\n\n  validate(values) {\n    let errors = {};\n    if (!values.content) {\n      errors.content = 'コメントが空欄です';\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = '投稿言語を指定してください';\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues, state } = this.props;\n    const postButton = state.auth.isLoggedIn\n                     ? <div className=\"uk-margin\"><button className=\"uk-button uk-button-default\" >投稿</button></div>\n                     : <a class=\"uk-button uk-button-default\" href='/users/login'>投稿</a>;\n                     \n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        // validate={this.validate.bind(this)}\n\n        validate={this.validate}\n        onSubmit={(values, { setSubmitting, setErrors }) => {\n            return this.props.onSubmit(values);\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder=\"コメントを入力してください\"\n                     rows=\"3\"\n                     className={'form-control uk-textarea'}\n                />\n                <Persist name={`\"comment-form\"${values.answer_id}`}/>\n                {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder=\"投稿言語\" />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n              </div>\n              {postButton}\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    state\n  };\n};\n\nexport default connect(mapStateToProps)(CommentForm);\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport Linkify from 'react-linkify';\nimport CommentList from './CommentList';\nimport CommentForm from './CommentForm';\nimport dayjs from 'dayjs';\nimport { getFilteredContents, getTranslatedContents } from '../utils/Translations';\nimport { injectIntl } from 'react-intl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { sprintf } from 'sprintf-js';\nimport Translator from './Translator';\n\n\nclass AnswerList extends Component {\n  constructor(props) {\n    super(props);\n    this.qId = this.props.qId;\n    //ここからはコメント機能を実装するところ\n    this.state = {\n      buttonState: {},//空のオブジェクト\n      voteState: {},//評価のための\n    };\n  }\n\n  componentWillMount() {\n    const question_id = this.props.qId;\n    /* const translate_language_id = this.props.translateLanguageId;*/\n    this.props.handleFetchData({ question_id });\n  }\n\n  onClickCommentForm(formData) {\n    const { user } = this.props.state.auth;\n    const { answer_id, translate_language_id, content } = formData;\n    const answerIds = this.props.state.answers.answerArray.map((v) =>{ return v.id })\n    const postData = {\n      user_id: user.id,\n      answer_id,\n      translate_language_id,\n      content,\n      question_id: this.qId,\n      current_translate_language_id: this.translateLanguageId,\n      //翻訳済みコメントのリストを取得するためのAnswer_idリスト\n      answerIdList: answerIds,\n    };\n    return this.props.handlePostComment(postData);\n  }\n\n  getComment(answerId) {\n\n    const { buttonState } = this.state;\n\n    if (buttonState[answerId] !== \"open\") {\n      return \"\";\n    }\n\n    const initialValues = {\n      answer_id: answerId,\n      content: \"\",\n      translate_language_id: \"\",\n    };\n    return (\n      <div className=\"uk-margin-bottom\" style={{\"paddingLeft\": \"30px\"}} >\n        {/*commentFormはコメントを投稿する場所*/}\n        <CommentForm form={`commentForm_${answerId}`} onSubmit={this.onClickCommentForm.bind(this)} initialValues={initialValues} />\n      </div>\n    );\n  }\n\n  onClickReply(answerId) {\n    //値がtrueかfalseか値を取得\n    let { buttonState } = this.state;\n\n    if (buttonState[answerId] && buttonState[answerId] === \"open\") {\n      buttonState[answerId] = \"close\";\n      this.setState({buttonState});\n      return\n    } else {\n      buttonState[answerId] = \"open\";\n      this.setState({buttonState});\n      return\n    }\n  }\n\n  sendVote(answerId, currentQuestionId){\n    if(this.props.state.auth.user.id == null ){\n      return;\n    }\n    const params = {\n      user_id: this.props.state.auth.user.id,\n      question_id: null,\n      answer_id: answerId,\n      comment_id: null,\n      status: 1,\n      //再レンダリングするためのquestion_id\n      questionId: currentQuestionId,\n    };\n    const key = \"answer\";\n    const data = { params, key };\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(answerId, currentQuestionId) {\n    if(this.props.state.auth.user.id == null ){\n      return;\n    }\n    const params = {\n      user_id: this.props.state.auth.user.id,\n      key : \"answer\",\n      //他のコンテンツと共通化するためvote_idというkeyにする\n      vote_id: answerId,\n      //再レンダリングするためのquestion_id\n      questionId: currentQuestionId,\n    };\n    const key = \"answer\";\n    const data = { params, key };\n    return this.props.handleDeleteVote(data);\n  }\n\n  selectedNationalFlag(countryId){\n    let src;\n    switch(countryId){\n      case 1:\n        src = \"japan\";\n        break;\n      case 2:\n        src = \"america\";\n        break;\n    }\n    return <img className=\"uk-box-shadow-medium\" src={`/image/common/flag/${src}.png`} style={{border: \"1px solid #dcdcdc\"}} width=\"25\" height=\"25\" alt=\"\"/>;\n  }\n\n  getAnswerList(answerArray, translateLanguageId) {\n    const { formatMessage } = this.props.intl;\n    const loginUser = this.props.state.auth.user;\n\n    const contentType = 'answer_translations';\n    const filteredAnswers = getFilteredContents(answerArray, translateLanguageId, contentType);\n    const translatedAnswers = getTranslatedContents(filteredAnswers, translateLanguageId, contentType);\n\n    return translatedAnswers.map(answer => {\n      const editLink = answer.user.id === loginUser.id\n                     ? <Link to={`/answers/edit/${answer.id}`}>{ formatMessage({id: \"links.edit\"}) }</Link>\n                     : '';\n\n      const myVotes = answer.votes.filter(v => {return v.user_id === loginUser.id});\n      const voteState = myVotes.length !== 0;\n      const votebutton = voteState\n                       ? <a onClick={this.deleteVote.bind(this,  answer.id, this.props.qId)}><FontAwesomeIcon icon=\"heart\" color=\"red\" size=\"lg\"/></a>\n                       : <a onClick={this.sendVote.bind(this,  answer.id, this.props.qId)}><FontAwesomeIcon icon={['far','heart']} color=\"gray\" size=\"lg\"/></a>;\n      const voteNumbers = <span className=\"uk-text-default\">{ answer.votes.length }</span>;\n      const commentForm = this.getComment(answer.id);\n      const nationalFlag = this.selectedNationalFlag(answer.user.country_id);\n\n      const { answer_translations } = answer;\n\n      let translator;\n      translator = <h4 className=\"uk-comment-meta uk-text-right\">{formatMessage({id: 'translated.state'})}</h4>;\n      if (answer_translations.length !== 0) {\n        const { user } = answer_translations[0];\n        translator = <Translator user={user} />;\n      }\n\n      return (\n        <li key={answer.id} >\n          <article className=\"uk-comment\">\n            <div className=\"uk-comment-header uk-comment-body\">\n              <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n                <Linkify properties={{ target: '_blank'}} >{answer.dispText}</Linkify>\n                <Link to={`/answer_translations/${answer.id}`}><FontAwesomeIcon icon=\"globe-americas\" color=\"steelblue\" size=\"lg\"/></Link><br/>\n                { editLink }\n                { votebutton }\n                { voteNumbers }\n              </p>\n              <p className=\"uk-text-meta\">{dayjs(answer.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n\n            </div>\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n              <div className=\"uk-width-auto\">\n                <img className=\"uk-comment-avatar uk-border-circle\" src={answer.user.image_path} width=\"35\" height=\"35\" alt=\"\" />\n              </div>\n              <div>\n                <h4 className=\"uk-comment-meta uk-margin-remove\"><Link className=\"\" to={`/users/profile/${answer.user.id}`}>{ answer.user.name }</Link></h4>\n              </div>\n              <div className=\"uk-width-expand\" >\n                { nationalFlag }\n              </div>\n              <div className=\"uk-width-expand\" >\n                { translator }\n              </div>\n            </div>\n          </article>\n          <hr className=\"uk-divider-small\" />\n          <div className=\"uk-margin-bottom\" >\n            {/*CommentListはすでに投稿されたコメントの一覧を表示する*/}\n            <CommentList list={answer.comments} loginUser={loginUser} translateLanguageId={translateLanguageId} />\n            <div className=\"uk-text-right uk-margin-top\">\n              <p onClick={this.onClickReply.bind(this,answer.id)}><FontAwesomeIcon icon={['far','comment-dots']} color=\"black\" size=\"3x\"/></p>\n            </div>\n          </div>\n\n          {commentForm}\n\n        </li>\n      );\n    });\n  }\n\n  render() {\n    const { isFetching, answerArray } = this.props.state.answers;\n    const { formatMessage } = this.props.intl;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const { translateLanguageId } = this.props;\n    const answerList = this.getAnswerList(answerArray, translateLanguageId);\n\n    if (answerList.length === 0) {\n      return (\n        <div>\n          <h4 className=\"uk-text-success\">{formatMessage({id: \"messages.empty_answers\"})}</h4>\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        <ul className=\"uk-list uk-list-divider uk-list-large\" >\n          { answerList }\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(AnswerList);\n","import { connect } from 'react-redux';\nimport { fetchAnswerList } from '../actions/Answer';\nimport { postComment } from '../actions/Comment';\nimport AnswerList from '../components/AnswerList';\n//評価するための関数\nimport { postVote, deleteVote } from '../actions/Vote';\n\n\n\n//this.propsを取得する\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (data) => dispatch(fetchAnswerList(data)),\n        handlePostComment: (data) => dispatch(postComment(data)),\n        //評価機能\n        handlePostVote: (data) => dispatch(postVote(data)),\n        //評価の削除機能\n        handleDeleteVote: (data) => dispatch(deleteVote(data)),\n    };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerList);\n","'use strict';\n\nexport function isEmptyObject(obj) {\n  return !Object.keys(obj).length;\n}\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport Linkify from 'react-linkify';\nimport AnswerForm from './AnswerForm';\nimport AnswerList from '../containers/AnswerList';\nimport dayjs from 'dayjs';\nimport { sprintf } from 'sprintf-js';\nimport { injectIntl } from 'react-intl';\nimport { isEmptyObject } from '../utils';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Translator from './Translator';\n\nclass QuestionView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.qId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getQuestionById(this.qId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      //authの中にあるuserキーに対応するvalueを取り出す。という意味\n      const { user } = this.props.state.auth;\n      //formDataの中のcontent,translate_langugase_idを取り出す\n      const { content, translate_language_id } = formData;\n      const question_id = this.qId;\n      const user_id = user.id;\n      /* const { translate_language_id } = currentQuestion;*/\n      return this.props.handleSubmit({content, question_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  getTranslatedQuestion(question, translateLanguageId) {\n    if (question.translate_language_id === translateLanguageId) {\n      question.dispText = question.content;\n      return question;\n    }\n    const questionTranslation = question.question_translations.filter(question => {\n      //「DBに保存されている言語id」と「画面に表示されている言語」が一致している要素だけを取得する。[0]とすることで最初にフィルタリングされたものを取り出す。\n      return (question.translate_language_id === translateLanguageId);\n    })[0];\n\n    //questionの中に新たなdispTextというプロパティを生成する\n    question.dispText = questionTranslation.content;\n    return question;\n  }\n\n  sendVote(question){\n    if (this.props.state.auth.user.id == null) {\n      return;\n    }\n    const params = {\n      user_id: this.props.state.auth.user.id,\n      question_id: question.id,\n      answer_id: null,\n      comment_id: null,\n      status: 1,\n    };\n    const key = \"questionView\";\n    const data = { params,  key };\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(question) {\n    if (this.props.state.auth.user.id == null) {\n      return;\n    }\n    const params = {\n      user_id: this.props.state.auth.user.id,\n      key : \"question\",\n      //他のコンテンツと共通化するためvote_idというkeyにする\n      vote_id: question.id,\n    };\n    const key = \"questionView\";\n    const data = { params,  key };\n    return this.props.handleDeleteVote(data);\n  }\n\n  getAnswerForm(currentQuestion, loginUser) {\n    const { formatMessage } = this.props.intl;\n    if (currentQuestion.country_id !== loginUser.country_id) {\n      const temp = formatMessage({id: \"messages.you_are_not_target\"})\n      const mesasge = sprintf(temp, currentQuestion.country.name);\n      return (\n        <div>\n          <p className=\"uk-text-meta\">{mesasge}</p>\n        </div>\n\n      );\n    }\n\n    const answerFormInitVals = { content: '', translate_language_id: '' };\n    return (\n      <AnswerForm qId={this.qId} initialValues={answerFormInitVals} onSubmit={this.handleSubmit.bind(this)}/>\n    );\n  }\n\n  selectedNationalFlag(countryId) {\n    let src;\n    switch(countryId) {\n      case 1:\n        src = \"japan\";\n        break;\n      case 2:\n        src = \"america\";\n        break;\n    }\n    return <img src={`/image/common/flag/${src}.png`} style={{border: \"1px solid #dcdcdc\"}} width=\"25\" height=\"25\" alt=\"\"/>;\n  }\n\n  getTranslateUser(img) {\n    const { formatMessage } = this.props.intl;\n    const msg = formatMessage({id: \"translated.name\"});\n\n    return (\n      <div className=\"uk-text-right\">\n        <div className=\"uk-comment-meta uk-display-inline-block\" style={{padding: '0 10px'}}>{ msg }</div>\n        <div className=\"uk-display-inline-block\">\n          <img className=\"uk-comment-avatar uk-border-circle uk-text-right\" src={img} width=\"35\" height=\"35\" alt=\"\" />\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { currentQuestion } = this.props.state.questions;\n    const { translateLanguageId } = this.props.state.intl;\n    const { formatMessage } = this.props.intl;\n\n    if (isEmptyObject(currentQuestion)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const loginUser = this.props.state.auth.user;\n    const question = this.getTranslatedQuestion(currentQuestion, translateLanguageId);\n    const { user, votes } = currentQuestion;\n    const answerForm = this.getAnswerForm(currentQuestion, loginUser);\n\n    const editLink = user.id === loginUser.id\n                   ? <p><Link to={`/questions/edit/${this.qId}`}>{formatMessage({id: 'links.edit'})}</Link></p>\n                   : '';\n\n    const myVotes = votes.filter(v => {return v.user_id === loginUser.id});\n    const voteState = myVotes.length !== 0;\n    const votebutton = voteState\n                     ? <a onClick={this.deleteVote.bind(this, currentQuestion)}><FontAwesomeIcon icon=\"heart\" color=\"red\" size=\"lg\"/></a>\n                     : <a onClick={this.sendVote.bind(this, currentQuestion)}><FontAwesomeIcon icon={['far','heart']} color=\"gray\" size=\"lg\"/></a>;\n    const voteNumbers = <span className=\"uk-text-default\">{ votes.length }</span>;\n    const nationalFlag = this.selectedNationalFlag(user.country_id);\n\n    const { question_translations } = question;\n    let translator;\n    translator = <h4 className=\"uk-comment-meta uk-text-right\">{formatMessage({id: 'translated.state'})}</h4>;\n    if (question_translations.length !== 0) {\n      const { user } = question_translations[0];\n      translator = <Translator user={user} />;\n    }\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n          <p className=\"uk-text-muted\">{ question.category.category }</p>\n          <p>\n            <Linkify properties={{ target: '_blank'}} >{question.dispText}</Linkify>\n            <Link to={`/question_translations/${this.qId}`}><FontAwesomeIcon icon=\"globe-americas\" color=\"steelblue\" size=\"lg\"/></Link>\n          </p>\n          <p className=\"uk-text-meta\">{dayjs(question.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div className=\"uk-width-auto\">\n              <img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" />\n            </div>\n            <div>\n              <h4 className=\"uk-comment-meta uk-margin-remove\"><Link className=\"\" to={`/users/profile/${user.id}`}>{ user.name }</Link></h4>\n            </div>\n            <div className=\"uk-width-expand\" >\n                { nationalFlag }\n            </div>\n            <div className=\"uk-width-expand\" >\n                { translator }\n            </div>\n          </div>\n          { editLink }\n          { votebutton }\n          { voteNumbers }\n\n        </div>\n\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.answer_list\"})}</span></h3>\n\n        <div className=\"uk-margin-bottom\">\n          { answerForm }\n        </div>\n          <AnswerList qId={this.qId} translateLanguageId={translateLanguageId} />\n        <hr className=\"uk-divider-icon\" />\n\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default injectIntl(QuestionView);\n","import { connect } from 'react-redux';\nimport QuestionView from '../components/QuestionView';\nimport {\n    fetchQuestion\n} from '../actions/Question';\nimport {\n    postAnswerData,\n    fetchAnswerList\n} from '../actions/Answer';\n//評価するための関数\nimport {\n    postVote,\n    deleteVote\n} from '../actions/Vote';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getQuestionById: (id) => dispatch(fetchQuestion(id)),\n        handleSubmit: (postData) => dispatch(postAnswerData(postData)),\n        fetchAnswers: (question_id) => dispatch(fetchAnswerList(question_id)),\n        handlePostVote: (data) => dispatch(postVote(data)),\n        handleDeleteVote: (data) => dispatch(deleteVote(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionView);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport QuestionForm from './QuestionForm';\nimport { isEmptyObject } from '../utils';\n\nclass QuestionEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.qId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getQuestionById(this.qId);\n  }\n\n  notOwnerWillTransfer(currentQuestion) {\n    const owner = currentQuestion.user;\n    const loginUser = this.props.state.auth.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const question_id = this.qId;\n      /* const { translate_language_id } = currentQuestion;*/\n      const saveData = { content, question_id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        question_id: this.qId,\n        history\n      };\n      return this.props.deleteQuestion(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentQuestion } = this.props.state.questions;\n    if (isEmptyObject(currentQuestion)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentQuestion);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>質問の編集</h2>\n        <QuestionForm initialValues={currentQuestion} onSubmit={this.handleSubmit.bind(this)} />\n        <p><button className=\"uk-button uk-button-danger\" onClick={this.onClickDeleteBtn.bind(this)}>この質問を削除</button></p>\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default QuestionEdit;\n","import { connect } from 'react-redux';\nimport QuestionEdit from '../components/QuestionEdit';\nimport {\n  fetchQuestion,\n  saveQuestionData,\n  deleteQuestion,\n} from '../actions/Question';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestionById: (id) => dispatch(fetchQuestion(id)),\n    handleSubmit: (postData) => dispatch(saveQuestionData(postData)),\n    deleteQuestion: (conditions) => dispatch(deleteQuestion(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionEdit);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const CHANGE_QUESTION_LIST_LANGUAGE = Symbol('CHANGE_QUESTION_LIST_LANGUAGE');\n// export const FETCH_QUESTION_LIST = Symbol('FETCH_QUESTION_LIST');\n\nexport const FETCH_NOT_TRANSLATED = Symbol('FETCH_NOT_TRANSLATED');\n\nexport const FETCH_QUESTION = Symbol('FETCH_QUESTION');\nexport const POST_QUESTION_DATA = Symbol('POST_QUESTION_DATA');\nexport const INITIALIZE_FORM = Symbol('INITIALIZE_FORM');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\n\nexport const changeQuestionListLanguage = createAction(CHANGE_QUESTION_LIST_LANGUAGE);\n// export const fetchQuestionList = createAction(FETCH_QUESTION_LIST);\n\nexport const fetchNotTranslated = createAction(FETCH_NOT_TRANSLATED);\n\nexport const fetchQuestion = createAction(FETCH_QUESTION);\nexport const postQuestionData = createAction(POST_QUESTION_DATA);\nexport const initializeForm = createAction(INITIALIZE_FORM);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nclass NotTranslated extends Component {\n\n  constructor(props) {\n    super(props);\n    //タブの切り替えのための要素\n    this.state = {currentTab: 'questions'};\n  }\n\n  componentDidMount() {\n    const { questions } = this.props.state.not_translate;\n    if (questions.length !== 0) {\n      return;\n    }\n    let params = {};\n    this.props.handleFetchData(params);\n  }\n\n  //各カテゴリの翻訳一覧を表示する関数\n  getNotTranslated(contents, url, key) {\n\n    // getNotTranslatedの関数\n    return contents.map((v) => {\n      const { user } = v;\n      const userName = user ? user.name : '不明なユーザー';\n      const profileLink = `/users/profile/${user.id}`;\n      //コンテンツに対応したidを返す関数\n      const id = this.getNotTranslatedId(v, key);\n\n      // ここreturnはmap関数のreturn\n      return (\n        //ここでcontentの種類+そのコンテンツのidの組み合わせをkeyとすることでこのHTML要素が一意になるようにする\n        <li key={`${key}_${v.id}`} >\n        {/* <li> */}\n          {/* 未翻訳の質問を表示する */}\n          <p className=\"uk-text-lead uk-text-truncate\" >\n            <Link to={`/questions/${id}`}>{`${v.content}`}</Link>\n            <Link to={`${url}${v.id}`}><FontAwesomeIcon icon=\"globe-americas\" color=\"steelblue\" size=\"lg\"/></Link>\n          </p>\n          {/* 作成時間を表示する */}\n          <p className=\"uk-text-meta\">{dayjs(v.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          {/* プロフィールを表示する */}\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div className=\"uk-width-auto\">\n              <Link to={profileLink}><img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" /></Link>\n            </div>\n            <div className=\"uk-width-expand\">\n              <h4 className=\"uk-comment-meta uk-margin-remove\"><Link className=\"\" to={profileLink}>{ userName }</Link></h4>\n            </div>\n          </div>\n        </li>\n      );\n    })\n  }\n\n  //コンテンツに対応したidを返す関数\n  getNotTranslatedId(v, key) {\n    switch(key) {\n      case \"questions\":\n        return v.id;\n      case \"answers\":\n        return v.question_id;\n      case \"comments\":\n        return v.answer.question_id;\n    }\n  }\n\n  //コンテンツに対応したurlを付加する関数\n  getNotTranslatedQuestions(contents) {\n    const url = \"/question_translations/\";\n    const key = \"questions\";\n    return this.getNotTranslated(contents, url, key);\n  }\n  getNotTranslatedAnswers(contents) {\n    const url = \"/answer_translations/\";\n    const key = \"answers\";\n    return this.getNotTranslated(contents, url, key);\n  }\n  getNotTranslatedComments(contents) {\n    const url = \"/comment_translations/\";\n    const key = \"comments\";\n    console.log('contents', contents);\n    return this.getNotTranslated(contents, url, key);\n  }\n\n  //現在のユーザーリスト\n  getCurrentTabContents(tabState, currentTab) {\n    //tabState = state.not_translate の中に3つの連想配列が入っている\n    const { questions, answers, comments } = tabState;\n    if (currentTab === 'questions') {\n      return this.getNotTranslatedQuestions(questions);\n    } else if (currentTab === 'answers') {\n      return  this.getNotTranslatedAnswers(answers);\n    } else if (currentTab === 'comments') {\n      return this.getNotTranslatedComments(comments);\n    }\n  }\n\n  onClickTab(newTabKey, e) {\n    e.preventDefault();\n    e.stopPropagation();\n    //stateの状態変更\n    this.setState({\n      currentTab: newTabKey\n    });\n  }\n\n  getTabList() {\n    const { formatMessage } = this.props.intl;\n    const tabData = [\n      {\n        name: formatMessage({id: \"links.question\"}),\n        key: 'questions'\n      },\n      {\n        name: formatMessage({id: \"links.answer\"}),\n        key: 'answers'\n      },\n      {\n        name: formatMessage({id: \"links.comment\"}),\n        key: 'comments'\n      }\n    ];\n\n    return (\n      <ul className=\"uk-tab\" >\n        {tabData.map(v => {\n           //currentTabとkeyが一致したとき、それをactiveにする\n           const active = this.state['currentTab'] === v.key\n                        ? 'uk-active'\n                        : '';\n           return (\n             <li key={v.key} className={active} onClick={this.onClickTab.bind(this, v.key)} >\n               <a href=\"\">{v.name}</a>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  getNotTranslatedView(state) {\n\n    const { isFetching } = state.not_translate;\n\n    //読み込み中であることを示すロゴを表示する\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const tabContents = this.getCurrentTabContents(state.not_translate, this.state.currentTab);\n\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\" >\n        {tabContents}\n      </ul>\n    );\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const content = this.getNotTranslatedView(this.props.state);\n    const tabList = this.getTabList();\n    \n    return (\n      <div>\n        <div className=\"uk-container uk-container-small\">\n          <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.not_translated_list\"})}</span></h3>\n          <br></br>\n        </div>\n        <div className=\"uk-container uk-container-small\">\n          {tabList}\n          {content}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(NotTranslated);\n","import { connect } from 'react-redux';\nimport { fetchNotTranslated } from '../actions/NotTranslated';\nimport NotTranslated from '../components/NotTranslated';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (queryData) => dispatch(fetchNotTranslated(queryData)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NotTranslated);","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport AnswerForm from './AnswerForm';\nimport { isEmptyObject } from '../utils';\n\nclass AnswerEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.answerId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getAnswerById(this.answerId);\n  }\n\n  notOwnerWillTransfer(currentAnswer) {\n    const owner = currentAnswer.user;\n    const loginUser = this.props.state.auth.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { currentAnswer } = this.props.state.answers;\n      const { content, translate_language_id, country_id } = formData;\n      const { history } = this.props;\n      const answer_id = this.answerId;\n      const { question_id } = currentAnswer;\n      /* const { translate_language_id } = currentQuestion;*/\n      const saveData = { content, answer_id, translate_language_id, country_id, history, question_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { currentAnswer } = this.props.state.answers;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        answer_id: this.answerId,\n        question_id: currentAnswer.question_id,\n        history\n      };\n      return this.props.deleteAnswer(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentAnswer } = this.props.state.answers;\n\n    if (isEmptyObject(currentAnswer)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentAnswer);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>回答の編集</h2>\n        <AnswerForm initialValues={currentAnswer} onSubmit={this.handleSubmit.bind(this)} />\n        <p><button className=\"uk-button uk-button-danger\" onClick={this.onClickDeleteBtn.bind(this)}>この回答を削除</button></p>\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default AnswerEdit;\n","import { connect } from 'react-redux';\nimport AnswerEdit from '../components/AnswerEdit';\nimport {\n  fetchAnswer,\n  saveAnswerData,\n  deleteAnswer,\n} from '../actions/Answer';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAnswerById: (id) => dispatch(fetchAnswer(id)),\n    handleSubmit: (postData) => dispatch(saveAnswerData(postData)),\n    deleteAnswer: (params) => dispatch(deleteAnswer(params)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerEdit);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport CommentForm from './CommentForm';\nimport { isEmptyObject } from '../utils';\n\nclass CommentEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.commentId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getCommentById(this.commentId);\n  }\n\n  notOwnerWillTransfer(currentComment) {\n    const owner = currentComment.user;\n    const loginUser = this.props.state.auth.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { currentComment } = this.props.state.comments;\n      const { content, translate_language_id } = formData;\n      const { history } = this.props;\n      const comment_id = this.commentId;\n      const { answer_id } = currentComment;\n      const { question_id } = currentComment.answer;\n      const saveData = { content, comment_id, translate_language_id, history, answer_id, question_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { currentComment } = this.props.state.comments;\n      const { question_id } = currentComment.answer;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        comment_id: this.commentId,\n        question_id,\n        history\n      };\n      return this.props.deleteComment(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentComment } = this.props.state.comments;\n\n    if (isEmptyObject(currentComment)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentComment);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>コメントの編集</h2>\n        <CommentForm initialValues={currentComment} onSubmit={this.handleSubmit.bind(this)} />\n        <p><button className=\"uk-button uk-button-danger\" onClick={this.onClickDeleteBtn.bind(this)}>このコメントを削除</button></p>\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default CommentEdit;\n","import { connect } from 'react-redux';\nimport CommentEdit from '../components/CommentEdit';\nimport {\n  fetchSingleComment,\n  saveCommentData,\n  deleteComment,\n} from '../actions/Comment';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCommentById: (id) => dispatch(fetchSingleComment(id)),\n    handleSubmit: (postData) => dispatch(saveCommentData(postData)),\n    deleteComment: (params) => dispatch(deleteComment(params)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentEdit);\n","import React, { Component } from 'react';\nimport { Formik, Field } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\nclass QuestionTranslatinoForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.translations.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.translations.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          content: '',\n          translate_language_id: ''\n        }}\n        validate={this.validate.bind(this)}\n        enableReinitialize={true}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: 'placeholders.translations.content'})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n              </div>\n              {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.translations.translate_language_id\"})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"buttons.title.post\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(QuestionTranslatinoForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_QUESTION_TRANSLATION_LIST = Symbol('FETCH_QUESTION_TRANSLATION_LIST');\nexport const FETCH_QUESTION_TRANSLATION = Symbol('FETCH_QUESTION_TRANSLATION');\nexport const POST_QUESTION_TRANSLATION_DATA = Symbol('POST_QUESTION_TRANSLATION_DATA');\nexport const INITIALIZE_FORM = Symbol('INITIALIZE_FORM');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATED_SINGLE_QUESTION_TRANSLATION = Symbol('UPDATED_SINGLE_QUESTION_TRANSLATION');\nexport const SAVE_QUESTION_TRANSLATION_DATA = Symbol('SAVE_QUESTION_TRANSLATION_DATA');\nexport const DELETE_QUESTION_TRANSLATION = Symbol('DELETE_QUESTION_TRANSLATION');\n\n\nexport const fetchQuestionTranslationList = createAction(FETCH_QUESTION_TRANSLATION_LIST);\nexport const fetchQuestionTranslation = createAction(FETCH_QUESTION_TRANSLATION);\nexport const postQuestionTranslationData = createAction(POST_QUESTION_TRANSLATION_DATA);\nexport const initializeForm = createAction(INITIALIZE_FORM);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updatedSingleQuestionTranslation = createAction(UPDATED_SINGLE_QUESTION_TRANSLATION);\nexport const saveQuestionTranslationData = createAction(SAVE_QUESTION_TRANSLATION_DATA);\nexport const deleteQuestionTranslation = createAction(DELETE_QUESTION_TRANSLATION);\n\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const POST_VOTE = Symbol('POST_VOTE');\nexport const DELETE_VOTE = Symbol('DELETE_VOTE');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\n\n//createAction(FETCH_QUESTION_LIST)はFETCH_QUESTION_LISTという名前でアクションを発火させる。\nexport const postVote = createAction(POST_VOTE);\nexport const deleteVote = createAction(DELETE_VOTE);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\n\n//componentの中でdispatchするための設定\nimport { connect } from 'react-redux';\n//評価するための関数\nimport { postVote, deleteVote } from '../actions/VoteTranslation';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nclass QuestionTranslationList extends Component {\n  constructor(props) {\n    super(props);\n    this.qId = this.props.qId;\n  }\n\n  componentWillMount() {\n    this.props.handleFetchData(this.qId);\n  }\n\n  sendVote(question){\n    if( this.props.user.id == null){\n      return;\n    }\n    const params = {\n      user_id: this.props.user.id,\n      question_translation_id: question.id,\n      answer_translation_id: null,\n      commcomment_translation_id: null,\n      status: 1,\n      //再レンダリング用のId\n      questionId: question.question_id,\n    };\n    const key = \"question\";\n    const data = { params,  key };\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(question) {\n    if( this.props.user.id == null){\n      return;\n    }\n    const params = {\n      user_id: this.props.user.id,\n      key : \"question\",\n      //他のコンテンツと共通化するためvote_idというkeyにする\n      vote_id: question.id,\n      //再レンダリング用のId\n      questionId: question.question_id,\n    };\n    const key = \"question\";\n    const data = { params,  key };\n    return this.props.handleDeleteVote(data);\n  }\n\n  selectedNationalFlag(countryId){\n    let src;\n    switch(countryId){\n      case 1:\n        src = \"japan\";\n        break;\n      case 2:\n        src = \"america\";\n        break;\n    }\n    return <img className=\"uk-box-shadow-medium\" src={`/image/common/flag/${src}.png`} style={{border: \"1px solid #dcdcdc\"}} width=\"25\" height=\"25\" alt=\"\"/>;\n  }\n\n  getTranslationList(translationList, loginUser) {\n    const { formatMessage } = this.props.intl;\n\n    return translationList.map(translation => {\n      const editLink = translation.user.id === loginUser.id\n                     ? <Link to={`/question_translations/edit/${translation.id}`}>{formatMessage({id: \"links.edit\"})}</Link>\n                     : '';\n\n      const myVotes = translation.vote_translations.filter(v => {return v.user_id === loginUser.id});\n      const voteState = myVotes.length !== 0;\n      const votebutton = voteState\n                     ?<a onClick={this.deleteVote.bind(this, translation)}><FontAwesomeIcon icon=\"heart\" color=\"red\" size=\"lg\"/></a>\n                     :<a onClick={this.sendVote.bind(this,  translation)}><FontAwesomeIcon icon={['far','heart']} color=\"gray\" size=\"lg\"/></a>;\n      const voteNumbers = <span className=\"uk-text-default\">{ translation.vote_translations.length }</span>;\n      const nationalFlag = this.selectedNationalFlag(translation.user.country_id);\n\n      return (\n        <li key={translation.id} >\n          <article className=\"uk-comment\">\n            <div className=\"uk-comment-header uk-comment-body\">\n              <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n                <Linkify properties={{ target: '_blank'}} >{translation.content}</Linkify><br/>\n                { editLink }\n                { votebutton }\n                { voteNumbers }\n              </p>\n              <p className=\"uk-text-meta\">{dayjs(translation.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n\n            </div>\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n              <div className=\"uk-width-auto\">\n                <img className=\"uk-comment-avatar uk-border-circle\" src={translation.user.image_path} width=\"35\" height=\"35\" alt=\"\" />\n              </div>\n              <div>\n                <h4 className=\"uk-comment-meta uk-margin-remove\"><Link className=\"\" to={`/users/profile/${translation.user.id}`}>{ translation.user.name }</Link></h4>\n              </div>\n              <div className=\"uk-width-expand\" >\n                { nationalFlag }\n              </div>\n            </div>\n          </article>\n        </li>\n      );})\n\n  }\n\n  render() {\n    const { isFetching, currentTranslationList } = this.props.state.questionTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const translationList = this.getTranslationList(currentTranslationList, loginUser);\n\n    return (\n      <div>\n        <ul className=\"uk-list uk-list-divider uk-list-large\" >\n          {translationList}\n        </ul>\n      </div>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  return {\n    user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      //評価機能\n      handlePostVote: (data) => dispatch(postVote(data)),\n      handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(QuestionTranslationList));\n","import { connect } from 'react-redux';\nimport { fetchQuestionTranslationList } from '../actions/QuestionTranslation';\nimport QuestionTranslationList from '../components/QuestionTranslationList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (question_id) => dispatch(fetchQuestionTranslationList(question_id)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionTranslationList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport QuestionTranslationForm from '../components/QuestionTranslationForm';\nimport QuestionTranslationList from '../containers/QuestionTranslationList';\nimport {\n  fetchQuestion\n} from '../actions/Question';\nimport {\n  fetchAnswerList\n} from '../actions/Answer';\nimport {\n    postQuestionTranslationData\n} from '../actions/QuestionTranslation';\nimport { isEmptyObject } from '../utils';\nimport { injectIntl } from 'react-intl';\n\n\nclass QuestionTranslationView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.qId = parseInt(params.question_id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getQuestionById(this.qId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id } = formData;\n      if (content === '') {\n        throw new Error('空文字で投稿はできません。');\n      }\n      const { user } = this.props.state.auth;\n      const question_id = this.qId;\n      const user_id = user.id;\n      return this.props.handleSubmit({content, question_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  selectedNationalFlag(countryId) {\n    let src;\n    switch(countryId) {\n      case 1:\n        src = \"japan\";\n        break;\n      case 2:\n        src = \"america\";\n        break;\n      default:\n        src = \"japan\";\n        break;\n    }\n    return <img className=\"uk-box-shadow-medium\" src={`/image/common/flag/${src}.png`} style={{border: \"1px solid #dcdcdc\"}} width=\"25\" height=\"25\" alt=\"\"/>;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { currentQuestion } = this.props.state.questions;\n    if (isEmptyObject(currentQuestion)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const { user } = currentQuestion;\n    const nationalFlag = this.selectedNationalFlag(user.country_id);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n          <p><Linkify properties={{ target: '_blank'}} >{currentQuestion.content}</Linkify></p>\n          <p className=\"uk-text-meta\">{dayjs(currentQuestion.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div className=\"uk-width-auto\">\n              <img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" />\n            </div>\n            <div>\n              <h4 className=\"uk-comment-meta uk-margin-remove\"><Link className=\"\" to={`/users/profile/${user.id}`}>{ user.name }</Link></h4>\n            </div>\n            <div className=\"uk-width-expand\" >\n              { nationalFlag }\n            </div>\n          </div>\n        </div>\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.translation_list\"})}</span></h3>\n        <QuestionTranslationForm qId={this.qId} onSubmit={this.handleSubmit.bind(this)} />\n        <QuestionTranslationList qId={this.qId} />\n        <hr className=\"uk-divider-icon\" />\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestionById: (id) => dispatch(fetchQuestion(id)),\n    fetchAnswers: (question_id) => dispatch(fetchAnswerList(question_id)),\n    handleSubmit: (postData) => dispatch(postQuestionTranslationData(postData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(QuestionTranslationView));\n","import React, { Component } from 'react';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\n\nclass TranslationForm extends Component {\n\n  validate(values) {\n    let errors = {};\n    if (!values.content) {\n      errors.content = '翻訳文を入力してください';\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = '投稿言語を指定してください';\n    }\n    return errors;\n  }\n\n  render() {\n    const { initialValues } = this.props;\n    return (\n      <Formik\n        initialValues={initialValues}\n        enableReinitialize={true}\n        validate={this.validate}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder=\"翻訳文を入力してください\"\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n                {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              </div>\n              <div className=\"uk-margin uk-grid uk-grid-small uk-child-width-expand@s\" >\n                <div className=\"uk-grid-margin\" >\n                  <LanguageFormSelect name=\"translate_language_id\" placeholder=\"投稿言語\" />\n                  {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n                </div>\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >投稿</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default TranslationForm;\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationForm from './TranslationForm';\nimport { isEmptyObject } from '../utils';\n\nclass TranslationEdit extends Component {\n\n  notOwnerWillTransfer(currentTranslation, loginUser) {\n    const owner = currentTranslation.user;\n    const { history } = this.props;\n    if (owner.id !== loginUser.id) {\n      return history.push('/');\n    }\n    return true;\n  }\n\n  render() {\n    const { currentTranslation, handleSubmit, onClickDeleteBtn, loginUser } = this.props;\n\n    if (isEmptyObject(currentTranslation)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    this.notOwnerWillTransfer(currentTranslation, loginUser);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2>翻訳の編集</h2>\n        <TranslationForm initialValues={currentTranslation} onSubmit={handleSubmit} />\n        <p><button className=\"uk-button uk-button-danger\" onClick={onClickDeleteBtn}>この翻訳を削除</button></p>\n        <Link to=\"/\">Top</Link>\n      </main>\n    );\n  }\n}\n\nexport default TranslationEdit;\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationEdit from './TranslationEdit';\n\nclass QuestionTranslationEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.qtId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getQuestionTranslationById(this.qtId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const id = this.qtId;\n      /* const { translate_language_id } = currentTranslation;*/\n      const saveData = { content, id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        id: this.qtId,\n        history\n      };\n      return this.props.deleteQuestionTranslation(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentTranslation } = this.props.state.questionTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    return (\n      <TranslationEdit\n        currentTranslation={currentTranslation}\n        handleSubmit={this.handleSubmit.bind(this)}\n        onClickDeleteBtn={this.onClickDeleteBtn.bind(this)}\n        loginUser={loginUser}\n      />\n    );\n  }\n}\n\nexport default QuestionTranslationEdit;\n","import { connect } from 'react-redux';\nimport QuestionTranslationEdit from '../components/QuestionTranslationEdit';\nimport {\n  fetchQuestionTranslation,\n  saveQuestionTranslationData,\n  deleteQuestionTranslation,\n} from '../actions/QuestionTranslation';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getQuestionTranslationById: (id) => dispatch(fetchQuestionTranslation(id)),\n    handleSubmit: (postData) => dispatch(saveQuestionTranslationData(postData)),\n    deleteQuestionTranslation: (conditions) => dispatch(deleteQuestionTranslation(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QuestionTranslationEdit);\n","import React, { Component } from 'react';\nimport { Formik, Field } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\nclass AnswerTranslatinoForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.translations.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.translations.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          content: '',\n          translate_language_id: ''\n        }}\n        validate={this.validate.bind(this)}\n        enableReinitialize={true}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.translations.content\"})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n              </div>\n              {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.translations.translate_language_id\"})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"buttons.title.post\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(AnswerTranslatinoForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_ANSWER_TRANSLATION_LIST = Symbol('FETCH_ANSWER_TRANSLATION_LIST');\nexport const FETCH_ANSWER_TRANSLATION = Symbol('FETCH_ANSWER_TRANSLATION');\nexport const POST_ANSWER_TRANSLATION_DATA = Symbol('POST_ANSWER_TRANSLATION_DATA');\nexport const SAVE_ANSWER_TRANSLATION_DATA = Symbol('SAVE_ANSWER_TRANSLATION_DATA');\nexport const DELETE_ANSWER_TRANSLATION = Symbol('DELETE_ANSWER_TRANSLATION');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATED_SINGLE_ANSWER_TRANSLATION = Symbol('UPDATED_SINGLE_ANSWER_TRANSLATION');\n\nexport const fetchAnswerTranslationList = createAction(FETCH_ANSWER_TRANSLATION_LIST);\nexport const fetchAnswerTranslation = createAction(FETCH_ANSWER_TRANSLATION);\nexport const postAnswerTranslationData = createAction(POST_ANSWER_TRANSLATION_DATA);\nexport const saveAnswerTranslationData = createAction(SAVE_ANSWER_TRANSLATION_DATA);\nexport const deleteAnswerTranslation = createAction(DELETE_ANSWER_TRANSLATION);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updatedSingleAnswerTranslation = createAction(UPDATED_SINGLE_ANSWER_TRANSLATION);\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\n\n//componentの中でdispatchするための設定\nimport { connect } from 'react-redux';\n//評価するための関数\nimport { postVote, deleteVote } from '../actions/VoteTranslation';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nclass AnswerTranslationList extends Component {\n  constructor(props) {\n    super(props);\n    this.aId = this.props.aId;\n  }\n\n  componentWillMount() {\n    this.props.handleFetchData(this.aId);\n  }\n\n  sendVote(answer){\n    if( this.props.user.id == null){\n      return;\n    }\n    const params = {\n      user_id: this.props.user.id,\n      question_translation_id: null,\n      answer_translation_id: answer.id,\n      commcomment_translation_id: null,\n      status: 1,\n      //再レンダリング用のId\n      answerId: answer.answer_id\n    };\n    const key = \"answer\";\n    const data = { params,  key };\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(answer) {\n    if( this.props.user.id == null){\n      return;\n    }\n    const params = {\n      user_id: this.props.user.id,\n      key : \"answer\",\n      //他のコンテンツと共通化するためvote_idというkeyにする\n      vote_id: answer.id,\n      //再レンダリング用のId\n      answerId: answer.answer_id,\n    };\n    const key = \"answer\";\n    const data = { params,  key };\n    return this.props.handleDeleteVote(data);\n  }\n\n  selectedNationalFlag(countryId){\n    let src;\n    switch(countryId){\n      case 1:\n        src = \"japan\";\n        break;\n      case 2:\n        src = \"america\";\n        break;\n    }\n    return <img className=\"uk-box-shadow-medium\" src={`/image/common/flag/${src}.png`} style={{border: \"1px solid #dcdcdc\"}} width=\"25\" height=\"25\" alt=\"\"/>;\n  }\n\n  getTranslationList(translationList, loginUser) {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\" >\n        {translationList.map(translation => {\n           const editLink = translation.user.id === loginUser.id\n                          ? <Link to={`/answer_translations/edit/${translation.id}`}>{formatMessage({id: \"links.edit\"})}</Link>\n                          : '';\n\n           const myVotes = translation.vote_translations.filter(v => {return v.user_id === loginUser.id});\n           const voteState = myVotes.length !== 0;\n           const votebutton = voteState\n                          ?<a onClick={this.deleteVote.bind(this, translation)}><FontAwesomeIcon icon=\"heart\" color=\"red\" size=\"lg\"/></a>\n                          :<a onClick={this.sendVote.bind(this,  translation)}><FontAwesomeIcon icon={['far','heart']} color=\"gray\" size=\"lg\"/></a>;\n           const voteNumbers = <span className=\"uk-text-default\">{ translation.vote_translations.length }</span>;                   \n           const nationalFlag = this.selectedNationalFlag(translation.user.country_id);\n\n           return (\n             <li key={translation.id} >\n               <article className=\"uk-comment\">\n                 <div className=\"uk-comment-header uk-comment-body\">\n                   <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n                     <Linkify properties={{ target: '_blank'}} >{translation.content}</Linkify><br/>\n                     { editLink }\n                     { votebutton }\n                     { voteNumbers }\n                   </p>\n                   <p className=\"uk-text-meta\">{dayjs(translation.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n                 </div>\n                 <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n                   <div className=\"uk-width-auto\">\n                     <img className=\"uk-comment-avatar uk-border-circle\" src={translation.user.image_path} width=\"35\" height=\"35\" alt=\"\" />\n                   </div>\n                   <div>\n                     <h4 className=\"uk-comment-meta uk-margin-remove\"><Link className=\"\" to={`/users/profile/${translation.user.id}`}>{ translation.user.name }</Link></h4>\n                   </div>\n                   <div className=\"uk-width-expand\" >\n                       { nationalFlag }\n                   </div>\n                 </div>\n               </article>\n             </li>\n           );\n        })}\n      </ul>\n    );\n\n  }\n\n  render() {\n    const { isFetching, currentTranslationList } = this.props.state.answerTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n    const content = this.getTranslationList(currentTranslationList, loginUser);\n    return (\n      <div>\n        {content}\n      </div>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  return {\n    user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      //評価機能\n      handlePostVote: (data) => dispatch(postVote(data)),\n      handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(AnswerTranslationList));\n","import { connect } from 'react-redux';\nimport { fetchAnswerTranslationList } from '../actions/AnswerTranslation';\nimport AnswerTranslationList from '../components/AnswerTranslationList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (answer_id) => dispatch(fetchAnswerTranslationList(answer_id)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerTranslationList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport AnswerTranslationForm from '../components/AnswerTranslationForm';\nimport AnswerTranslationList from '../containers/AnswerTranslationList';\nimport {\n  fetchAnswer,\n  fetchAnswerList\n} from '../actions/Answer';\nimport {\n  postAnswerTranslationData\n} from '../actions/AnswerTranslation';\nimport { isEmptyObject } from '../utils';\nimport { injectIntl } from 'react-intl';\n\n\nclass AnswerTranslationView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.aId = parseInt(params.answer_id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getAnswerById(this.aId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id } = formData;\n      if (content === '') {\n        const msg = '空文字で投稿はできません。';\n        throw new Error(msg);\n      }\n      const { user } = this.props.state.auth;\n      const answer_id = this.aId;\n      const user_id = user.id;\n      return this.props.handleSubmit({content, answer_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  selectedNationalFlag(countryId){\n    let src;\n    switch(countryId){\n      case 1:\n        src = \"japan\";\n        break;\n      case 2:\n        src = \"america\";\n        break;\n    }\n    return <img className=\"uk-box-shadow-medium\" src={`/image/common/flag/${src}.png`} style={{border: \"1px solid #dcdcdc\"}} width=\"25\" height=\"25\" alt=\"\"/>;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { currentAnswer } = this.props.state.answers;\n    if (isEmptyObject(currentAnswer)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const user = (currentAnswer.user) ? currentAnswer.user : null;\n    const userName = (user) ? user.name : '';\n    const { question_id } = currentAnswer;\n    const nationalFlag = this.selectedNationalFlag(user.country_id);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n          <p><Linkify properties={{ target: '_blank'}} >{currentAnswer.content}</Linkify></p>\n          <p className=\"uk-text-meta\">{dayjs(currentAnswer.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n          <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n            <div className=\"uk-width-auto\">\n              <img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" />\n            </div>\n            <div>\n              <h4 className=\"uk-comment-meta uk-margin-remove\"><Link className=\"\" to={`/users/profile/${user.id}`}>{ userName }</Link></h4>\n            </div>\n            <div className=\"uk-width-expand\" >\n              { nationalFlag }\n            </div>\n          </div>\n\n        </div>\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.translation_list\"})}</span></h3>\n        <AnswerTranslationForm aId={this.aId} onSubmit={this.handleSubmit.bind(this)} />\n        <AnswerTranslationList aId={this.aId} />\n        <hr className=\"uk-divider-icon\" />\n        <p><Link to={`/questions/${question_id}`}>{formatMessage({id: \"links.to_question_view\"})}</Link></p>\n        <p><Link to=\"/\">Top</Link></p>\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAnswerById: (id) => dispatch(fetchAnswer(id)),\n    fetchAnswers: (question_id) => dispatch(fetchAnswerList(question_id)),\n    handleSubmit: (postData) => dispatch(postAnswerTranslationData(postData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(AnswerTranslationView));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationEdit from './TranslationEdit';\n\nclass AnswerTranslationEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.atId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getAnswerTranslationById(this.atId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const id = this.atId;\n      /* const { translate_language_id } = currentTranslation;*/\n      const saveData = { content, id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        id: this.atId,\n        history\n      };\n      return this.props.deleteAnswerTranslation(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentTranslation } = this.props.state.answerTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    return (\n      <TranslationEdit\n        currentTranslation={currentTranslation}\n        handleSubmit={this.handleSubmit.bind(this)}\n        onClickDeleteBtn={this.onClickDeleteBtn.bind(this)}\n        loginUser={loginUser}\n      />\n    );\n  }\n}\n\nexport default AnswerTranslationEdit;\n","import { connect } from 'react-redux';\nimport AnswerTranslationEdit from '../components/AnswerTranslationEdit';\nimport {\n  fetchAnswerTranslation,\n  saveAnswerTranslationData,\n  deleteAnswerTranslation,\n} from '../actions/AnswerTranslation';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getAnswerTranslationById: (id) => dispatch(fetchAnswerTranslation(id)),\n    handleSubmit: (postData) => dispatch(saveAnswerTranslationData(postData)),\n    deleteAnswerTranslation: (conditions) => dispatch(deleteAnswerTranslation(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AnswerTranslationEdit);\n","import React, { Component } from 'react';\nimport { Formik, Field } from 'formik';\nimport LanguageFormSelect from './LanguageFormSelect';\nimport { injectIntl } from 'react-intl';\n\nclass CommentTranslatinoForm extends Component {\n\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n    if (!values.content) {\n      errors.content = formatMessage({id: \"errors.translations.content\"});\n    }\n    if (!values.translate_language_id) {\n      errors.translate_language_id = formatMessage({id: \"errors.translations.translate_language_id\"});\n    }\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          content: '',\n          translate_language_id: ''\n        }}\n        validate={this.validate.bind(this)}\n        enableReinitialize={true}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'content'}\n                     name=\"content\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.translations.content\"})}\n                     rows=\"5\"\n                     className={'form-control uk-textarea'}\n                />\n              </div>\n              {touched.content && errors.content && <div className=\"uk-text-warning\">{errors.content}</div>}\n              <div className=\"uk-margin\">\n                <LanguageFormSelect name=\"translate_language_id\" placeholder={formatMessage({id: \"placeholders.translations.translate_language_id\"})} />\n                {touched.translate_language_id && errors.translate_language_id && <div className=\"uk-text-warning\">{errors.translate_language_id}</div>}\n\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-default\" >{formatMessage({id: \"buttons.title.post\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\nexport default injectIntl(CommentTranslatinoForm);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const FETCH_COMMENT_TRANSLATION_LIST = Symbol('FETCH_COMMENT_TRANSLATION_LIST');\nexport const FETCH_COMMENT_TRANSLATION = Symbol('FETCH_COMMENT_TRANSLATION');\nexport const POST_COMMENT_TRANSLATION_DATA = Symbol('POST_COMMENT_TRANSLATION_DATA');\nexport const SAVE_COMMENT_TRANSLATION_DATA = Symbol('SAVE_COMMENT_TRANSLATION_DATA');\nexport const DELETE_COMMENT_TRANSLATION = Symbol('DELETE_COMMENT_TRANSLATION');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_SINGLE_DATA_SUCCESS = Symbol('RECEIVE_SINGLE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const UPDATED_SINGLE_COMMENT_TRANSLATION = Symbol('UPDATED_SINGLE_COMMENT_TRANSLATION');\n\n\nexport const fetchCommentTranslationList = createAction(FETCH_COMMENT_TRANSLATION_LIST);\nexport const fetchCommentTranslation = createAction(FETCH_COMMENT_TRANSLATION);\nexport const postCommentTranslationData = createAction(POST_COMMENT_TRANSLATION_DATA);\nexport const saveCommentTranslationData = createAction(SAVE_COMMENT_TRANSLATION_DATA);\nexport const deleteCommentTranslation = createAction(DELETE_COMMENT_TRANSLATION);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveSingleDataSuccess = createAction(RECEIVE_SINGLE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const updatedSingleCommentTranslation = createAction(UPDATED_SINGLE_COMMENT_TRANSLATION);\n\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { injectIntl } from 'react-intl';\n\n//componentの中でdispatchするための設定\nimport { connect } from 'react-redux';\n//評価するための関数\nimport { postVote, deleteVote } from '../actions/VoteTranslation';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nclass CommentTranslationList extends Component {\n  constructor(props) {\n    super(props);\n    this.commentId = this.props.commentId;\n  }\n\n  componentWillMount() {\n    this.props.handleFetchData(this.commentId);\n  }\n\n  sendVote(comment){\n    if( this.props.user.id == null){\n      return;\n    }\n    const params = {\n      user_id: this.props.user.id,\n      question_translation_id: null,\n      answer_translation_id: null,\n      comment_translation_id: comment.id,\n      status: 1,\n      //再レンダリング用のId\n      commentId: comment.comment_id\n    };\n    const key = \"comment\";\n    const data = { params,  key };\n    return this.props.handlePostVote(data);\n  }\n\n  deleteVote(comment) {\n    if( this.props.user.id == null){\n      return;\n    }\n    const params = {\n      user_id: this.props.user.id,\n      key : \"comment\",\n      //他のコンテンツと共通化するためvote_idというkeyにする\n      vote_id: comment.id,\n      //再レンダリング用のId\n      commentId: comment.comment_id,\n    };\n    const key = \"comment\";\n    const data = { params,  key };\n    return this.props.handleDeleteVote(data);\n  }\n\n  selectedNationalFlag(countryId){\n    let src;\n    switch(countryId){\n      case 1:\n        src = \"japan\";\n        break;\n      case 2:\n        src = \"america\";\n        break;\n    }\n    return <img className=\"uk-box-shadow-medium\" src={`/image/common/flag/${src}.png`} style={{border: \"1px solid #dcdcdc\"}} width=\"25\" height=\"25\" alt=\"\"/>;\n  }\n\n  getTranslationList(translationList, loginUser) {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\" >\n        {translationList.map(translation => {\n           const editLink = translation.user.id === loginUser.id\n                          ? <Link to={`/comment_translations/edit/${translation.id}`}>{formatMessage({id: \"links.edit\"})}</Link>\n                          : '';\n          \n           const myVotes = translation.vote_translations.filter(v => {return v.user_id === loginUser.id});\n           const voteState = myVotes.length !== 0;\n           const votebutton = voteState\n                          ?<a onClick={this.deleteVote.bind(this, translation)}><FontAwesomeIcon icon=\"heart\" color=\"red\" size=\"lg\"/></a>\n                          :<a onClick={this.sendVote.bind(this,  translation)}><FontAwesomeIcon icon={['far','heart']} color=\"gray\" size=\"lg\"/></a>;\n           const voteNumbers = <span className=\"uk-text-default\">{ translation.vote_translations.length }</span>;\n           const nationalFlag = this.selectedNationalFlag(translation.user.country_id);\n\n           return (\n             <li key={translation.id} >\n               <article className=\"uk-comment\">\n                 <div className=\"uk-comment-header uk-comment-body\">\n                   <p style={{\"whiteSpace\": \"pre-wrap\"}} >\n                     <Linkify properties={{ target: '_blank'}} >{translation.content}</Linkify><br/>\n                     { editLink }\n                     { votebutton }\n                     { voteNumbers }\n                   </p>\n                   <p className=\"uk-text-meta\">{dayjs(translation.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n                 </div>\n                 <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n                   <div className=\"uk-width-auto\">\n                     <img className=\"uk-comment-avatar uk-border-circle\" src={translation.user.image_path} width=\"35\" height=\"35\" alt=\"\" />\n                   </div>\n                   <div>\n                     <h4 className=\"uk-comment-meta uk-margin-remove\"><Link className=\"\" to={`/users/profile/${translation.user.id}`}>{ translation.user.name }</Link></h4>\n                   </div>\n                   <div className=\"uk-width-expand\" >\n                       { nationalFlag }\n                   </div>\n                 </div>\n               </article>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  render() {\n    const { isFetching, currentTranslationList } = this.props.state.commentTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    if (isFetching) {\n      return (<ClipLoader />);\n    }\n\n    const content = this.getTranslationList(currentTranslationList, loginUser);\n\n    return (\n      <div>\n        {content}\n      </div>\n    );\n  }\n}\n\n//stateの中からauthだけを取り出す。\nconst mapStateToProps = state => {\n  const { user } = state.auth;\n  return {\n    user\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      //評価機能\n      handlePostVote: (data) => dispatch(postVote(data)),\n      handleDeleteVote: (data) => dispatch(deleteVote(data)),\n  };\n};\n\n//root（全部の状態を持っているオブジェクト）に持っているstateをAnswerListに対して適用する\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(CommentTranslationList));\n","import { connect } from 'react-redux';\nimport { fetchCommentTranslationList } from '../actions/CommentTranslation';\nimport CommentTranslationList from '../components/CommentTranslationList';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleFetchData: (answer_id) => dispatch(fetchCommentTranslationList(answer_id)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentTranslationList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { ClipLoader } from 'react-spinners';\nimport Linkify from 'react-linkify';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport CommentTranslationForm from '../components/CommentTranslationForm';\nimport CommentTranslationList from '../containers/CommentTranslationList';\nimport {\n  fetchSingleComment,\n} from '../actions/Comment';\nimport {\n  postCommentTranslationData\n} from '../actions/CommentTranslation';\nimport { isEmptyObject } from '../utils';\nimport { injectIntl } from 'react-intl';\n\n\nclass CommentTranslationView extends Component {\n  constructor(props) {\n    super(props);\n    const {params} = props.match;\n    this.commentId = parseInt(params.comment_id, 10);\n  }\n\n  componentWillMount() {\n    this.props.getCommentById(this.commentId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id } = formData;\n      if (content === '') {\n        const msg = '空文字で投稿はできません。';\n        throw new Error(msg);\n      }\n      const { user } = this.props.state.auth;\n      const comment_id = this.commentId;\n      const user_id = user.id;\n      return this.props.handleSubmit({content, comment_id, user_id, translate_language_id});\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  selectedNationalFlag(countryId){\n    let src;\n    switch(countryId) {\n      case 1:\n        src = \"japan\";\n        break;\n      case 2:\n        src = \"america\";\n        break;\n    }\n    return <img className=\"uk-box-shadow-medium\" src={`/image/common/flag/${src}.png`} style={{border: \"1px solid #dcdcdc\"}} width=\"25\" height=\"25\" alt=\"\"/>;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    const { currentComment } = this.props.state.comments;\n    const { currentQuestion } = this.props.state.questions;\n\n    if (isEmptyObject(currentComment)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const user = (currentComment.user) ? currentComment.user : null;\n    const userName = (user) ? user.name : '';\n    const toQuestionViewLink = !isEmptyObject(currentQuestion)\n                             ? (<p><Link to={`/questions/${currentQuestion.id}`}>{formatMessage({id: \"links.to_question_view\"})}</Link></p>)\n                             : '';                         \n    const nationalFlag = this.selectedNationalFlag(user.country_id);\n\n    return (\n    <main className=\"uk-container uk-container-small\">\n      <div className=\"uk-card uk-card-default uk-card-body uk-box-shadow-small\">\n        <p><Linkify properties={{ target: '_blank'}} >{currentComment.content}</Linkify></p>\n        <p className=\"uk-text-meta\">{dayjs(currentComment.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n        <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n          <div className=\"uk-width-auto\">\n            <img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" />\n          </div>\n          <div>\n            <h4 className=\"uk-comment-meta uk-margin-remove\"><Link className=\"\" to={`/users/profile/${user.id}`}>{ userName }</Link></h4>\n          </div>\n          <div className=\"uk-width-expand\" >\n            { nationalFlag }\n          </div>\n        </div>\n      </div>\n      <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.translation_list\"})}</span></h3>\n      <CommentTranslationForm commentId={this.commentId} onSubmit={this.handleSubmit.bind(this)} />\n      <CommentTranslationList commentId={this.commentId} />\n      <hr className=\"uk-divider-icon\" />\n      { toQuestionViewLink }\n      <p><Link to=\"/\">Top</Link></p>\n    </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCommentById: (id) => dispatch(fetchSingleComment(id)),\n    handleSubmit: (postData) => dispatch(postCommentTranslationData(postData)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(CommentTranslationView));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport TranslationEdit from './TranslationEdit';\n\n\nclass CommentTranslationEdit extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.ctId = parseInt(params.id, 10);\n  }\n\n  componentWillMount() {\n    console.log('getCommentTranslationById');\n    this.props.getCommentTranslationById(this.ctId);\n  }\n\n  handleSubmit(formData) {\n    try {\n      const { content, translate_language_id, country_id } = formData;\n      const id = this.ctId;\n      /* const { translate_language_id } = currentTranslation;*/\n      const saveData = { content, id, translate_language_id, country_id };\n      return this.props.handleSubmit(saveData);\n    } catch (e) {\n      console.log('e', e.message);\n      return;\n    }\n  }\n\n  onClickDeleteBtn(e) {\n    try {\n      const { user } = this.props.state.auth;\n      const { history } = this.props;\n      const params = {\n        user_id: user.id,\n        id: this.ctId,\n        history\n      };\n      return this.props.deleteCommentTranslation(params);\n    } catch (e) {\n      return;\n    }\n  }\n\n  render() {\n    const { currentTranslation } = this.props.state.commentTranslations;\n    const loginUser = this.props.state.auth.user;\n\n    return (\n      <TranslationEdit\n        currentTranslation={currentTranslation}\n        handleSubmit={this.handleSubmit.bind(this)}\n        onClickDeleteBtn={this.onClickDeleteBtn.bind(this)}\n        loginUser={loginUser}\n      />\n    );\n  }\n}\n\nexport default CommentTranslationEdit;\n","import { connect } from 'react-redux';\nimport CommentTranslationEdit from '../components/CommentTranslationEdit';\nimport {\n  fetchCommentTranslation,\n  saveCommentTranslationData,\n  deleteCommentTranslation,\n} from '../actions/CommentTranslation';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getCommentTranslationById: (id) => dispatch(fetchCommentTranslation(id)),\n    handleSubmit: (postData) => dispatch(saveCommentTranslationData(postData)),\n    deleteCommentTranslation: (conditions) => dispatch(deleteCommentTranslation(conditions)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentTranslationEdit);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Drawer from '@material-ui/core/Drawer';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\nimport MailIcon from '@material-ui/icons/Mail';\nimport { Link } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = {\n  list: {\n    width: 250,\n  },\n  fullList: {\n    width: 'auto',\n  },\n};\n\nclass MenuDrawer extends React.Component {\n  state = {\n    top: false,\n    left: false,\n    bottom: false,\n    right: false,\n  };\n\n  toggleDrawer = (side, open) => () => {\n    this.setState({\n      [side]: open,\n    });\n  };\n\n  getLogoutLink(user) {\n    if (!user.id) {\n      return '';\n    }\n    const { history } = this.props;\n    const actionData = { history };\n    return (\n      <Link to=\"/\" onClick={this.props.logout.bind(this, actionData)}>Logout</Link>\n    );\n  }\n\n  render() {\n    const { classes, displayName } = this.props;\n\n    const menuDataList = [\n      {\n        text: 'プロフィール',\n        component: Link,\n        to: '/users/profile_edit',\n      },\n      {\n        text: 'ログアウト',\n        component: Link,\n        to: '/users/logout',\n      },\n    ];\n\n    const sideList = (\n      <div className={classes.list}>\n        <List>\n          {menuDataList.map((menuData, index) => (\n            <ListItem button component={menuData.component} to={menuData.to}  key={index} >\n              {/* <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon> */}\n              <ListItemText primary={menuData.text} />\n            </ListItem>\n          ))}\n        </List>\n      </div>\n    );\n\n    return (\n      <div className=\"uk-display-inline-block\" >\n        <Button onClick={this.toggleDrawer('right', true)}>{ displayName }</Button>\n        <Drawer anchor=\"right\" open={this.state.right} onClose={this.toggleDrawer('right', false)}>\n          <div\n            tabIndex={0}\n            role=\"button\"\n            onClick={this.toggleDrawer('right', false)}\n            onKeyDown={this.toggleDrawer('right', false)}\n          >\n            {sideList}\n          </div>\n        </Drawer>\n      </div>\n    );\n  }\n}\n\nMenuDrawer.propTypes = {\n  classes: PropTypes.object.isRequired,\n  displayName: PropTypes.object.isRequired\n};\n\nexport default withStyles(styles)(MenuDrawer);\n","import React from 'react';\n/* import MenuDrawer from '../../containers/layouts/MenuDrawer';*/\nimport MenuDrawer from './MenuDrawer';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\n\nclass Header extends React.Component {\n\n  state = {\n    anchorEl: null\n  };\n\n  onClickLogout() {\n    const { user } = this.props.state.auth;\n    if (!user.id) {\n      return '';\n    }\n    const { history } = this.props;\n    const actionData = { history };\n    return this.props.logout(actionData);\n  }\n\n  getMenu(displayName) {\n    const { anchorEl } = this.state;\n    const { formatMessage } = this.props.intl;\n\n    const handleClick = event => {\n      this.setState({ anchorEl: event.currentTarget });\n    };\n\n    const handleClose = () => {\n      this.setState({ anchorEl: null });\n    };\n\n    const handleLogout = () => {\n      handleClose();\n      return this.onClickLogout();\n    };\n\n    const getProfileElem = (auth) => {\n      if (!auth.isLoggedIn) {\n        return '';\n      }\n      const { user } = auth;\n      const menuList = [\n        {\n          text: formatMessage({id: \"links.profile\"}),\n          to: `/users/profile/${user.id}`,\n          icon: \"user\"\n        },\n        {\n          text: formatMessage({id: \"links.profile_edit\"}),\n          to: '/users/profile_edit',\n          icon: \"pencil\",\n        },\n        {\n          text: formatMessage({id: \"links.to_not_translated_list\"}),\n          to: `/not_translated`,\n          icon: \"album\"\n        },\n      ];\n      return menuList.map((v, i) => (\n        <MenuItem key={i} onClick={handleClose}>\n          <Link to={v.to} >\n            <span uk-icon={v.icon} ></span>\n            <span>{v.text}</span>\n          </Link>\n        </MenuItem>\n      ));\n    };\n\n    const getLoginElem = (auth) => {\n      return (auth.isLoggedIn)\n           ? (\n             <MenuItem onClick={handleLogout.bind(this)}>\n               <Link to=\"\" >\n                 <span uk-icon=\"sign-out\" ></span>\n                 <span>{formatMessage({id: \"links.logout\"})}</span>\n               </Link>\n             </MenuItem>\n           )\n           : (\n             <MenuItem onClick={handleClose}>\n               <Link to=\"/users/login\" >\n                 <span uk-icon=\"sign-in\" ></span>\n                 <span>{formatMessage({id: \"links.login\"})}</span>\n               </Link>\n             </MenuItem>\n           );\n    };\n\n    const { auth } = this.props.state;\n    const profileElem = getProfileElem(auth);\n    const loginElem = getLoginElem(auth);\n\n    return (\n      <div className=\"uk-display-inline-block uk-height-1-1\" >\n        <Button\n          aria-owns={anchorEl ? 'simple-menu' : undefined}\n          aria-haspopup=\"true\"\n          onClick={handleClick}\n          className=\"uk-height-1-1\"\n          style={{\"textTransform\": \"none\"}}\n        >\n          {displayName}\n        </Button>\n        <Menu\n          id=\"simple-menu\"\n          anchorEl={anchorEl}\n          open={Boolean(anchorEl)}\n          onClose={handleClose}\n        >\n          {profileElem}\n          {loginElem}\n          <MenuItem onClick={handleClose}>\n            <Link to=\"/users/signup\" >\n              <span uk-icon=\"check\" ></span>\n              <span>{formatMessage({id: \"links.sign_up\"})}</span>\n            </Link>\n          </MenuItem>\n        </Menu>\n      </div>\n    );\n  }\n\n  render() {\n    const { user } = this.props.state.auth;\n    const imagePath = user.image_path ? user.image_path : '/image/profile/blank-profile.png';\n    const displayMenuElem = <img src={imagePath} className=\"uk-border-circle\" width=\"50\" height=\"50\" alt=\"\" />;\n    const menu = this.getMenu(displayMenuElem);\n\n    return (\n      <header className=\"uk-margin-bottom uk-heading-divider uk-grid\" >\n        <div className=\"uk-width-expand uk-margin-small-left\" >\n          <a href=\"/\" className=\"uk-display-inline-block\" >\n            <img src={`/logo.png`} alt=\"Logo\" style={{ \"maxHeight\": \"60px\" }} />\n          </a>\n          <span className=\"uk-text-meta uk-margin-small-left uk-display-inline-block\">\n            α ver.\n          </span>\n        </div>\n        <div className=\"uk-margin-small-right\">\n          { menu }\n        </div>\n      </header>\n    );\n  }\n};\n\nexport default injectIntl(Header);\n","import { createAction } from 'redux-actions';\n\n// 文字列定数\nexport const CREATE_USER_ACCOUNT = Symbol('CREATE_USER_ACCOUNT');\nexport const CLICK_SUBMIT = Symbol('CLICK_SUBMIT');\nexport const SAVE_USER_MNEMONIC = Symbol('SAVE_USER_MNEMONIC');\nexport const LOGIN_USER = Symbol('LOGIN_USER');\nexport const LOGIN_USER_JWT = Symbol('LOGIN_USER_JWT');\nexport const LOGOUT_USER = Symbol('LOGOUT_USER');\nexport const UPDATE_USER_DATA = Symbol('UPDATE_USER_DATA');\nexport const SAVE_USER_DATA = Symbol('SAVE_USER_DATA');\nexport const SAVE_USER_PASSWORD = Symbol('SAVE_USER_PASSWORD');\nexport const UPDATED_USER_DATA = Symbol('UPDATED_USER_DATA');\nexport const REMOVE_USER_DATA = Symbol('REMOVE_USER_DATA');\nexport const REQUEST_DATA = Symbol('REQUEST_DATA');\nexport const RECEIVE_DATA_SUCCESS = Symbol('RECEIVE_DATA_SUCCESS');\nexport const RECEIVE_DATA_FAILED = Symbol('RECEIVE_DATA_FAILED');\nexport const LOGIN_SUCCESS = Symbol('LOGIN_SUCCESS');\nexport const LOGIN_FAILED = Symbol('LOGIN_FAILED');\nexport const GET_USER_PROFILE = Symbol('GET_USER_PROFILE');\nexport const GET_USER_BY_TOKEN = Symbol('GET_USER_BY_TOKEN');\nexport const UPDATED_PROFILE_DATA = Symbol('UPDATED_PROFILE_DATA');\nexport const PREPARED_AUTH = Symbol('PREPARED_AUTH');\nexport const UPDATED_PROFILE_QUESTION_DATA = Symbol('UPDATED_PROFILE_QUESTION_DATA');\nexport const UPDATED_PROFILE_ANSWER_DATA = Symbol('UPDATED_PROFILE_ANSWER_DATA');\nexport const UPDATED_PROFILE_COMMENT_DATA = Symbol('UPDATED_PROFILE_COMMENT_DATA');\nexport const SEND_RESET_PASSWORD_MAIL = Symbol('SEND_RESET_PASSWORD_MAIL');\nexport const RESET_PASSWORD = Symbol('RESET_PASSWORD');\nexport const ACTIVATE_USER = Symbol('ACTIVATE_USER');\n\n\nexport const createUserAccount = createAction(CREATE_USER_ACCOUNT);\nexport const clickSubmit = createAction(CLICK_SUBMIT);\nexport const saveUserMnemonic = createAction(SAVE_USER_MNEMONIC);\nexport const loginUser = createAction(LOGIN_USER);\nexport const loginUserJwt = createAction(LOGIN_USER_JWT);\nexport const logoutUser = createAction(LOGOUT_USER);\nexport const saveUserData = createAction(SAVE_USER_DATA);\nexport const saveUserPassword = createAction(SAVE_USER_PASSWORD);\nexport const updateUserData = createAction(UPDATE_USER_DATA);\nexport const updatedUserData = createAction(UPDATED_USER_DATA);\nexport const removeUserData = createAction(REMOVE_USER_DATA);\nexport const requestData = createAction(REQUEST_DATA);\nexport const receiveDataSuccess = createAction(RECEIVE_DATA_SUCCESS);\nexport const receiveDataFailed = createAction(RECEIVE_DATA_FAILED);\nexport const loginSuccess = createAction(LOGIN_SUCCESS);\nexport const loginFailed = createAction(LOGIN_FAILED);\nexport const getUserProfile = createAction(GET_USER_PROFILE);\nexport const getUserByToken = createAction(GET_USER_BY_TOKEN);\nexport const updatedProfileData = createAction(UPDATED_PROFILE_DATA);\nexport const preparedAuth = createAction(PREPARED_AUTH);\nexport const updatedProfileQuestionData = createAction(UPDATED_PROFILE_QUESTION_DATA);\nexport const updatedProfileAnswerData = createAction(UPDATED_PROFILE_ANSWER_DATA);\nexport const updatedProfileCommentData = createAction(UPDATED_PROFILE_COMMENT_DATA);\nexport const sendResetPasswordMail = createAction(SEND_RESET_PASSWORD_MAIL);\nexport const resetPassword = createAction(RESET_PASSWORD);\nexport const activateUser = createAction(ACTIVATE_USER);\n","import { connect } from 'react-redux';\nimport Header from '../../components/layouts/Header';\nimport { logoutUser } from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        logout: (data) => dispatch(logoutUser(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React, { Component, PropTypes } from 'react';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\nimport NotificationsSystem from 'reapop';\nimport theme from 'reapop-theme-wybo';\nimport Header from '../containers/layouts/Header';\nimport { ClipLoader } from 'react-spinners';\n\nclass App extends Component {\n  componentWillMount() {\n    this.props.fetchLoginState();\n  }\n\n  handleLogout() {\n    //this.props.dispatch(clickLogout());\n  }\n\n  render() {\n    const { children } = this.props;\n    const { auth } = this.props.state;\n\n    return auth.isPrepared ? (\n      <BrowserRouter >\n        <div className=\"uk-margin-bottom\" >\n          <Header />\n          {children}\n          <NotificationsSystem theme={theme} />\n        </div>\n      </BrowserRouter>\n    ) : (\n      <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n        <ClipLoader />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from '../components/App';\nimport { loginUserJwt } from '../actions/User.js';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        fetchLoginState: () => dispatch(loginUserJwt())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\nclass ScrollToTop extends Component {\n  componentDidUpdate(prevProps) {\n    if (this.props.location !== prevProps.location) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n\nexport default withRouter(ScrollToTop);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass SignUpForm extends React.Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.name) {\n      errors.name = formatMessage({id: \"errors.sign_ups.name\"});\n    }\n\n    if (!values.mail) {\n      errors.mail = formatMessage({id: \"errors.sign_ups.mail\"});\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.mail)) {\n      errors.mail = formatMessage({id: \"errors.sign_ups.appropriate_mail\"});\n    }\n\n    if (!values.password) {\n      errors.password = formatMessage({id: \"errors.sign_ups.password\"});\n    }\n\n    if (values.passwordConfirm !== values.password) {\n      errors.passwordConfirm = formatMessage({id: \"errors.sign_ups.confirm_password\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          name: '',\n          mail: '',\n          password: '',\n          passwordConfirm: ''\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'name'}\n                     name=\"name\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.name\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.name && errors.name && <div className=\"uk-text-warning\">{errors.name}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'mail'}\n                     name=\"mail\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.mail\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.mail && errors.mail && <div className=\"uk-text-warning\">{errors.mail}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'password'}\n                     name=\"password\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.password && errors.password && <div className=\"uk-text-warning\">{errors.password}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'passwordConfirm'}\n                     name=\"passwordConfirm\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.confirm_password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.passwordConfirm && errors.passwordConfirm && <div className=\"uk-text-warning\">{errors.passwordConfirm}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.sign_up\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(SignUpForm));\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport SignUpForm from './SignUpForm';\nimport { injectIntl } from 'react-intl';\n\nclass SignUp extends React.Component {\n\n  onClickSubmit(formData) {\n    const { name, mail, password } = formData;\n    const { history } = this.props;\n    this.props.clickSubmit({ name, mail, password, history });\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{ formatMessage({id: \"titles.sign_up\"}) }</h2>\n\n        <SignUpForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(SignUp);\n","import { connect } from 'react-redux';\nimport SignUp from '../../components/users/SignUp';\nimport {\n    createUserAccount,\n    saveUserMnemonic\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        clickSubmit: (data) => dispatch(createUserAccount(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUp);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass LoginForm extends React.Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.mail) {\n      errors.mail = formatMessage({id: \"errors.login.mail\"});\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.mail)) {\n      errors.mail = formatMessage({id: \"errors.login.appropriate_mail\"});\n    }\n\n    if (!values.password) {\n      errors.password = formatMessage({id: \"errors.login.password\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          mail: '',\n          password: ''\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'mail'}\n                     name=\"mail\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.login.mail\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.mail && errors.mail && <div className=\"uk-text-warning\">{errors.mail}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'password'}\n                     name=\"password\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.login.password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.password && errors.password && <div className=\"uk-text-warning\">{errors.password}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.login\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(LoginForm));\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n/* import { ClipLoader } from 'react-spinners';*/\nimport LoginForm from './LoginForm';\nimport { injectIntl } from 'react-intl';\n\n\nclass Login extends React.Component {\n\n  onClickSubmit(formData) {\n    const { mail, password } = formData;\n    const { history } = this.props;\n    return this.props.handleSubmit({ mail, password, history });\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.login\"})}</h2>\n\n        <LoginForm onSubmit={this.onClickSubmit.bind(this)} />\n        <p><Link to=\"/users/password_reset\" >{formatMessage({id: \"links.password_reset\"})}</Link></p>\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(Login);\n","import { connect } from 'react-redux';\nimport Login from '../../components/users/Login';\nimport {\n    loginUser\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        handleSubmit: (data) => dispatch(loginUser(data)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass PasswordResetForm extends Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.mail) {\n      errors.mail = formatMessage({id: \"errors.login.mail\"});\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.mail)) {\n      errors.mail = formatMessage({id: \"errors.login.appropriate_mail\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          mail: '',\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'mail'}\n                     name=\"mail\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder={formatMessage({id: \"placeholders.login.mail\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.mail && errors.mail && <div className=\"uk-text-warning\">{errors.mail}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.send\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(PasswordResetForm));\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n/* import { ClipLoader } from 'react-spinners';*/\nimport PasswordResetForm from './PasswordResetForm';\nimport { injectIntl } from 'react-intl';\n\nclass PasswordReset extends Component {\n\n  onClickSubmit(formData) {\n    const { mail } = formData;\n    return this.props.handleSubmit(mail);\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.password_reset\"})}</h2>\n        <p>{formatMessage({id: \"messages.enter_mail\"})}</p>\n        <PasswordResetForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(PasswordReset);\n","import { connect } from 'react-redux';\nimport PasswordReset from '../../components/users/PasswordReset';\nimport {\n  sendResetPasswordMail\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    handleSubmit: (data) => dispatch(sendResetPasswordMail(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordReset);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport { injectIntl } from 'react-intl';\n\nclass PasswordForm extends Component {\n  validate(values) {\n    const { formatMessage } = this.props.intl;\n    let errors = {};\n\n    if (!values.password) {\n      errors.password = formatMessage({id: \"errors.sign_ups.password\"});\n    }\n\n    if (values.passwordConfirm !== values.password) {\n      errors.passwordConfirm = formatMessage({id: \"errors.sign_ups.confirm_password\"});\n    }\n\n    return errors;\n  }\n\n  render() {\n    const { formatMessage } = this.props.intl;\n\n    return (\n      <Formik\n        initialValues={{\n          password: '',\n          passwordConfirm: ''\n        }}\n        enableReinitialize={true}\n        validate={this.validate.bind(this)}\n        onSubmit={(values, { setSubmitting, setErrors, resetForm }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            resetForm();\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <Field\n                  id={'password'}\n                     name=\"password\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.password && errors.password && <div className=\"uk-text-warning\">{errors.password}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <Field\n                  id={'passwordConfirm'}\n                     name=\"passwordConfirm\"\n                     component=\"input\"\n                     type=\"password\"\n                     placeholder={formatMessage({id: \"placeholders.sign_ups.confirm_password\"})}\n                     className={'form-control uk-input'}\n                />\n                {touched.passwordConfirm && errors.passwordConfirm && <div className=\"uk-text-warning\">{errors.passwordConfirm}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <button className=\"uk-button uk-button-primary\" >{formatMessage({id: \"buttons.title.send\"})}</button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(PasswordForm));\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\n/* import { ClipLoader } from 'react-spinners';*/\nimport PasswordForm from './PasswordForm';\nimport { injectIntl } from 'react-intl';\nimport { isEmptyObject } from '../../utils';\n\nclass NewPassword extends Component {\n\n  componentDidMount() {\n    const { params } = this.props.match;\n    const { token } = params;\n    this.token = token;\n    return this.props.fetchUser(token);\n  }\n\n  onClickSubmit(formData) {\n    const { password } = formData;\n    const { id } = this.props.state.auth.user;\n    const { history } = this.props;\n    const token = this.token;\n    return this.props.handleSubmit({ id, password, token, history });\n  }\n\n  render() {\n    const { user, isFetching } = this.props.state.auth;\n\n    if (isFetching) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    if (isEmptyObject(user)) {\n      return (\n        <main className=\"uk-container uk-container-small\">\n          <p>不正なアクセスです</p>\n        </main>\n      );\n    }\n\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.password_reset\"})}</h2>\n        <p>{formatMessage({id: \"messages.enter_new_password\"})}</p>\n        <PasswordForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(NewPassword);\n","import { connect } from 'react-redux';\nimport NewPassword from '../../components/users/NewPassword';\nimport {\n  saveUserPassword,\n  getUserByToken,\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchUser: (token) => dispatch(getUserByToken(token)),\n    handleSubmit: (data) => dispatch(saveUserPassword(data)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NewPassword);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { Link } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\nimport { isEmptyObject } from '../../utils';\n\nclass Activate extends Component {\n\n  componentDidMount() {\n    const { params } = this.props.match;\n    const { history } = this.props;\n    const { token } = params;\n    this.token = token;\n    return this.props.activateUser({ token, history });\n  }\n\n  render() {\n    const { user, isFetching } = this.props.state.auth;\n\n    if (isFetching) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    if (isEmptyObject(user)) {\n      return (\n        <main className=\"uk-container uk-container-small\">\n          <p>不正なアクセスです</p>\n        </main>\n      );\n    }\n\n    const { formatMessage } = this.props.intl;\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >{formatMessage({id: \"titles.activate\"})}</h2>\n        <p>{formatMessage({id: \"messages.activate_completed\"})}</p>\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default injectIntl(Activate);\n","import { connect } from 'react-redux';\nimport Activate from '../../components/users/Activate';\nimport {\n  activateUser,\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    activateUser: (token) => dispatch(activateUser(token)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Activate);\n","import React, { Component } from 'react';\nimport { ClipLoader } from 'react-spinners';\nimport { connect } from 'react-redux';\nimport { getUserProfile } from '../../actions/User';\nimport QuestionListView from '../../components/QuestionListView';\nimport { Link } from 'react-router-dom';\nimport dayjs from 'dayjs';\nimport { isEmptyObject } from '../../utils';\nimport { injectIntl } from 'react-intl';\n\nclass Profile extends Component {\n  constructor(props) {\n    super(props);\n    const { params } = props.match;\n    this.state = {currentTab: 'questions'};\n    this.userId = parseInt(params.id, 10);\n    this.props.fetchUserProfile(this.userId);\n\n  }\n\n  onClickTab(newTabKey, e) {\n    e.preventDefault();\n    e.stopPropagation();\n    this.setState({\n      currentTab: newTabKey\n    });\n  }\n\n  getTabList() {\n    const { formatMessage } = this.props.intl;\n    const tabData = [\n      {\n        name: formatMessage({id: \"links.question\"}),\n        key: 'questions'\n      },\n      {\n        name: formatMessage({id: \"links.answer\"}),\n        key: 'answers'\n      },\n      {\n        name: formatMessage({id: \"links.comment\"}),\n        key: 'comments'\n      }\n    ];\n\n    return (\n      <ul className=\"uk-tab\" >\n        {tabData.map(v => {\n           const active = this.state['currentTab'] === v.key\n                        ? 'uk-active'\n                        : '';\n           return (\n             <li className={active} onClick={this.onClickTab.bind(this, v.key)} key={v.key} >\n               <a href=\"\">{v.name}</a>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n  getAnswerList(answers) {\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\">\n      {answers.map(answer => {\n        const { user } = answer;\n        const userName = user ? user.name : '不明なユーザー';\n        return (\n          <li key={answer.id} >\n            <p className=\"uk-text-lead uk-text-truncate\" ><Link to={`/answer/${answer.id}`}>{`${answer.content}`}</Link></p>\n            <p className=\"uk-text-meta\">{dayjs(answer.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n            <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n              <div className=\"uk-width-auto\">\n                <img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" />\n              </div>\n              <div className=\"uk-width-expand\">\n                <h4 className=\"uk-comment-meta uk-margin-remove\">{ userName }</h4>\n              </div>\n            </div>\n          </li>\n        );\n      })}\n      </ul>\n    );\n  }\n\n  getCommentList(comments) {\n    return (\n      <ul className=\"uk-list uk-list-divider uk-list-large\">\n        {comments.map(comment => {\n           const { user } = comment;\n           const userName = user ? user.name : '不明なユーザー';\n           return (\n             <li key={comment.id} >\n               <p className=\"uk-text-lead uk-text-truncate\" ><Link to={`/comment/${comment.id}`}>{`${comment.content}`}</Link></p>\n               <p className=\"uk-text-meta\">{dayjs(comment.created_at).format('YYYY/MM/DD HH:mm:ss')}</p>\n               <div className=\"uk-grid uk-grid-small uk-flex-middle\" >\n                 <div className=\"uk-width-auto\">\n                   <img className=\"uk-comment-avatar uk-border-circle\" src={user.image_path} width=\"35\" height=\"35\" alt=\"\" />\n                 </div>\n                 <div className=\"uk-width-expand\">\n                   <h4 className=\"uk-comment-meta uk-margin-remove\">{ userName }</h4>\n                 </div>\n               </div>\n             </li>\n           );\n        })}\n      </ul>\n    );\n  }\n\n\n  getCurrentTabContents(tabState, currentTab) {\n    const { questions, answers, comments } = tabState;\n    if (currentTab === 'questions') {\n      return (<QuestionListView questionArray={questions} translateLanguageId={1} />);\n    } else if (currentTab === 'answers') {\n      return this.getAnswerList(answers);\n    } else if (currentTab === 'comments') {\n      return this.getCommentList(comments);\n    }\n  }\n\n  render() {\n    // とりあえずログインユーザーのプロフィールページを。\n    // propsで渡されたuserIdのプロフィールページを表示するようにする。\n    const { profile } = this.props.state;\n    const { user } = profile;\n    const { formatMessage } = this.props.intl;\n\n    if (isEmptyObject(user)) {\n      return (\n        <div className=\"uk-position-center uk-overlay uk-overlay-default\">\n          <ClipLoader />\n        </div>\n      );\n    }\n\n    const tabList = this.getTabList();\n    const userPostList = this.getCurrentTabContents(profile, this.state.currentTab);\n\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <div className=\"uk-grid uk-grid-small uk-flex-middle uk-margin-bottom\">\n          <div className=\"uk-width-auto uk-flex-first\">\n            <img src={user.image_path} className=\"uk-border-circle\" alt=\"\" width=\"120\" height=\"\" />\n          </div>\n          <div className=\"uk-width-expand\" >\n            <p className=\"uk-text-lead\">{user.name}</p>\n            <p>{formatMessage({id: \"messages.birthplace\"})}: {user.country.name}</p>\n          </div>\n        </div>\n        <div>\n          <p style={{\"whiteSpace\": \"pre-wrap\"}}>{user.profile}</p>\n        </div>\n        <h3 className=\"uk-heading-line\"><span>{formatMessage({id: \"titles.post_list\"})}</span></h3>\n        {tabList}\n        {userPostList}\n      </main>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    fetchUserProfile: (userId) => dispatch(getUserProfile(userId)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(Profile));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, Formik } from 'formik';\nimport LanguageFormSelect from '../LanguageFormSelect';\n\nclass ProfileForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      image_url: ''\n    };\n  }\n\n  handleImageChange(setFieldValue, e) {\n    const file = e.currentTarget.files[0];\n    setFieldValue(\"image\", file);\n    const createObjectURL = (window.URL || window.webkitURL).createObjectURL || window.createObjectURL;\n    const image_url = createObjectURL(file);\n    this.setState({ image_url });\n  }\n\n  validate(values) {\n    let errors = {};\n    if (!values.country_id) {\n      errors.country_id = '出身地を設定してください';\n    }\n    return errors;\n  }\n\n  render() {\n    const { user } = this.props.state.auth;\n    const { id, name, profile, country_id } = user;\n    const imagePreview = this.state.image_url !== ''\n                       ? (<p><img src={this.state.image_url} alt=\"\" width=\"200\" /></p>)\n                       : '';\n\n    return (\n      <Formik\n      initialValues={{ id, name, profile, country_id, image: ''}}\n        enableReinitialize={true}\n        validate={this.validate}\n        onSubmit={(values, { setSubmitting, setErrors }) => {\n            this.props.onSubmit(values);\n            setSubmitting(false);\n            return;\n        }}\n        render={({ values, errors, touched, handleSubmit, isSubmitting, setFieldValue }) => (\n          <form onSubmit={handleSubmit} className=\"uk-form-stacked\" >\n            <fieldset className=\"uk-fieldset\">\n              <div className=\"uk-margin\">\n                <label className=\"uk-form-label\">ユーザー名</label>\n                <Field\n                  id={'name'}\n                     name=\"name\"\n                     component=\"input\"\n                     type=\"text\"\n                     placeholder=\"ニックネーム\"\n                     className={'uk-form-control uk-input'}\n                />\n                {touched.name && errors.name && <div>{errors.name}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <label className=\"uk-form-label\">出身地</label>\n                <LanguageFormSelect name=\"country_id\" placeholder=\"出身地\" />\n                {touched.country_id && errors.country_id && <div className=\"uk-text-warning\">{errors.country_id}</div>}\n              </div>\n              <div className=\"uk-margin\">\n                <label className=\"uk-form-label\">プロフィール</label>\n                <Field\n                  id={'profile'}\n                     name=\"profile\"\n                     component=\"textarea\"\n                     type=\"text\"\n                     placeholder=\"プロフィールを入力してください\"\n                     className={'uk-form-control uk-textarea'}\n                     rows=\"5\"\n                />\n                {touched.profile && errors.profile && <div className=\"uk-text-warning\">{errors.profile}</div>}\n              </div>\n              <div className=\"uk-margin js-upload\" uk-form-custom=\"true\" >\n                <label className=\"uk-form-label\">プロフィール画像</label>\n                <input id=\"file\" name=\"image\" type=\"file\" onChange={this.handleImageChange.bind(this, setFieldValue)} />\n\n                {touched.image && errors.image && <div>{errors.image}</div>}\n                <button className=\"uk-button uk-button-default\" type=\"button\" tabIndex=\"-1\">選択</button>\n                {imagePreview}\n              </div>\n              <div className=\"uk-margin\">\n                <button type=\"submit\" className=\"uk-button uk-button-primary\" disabled={isSubmitting}>\n                  保存\n                </button>\n              </div>\n            </fieldset>\n          </form>\n        )}\n      />\n    )\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    state,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProfileForm);\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ClipLoader } from 'react-spinners';\nimport ProfileForm from './ProfileForm';\n\nclass Profile extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    const { id, name, country_id, profile } = this.props.state.auth.user;\n    console.log('user', this.props.state.auth.user);\n\n    this.setState({\n      user_id: id,\n      name,\n      profile,\n      country_id\n    });\n  }\n\n  onClickSubmit(formData) {\n    const { id, name, profile, country_id, image } = formData;\n\n    const postData = {\n      user_id: id,\n      name,\n      profile,\n      country_id,\n      image\n    };\n    this.props.clickedSaveButton(postData);\n  }\n\n  render() {\n    return (\n      <main className=\"uk-container uk-container-small\">\n        <h2 className=\"uk-h3\" >プロフィール編集</h2>\n        \n        <ProfileForm onSubmit={this.onClickSubmit.bind(this)} />\n\n        <div className=\"uk-margin\">\n          <p><Link to=\"/\" >Top</Link></p>\n        </div>\n\n      </main>\n    );\n  }\n};\n\nexport default Profile;\n","import { connect } from 'react-redux';\nimport Profile from '../../components/users/Profile';\nimport {\n    loginUser,\n    saveUserData\n} from '../../actions/User';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        clickedSaveButton: (postData) => dispatch(saveUserData(postData)),\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);\n","import React, { Component } from 'react';\nimport { Redirect, Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport default class UserOnly extends Component {\n  static contextTypes = {\n    router: PropTypes.object.isRequired\n  }\n\n  componentWillMount() {\n    this.guestWillTransfer(this.props, this.context.router);\n  }\n\n  componentWillUpdate(nextProps) {\n    this.guestWillTransfer(nextProps, this.context.router);\n  }\n\n  guestWillTransfer(props, router) {\n    const { auth } = props.state;\n    const { history } = router;\n    if (!auth.isLoggedIn) {\n      return history.push('/users/login');\n    }\n    return true;\n  }\n\n  render() {\n    return (\n      <Route children={this.props.children} />\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport UserOnly from '../../components/auth/UserOnly';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserOnly);\n","import React, { Component } from 'react';\nimport { Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport default class GuestOnly extends Component {\n  static contextTypes = {\n    router: PropTypes.object.isRequired\n  }\n\n  componentWillMount() {\n    console.log('hoge');\n    this.userWillTransfer(this.props, this.context.router);\n  }\n\n  componentWillUpdate(nextProps) {\n    this.userWillTransfer(nextProps, this.context.router);\n  }\n\n  userWillTransfer(props, router) {\n    const { auth } = props.state;\n    const { history } = router;\n    if (auth.isLoggedIn) {\n      /* return <Redirect to={{ pathname: '/login', state: { from: this.props.location } }} />;*/\n      return history.replace('/');\n    }\n  }\n\n  render() {\n    return (\n      <Route children={this.props.children} />\n    );\n  }\n}\n","import { connect } from 'react-redux';\nimport GuestOnly from '../../components/auth/GuestOnly';\n\nconst mapStateToProps = state => {\n    return {state};\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {};\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GuestOnly);\n","import ja_JP from './locales/ja_JP';\nimport en_US from './locales/en_US';\n\nexport const locales = {\n  ja: {\n    locale: 'ja',\n    messages: ja_JP,\n    translateLanguageId: 1,\n  },\n  en: {\n    locale: 'en',\n    messages: en_US,\n    translateLanguageId: 2,\n  }\n};\n\nexport const categories = {\n  all: {\n      category: 'all',\n      categoryId: 0,\n  },\n  subculture: {\n      category: 'subculture',\n      categoryId: 1,\n  },\n  culture: {\n      category: 'culture',\n      categoryId: 2,\n  },\n  tourism: {\n      category: 'tourism',\n      categoryId: 3,\n  },\n  music: {\n      category: 'music',\n      categoryId: 4,\n  },\n};","const ja_JP = {\n  \"titles.sign_up\": '新規登録',\n  \"titles.login\": 'ログイン',\n  \"titles.activate\": '認証',\n  \"titles.password_reset\": 'パスワード再設定',\n  \"titles.question_list\": '質問一覧',\n  \"titles.answer_list\": '回答一覧',\n  \"titles.post_list\": '投稿一覧',\n  \"titles.translation_list\": '翻訳一覧',\n  \"titles.not_translated_list\": '未翻訳一覧',\n  \"messages.empty_answers\": 'まだ回答がありません。最初の投稿者になりましょう！',\n  \"messages.birthplace\": '出身地',\n  \"messages.you_are_not_target\": 'この質問は 「%s」 の方が回答対象者です。',\n  \"messages.enter_mail\": 'メールアドレスを入力してください',\n  \"messages.enter_new_password\": '新しいパスワードを入力してください',\n  \"messages.activate_completed\": '認証処理が完了しました。',\n  \"links.to_not_translated_list\": '未翻訳の一覧を見る',\n  \"links.edit\": '編集',\n  \"links.question\": '質問',\n  \"links.answer\": '回答',\n  \"links.comment\": 'コメント',\n  \"links.profile\": 'プロフィール',\n  \"links.profile_edit\": 'プロフィール編集',\n  \"links.sign_up\": '新規登録',\n  \"links.login\": 'ログイン',\n  \"links.logout\": 'ログアウト',\n  \"links.password_reset\": 'パスワードを忘れた',\n  \"links.to_question_view\": '質問ページへ',\n  \"languages.japanese\": '日本語',\n  \"languages.english\": '英語',\n  \"countries.japan\": '日本',\n  \"countries.usa\": 'アメリカ合衆国',\n  \"categories.all\": 'すべて',\n  \"categories.subculture\": '漫画・アニメ',\n  \"categories.culture\": '文化',\n  \"categories.tourism\": '観光',\n  \"categories.music\": '音楽',\n  \"errors.questions.content\": '質問文を入力してください',\n  \"errors.questions.country_id\": '回答対象国を指定してください',\n  \"errors.questions.translate_language_id\": '投稿言語を指定してください',\n  \"errors.questions.category_id\": 'カテゴリーを指定してください',\n  \"errors.answers.content\": '回答文を入力してください',\n  \"errors.answers.translate_language_id\": '投稿言語を指定してください',\n  \"errors.translations.content\": '翻訳を入力してください',\n  \"errors.translations.translate_language_id\": '投稿言語を指定してください',\n  \"errors.sign_ups.name\": 'ユーザー名を入力してください',\n  \"errors.sign_ups.mail\": 'メールアドレスを入力してください',\n  \"errors.sign_ups.appropriate_mail\": '適切なメールアドレスを指定してください',\n  \"errors.sign_ups.password\": 'パスワードを入力してください',\n  \"errors.sign_ups.confirm_password\": 'パスワードが一致していません',\n  \"errors.login.mail\": 'メールアドレスを入力してください',\n  \"errors.login.appropriate_mail\": '適切なメールアドレスを指定してください',\n  \"errors.login.password\": 'パスワードを入力してください',\n  \"placeholders.sign_ups.name\": '名前',\n  \"placeholders.sign_ups.mail\": 'メールアドレス',\n  \"placeholders.sign_ups.password\": 'パスワード',\n  \"placeholders.sign_ups.confirm_password\": 'パスワード確認',\n  \"placeholders.login.mail\": 'メールアドレス',\n  \"placeholders.login.password\": 'パスワード',\n  \"placeholders.questions.content\": '質問を入力してください',\n  \"placeholders.questions.country_id\": '回答対象国',\n  \"placeholders.questions.translate_language_id\": '投稿言語',\n  \"placeholders.questions.category_id\": 'カテゴリー',\n  \"placeholders.questions.submit_btn\": '投稿',\n  \"placeholders.answers.content\": '回答を入力してください',\n  \"placeholders.answers.translate_language_id\": '投稿言語',\n  \"placeholders.answers.submit_btn\": '投稿',\n  \"placeholders.translations.content\": '翻訳を入力してください',\n  \"placeholders.translations.translate_language_id\": '投稿言語',\n  \"buttons.title.reply\": '返信',\n  \"buttons.title.post\": '投稿',\n  \"buttons.title.sign_up\": '新規登録',\n  \"buttons.title.login\": 'ログイン',\n  \"buttons.title.send\": '送信',\n  \"translated.name\": '翻訳者',\n  \"translated.state\": '未翻訳',\n  \"categories.comic_anime\": '漫画・アニメ',\n  \"categories.culture\": '文化',\n  \"categories.tourism\": '観光',\n  \"categories.music\": '音楽',\n};\nexport default ja_JP;\n","const en_US = {\n  \"titles.sign_up\": 'Sign Up',\n  \"titles.login\": 'Login',\n  \"titles.activate\": 'Activation',\n  \"titles.password_reset\": 'Password Reset',\n  \"titles.question_list\": 'Questions',\n  \"titles.answer_list\": 'Answers',\n  \"titles.post_list\": 'Posts',\n  \"titles.translation_list\": 'Translations',\n  \"titles.not_translated_list\": 'Not Translated List',\n  \"messages.empty_answers\": 'There is no answer yet. Be the first contributor!',\n  \"messages.birthplace\": 'BirthPlace',\n  \"messages.you_are_not_target\": 'This question is subject to answers in \"%s\".',\n  \"messages.enter_mail\": 'Enter your email address.',\n  \"messages.enter_new_password\": 'Enter new password.',\n  \"messages.activate_completed\": 'Activation is completed.',\n  \"links.to_not_translated_list\": 'See not translated lists',\n  \"links.edit\": 'Edit',\n  \"links.question\": 'Question',\n  \"links.answer\": 'Answer',\n  \"links.comment\": 'Comment',\n  \"links.profile\": 'Profile',\n  \"links.profile_edit\": 'Profile Edit',\n  \"links.sign_up\": 'Sign Up',\n  \"links.login\": 'Login',\n  \"links.password_reset\": 'Forgot password',\n  \"links.logout\": 'Logout',\n  \"links.to_question_view\": 'to question page',\n  \"languages.japanese\": 'Japanese',\n  \"languages.english\": 'English',\n  \"countries.japan\": 'Japan',\n  \"countries.usa\": 'USA',\n  \"categories.all\": 'All',\n  \"categories.subculture\": 'Comic・Anime',\n  \"categories.culture\": 'Culture',\n  \"categories.tourism\": 'Tourism',\n  \"categories.music\": 'Music',\n  \"errors.questions.content\": 'Please write a question text.',\n  \"errors.questions.country_id\": 'Please select target country.',\n  \"errors.questions.translate_language_id\": 'Please select the language.',\n  \"errors.questions.category_id\": 'Please select the cateogry.',\n  \"errors.answers.content\": 'Please write an answer text.',\n  \"errors.answers.translate_language_id\": 'Please select the language.',\n  \"errors.translations.content\": 'Please write a translated text.',\n  \"errors.translations.translate_language_id\": 'Please select the language.',\n  \"errors.sign_ups.name\": 'Please enter user name.',\n  \"errors.sign_ups.mail\": 'Please enter your e-mail address.',\n  \"errors.sign_ups.appropriate_mail\": 'Please specify an appropriate email address.',\n  \"errors.sign_ups.password\": 'Please enter password.',\n  \"errors.sign_ups.confirm_password\": 'Password does not match.',\n  \"errors.login.mail\": 'Please enter your e-mail address.',\n  \"errors.login.appropriate_mail\": 'Please specify an appropriate email address.',\n  \"errors.login.password\": 'Please enter password.',\n  \"placeholders.sign_ups.name\": 'Name',\n  \"placeholders.sign_ups.mail\": 'Mail',\n  \"placeholders.sign_ups.password\": 'Password',\n  \"placeholders.sign_ups.confirm_password\": 'Password Confirm',\n  \"placeholders.login.mail\": 'Mail',\n  \"placeholders.login.password\": 'Password',\n  \"placeholders.questions.content\": 'Write your question!!',\n  \"placeholders.questions.country_id\": 'Target User Country',\n  \"placeholders.questions.translate_language_id\": 'Language',\n  \"placeholders.questions.category_id\": 'Category',\n  \"placeholders.questions.submit_btn\": 'POST',\n  \"placeholders.answers.content\": 'Write your answer!!',\n  \"placeholders.answers.translate_language_id\": 'Language',\n  \"placeholders.answers.submit_btn\": 'POST',\n  \"placeholders.translations.content\": 'Please write a translated text.',\n  \"placeholders.translations.translate_language_id\": 'Language',\n  \"buttons.title.reply\": 'Reply',\n  \"buttons.title.post\": 'Post',\n  \"buttons.title.sign_up\": 'Sign Up',\n  \"buttons.title.login\": 'Login',\n  \"buttons.title.send\": 'Send',\n  \"translated.name\": 'Translator',\n  \"translated.state\": 'Untranslated',\n  \"categories.comic_anime\": 'Comic・Anime',\n  \"categories.culture\": 'culture',\n  \"categories.tourism\": 'tourism',\n  \"categories.music\": 'music',\n};\nexport default en_US;\n","import { locales, categories } from './intl';\n\nconst savedLocale = localStorage.getItem('locale');\nconst currentLocale = savedLocale ? savedLocale : 'ja';\nconst savedCategory = localStorage.getItem('category');\nconst currentCategory = savedCategory ? savedCategory : 'all';\n\nexport const initialState = {\n  intl: locales[currentLocale],\n  ctgr: categories[currentCategory],\n  signUp: {\n    mail: '',\n    password: '',\n    mnemonic: '',\n    hash: '',\n  },\n  profile: {\n    isFetching: false,\n    user: {},\n    questions: [],\n    answers: [],\n    comments: [],\n  },\n  auth: {\n    isPrepared: false,\n    isFetching: false,\n    isLoggedIn: false,\n    user: {},\n    jwt: ''\n  },\n  answers: {\n    isFetching: false,\n    answerArray: [],\n    currentAnswer: {}\n  },\n  answerTranslations: {\n    isFetching: false,\n    currentTranslationList: [],\n    currentTranslation: {},\n  },\n  questions: {\n    isFetching: false,\n    translateLanguageId: 1,\n    questionArray: [],\n    currentQuestion: {},\n  },\n  questionTranslations: {\n    isFetching: false,\n    currentTranslationList: [],\n    currentTranslation: {},\n  },\n  comments: {\n    isFetching: false,\n    currentCommentList: [],\n    currentComment: {}\n  },\n  commentTranslations: {\n    isFetching: false,\n    currentTranslationList: [],\n    currentTranslation: {},\n  },\n  //未翻訳コメントリスト一覧表示\n  not_translate: {\n    //api接続中である場合（非同期処理をしている途中）はtrueになる\n    isFetching: false,\n    questions: [],\n    answers: [],\n    comments: [],\n  },\n  //評価機能\n  votes: {\n    //api接続中である場合（非同期処理をしている途中）はtrueになる\n    isFetching: false,\n    status: [],\n  },\n  //評価機能\n  voteTranslations: {\n    //api接続中である場合（非同期処理をしている途中）はtrueになる\n    isFetching: false,\n    status: [],\n  },\n};\n","import { combineReducers } from 'redux';\nimport { reducer as notificationsReducer } from 'reapop';\nimport * as questions from './reducers/Question';\nimport * as answers from './reducers/Answer';\nimport * as users from './reducers/User';\nimport * as comments from './reducers/Comment';\nimport * as questionTranslations from './reducers/QuestionTranslation';\nimport * as answerTranslations from './reducers/AnswerTranslation';\nimport * as commentTranslations from './reducers/CommentTranslation';\nimport * as notTranslated from './reducers/NotTranslated';\nimport * as votes from './reducers/Votes';\nimport * as voteTranslations from './reducers/VoteTranslation';\nimport { intl } from './reducers/Intl';\nimport { ctgr } from './reducers/Category';\nimport { addLocaleData } from 'react-intl';\n\nconst reducer = combineReducers({\n  intl: intl,\n  ctgr: ctgr,\n  answers: answers.list,\n  questions: questions.list,\n  questionTranslations: questionTranslations.list,\n  answerTranslations: answerTranslations.list,\n  auth: users.auth,\n  signUp: users.signUp,\n  profile: users.profile,\n  comments: comments.list,\n  commentTranslations: commentTranslations.list,\n  not_translate: notTranslated.list,\n  votes: votes.list,\n  voteTranslations: voteTranslations.list,\n  notifications: notificationsReducer()\n});\n\nexport default reducer;\n","import {\n  UPDATE_CURRENT_LANGUAGE,\n} from '../actions/Intl';\nimport { initialState } from '../constants';\nimport { locales } from '../intl';\n\nexport const intl = (state = initialState.intl, action) => {\n  switch (action.type) {\n  case UPDATE_CURRENT_LANGUAGE:\n    const { locale, messages, translateLanguageId } = locales[action.payload];\n    localStorage.setItem('locale', locale);\n    return {\n      ...state,\n      locale,\n      messages,\n      translateLanguageId\n    };\n  default:\n    return state;\n  }\n};\n\n","import { UPDATE_CURRENT_CATEGORY } from '../actions/Category';\nimport { initialState } from '../constants';\nimport { categories } from '../intl';\n\nexport const ctgr = (state = initialState.ctgr, action) => {\n\nswitch (action.type) {\ncase UPDATE_CURRENT_CATEGORY:\n    const { category, categoryId } = categories[action.payload];\n    localStorage.setItem('category', category);\n    return {\n    ...state,\n    category,\n    categoryId\n    };\ndefault:\n    return state;\n}\n};","import {\n    CHANGE_ANSWER_FORM_CONTENT,\n    REQUEST_DATA,\n    RECEIVE_DATA_SUCCESS,\n    RECEIVE_SINGLE_DATA_SUCCESS,\n    RECEIVE_DATA_FAILED,\n    INITIALIZE_FORM,\n    POST_ANSWER_DATA\n} from '../actions/Answer';\nimport { initialState } from '../constants';\n\nexport const form = (state = initialState.answerForm, action) => {\n    switch (action.type) {\n    case CHANGE_ANSWER_FORM_CONTENT:\n        return {\n            ...state,\n            content: action.payload,\n        };\n    case POST_ANSWER_DATA:\n        return {\n            ...state\n        };\n    case REQUEST_DATA:\n        return {\n            ...state,\n            isFetching: true,\n        };\n    case RECEIVE_DATA_SUCCESS:\n        return {\n            ...state,\n            isFetching: false,\n        };\n    case RECEIVE_DATA_FAILED:\n        return {\n            ...state,\n            isFetching: false,\n        };\n    case INITIALIZE_FORM:\n        return {\n            ...state,\n            content: ''\n        };\n    default:\n        return state;\n    }\n};\n\nexport const list = (state = initialState.answers, action) => {\n    switch (action.type) {\n    case REQUEST_DATA:\n        return {\n            ...state,\n            isFetching: true,\n        };\n    case RECEIVE_DATA_SUCCESS:\n        return {\n            ...state,\n            isFetching: false,\n            answerArray: action.payload.data,         \n        };\n    case RECEIVE_SINGLE_DATA_SUCCESS:\n        return {\n            ...state,\n            isFetching: false,\n            currentAnswer: action.payload.data\n        };\n    case RECEIVE_DATA_FAILED:\n        return {\n            ...state,\n            isFetching: false,\n        };\n    case INITIALIZE_FORM:\n        return {\n            ...state,\n            content: ''\n        };\n    default:\n        return state;\n    }\n};\n","import {\n  POST_QUESTION_DATA,\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATE_CURRENT_TRANSLATE_LANGUAGE,\n  UPDATED_QUESTION_DATA\n} from '../actions/Question';\nimport { initialState } from '../constants';\n\nexport const form = (state = initialState.questionForm, action) => {\n  switch (action.type) {\n  case POST_QUESTION_DATA:\n    return {\n      ...state\n    };\n  default:\n    return state;\n  }\n};\n\nexport const list = (state = initialState.questions, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      //...stateは他の状態は維持してisFetchingだけを変更するというコード\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      //isFetchingは終了したのでfalseにしている。\n      isFetching: false,\n      //ここでquestionArrayに値を入れている。\n      questionArray: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentQuestion: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATE_CURRENT_TRANSLATE_LANGUAGE:\n    return {\n      ...state,\n      translateLanguageId: parseInt(action.payload)\n    };\n  case UPDATED_QUESTION_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      currentQuestion: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATED_SINGLE_QUESTION_TRANSLATION\n} from '../actions/QuestionTranslation';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.questionTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslationList: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslation: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_SINGLE_QUESTION_TRANSLATION:\n    return {\n      ...state,\n      currentTranslation: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  POST_ANSWER_TRANSLATION_DATA,\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATED_SINGLE_ANSWER_TRANSLATION\n} from '../actions/AnswerTranslation';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.answerTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslationList: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslation: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_SINGLE_ANSWER_TRANSLATION:\n    return {\n      ...state,\n      currentTranslation: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  CLICK_SUBMIT,\n  REQUEST_DATA,\n  RECEIVE_DATA_FAILED,\n  REMOVE_USER_DATA,\n  UPDATED_USER_DATA,\n  UPDATED_PROFILE_DATA,\n  UPDATED_PROFILE_QUESTION_DATA,\n  UPDATED_PROFILE_ANSWER_DATA,\n  UPDATED_PROFILE_COMMENT_DATA,\n  LOGIN_SUCCESS,\n  LOGIN_FAILED,\n  PREPARED_AUTH\n} from '../actions/User';\nimport { initialState } from '../constants';\n\nexport const signUp = (state = initialState.signUp, action) => {\n  switch (action.type) {\n  case CLICK_SUBMIT:\n    return {\n      ...state,\n    };\n  default:\n    return state;\n  }\n};\n\nexport const auth = (state = initialState.auth, action) => {\n  switch (action.type) {\n  case LOGIN_SUCCESS:\n    return {\n      ...state,\n      isLoggedIn: true,\n      user: action.payload.data,\n      jwt: action.payload.data.jwt\n    };\n  case LOGIN_FAILED:\n    return {\n      ...state,\n      isLoggedIn: false,\n      user: {},\n      jwt: ''\n    };\n  case REMOVE_USER_DATA:\n    return {\n      ...state,\n      isLoggedIn: false,\n      user: {},\n      jwt: ''\n    };\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_USER_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      user: action.payload.data\n    };\n  case PREPARED_AUTH:\n    return {\n      ...state,\n      isPrepared: true\n    };\n  default:\n    return state;\n  }\n};\n\nexport const profile = (state = initialState.profile, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true\n    };\n  case UPDATED_PROFILE_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      user: action.payload.data\n    };\n  case UPDATED_PROFILE_QUESTION_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      questions: action.payload.data\n    };\n  case UPDATED_PROFILE_ANSWER_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      answers: action.payload.data\n    };\n  case UPDATED_PROFILE_COMMENT_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      comments: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  REQUEST_DATA,\n  RECEIVE_COMMENT_DATA_SUCCESS,\n  POST_COMMENT,\n  UPDATED_COMMENT_DATA,\n  UPDATED_SINGLE_COMMENT_DATA,\n  UPDATED_COMMENT_ARRAY\n} from '../actions/Comment';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.comments, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true\n    };\n  case RECEIVE_COMMENT_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      commentArray: action.payload.data\n    };\n  case UPDATED_COMMENT_ARRAY:\n    return {\n      ...state,\n      isFetching: false,\n      commentArray: action.payload.data,\n    };\n  case UPDATED_COMMENT_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      currentCommentList: action.payload.data\n    };\n  case UPDATED_SINGLE_COMMENT_DATA:\n    return {\n      ...state,\n      isFetching: false,\n      currentComment: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_SINGLE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n  UPDATED_SINGLE_COMMENT_TRANSLATION,\n} from '../actions/CommentTranslation';\nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.commentTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslationList: action.payload.data\n    };\n  case RECEIVE_SINGLE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      currentTranslation: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  case UPDATED_SINGLE_COMMENT_TRANSLATION:\n    return {\n      ...state,\n      currentTranslation: action.payload.data\n    };\n  default:\n    return state;\n  }\n};\n","import {\n    REQUEST_DATA,\n    RECEIVE_DATA_SUCCESS,\n} from '../actions/NotTranslated';\n  \nimport { initialState } from '../constants';\n\nexport const list = (state = initialState.not_translate, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      //...stateは他の状態は維持してisFetchingだけを変更する。\n      ...state,\n      isFetching: true,\n    };\n  \n  case RECEIVE_DATA_SUCCESS:\n\n    const { questions, answers, comments } = action.payload;\n\n    return {\n      ...state,\n      //isFetchingは終了したのでfalseにしている。\n      isFetching: false,\n      //ここでquestionArrayに値を入れている。\n      questions,\n      answers,\n      comments,\n    };\n  \n  default:\n    return state;\n  }\n};","import {\n    POST_VOTE,\n    REQUEST_DATA,\n    RECEIVE_DATA_SUCCESS,\n    RECEIVE_DATA_FAILED,\n  } from '../actions/VoteTranslation.js';\n\n  import { initialState } from '../constants';\n    \n  export const list = (state = initialState.votes, action) => {\n    switch (action.type) {\n    case POST_VOTE:\n      return {\n        ...state\n      }; \n    case REQUEST_DATA:\n      return {\n        ...state,\n        isFetching: true,\n      };\n    case RECEIVE_DATA_SUCCESS:\n      return {\n        ...state,\n        isFetching: false,\n        questionArray: action.payload.data                  \n      };\n    case RECEIVE_DATA_FAILED:\n      return {\n        ...state,\n        isFetching: false\n      };\n    default:\n      return state;\n    }\n  };\n  ","import {\n  POST_VOTE,\n  REQUEST_DATA,\n  RECEIVE_DATA_SUCCESS,\n  RECEIVE_DATA_FAILED,\n} from '../actions/VoteTranslation';\n\nimport { initialState } from '../constants';\n\nexport const form = (state = initialState.voteTranslations, action) => {\n  switch (action.type) {\n  case POST_VOTE:\n    return {\n      ...state\n    };\n  default:\n    return state;\n  }\n};\n\nexport const list = (state = initialState.voteTranslations, action) => {\n  switch (action.type) {\n  case REQUEST_DATA:\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case RECEIVE_DATA_SUCCESS:\n    return {\n      ...state,\n      isFetching: false,\n      status: action.payload.data\n    };\n  case RECEIVE_DATA_FAILED:\n    return {\n      ...state,\n      isFetching: false\n    };\n  default:\n    return state;\n  }\n};\n","import axios from 'axios';\n\nexport const createUserAccount = (postData) => {\n    return axios.post('/api/users', postData);\n};\n\nexport const loginUser = (postData) => {\n    const username = postData.mail;\n    const { password } = postData;\n\n    return axios.post('/api/users/login', {\n        username,\n        password\n    });\n};\n\nexport const loginUserJwt = (postData) => {\n    const { jwt } = postData;\n    const headers = {\n        \"Content-Type\": 'application/json',\n        \"Authorization\": `Bearer ${jwt}`\n    };\n    return axios.post('/api/users/login_jwt', {}, { headers });\n};\n\nexport const activateUser = (postData) => {\n  const { token } = postData;\n  return axios.post(`/api/users/activate/${token}`, postData);\n};\n\nexport const resetPassword = (mail) => {\n  return axios.post(`/api/users/password_reset`, { mail });\n};\n\nexport const saveUserPassword = (postData) => {\n  const { token } = postData;\n  return axios.put(\n    `/api/users/update_password/${token}`,\n    postData\n  );\n};\n\nexport const saveUserProfile = (postData) => {\n    const { user_id, name, profile, country_id, image } = postData;\n    let data = new FormData();\n    data.append('name', name);\n    data.append('profile', profile);\n    data.append('country_id', country_id);\n    data.append('image', image);\n    return axios.put(\n        `/api/users/${user_id}`,\n        data,\n        {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        }\n    );\n};\n\nexport const getUser = (user_id) => {\n    return axios.get(`/api/users/${user_id}`);\n};\n\nexport const getUserByToken = (token) => {\n  return axios.get(`/api/users/password_reset/${token}`);\n};\n","import axios from 'axios';\n\nexport const fetchQuestionList = (params) => {\n    return axios.get('/api/questions', {\n        params\n    });\n};\n\nexport const fetchQuestion = (id) => {\n    return axios.get(`/api/questions/${id}`);\n};\n\nexport const postQuestionData = (postData) => {\n    return axios.post('/api/questions', postData);\n};\n\nexport const saveQuestionData = (postData) => {\n  const { question_id } = postData;\n  return axios.put(`/api/questions/${question_id}`, postData);\n};\n\nexport const deleteQuestionData = (params) => {\n  const { question_id } = params;\n  return axios.delete(`/api/questions/${question_id}`, { params });\n};\n","import axios from 'axios';\n\nconst apiUrl = '/api/answers';\n\nexport const fetchAnswer = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const fetchAnswerList = (params) => {\n  return axios.get(apiUrl, {\n    params\n  });\n};\n\nexport const fetchAnswerListWithQuestion = (params) => {\n  return axios.get(`${apiUrl}_with_question`, {\n    params\n  });\n};\n\nexport const postAnswerData = (params) => {\n  return axios.post(apiUrl, params);\n};\n\nexport const saveAnswerData = (saveData) => {\n  const { answer_id } = saveData;\n  return axios.put(`${apiUrl}/${answer_id}`, saveData);\n};\n\nexport const deleteAnswerData = (params) => {\n  const { answer_id } = params;\n  return axios.delete(`${apiUrl}/${answer_id}`, { params });\n};\n","import axios from 'axios';\nconst apiUrl = '/api/comments';\n\nexport const fetchCommentWithUserList = (params) => {\n  return axios.get(`/api/comments_with_User`, {\n    params\n  });\n}\n\nexport const fetchCommentsList = (params) => {\n    return axios.get(apiUrl, {\n        params\n    });\n};\n\nexport const fetchComment = (id) => {\n    return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const fetchCommentListWithAnswer = (params) => {\n  return axios.get(`${apiUrl}_with_answer`, {\n    params\n  });\n};\n\nexport const postCommentData = (postData) => {\n    return axios.post(apiUrl, postData);\n};\n\nexport const saveCommentData = (saveData) => {\n  const { comment_id } = saveData;\n  return axios.put(`${apiUrl}/${comment_id}`, saveData);\n};\n\nexport const deleteCommentData = (params) => {\n  const { comment_id } = params;\n  return axios.delete(`${apiUrl}/${comment_id}`, { params });\n};\n","import { addNotification as notify } from 'reapop';\n\nexport function notifySuccess(message) {\n  return notify({\n    message,\n    position: 'tc',\n    status: 'success',\n    dismissAfter: 2000\n  });\n}\n\nexport function notifyError(message) {\n  return notify({\n    message,\n    position: 'tc',\n    status: 'error',\n    dismissAfter: 2000\n  });\n}\n\nexport function notifyAlert(message) {\n  return notify({\n    message,\n    position: 'tc',\n    status: 'error',\n    dismissAfter: 2000\n  });\n}\n","import { takeEvery, call, put } from 'redux-saga/effects';\n// import { push } from 'react-router-redux';\nimport {\n  updateUserData, requestData, receiveDataSuccess, receiveDataFailed,\n  loginSuccess, loginFailed, removeUserData, updatedUserData,\n  updatedProfileData, preparedAuth, updatedProfileQuestionData,\n  updatedProfileAnswerData, updatedProfileCommentData,\n} from '../actions/User';\nimport {\n  CREATE_USER_ACCOUNT,\n  SAVE_USER_DATA,\n  SAVE_USER_PASSWORD,\n  ACTIVATE_USER,\n  SEND_RESET_PASSWORD_MAIL,\n  GET_USER_PROFILE,\n  GET_USER_BY_TOKEN,\n  LOGIN_USER,\n  LOGIN_USER_JWT,\n  LOGOUT_USER\n} from '../actions/User';\nimport * as api from './apis/Users';\nimport { fetchQuestionList } from './apis/Questions';\nimport { fetchAnswerListWithQuestion } from './apis/Answers';\nimport { fetchCommentListWithAnswer } from './apis/Comments';\nimport { notifySuccess, notifyError } from './Util';\n\nexport function* createUserAccount(action) {\n  const { history } = action.payload;\n  try {\n    yield put(requestData());\n    const payload = yield call(api.createUserAccount, action.payload);\n    yield put(receiveDataSuccess(payload));\n    const message = '新規登録に成功しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/users/login');\n  } catch (e) {\n    yield put(receiveDataFailed());\n    const message = '新規登録に失敗しました';\n    yield put(notifyError(message));\n  }\n}\n\nexport function* loginUserAccount(action) {\n  const { history } = action.payload;\n  try {\n    const payload = yield call(api.loginUser, action.payload);\n    yield put(loginSuccess(payload));\n    const { jwt } = payload.data;\n    localStorage.setItem('jwt', jwt);\n    const message = 'ログインに成功しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n    // yield put(push('/'));\n  } catch (e) {\n    //yield put(loginFailed());\n    const message = 'アカウントが存在しないか、パスワードが間違っています';\n    yield put(notifyError(message));\n    yield call(history.push, '/users/login');\n  }\n}\n\nexport function* loginUserAccountJwt(action) {\n  try {\n    const jwt = localStorage.getItem('jwt');\n    if (!jwt) {\n      throw new Error('JWTがありません。');\n    }\n    const payload = yield call(api.loginUserJwt, { jwt });\n    yield put(loginSuccess(payload));\n    yield put(preparedAuth());\n  } catch (e) {\n    yield put(loginFailed());\n    yield put(preparedAuth());\n  }\n}\n\nexport function* logoutUserAccount(action) {\n  try {\n    const { history } = action.payload;\n    localStorage.removeItem('jwt');\n    yield put(removeUserData());\n    const message = 'ログアウトしました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n  } catch (e) {\n    //yield put(loginFailed());\n    //yield call(history.push, '/users/login');\n  }\n}\n\nexport function* saveUserData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveUserProfile, action.payload);\n    const message = 'プロフィールを更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedUserData(payload));\n  } catch (e) {\n    const message = 'プロフィールの更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveUserPassword(action) {\n  try {\n    const { history } = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.saveUserPassword, action.payload);\n    yield put(loginSuccess(payload));\n    const { jwt } = payload.data;\n    localStorage.setItem('jwt', jwt);\n    const message = 'パスワードを更新しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = 'パスワードの更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function *resetPassword(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.resetPassword, action.payload);\n    const message = 'メールを送信しました';\n    yield put(notifySuccess(message));\n  } catch (e) {\n    const message = 'メール送信に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* getUserProfile(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.getUser, action.payload);\n    const questionParams = {user_id : action.payload};\n    const questionPayload = yield call(fetchQuestionList, questionParams);\n\n    const answerParams = {user_id : action.payload};\n    const answerPayload = yield call(fetchAnswerListWithQuestion, answerParams);\n\n    const commentParams = {user_id : action.payload};\n    const commentPayload = yield call(fetchCommentListWithAnswer, commentParams);\n    yield put(updatedProfileData(payload));\n    yield put(updatedProfileQuestionData(questionPayload));\n    yield put(updatedProfileAnswerData(answerPayload));\n    yield put(updatedProfileCommentData(commentPayload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* getUserByToken(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.getUserByToken, action.payload);\n    yield put(updatedUserData(payload));\n  } catch (e) {\n    console.log('receiveDataFailed');\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* activateUser(action) {\n  try {\n    const { history } = action.payload;\n    console.log('history', history);\n    yield put(requestData());\n    const payload = yield call(api.activateUser, action.payload);\n    yield put(loginSuccess(payload));\n    const { jwt } = payload.data;\n    localStorage.setItem('jwt', jwt);\n    const message = '認証が完了しました。';\n    yield put(notifySuccess(message));\n    yield call(history.push, '/');\n  } catch (e) {\n    console.log('receiveDataFailed');\n    yield put(receiveDataFailed());\n  }\n}\n\nconst userSagas = [\n  takeEvery(CREATE_USER_ACCOUNT, createUserAccount),\n  takeEvery(LOGIN_USER, loginUserAccount),\n  takeEvery(LOGIN_USER_JWT, loginUserAccountJwt),\n  takeEvery(LOGOUT_USER, logoutUserAccount),\n  takeEvery(SAVE_USER_DATA, saveUserData),\n  takeEvery(SAVE_USER_PASSWORD, saveUserPassword),\n  takeEvery(GET_USER_PROFILE, getUserProfile),\n  takeEvery(GET_USER_BY_TOKEN, getUserByToken),\n  takeEvery(SEND_RESET_PASSWORD_MAIL, resetPassword),\n  takeEvery(ACTIVATE_USER, activateUser),\n];\n\nexport default userSagas;\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updateCurrentTranslateLanguage,\n  updatedQuestionData\n} from '../actions/Question';\nimport {\n  FETCH_QUESTION_LIST,\n  FETCH_QUESTION,\n  CHANGE_QUESTION_LIST_LANGUAGE,\n  POST_QUESTION_DATA,\n  SAVE_QUESTION_DATA,\n  DELETE_QUESTION,\n} from '../actions/Question';\n\nimport * as api from './apis/Questions';\nimport { notifySuccess, notifyError } from './Util';\n\nexport function* handleFetchData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestionList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* handleFetchQuestionById(action) {\n  try {\n    const  id   = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestion, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postQuestion(action) {\n  try {\n    yield put(requestData());\n    yield call(api.postQuestionData, action.payload);\n    const payload = yield call(api.fetchQuestionList);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* changeQuestionListLanguage(action) {\n  try {\n    const { translate_language_id } = action.payload;\n    yield put(requestData());\n    // const payload = yield call(fetchQuestionList, action.payload);\n    // yield put(updateCurrentTranslateLanguage(action));\n    // yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveQuestionData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveQuestionData, action.payload);\n    const message = '質問を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedQuestionData(payload));\n  } catch (e) {\n    const message = '質問の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteQuestionData(action) {\n  try {\n    const { question_id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteQuestionData, action.payload);\n    const message = '質問を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchQuestionList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '質問の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst questionSagas = [\n  //FETCH_QUESTION_LISTというアクションが発火させた場合はhandleFetchDataを起動させる。\n  takeEvery(FETCH_QUESTION_LIST, handleFetchData),\n  takeEvery(FETCH_QUESTION, handleFetchQuestionById),\n  // takeEvery(CHANGE_QUESTION_LIST_LANGUAGE, changeQuestionListLanguage),\n  takeEvery(POST_QUESTION_DATA, postQuestion),\n  takeEvery(SAVE_QUESTION_DATA, saveQuestionData),\n  takeEvery(DELETE_QUESTION, deleteQuestionData),\n];\n\nexport default questionSagas;\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport { reset } from 'redux-form';\nimport {\n  requestData, receiveDataSuccess, receiveDataFailed, initializeForm,\n  receiveSingleDataSuccess,\n} from '../actions/Answer';\nimport {\n  FETCH_ANSWER,\n  FETCH_ANSWER_LIST,\n  POST_ANSWER_DATA,\n  SAVE_ANSWER_DATA,\n  DELETE_ANSWER,\n} from '../actions/Answer';\nimport * as api from './apis/Answers';\nimport * as act from '../actions/Comment';\nimport { notifySuccess, notifyError } from './Util';\nimport { fetchCommentWithUserList }from './apis/Comments';\n\nexport function* handleFetchAnswerData(action) {\n  try {\n    yield put(requestData());\n    const answerList = yield call(api.fetchAnswerList, action.payload);\n    const answerId = answerList.data.map(v =>{ return v.id });\n    const commentList = yield call(fetchCommentWithUserList, answerId);\n    yield put(receiveDataSuccess(answerList));\n    yield put(act.receiveCommentDataSuccess(commentList));\n    yield put(act.updatedCommentArray(action.payload));   \n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* postAnswer(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.postAnswerData, action.payload);\n    const { question_id, translate_language_id } = action.payload;\n    const answerPayload = yield call(api.fetchAnswerList, { question_id, translate_language_id });\n    yield put(receiveDataSuccess(answerPayload));\n    yield put(reset('answerForm'));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* fetchSingleAnswerData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchAnswer, action.payload);\n    yield put(receiveSingleDataSuccess(payload));\n    yield put(reset('answerForm'));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveAnswerData(action) {\n  try {\n    const { question_id, history } = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.saveAnswerData, action.payload);\n    const message = '回答を更新しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = '回答の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteAnswerData(action) {\n  try {\n    const { answer_id, question_id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteAnswerData, action.payload);\n    const message = '回答を削除しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = '回答の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\n\nconst answerSagas = [\n  takeEvery(FETCH_ANSWER_LIST, handleFetchAnswerData),\n  takeEvery(POST_ANSWER_DATA, postAnswer),\n  takeEvery(FETCH_ANSWER, fetchSingleAnswerData),\n  takeEvery(SAVE_ANSWER_DATA, saveAnswerData),\n  takeEvery(DELETE_ANSWER, deleteAnswerData),\n];\n\nexport default answerSagas;\n","import axios from 'axios';\n\nconst apiUrl = '/api/question_translations';\n\nexport const fetchQuestionTranslationList = (question_id) => {\n  return axios.get(apiUrl, {\n    params: { question_id }\n  });\n};\n\nexport const fetchQuestionTranslation = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const postQuestionTranslationData = (postData) => {\n  const {\n    content,\n    user_id,\n    question_id,\n    translate_language_id\n  } = postData;\n  return axios.post(apiUrl, {\n    content,\n    user_id,\n    question_id,\n    translate_language_id\n  });\n};\n\nexport const saveQuestionTranslationData = (saveData) => {\n  const { id } = saveData;\n  return axios.put(`${apiUrl}/${id}`, saveData);\n};\n\nexport const deleteQuestionTranslation= (params) => {\n  const { id } = params;\n  return axios.delete(`${apiUrl}/${id}`, { params });\n};\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updatedSingleQuestionTranslation\n} from '../actions/QuestionTranslation';\nimport {\n  FETCH_QUESTION_TRANSLATION_LIST,\n  FETCH_QUESTION_TRANSLATION,\n  POST_QUESTION_TRANSLATION_DATA,\n  SAVE_QUESTION_TRANSLATION_DATA,\n  DELETE_QUESTION_TRANSLATION,\n} from '../actions/QuestionTranslation';\nimport * as api from './apis/QuestionTranslations';\nimport { notifySuccess, notifyError } from './Util';\nimport * as questionSagas from './Question';\n\nexport function* handleFetchQuestionTranslationList(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestionTranslationList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* handleFetchQuestionTranslationById(action) {\n  try {\n    const id = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchQuestionTranslation, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* postQuestionTranslation(action) {\n  try {\n    const { question_id } = action.payload;\n    yield put(requestData());\n    yield call(api.postQuestionTranslationData, action.payload);\n    const payload = yield call(api.fetchQuestionTranslationList, question_id);\n    yield put(receiveDataSuccess(payload));\n    const data = {payload: {}};\n    yield call(questionSagas.handleFetchData, data);\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveQuestionTranslationData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveQuestionTranslationData, action.payload);\n    const message = '翻訳を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedSingleQuestionTranslation(payload));\n  } catch (e) {\n    const message = '翻訳の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteQuestionTranslation(action) {\n  try {\n    const { id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteQuestionTranslation, action.payload);\n    const message = '翻訳を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchQuestionTranslationList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '翻訳の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst questionTranslationSagas = [\n  takeEvery(POST_QUESTION_TRANSLATION_DATA, postQuestionTranslation),\n  takeEvery(FETCH_QUESTION_TRANSLATION_LIST, handleFetchQuestionTranslationList),\n  takeEvery(FETCH_QUESTION_TRANSLATION, handleFetchQuestionTranslationById),\n  takeEvery(SAVE_QUESTION_TRANSLATION_DATA, saveQuestionTranslationData),\n  takeEvery(DELETE_QUESTION_TRANSLATION, deleteQuestionTranslation),\n];\n\nexport default questionTranslationSagas;\n","import axios from 'axios';\n\nconst apiUrl = '/api/answer_translations';\n\nexport const fetchAnswerTranslationList = (answer_id) => {\n  return axios.get(apiUrl, {\n    params: { answer_id }\n  });\n};\n\nexport const fetchAnswerTranslation = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const postAnswerTranslationData = (postData) => {\n  const {\n    content,\n    user_id,\n    answer_id,\n    translate_language_id\n  } = postData;\n  return axios.post(apiUrl, {\n    content,\n    user_id,\n    answer_id,\n    translate_language_id\n  });\n};\n\nexport const saveAnswerTranslationData = (saveData) => {\n  const { id } = saveData;\n  return axios.put(`${apiUrl}/${id}`, saveData);\n};\n\nexport const deleteAnswerTranslation= (params) => {\n  const { id } = params;\n  return axios.delete(`${apiUrl}/${id}`, { params });\n};\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updatedSingleAnswerTranslation\n} from '../actions/AnswerTranslation';\nimport {\n  FETCH_ANSWER_TRANSLATION_LIST,\n  FETCH_ANSWER_TRANSLATION,\n  POST_ANSWER_TRANSLATION_DATA,\n  SAVE_ANSWER_TRANSLATION_DATA,\n  DELETE_ANSWER_TRANSLATION,\n} from '../actions/AnswerTranslation';\nimport * as api from './apis/AnswerTranslations';\nimport { notifySuccess, notifyError } from './Util';\nimport * as questionSagas from './Question';\n\nexport function* handleFetchAnswerTranslationList(action) {\n  try {\n    // axios.get()を呼ぶ前にisFetchingをtrueにしておく\n    yield put(requestData());\n    const payload = yield call(api.fetchAnswerTranslationList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* handleFetchAnswerTranslationById(action) {\n  try {\n    const id  = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchAnswerTranslation, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postAnswerTranslation(action) {\n  try {\n    const { answer_id } = action.payload;\n    yield put(requestData());\n    yield call(api.postAnswerTranslationData, action.payload);\n    const payload = yield call(api.fetchAnswerTranslationList, answer_id);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* saveAnswerTranslationData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveAnswerTranslationData, action.payload);\n    const message = '翻訳を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedSingleAnswerTranslation(payload));\n  } catch (e) {\n    const message = '翻訳の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteAnswerTranslation(action) {\n  try {\n    const { id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteAnswerTranslation, action.payload);\n    const message = '翻訳を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchAnswerTranslationList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '翻訳の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst answerTranslationSagas = [\n  takeEvery(POST_ANSWER_TRANSLATION_DATA, postAnswerTranslation),\n  takeEvery(FETCH_ANSWER_TRANSLATION_LIST, handleFetchAnswerTranslationList),\n  takeEvery(FETCH_ANSWER_TRANSLATION, handleFetchAnswerTranslationById),\n  takeEvery(SAVE_ANSWER_TRANSLATION_DATA, saveAnswerTranslationData),\n  takeEvery(DELETE_ANSWER_TRANSLATION, deleteAnswerTranslation),\n];\n\nexport default answerTranslationSagas;\n","import { takeEvery, call, put } from 'redux-saga/effects';\n// import { push } from 'react-router-redux';\nimport * as act from '../actions/Comment';\nimport * as api from './apis/Comments';\nimport {\n  FETCH_SINGLE_COMMENT,\n  POST_COMMENT,\n  SAVE_COMMENT_DATA,\n  DELETE_COMMENT,\n} from '../actions/Comment';\nimport * as answerSaga from './Answer'; \nimport { notifySuccess, notifyError } from './Util';\n\nimport { fetchCommentWithUserList }from './apis/Comments';\nimport * as act2 from '../actions/Comment';\n\nexport function* fetchSingleComment(action) {\n  try {\n    yield put(act.requestData());\n    const comment_id = action.payload;\n    const comment = yield call(api.fetchComment, comment_id);\n    yield put(act.updatedSingleCommentData(comment));\n  } catch (e) {\n    const message = 'コメントの投稿に失敗しました。';\n    yield put(notifyError(message));\n    //yield put(updatedCommentData());\n  }\n}\n\nexport function* postComment(action) {\n  try {\n    yield put(act.requestData());\n    const { answer_id, question_id, current_translate_language_id, answerIdList } = action.payload;\n    yield call(api.postCommentData, action.payload);\n    const commentPayload = yield call(api.fetchCommentsList, { answer_id });    \n    const answerId = answerIdList;\n    const commentList = yield call(fetchCommentWithUserList, answerId);\n    yield put(act2.receiveCommentDataSuccess(commentList));\n\n    const message = 'コメントを投稿しました。';\n    yield put(notifySuccess(message));\n    const data = { payload: {\n      question_id,\n      translate_language_id: current_translate_language_id\n    } };\n    yield call(answerSaga.handleFetchAnswerData, data);\n  } catch (e) {\n    const message = 'コメントの投稿に失敗しました。';\n    yield put(notifyError(message));\n    //yield put(updatedCommentData());\n  }\n}\n\nexport function* saveComment(action) {\n  try {\n    yield put(act.requestData());\n    const {\n      comment_id,\n      question_id,\n      history\n    } = action.payload;\n    const comment = yield call(api.saveCommentData, action.payload);\n    yield put(act.updatedSingleCommentData(comment));\n    const message = 'コメントを編集しました。';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = 'コメントの編集に失敗しました。';\n    yield put(notifyError(message));\n    //yield put(updatedCommentData());\n  }\n}\n\nexport function* deleteCommentData(action) {\n  try {\n    const { comment_id, question_id, user_id, history } = action.payload;\n    yield put(act.requestData());\n    yield call(api.deleteCommentData, action.payload);\n    const message = 'コメントを削除しました';\n    yield put(notifySuccess(message));\n    yield call(history.push, `/questions/${question_id}`);\n  } catch (e) {\n    const message = 'コメントの削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(act.receiveDataFailed());\n  }\n}\n\nconst commentSagas = [\n  takeEvery(FETCH_SINGLE_COMMENT, fetchSingleComment),\n  takeEvery(POST_COMMENT, postComment),\n  takeEvery(SAVE_COMMENT_DATA, saveComment),\n  takeEvery(DELETE_COMMENT, deleteCommentData),\n];\n\nexport default commentSagas;\n","import axios from 'axios';\n\nconst apiUrl = '/api/comment_translations';\n\nexport const fetchCommentTranslationList = (comment_id) => {\n  return axios.get(apiUrl, {\n    params: {\n      comment_id\n    }\n  });\n};\n\nexport const fetchCommentTranslation = (id) => {\n  return axios.get(`${apiUrl}/${id}`);\n};\n\nexport const postCommentTranslationData = (params) => {\n  return axios.post(apiUrl, {\n    params\n  });\n};\n\nexport const saveCommentTranslationData = (saveData) => {\n  const { id } = saveData;\n  return axios.put(`${apiUrl}/${id}`, saveData);\n};\n\nexport const deleteCommentTranslation = (params) => {\n  const { id } = params;\n  return axios.delete(`${apiUrl}/${id}`, { params });\n};\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveSingleDataSuccess,\n  receiveDataFailed,\n  updatedSingleCommentTranslation\n} from '../actions/CommentTranslation';\nimport {\n  FETCH_COMMENT_TRANSLATION_LIST,\n  FETCH_COMMENT_TRANSLATION,\n  POST_COMMENT_TRANSLATION_DATA,\n  SAVE_COMMENT_TRANSLATION_DATA,\n  DELETE_COMMENT_TRANSLATION,\n} from '../actions/CommentTranslation';\nimport * as api from './apis/CommentTranslations';\nimport { notifySuccess, notifyError } from './Util';\n\nexport function* handleFetchCommentTranslationList(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.fetchCommentTranslationList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* handleFetchCommentTranslationById(action) {\n  try {\n    const id  = action.payload;\n    yield put(requestData());\n    const payload = yield call(api.fetchCommentTranslation, id);\n    yield put(receiveSingleDataSuccess(payload));\n  } catch (e) {\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postCommentTranslation(action) {\n  try {\n    const { comment_id } = action.payload;\n    yield put(requestData());\n    yield call(api.postCommentTranslationData, action.payload);\n    const payload = yield call(api.fetchCommentTranslationList, comment_id);\n    yield put(receiveDataSuccess(payload));\n    const message = '翻訳を投稿しました。';\n    yield put(notifySuccess(message));\n  } catch (e) {\n    yield put(receiveDataFailed());\n    const message = '翻訳の投稿に失敗しました。';\n    yield put(notifyError(message));\n  }\n}\n\nexport function* saveCommentTranslationData(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(api.saveCommentTranslationData, action.payload);\n    const message = '翻訳を更新しました';\n    yield put(notifySuccess(message));\n    yield put(updatedSingleCommentTranslation(payload));\n  } catch (e) {\n    const message = '翻訳の更新に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteCommentTranslation(action) {\n  try {\n    const { id, history } = action.payload;\n    yield put(requestData());\n    yield call(api.deleteCommentTranslation, action.payload);\n    const message = '翻訳を削除しました';\n    yield put(notifySuccess(message));\n    const payload = yield call(api.fetchCommentTranslationList);\n    yield put(receiveDataSuccess(payload));\n    yield call(history.push, '/');\n  } catch (e) {\n    const message = '翻訳の削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst commentTranslationSagas = [\n  takeEvery(POST_COMMENT_TRANSLATION_DATA, postCommentTranslation),\n  takeEvery(FETCH_COMMENT_TRANSLATION_LIST, handleFetchCommentTranslationList),\n  takeEvery(FETCH_COMMENT_TRANSLATION, handleFetchCommentTranslationById),\n  takeEvery(SAVE_COMMENT_TRANSLATION_DATA, saveCommentTranslationData),\n  takeEvery(DELETE_COMMENT_TRANSLATION, deleteCommentTranslation),\n];\n\nexport default commentTranslationSagas;\n","import axios from 'axios';\n\n// 未翻訳の質問一覧取得するAPI\nexport const fetchNotTranslatedQuestions = (params) => {\n    return axios.get('/api/not_translated_questions', {\n        params\n    });\n};\n\n// 未翻訳の回答一覧取得するAPI\nexport const fetchNotTranslatedAnswers = (params) => {\n    return axios.get('/api/not_translated_answers', {\n        params\n    });\n};\n\n// 未翻訳のコメント一覧取得するAPI\nexport const fetchNotTranslatedComments = (params) => {\n    return axios.get('/api/not_translated_comments', {\n        params\n    });\n};\n\n","import { takeEvery, call, put } from 'redux-saga/effects';\n\nimport {\n  requestData,\n  receiveDataSuccess,\n  receiveDataFailed,\n  FETCH_NOT_TRANSLATED,\n} from '../actions/NotTranslated';\n\nimport {\n  fetchNotTranslatedQuestions,\n  fetchNotTranslatedAnswers,\n  fetchNotTranslatedComments,\n} from './apis/NotTranslated';\nimport { changeQuestionListLanguage } from './Question';\n\nexport function* handleFetchData(action) {\n  try {\n\n    yield put(requestData());\n\n    //未翻訳一覧を取り出す\n    // const questions = yield call(fetchNotTranslated, action.payload);\n\n    //質問を取り出す\n    const questions = yield call(fetchNotTranslatedQuestions, action.payload);\n\n    //回答を取り出す\n    const answers = yield call(fetchNotTranslatedAnswers, action.payload);\n\n    //コメントを取り出す\n    const comments = yield call(fetchNotTranslatedComments, action.payload);\n\n    const NotTranslatedList={\n      questions : questions.data,\n      answers : answers.data,\n      comments: comments.data,\n    };\n\n    //reducers/NotTranslated.jsで関数を実行する。\n    yield put(receiveDataSuccess(NotTranslatedList));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nconst NotTranslatedSagas = [\n  //FETCH_QUESTION_LISTというアクションが発火させた場合はhandleFetchDataを起動させる。\n  takeEvery(FETCH_NOT_TRANSLATED, handleFetchData),\n];\n\nexport default NotTranslatedSagas;\n","import axios from 'axios';\n\nexport const postVotes = (postData) => {\n    return axios.post('/api/votes', postData);\n};\n\nexport const deleteVotes = (params) => {\n    const { vote_id } = params;\n    return axios.delete(`/api/votes/${vote_id}`, { params });\n};\n\nexport const fetchQuestionVotesList = (question_id) => {\n    return axios.get('/api/votes/questions', {\n      params: { question_id }\n    });\n  };\n\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n    POST_VOTE,\n    DELETE_VOTE,\n    requestData,\n    receiveDataSuccess,\n    receiveDataFailed,\n} from '../actions/Vote.js';\n\nimport * as answerSaga from './Answer';\nimport * as questionSagas from './Question';\nimport {\n  postVotes,\n  deleteVotes,\n  fetchQuestionVotesList,\n} from './apis/Votes';\n\nimport {\n  notifySuccess,\n  notifyError\n} from './Util';\n\n\nexport function* handleFetchQestionVotesList(action) {\n  try {\n    yield put(requestData());\n    const payload = yield call(fetchQuestionVotesList, action.payload);\n    yield put(receiveDataSuccess(payload));\n  } catch (e) {\n    // isFetchingをfalse\n    yield put(receiveDataFailed());\n  }\n};\n\nexport function* postVote(action) {\n  try {\n    const { params, key } = action.payload;\n    yield put(requestData());\n    yield call(postVotes, params);\n\n    let data;\n    switch (key) {\n      case \"comment\":\n      case \"answer\":\n          data = { payload: {\n            question_id: params.questionId,\n            translate_language_id: 1,\n          } };\n          yield call(answerSaga.handleFetchAnswerData, data);\n          break;\n      case \"questionList\":\n          data = { payload: {\n            country_id: params.country_id,\n          } };\n          yield call(questionSagas.handleFetchData, data);\n          break;\n      case \"questionView\":\n          data = { payload: params.question_id };\n          yield call(questionSagas.handleFetchQuestionById, data);\n          break;\n    }\n\n    const message = 'いいねしました';\n    yield put(notifySuccess(message));\n\n  } catch (e) {\n    const message = 'いいねに失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteVote(action) {\n  try {\n    const { params, key } = action.payload;\n    yield put(requestData());\n    yield call(deleteVotes, params);\n\n    let data;\n    switch (key) {\n      case \"comment\":\n      case \"answer\":\n          data = { payload: {\n            question_id: params.questionId,\n            translate_language_id: 1,\n          } };\n          yield call(answerSaga.handleFetchAnswerData, data);\n          break;\n      case \"questionList\":\n          data = { payload: {\n            country_id: params.country_id,\n          } };\n          yield call(questionSagas.handleFetchData, data);\n          break;\n      case \"questionView\":\n          data = { payload: params.vote_id };\n          yield call(questionSagas.handleFetchQuestionById, data);\n          break;\n    }\n    const message = 'いいねを削除しました';\n    yield put(notifySuccess(message));\n  } catch (e) {\n    const message = 'いいねの削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst voteSagas = [\n  takeEvery(POST_VOTE, postVote),\n  takeEvery(DELETE_VOTE, deleteVote),\n];\n\nexport default voteSagas;\n","import axios from 'axios';\n\nexport const postVotes = (params) => {\n    return axios.post('/api/vote_translations', params);\n};\n\nexport const deleteVotes = (params) => {\n    const { vote_id } = params;\n    return axios.delete(`/api/vote_translations/${vote_id}`, { params });\n};","import { takeEvery, call, put } from 'redux-saga/effects';\nimport {\n    POST_VOTE,\n    DELETE_VOTE,\n    requestData,\n    receiveDataSuccess,\n    receiveDataFailed,\n} from '../actions/VoteTranslation';\n\nimport * as answerTranslationSagas from './AnswerTranslation';\nimport * as questionTranslationSagas from './QuestionTranslation';\nimport * as commentTranslationSagas from './CommentTranslation';\n\nimport { \n  notifySuccess, \n  notifyError \n} from './Util';\n\nimport { postVotes, deleteVotes } from './apis/VoteTranslations';\n\nexport function* postVote(action) {\n  try {\n    const { params, key } = action.payload;\n    yield put(requestData());\n    yield call(postVotes, params);\n    let data;\n    switch (key) {\n      case \"comment\":\n          data = { payload: params.commentId } ;\n          yield call(commentTranslationSagas.handleFetchCommentTranslationList, data);\n          break;\n      case \"answer\":\n          data = { payload: params.answerId } ;\n          yield call(answerTranslationSagas.handleFetchAnswerTranslationList, data);\n          break;\n      case \"question\":\n          data = { payload: params.questionId } ;\n          yield call(questionTranslationSagas.handleFetchQuestionTranslationList, data);\n          break;\n    }\n\n    const message = 'いいねしました';\n    yield put(notifySuccess(message));\n\n  } catch (e) {\n    const message = 'いいねに失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nexport function* deleteVote(action) {\n  try {\n    const { params, key } = action.payload;\n    yield put(requestData());\n    yield call(deleteVotes, params);\n\n    let data;\n    switch (key) {\n      case \"comment\":\n          data = { payload: params.commentId } ;\n          yield call(commentTranslationSagas.handleFetchCommentTranslationList, data);\n          break;\n      case \"answer\":\n          data = { payload: params.answerId };\n          yield call(answerTranslationSagas.handleFetchAnswerTranslationList, data);\n          break;\n      case \"question\":\n          data = { payload:  params.questionId };\n          yield call(questionTranslationSagas.handleFetchQuestionTranslationList, data);\n          break;\n    }\n    const message = 'いいねを削除しました';\n    yield put(notifySuccess(message));\n  } catch (e) {\n    const message = 'いいねの削除に失敗しました';\n    yield put(notifyError(message));\n    yield put(receiveDataFailed());\n  }\n}\n\nconst voteTranslationSagas = [\n  takeEvery(POST_VOTE, postVote),\n  takeEvery(DELETE_VOTE, deleteVote),\n];\n\nexport default voteTranslationSagas;","import { put, takeEvery } from 'redux-saga/effects';\nimport {\n    ACTION_ALERT_MESSAGE,\n} from '../actions/Notification';\nimport { notifyAlert } from './Util';\n\nexport function* alertMessage(action) {\n    yield put(notifyAlert(action.payload));\n}\n\n  const notificationSagas = [\n    takeEvery(ACTION_ALERT_MESSAGE, alertMessage),\n  ];\n  \nexport default notificationSagas;","import { all } from 'redux-saga/effects';\nimport userSagas from './sagas/User';\nimport questionSagas from './sagas/Question';\nimport answerSagas from './sagas/Answer';\nimport questionTranslationSagas from './sagas/QuestionTranslation';\nimport answerTranslationSagas from './sagas/AnswerTranslation';\nimport commentSagas from './sagas/Comment';\nimport commentTranslationSagas from './sagas/CommentTranslation';\nimport NotTranslatedSagas from './sagas/NotTranslated';     \nimport voteSagas from './sagas/Votes';\nimport voteTranslationSagas from './sagas/VoteTranslation';  \nimport notificationSagas from './sagas/Notification';            \n\nexport default function* rootSaga() {\n  yield all([\n    ...userSagas,\n    ...questionSagas,\n    ...answerSagas,\n    ...questionTranslationSagas,\n    ...answerTranslationSagas,\n    ...commentSagas,\n    ...commentTranslationSagas,\n    ...NotTranslatedSagas,\n    ...voteSagas,\n    ...voteTranslationSagas,\n    ...notificationSagas,\n  ]);\n}\n","import { createBrowserHistory as createHistory } from 'history';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { routerMiddleware } from 'react-router-redux';\nimport reducer from './reducer';\nimport { initialState } from './constants';\nimport rootSaga from './rootSaga';\nimport createSagaMiddleware from 'redux-saga';\nimport logger from \"redux-logger\";\n\n// Redux DevTools\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst history = createHistory();\n\nconst routingMiddleware = routerMiddleware(history);\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n    reducer,\n    initialState,\n    composeEnhancers(\n        applyMiddleware(\n            thunkMiddleware,\n            routingMiddleware,\n            sagaMiddleware,\n            logger\n        )\n    )\n);\n\nsagaMiddleware.run(rootSaga, { history });\n\nexport { history }\nexport { store }\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\n\nimport Home from './containers/Home';\nimport QuestionView from './containers/QuestionView';\nimport QuestionEdit from './containers/QuestionEdit';\n\n//未翻訳の質問一覧を表示するコンポーネント\n//containerを介していないと、connectの処理をしていないのでエラーになる。\n//containerを介してcomponentsの作業を行う。\nimport NotTranslated from './containers/NotTranslated';\n\nimport AnswerEdit from './containers/AnswerEdit';\nimport CommentEdit from './containers/CommentEdit';\nimport QuestionTranslationView from './containers/QuestionTranslationView';\nimport QuestionTranslationEdit from './containers/QuestionTranslationEdit';\nimport AnswerTranslationView from './containers/AnswerTranslationView';\nimport AnswerTranslationEdit from './containers/AnswerTranslationEdit';\nimport CommentTranslationView from './containers/CommentTranslationView';\nimport CommentTranslationEdit from './containers/CommentTranslationEdit';\nimport App from './containers/App';\nimport ScrollToTop from './components/layouts/ScrollToTop';\nimport SignUp from './containers/users/SignUp';\nimport Login from './containers/users/Login';\nimport PasswordReset from './containers/users/PasswordReset';\nimport NewPassword from './containers/users/NewPassword';\nimport Activate from './containers/users/Activate';\nimport Profile from './containers/users/Profile';\nimport ProfileEdit from './containers/users/ProfileEdit';\nimport UserOnly from './containers/auth/UserOnly';\nimport GuestOnly from './containers/auth/GuestOnly';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport UIkit from 'uikit';\n// import Icons from 'uikit/dist/js/uikit-icons';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fas } from '@fortawesome/free-solid-svg-icons'\nimport { far } from '@fortawesome/free-regular-svg-icons'\n\n// Styles\nimport './css/normalize.css';\nimport './css/main.css';\nimport './css/uikit.min.css';\n\n// 言語設定\nimport { addLocaleData, IntlProvider } from 'react-intl';\nimport ja from 'react-intl/locale-data/ja';\nimport en from 'react-intl/locale-data/en';\nconst { intl } = store.getState();\nconst { locale, messages } = intl;\naddLocaleData([...ja, ...en]);\n\nlibrary.add( fas, far );\n\n// 取り急ぎの質問フォーム初期化処理\nlocalStorage.setItem('question-form', '');\n\n\n// JS\n// UIkit.use(Icons);\n\nconst render = () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <IntlProvider locale={locale} messages={messages} >\n        <BrowserRouter>\n          <App>\n            <ScrollToTop>\n              <Switch>\n                <Route exact path='/' component={Home} />\n                <Route exact path='/questions/:id' component={QuestionView}  onEnter={() => window.scrollTo(0, 0)}/>\n                <Route exact path='/question_translations/:question_id' component={QuestionTranslationView} />\n                <Route exact path='/answer_translations/:answer_id' component={AnswerTranslationView} />\n                <Route exact path='/comment_translations/:comment_id' component={CommentTranslationView} />\n                <Route exact path='/users/profile/:id' component={Profile} />\n                <Route exact path='/users/login' component={Login} />\n                <Route exact path='/users/signup' component={SignUp} />\n                <Route exact path='/users/activate/:token' component={Activate} />\n                <Route exact path='/users/password_reset' component={PasswordReset} />\n                <Route exact path='/users/password_reset/:token' component={NewPassword} />\n                <UserOnly>\n                  <Switch>\n                    <Route exact path='/questions/edit/:id' component={QuestionEdit} />\n                    <Route exact path='/answers/edit/:id' component={AnswerEdit} />\n                    <Route exact path='/comments/edit/:id' component={CommentEdit} />\n                    <Route exact path='/users/profile_edit' component={ProfileEdit} />\n                    <Route exact path='/question_translations/edit/:id' component={QuestionTranslationEdit} />\n                    <Route exact path='/answer_translations/edit/:id' component={AnswerTranslationEdit} />\n                    <Route exact path='/comment_translations/edit/:id' component={CommentTranslationEdit} />\n                    {/*未翻訳の質問を抽出するルートパス*/}\n                    <Route exact path='/not_translated' component={NotTranslated} />\n                  </Switch>\n                </UserOnly>\n                <GuestOnly>\n                  <Switch>\n                  </Switch>\n                </GuestOnly>\n              </Switch>\n            </ScrollToTop>\n          </App>\n        </BrowserRouter>\n      </IntlProvider>\n    </Provider>,\n    document.getElementById('root')\n  );\n};\n\nstore.subscribe(() => {\n  render();\n});\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n\nrender()\n"],"sourceRoot":""}